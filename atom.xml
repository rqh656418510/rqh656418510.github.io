<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clay 的技术空间</title>
  
  <subtitle>用进废退 | 艺不压身</subtitle>
  <link href="https://www.techgrow.cn/atom.xml" rel="self"/>
  
  <link href="https://www.techgrow.cn/"/>
  <updated>2023-10-25T12:13:32.000Z</updated>
  <id>https://www.techgrow.cn/</id>
  
  <author>
    <name>Clay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL 高可用基础教程之五 Debian 部署 PXC 集群</title>
    <link href="https://www.techgrow.cn/posts/ff0f2d6.html"/>
    <id>https://www.techgrow.cn/posts/ff0f2d6.html</id>
    <published>2023-10-25T12:13:32.000Z</published>
    <updated>2023-10-25T12:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/2f77f23a.html">MySQL 高可用基础教程之一主从复制方案介绍</a></li><li><a href="/posts/d6058b93.html">MySQL 高可用基础教程之二高可用架构方案介绍</a></li><li><a href="/posts/cc846db2.html">MySQL 高可用基础教程之三高可用架构方案介绍</a></li><li><a href="/posts/56993278.html">MySQL 高可用基础教程之四数据可靠性方案介绍</a></li><li><a href="/posts/ff0f2d6.html">MySQL 高可用基础教程之五 Debian 部署 PXC 集群</a></li><li><a href="/posts/aba17375.html">MySQL 高可用基础教程之六 Docker 部署 PXC 集群</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍如何在 Debian 系统上部署 MySQL 的 PXC 集群。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Debian" scheme="https://www.techgrow.cn/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 高可用基础教程之六 Docker 部署 PXC 集群</title>
    <link href="https://www.techgrow.cn/posts/aba17375.html"/>
    <id>https://www.techgrow.cn/posts/aba17375.html</id>
    <published>2023-10-24T12:13:32.000Z</published>
    <updated>2023-10-24T12:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/2f77f23a.html">MySQL 高可用基础教程之一主从复制方案介绍</a></li><li><a href="/posts/d6058b93.html">MySQL 高可用基础教程之二高可用架构方案介绍</a></li><li><a href="/posts/cc846db2.html">MySQL 高可用基础教程之三高可用架构方案介绍</a></li><li><a href="/posts/56993278.html">MySQL 高可用基础教程之四数据可靠性方案介绍</a></li><li><a href="/posts/ff0f2d6.html">MySQL 高可用基础教程之五 Debian 部署 PXC 集群</a></li><li><a href="/posts/aba17375.html">MySQL 高可用基础教程之六 Docker 部署 PXC 集群</a></li></ul><h2 id="Docker-部署-PXC-5-7-集群"><a href="#Docker-部署-PXC-5-7-集群" class="headerlink" title="Docker 部署 PXC 5.7 集群"></a>Docker 部署 PXC 5.7 集群</h2><h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><ul><li>拉取镜像，官方文档详见 <a href="https://hub.docker.com/r/percona/percona-xtradb-cluster">Docker Hub</a>，镜像的各个版本号可以从 <a href="../../../asset/2023/10/docker-mysql-pxc-1.png">这里</a> 查看 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull percona/percona-xtradb-cluster:5.7.43</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像打上标签</span></span><br><span class="line">docker tag percona/percona-xtradb-cluster:5.7.43 pxc</span><br></pre></td></tr></tbody></table></figure><ul><li>创建数据卷，存储路径为 <code>/var/lib/docker/volumes/</code></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据卷</span></span><br><span class="line">docker volume create --name pxc-v1</span><br><span class="line">docker volume create --name pxc-v2</span><br><span class="line">docker volume create --name pxc-v3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有数据卷</span></span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据卷的详细信息</span></span><br><span class="line">docker volume inspect pxc-v1</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><ul><li>创建网络（专用网段）</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建网络</span></span><br><span class="line">docker network create --subnet=172.30.0.0/24 pxc-network</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有网络</span></span><br><span class="line">docker network ls</span><br></pre></td></tr></tbody></table></figure><ul><li>创建容器 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建第一个节点</span></span><br><span class="line">docker create -p 13306:3306 -v pxc-v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e XTRABACKUP_PASSWORD=123456 -e CLUSTER_NAME=pxc --name=pxc-node1 --net=pxc-network --ip 172.30.0.2 pxc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建第二个节点（增加了CLUSTER_JOIN参数）</span></span><br><span class="line">docker create -p 13307:3306 -v pxc-v2:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e XTRABACKUP_PASSWORD=123456 -e CLUSTER_NAME=pxc -e CLUSTER_JOIN=pxc-node1 --name=pxc-node2 --net=pxc-network --ip 172.30.0.3 pxc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建第三个节点（增加了CLUSTER_JOIN参数）</span></span><br><span class="line">docker create -p 13308:3306 -v pxc-v3:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e XTRABACKUP_PASSWORD=123456 -e CLUSTER_NAME=pxc -e CLUSTER_JOIN=pxc-node1 --name=pxc-node3 --net=pxc-network --ip 172.30.0.4 pxc</span><br></pre></td></tr></tbody></table></figure><ul><li>启动节点一的容器（必须先启动节点一，等集群初始化操作执行完成后，再启动节点二和节点三的容器）</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动节点一</span></span><br><span class="line">docker start pxc-node1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点一的日志信息</span></span><br><span class="line">docker logs -f pxc-node1</span><br></pre></td></tr></tbody></table></figure><ul><li>启动节点二的容器 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动节点二（必须等待节点一启动成功后再启动）</span></span><br><span class="line">docker start pxc-node2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点二的日志信息</span></span><br><span class="line">docker logs -f pxc-node2</span><br></pre></td></tr></tbody></table></figure><ul><li>启动节点三的容器 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动节点三（必须等待节点一启动成功后再启动）</span></span><br><span class="line">docker start pxc-node3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点三的日志信息</span></span><br><span class="line">docker logs -f pxc-node3</span><br></pre></td></tr></tbody></table></figure><h3 id="验证集群"><a href="#验证集群" class="headerlink" title="验证集群"></a>验证集群</h3><h4 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h4><ul><li>在 PXC 集群的任意一个节点上，执行以下 SQL 语句来查看集群状态 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">'wsrep_cluster%'</span>;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/10/docker-mysql-pxc-2"></p><h4 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h4><ul><li>在 PXC 集群的任意一个节点上，执行以下 SQL 语句，然后观察其他节点是否同步创建了数据库和表。</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `micro_service_acl` <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 切换数据库</span></span><br><span class="line">USE `micro_service_acl`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `acl_user` (</span><br><span class="line">  `id` <span class="type">char</span>(<span class="number">19</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'会员id'</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> COMMENT <span class="string">'微信openid'</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> COMMENT <span class="string">'密码'</span>,</span><br><span class="line">  `nick_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'昵称'</span>,</span><br><span class="line">  `salt` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户头像'</span>,</span><br><span class="line">  `token` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户签名'</span>,</span><br><span class="line">  `is_deleted` tinyint(<span class="number">1</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> COMMENT <span class="string">'逻辑删除 1（true）已删除， 0（false）未删除'</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'更新时间'</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">'用户表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入用户数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `acl_user` <span class="keyword">VALUES</span> (<span class="string">'1'</span>,<span class="string">'admin'</span>,<span class="string">'96e79218965eb72c92a549dd5a330112'</span>,<span class="string">'admin'</span>,<span class="string">''</span>,<span class="keyword">NULL</span>,<span class="number">0</span>,<span class="string">'2018-05-01 10:39:47'</span>,<span class="string">'2018-05-01 10:39:47'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="系统重启后，PXC-集群启动失败"><a href="#系统重启后，PXC-集群启动失败" class="headerlink" title="系统重启后，PXC 集群启动失败"></a>系统重启后，PXC 集群启动失败</h4><p>系统断电重启后，任意选择 PXC 集群中的一个节点进行重启，出现以下的错误信息：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] WSREP: It may not be safe to bootstrap the cluster from this node. It was not the last one to leave the cluster and may not contain all the updates. To force cluster bootstrap with this node, edit the grastate.dat file manually and set safe_to_bootstrap to 1 .</span><br></pre></td></tr></tbody></table></figure><p>由于该节点不是最后一个离开集群的节点（最后停掉的节点），可能没有包含所有更新的数据，强制从该节点启动，需要手工编辑该节点的 <code>grastate.dat</code> 文件，设置 <code>safe_to_bootstrap=1</code>。当然了，一般情况下不需需要强制从该节点启动，可以逐一排查每个节点下的 <code>grastate.dat</code>  文件，找到 <code>safe_to_bootstrap=1</code> 的节点，然后在该节点上启动 PXC 集群即可。如果所有节点的 <code>safe_to_bootstrap</code> 都为 <code>0</code>，那么只能任意选择一个节点，更改该节点下的 <code>grastate.dat</code>  文件，将 <code>safe_to_bootstrap</code> 设置为 <code>1</code>，然后在该节点上启动 PXC 集群。<code>grastate.dat</code> 文件的路径是 <code>/var/lib/docker/volumes/pxc_xxx/_data/grastate.dat</code>。</p><h2 id="Docker-部署-PXC-8-0-集群"><a href="#Docker-部署-PXC-8-0-集群" class="headerlink" title="Docker 部署 PXC 8.0 集群"></a>Docker 部署 PXC 8.0 集群</h2><div class="admonition warning"><p class="admonition-title">注意</p><p>PXC 8.0 版本的集群通信不再支持用户名和密码认证文件，而是必须采用证书的方式进行认证。</p></div>]]></content>
    
    
    <summary type="html">本文主要介绍如何基于 Docker 部署 MySQL 的 PXC 集群。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 高可用基础教程之四数据可靠性方案介绍</title>
    <link href="https://www.techgrow.cn/posts/56993278.html"/>
    <id>https://www.techgrow.cn/posts/56993278.html</id>
    <published>2023-10-22T12:13:32.000Z</published>
    <updated>2023-10-22T12:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/2f77f23a.html">MySQL 高可用基础教程之一主从复制方案介绍</a></li><li><a href="/posts/d6058b93.html">MySQL 高可用基础教程之二高可用架构方案介绍</a></li><li><a href="/posts/cc846db2.html">MySQL 高可用基础教程之三高可用架构方案介绍</a></li><li><a href="/posts/56993278.html">MySQL 高可用基础教程之四数据可靠性方案介绍</a></li><li><a href="/posts/ff0f2d6.html">MySQL 高可用基础教程之五 Debian 部署 PXC 集群</a></li><li><a href="/posts/aba17375.html">MySQL 高可用基础教程之六 Docker 部署 PXC 集群</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="数据可靠性方案分类"><a href="#数据可靠性方案分类" class="headerlink" title="数据可靠性方案分类"></a>数据可靠性方案分类</h3><table><thead><tr><th>数据可靠性方案</th><th>说明</th></tr></thead><tbody><tr><td> RAID 10</td><td> 适用于对数据冗余性和性能要求较高的应用场景，如数据库服务器、虚拟化环境和高性能计算等。</td></tr><tr><td>SAN 存储网络</td><td>除了价格贵，没有太多缺点。</td></tr><tr><td>DRBD 磁盘复制</td><td> Linux 内核模块实现的磁盘块级别的同步复制技术。</td></tr></tbody></table><span id="more"></span><h2 id="RAID-10"><a href="#RAID-10" class="headerlink" title="RAID 10"></a>RAID 10</h2><p>RAID 10（Redundant Array of Independent Disks 10）是一种存储方案，它结合了 RAID 1（镜像）和 RAID 0（条带化）的特性。RAID 10 通过将多个磁盘组合在一起，提供了数据冗余和性能增强的优势。在 RAID 10 中，磁盘被分为两组，每组至少有两个磁盘。其中一组磁盘使用 RAID 1（镜像）技术，即数据被同时写入两个磁盘，提供了数据的冗余备份。另一组磁盘使用 RAID 0（条带化）技术，即数据被分块地写入多个磁盘，提供了更好的读写性能。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li>RAID 10 数据可靠性方案在金融、银行领域使用的比较多。</li><li>RAID 10 适用于对数据冗余性和性能要求较高的应用场景，如数据库服务器、虚拟化环境和高性能计算等。</li><li>RAID 10 的容量利用率较低，如果容量是一个关键因素，可能需要考虑其他 RAID 级别。在选择 RAID 级别时，需要根据具体的需求和预算来权衡各种因素。</li></ul></div><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="../../../asset/2023/10/mysql-ha-17.png"></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点</p><ul><li><code>数据冗余</code>：RAID 10 通过镜像技术提供了数据的冗余备份。如果一个磁盘发生故障，数据仍然可以从镜像磁盘中恢复，保证了数据的可靠性和可用性。</li><li><code>高性能</code>：RAID 10 通过条带化技术提供了更好的读写性能。数据可以同时从多个磁盘读取或写入，提高了数据访问的速度和吞吐量。</li><li><code>故障容忍</code>：由于 RAID 10 具有数据冗余性，当一个磁盘发生故障时，系统可以继续正常运行，并且可以在更换故障磁盘后进行数据恢复，减少了系统停机时间。</li></ul></li><li><p>缺点</p><ul><li><code>成本较高</code>：由于 RAID 10 需要使用多个磁盘进行数据镜像和条带化，所以成本较高。相比其他 RAID 级别，RAID 10 需要更多的磁盘。</li><li><code>容量利用率较低</code>：RAID 10 的容量利用率较低，因为数据被同时写入两个磁盘。例如，如果有 4 个 1TB 的磁盘组成 RAID 10，实际可用的存储容量只有 2TB。</li></ul></li></ul><h2 id="SAN-存储网络"><a href="#SAN-存储网络" class="headerlink" title="SAN 存储网络"></a>SAN 存储网络</h2><p>SAN（Storage Area Network）是一种专门用于存储数据的高速网络架构。它将存储设备（如磁盘阵列、磁带库等）与服务器连接起来，提供高性能、高可用性和可扩展性的共享存储解决方案。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li>SAN 存储网络适用于对存储性能、可用性和扩展性要求较高的应用场景，如大型企业、数据中心、虚拟化环境等。</li><li>在选择和部署 SAN 存储网络时，需要根据具体的需求和预算来权衡各种因素，并确保与服务器和应用程序的兼容性。</li></ul></div><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点</p><ul><li><code>存储共享</code>：SAN 允许多台服务器共享存储设备，使得数据可以在不同的服务器之间共享和访问。这样可以提高数据的灵活性和共享性，减少存储资源的浪费。</li><li><code>高性能</code>：SAN 使用高速的网络连接（如光纤通道、以太网等），提供了高带宽和低延迟的数据传输。这使得存储设备可以提供更高的读写性能，满足对存储性能要求较高的应用场景。</li><li><code>可扩展性</code>：SAN 具有良好的可扩展性，可以根据需求灵活地扩展存储容量和性能。通过添加新的存储设备或扩展现有设备的容量，可以满足不断增长的存储需求。</li><li><code>管理简便</code>：SAN 提供了集中管理和监控的功能，使得存储资源的配置、监控和管理变得更加简便和高效。管理员可以通过集中的管理界面对存储设备进行配置和管理，提高了管理效率。</li><li><code>数据强一致性</code>：可以很好地保证数据的强一致性，不会因为 MySQL 的逻辑错误发生数据不一致的情况。</li><li><code>部署简单</code>：部署两节点即可，不依赖数据库实现，保障数据安全。</li></ul></li><li><p>缺点</p><ul><li><code>不具备故障转移</code>：需要考虑共享存储的高可用性。</li><li><code>成本较高</code>：相比于其他存储解决方案，SAN 的成本较高。它需要专用的硬件设备和高速网络连接，这增加了部署和维护的成本。</li><li><code>配置复杂性</code>：SAN 的配置和管理相对复杂，需要专业的知识和技能。对于不熟悉 SAN 的用户来说，配置和管理可能是一项具有挑战性的任务。</li></ul></li></ul><h2 id="DRBD-磁盘复制"><a href="#DRBD-磁盘复制" class="headerlink" title="DRBD 磁盘复制"></a>DRBD 磁盘复制</h2><p>DRBD（Distrubuted Replicated Block Device）是一种构建高可用分布式网络存储解决方案的专业工具（由 Linux 内核提供），可用于对服务器之间的磁盘、分区、逻辑卷等进行数据同步，当用户将数据写入本地磁盘时，还会将数据发送到网络中另一台主机的磁盘上，这样的本地主机（主节点）与远程主机（备节点）的数据就可以保证实时同步。DRBD 主要用于数据传输、复制和同步，可以在网络存储节点之间实现可靠性更高的数据备份，也常用于构建高可用的存储节点及其他组件，如集群、负载均衡和存储服务器等。</p><div class="admonition note"><p class="admonition-title">DRBD 结合 MySQL 使用</p><p>DRBD 与 MySQL 结合使用可以实现高可用性的数据库方案。通过将 MySQL 数据库的数据目录配置为 DRBD 设备，加上额外的配置和管理工具（如 Pacemaker），可以为数据库提供实时复制和故障转移的能力，从而提高数据库的可靠性和可用性。当主节点发生故障时，系统可以自动切换到备节点，减少数据库服务的中断时间。<strong>DRBD 经典架构的组合是 MySQL + DRBD + Heartbeat。</strong></p></div><h3 id="整体架构-1"><a href="#整体架构-1" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="../../../asset/2023/10/mysql-ha-16.png"></p><p>在 MySQL 与 DRBD 方案中，通常会有两个节点：一个主节点和一个备节点。主节点负责处理所有的读写操作，并将数据实时复制到备节点上。备节点会持续地从主节点复制数据，以保持数据的一致性。当主节点发生故障时，备节点可以接管主节点的角色，成为新的主节点，继续提供数据库服务。这种故障转移过程是自动的，可以通过配置和管理工具（如 Pacemaker）来实现。需要注意的是，配置和管理 MySQL 与 DRBD 方案需要一定的技术知识和经验。此外，对网络的稳定性和带宽要求较高，以确保数据的实时复制和同步。因此，在实施该方案之前，建议进行充分的规划和测试，以确保系统的稳定性和可靠性。</p><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点</p><ul><li>两节点即可，部署简单，切换逻辑简单。</li><li>相比于 SAN 储存网络，价格低廉。</li><li>保证数据的强一致性。</li></ul></li><li><p>缺点</p><ul><li>从库不提供读服务。</li><li>对 IO 性能的影响较大。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 MySQL 的数据可靠性方案，包括 RAID 10、SAN 存储网络、DRBD 磁盘复制等。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 高可用基础教程之三高可用架构方案介绍</title>
    <link href="https://www.techgrow.cn/posts/cc846db2.html"/>
    <id>https://www.techgrow.cn/posts/cc846db2.html</id>
    <published>2023-10-21T12:13:32.000Z</published>
    <updated>2023-10-21T12:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/2f77f23a.html">MySQL 高可用基础教程之一主从复制方案介绍</a></li><li><a href="/posts/d6058b93.html">MySQL 高可用基础教程之二高可用架构方案介绍</a></li><li><a href="/posts/cc846db2.html">MySQL 高可用基础教程之三高可用架构方案介绍</a></li><li><a href="/posts/56993278.html">MySQL 高可用基础教程之四数据可靠性方案介绍</a></li><li><a href="/posts/ff0f2d6.html">MySQL 高可用基础教程之五 Debian 部署 PXC 集群</a></li><li><a href="/posts/aba17375.html">MySQL 高可用基础教程之六 Docker 部署 PXC 集群</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="高可用架构方案分类"><a href="#高可用架构方案分类" class="headerlink" title="高可用架构方案分类"></a>高可用架构方案分类</h3><table><thead><tr><th>高可用方案</th><th>保证数据强一致性</th><th>使用说明</th><th>描述</th></tr></thead><tbody><tr><td>主从复制</td><td>否</td><td>支持单主</td><td>只适用于对可用性和数据一致性要求较低的业务场景。</td></tr><tr><td>MMM</td><td> 否</td><td>支持单主</td><td>基本淘汰了，在一致性和高并发稳定性等方面有些问题。</td></tr><tr><td>MHA</td><td> 否</td><td>支持单主</td><td>有少数开发者还在用，但也有些问题，也是趋于淘汰的 MySQL 主从高可用方案。</td></tr><tr><td>MGR</td><td> 是</td><td>支持单主 / 多主</td><td>基于 MySQL 官方从 <code>5.7.17</code> 版本开始引入的组复制技术。</td></tr><tr><td>MySQL Cluster</td><td> 是</td><td>支持多主</td><td> MySQL 官方提供的一种分布式数据库解决方案，只支持 NDB 引擎。</td></tr><tr><td>Galera Cluster</td><td> 是</td><td>支持多主</td><td>引领时代的主从复制高可用技术。</td></tr><tr><td>Galera Cluster for MySQL</td><td> 是</td><td>支持多主</td><td> MySQL 对 Galera Cluster 的实现。</td></tr><tr><td>MariaDB Galera Cluster (MGC)</td><td> 是</td><td>支持多主</td><td> MariaDB 对 Galera Cluster 的实现。</td></tr><tr><td>Percona XtraDB Cluster (PXC)</td><td> 是</td><td>支持多主</td><td> Percona 对 Galera Cluster 的实现，目前业界使用 PXC 的会多一些。</td></tr><tr><td>MySQL InnoDB Cluster</td><td> 是</td><td>支持单主 / 多主</td><td> MySQL 官方推出的一套完整高可用性解决方案。</td></tr></tbody></table><span id="more"></span><h2 id="Galera-Cluster"><a href="#Galera-Cluster" class="headerlink" title="Galera Cluster"></a>Galera Cluster</h2><p><a href="https://galeracluster.com/">Galera Cluster</a> 是由 Codership 开源的一套基于同步多主复制的 MySQL 集群解决方案。目前 Galera Cluster 有三种版本（实现方案），分别是 Galera Cluster for MySQL、MariaDB Galera Cluster (MGC) 及 Percona Xtradb Cluster (PXC)。Galera Cluster 使用 Galera Replication 插件，通过在多个 MySQL 节点之间同步数据来实现高可用性和负载均衡。其本身具有 Multi-Master (多主) 特性，支持多点写入（<strong>所有节点都可以同时读写数据库</strong>），Galera Cluster 中每个实例都是对等的，互为主从。当客户端读写数据的时候，可以选择任一 MySQL 实例，对于读操作，每个实例读取到的数据都是相同的。对于写操作，当数据写入某一节点后，集群会将其同步到其它节点。这种架构不共享任何数据，是一种高冗余架构。</p><div class="admonition note"><p class="admonition-title">如何选择版本？</p><p>建议采用 Percona XtraDB Cluster，因为技术比较成熟，而且国内很多企业在生产线上用的更多一些。</p></div><h3 id="版本区别"><a href="#版本区别" class="headerlink" title="版本区别"></a>版本区别</h3><p>Galera Cluster for MySQL、MariaDB Galera Cluster (MGC) 与 Percona Xtradb Cluster (PXC) 三者的区别如下：</p><ul><li><p><code>版本不同</code></p><ul><li>三者使用的 Galera Cluster 版本不同，因此在功能和性能上存在一些的差异。</li></ul></li><li><p><code>发行版不同</code>：</p><ul><li>MariaDB Galera Cluster 是由 MariaDB 基金会开发的，支持 MariaDB。</li><li>Percona XtraDB Cluster 是由 Percona 公司开发的，支持 Percona Server。</li><li>Galera Cluster for MySQL 是由 Codership 公司开发的，支持 MySQL 和 Percona Server。</li></ul></li><li><p><code>功能不同</code>：</p><ul><li>Percona XtraDB Cluster 提供了一些额外的功能，例如在线扩容、在线更改节点角色等。</li><li>MariaDB Galera Cluster 支持 Galera Cluster for MySQL 的所有功能，包括多主写入、并行复制、自动故障检测和恢复等。</li></ul></li><li><p><code>许可证不同</code>：</p><ul><li>MariaDB Galera Cluster 使用 LGPLv2.1 许可证。</li><li>Galera Cluster for MySQL 和 Percona XtraDB Cluster 都使用 GPLv2 许可证。</li></ul></li></ul><div class="admonition note"><p class="admonition-title">MariaDB 与 Percona Server 的关系</p><p>MariaDB 是由原 MySQL 创始人开发，Percona Server 由 Percona 公司开发（使用 XtraDB 存储引擎），两者都是从 MySQL 衍生出来的数据库分支。</p></div><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="../../../asset/2023/10/mysql-ha-9.png"></p><ul><li>Galera Cluster 的核心组件<ul><li><code>Galera Replication 插件</code>：Galera Replication 是一个基于同步复制的插件，用于实现数据的多主复制和一致性。它使用了多主复制协议，确保在集群中的所有节点之间的数据同步和一致性。</li><li><code>Primary Component</code>：Primary Component 是 Galera Cluster 中的主组件，负责处理所有的写操作和读操作。Primary Component 接收来自应用程序的写请求，并将数据复制到其他节点（Secondary Component）上。</li><li><code>Secondary Component</code>：Secondary Component 是 Galera Cluster 中的从组件，负责复制 Primary Component 上的数据。Secondary Component 通过与 Primary Component 进行通信，接收并应用 Primary Component 上的写操作，以保持数据的一致性。</li></ul></li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ul><li><code>初始化集群</code>：在 Galera Cluster 中，首先需要配置和启动一个节点作为初始 Primary Component，并将其配置为 Galera Replication 插件的成员。然后，其他节点可以加入到集群中，并通过与 Primary Component 进行通信，获取数据并成为 Secondary Component。</li><li><code>数据同步和复制</code>：一旦集群初始化完成，Primary Component 开始接收来自应用程序的写请求，并将数据复制到其他节点上。Secondary Component 通过与 Primary Component 进行通信，接收并应用 Primary Component 上的写操作，以保持数据的一致性。</li><li><code>自动故障切换</code>：如果 Primary Component 发生故障，Galera Cluster 会自动选择一个 Secondary Component 作为新的 Primary Component，并将其他节点重新配置为新的 Secondary Component。这个过程是自动的，无需人工干预。</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点<ul><li><code>高可用性</code>：Galera Cluster 通过数据的多主复制和自动故障切换，支持自动添加和剔除节点，实现了高可用性。即使某个节点发生故障，集群仍然可以继续提供服务。</li><li><code>数据强一致性</code>：Galera Cluster 使用多主复制协议，确保在集群中的所有节点之间的数据同步和一致性。在写操作提交之前，集群中的成员会达成一致，确保数据在所有节点上的复制是一致的。</li><li><code>简化配置和管理</code>：Galera Cluster 提供了简单易用的配置选项和管理工具，使得集群的配置和管理变得更加简单和方便。</li><li><code>可扩展性</code>：Galera Cluster 支持水平扩展，可以通过增加节点来扩展存储容量和处理能力。同时，由于数据的多主复制和负载均衡，可以实现更好的性能和吞吐量。</li><li><code>拥有成熟的社区</code>：Galera Cluster 拥有成熟的社区，国内有互联网公司在大规模使用。</li><li><code>使用体验一致</code>：用户可以直接连接 Galera Cluster 集群，使用感受上与 MySQL 完全一致。</li><li><code>同步复制</code>：Galera Cluster 使用了同步复制，且支持真正的并行复制（行级）。</li></ul></li><li>缺点<ul><li><code>网络稳定性</code>：Galera Cluster 对网络的稳定性要求较高，因为节点之间需要进行频繁的通信和数据同步。如果网络不稳定，可能会导致数据同步延迟或节点之间的通信故障。</li><li><code>写冲突</code>：由于 Galera Cluster 支持多主复制，如果应用程序在不同的节点上同时进行写操作，可能会导致写冲突和一致性问题。因此，需要在应用程序层面进行合理的设计和处理。</li><li><code>配置复杂性</code>：尽管 Galera Cluster 提供了简化的配置选项和管理工具，但对于不熟悉 Galera Cluster 的用户来说，配置可能是一项具有挑战性的任务。</li><li><code>需要安装补丁</code>：使用 Galera Cluster 时，需要提前为原生 MySQL 节点安装 Wsrep 补丁。</li><li><code>节点数需求</code>：搭建 Galera Cluster 时，要求至少有三个服务器节点，且多节点写入开销大。</li><li><code>使用限制</code><ul><li>不支持 GTID（全局事务标识符）。</li><li>不支持异步复制，所有节点必须同步复制。</li><li>不支持全局临时表，因为它们不能被复制。</li><li>不支持使用外键，因为这会导致复制延迟和性能问题。</li><li>不支持 DDL 语句的自动化复制，需要手动在每个节点上执行。</li><li>不支持非确定性函数，因为它们在不同节点上的结果可能不同。</li><li>不支持存储过程和函数的自动化复制，需要手动在每个节点上创建。</li><li>只支持使用 InnoDB 存储引擎，不支持 MyISAM、NDB 存储引擎。</li></ul></li></ul></li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>在使用 Galera Cluster 之前，建议进行充分的测试和评估，以确保它能够满足系统的可用性、性能和扩展性要求，并根据具体的应用场景和需求进行适当的配置和调整。</p></div><h2 id="Percona-XtraDB-Cluster"><a href="#Percona-XtraDB-Cluster" class="headerlink" title="Percona XtraDB Cluster"></a>Percona XtraDB Cluster</h2><p>Percona XtraDB Cluster（PXC）是一个基于 <a href="/posts/cc846db2.html#Galera-Cluster">Galera Cluster</a> 实现的高可用性和高性能的 MySQL 集群解决方案。它是由 Percona 开发的，建立在 Galera Replication 插件之上，提供了多主复制和数据同步的功能。</p><h3 id="PXC-的兼容性"><a href="#PXC-的兼容性" class="headerlink" title="PXC 的兼容性"></a>PXC 的兼容性</h3><ul><li>完全兼容已有的系统（InnoDB 存储引擎，优化器执行计划，完全相同的优化思路）。</li><li>最小化的迁移（可以非常方便地从现有系统迁移到 PXC）。</li><li>快速地回退版本（无锁化、非常容易地恢复到非 PXC 系统）。</li></ul><h3 id="PXC-的使用限制条件"><a href="#PXC-的使用限制条件" class="headerlink" title="PXC 的使用限制条件"></a>PXC 的使用限制条件</h3><ul><li>仅支持 InnoDB 存储引擎，而 MySQL 自带的系统库（如 <code>mysql</code>）里面有些表是使用 MyISAM 存储引擎，因此不能直接对系统库的表进行 DML 操作，比如 <code>INSERT INTO mysql.user</code>，但使用 <code>CREATE USER</code> 是没有问题的，它也是正确的使用方式。</li><li>不允许大事务的产生（否则的话后果很严重），允许的最大事务大小由 <code>wsrep_max_ws_rows</code> 和 <code>wsrep_max_ws_size</code> 变量定义，<code>LOAD DATA INFILE</code> 方式处理每 10000 行提交一次，对于大的事务将被分解众多小型事务。</li><li>对于写密集型应用需要控制单个节点的大小，单个节点的数据越大，新加节点如果采用自动添加，则可能会产生很大抖动（添加节点建议提前使用备份或者备份 + Binlog 进行数据同步，尽量减少抖动）。</li><li>集群高负载时应避免执行 <code>ALTER TABLE</code>、<code>IMPORT</code>、<code>EXPORT</code> 等操作，因为如果这些操作未在所有节点上同步执行，可能会导致节点不一致。</li><li>在多主模式中不支持 <code>LOCK TABLES</code> 以及 <code>UNLOCK TABLES</code> 锁定功能，如 <code>GET_LOCK ()</code>，<code>RELEASE_LOCK ()</code> 等也不被支持。</li><li>硬件配置短板限制，即整个集群的写吞吐量受最弱节点的限制，因此所有 PXC 节点的硬件配置要一致。如果一个节点变慢，整个集群会跟着变慢。</li><li>需要尽可能地控制 PXC 集群的规模，节点越多，数据同步速度越慢。</li><li>查询日志不能定向到表，即如果启用查询日志记录，则必须将日志转发到文件，而不能转发到表。</li><li><code>enforce_storage_engine=InnoDB</code> 与 <code>wsrep_replicate_myisam=OFF（默认）</code> 不兼容。</li><li><code>binlog_rows_query_log_events</code> 变量不受支持。</li><li>由于可能的提交回滚，XA 事务不受支持。</li><li>InnoDB 的虚假更改功能不受支持。</li><li>最小的集群大小是 3 个节点。</li><li>不能解决热点更新问题。</li></ul><h3 id="Replication-与-PXC-对比"><a href="#Replication-与-PXC-对比" class="headerlink" title="Replication 与 PXC 对比"></a>Replication 与 PXC 对比</h3><h4 id="对比说明"><a href="#对比说明" class="headerlink" title="对比说明"></a>对比说明</h4><p><img data-src="../../../asset/2023/10/mysql-ha-10.png"></p><p><img data-src="../../../asset/2023/10/mysql-ha-11.png"></p><h4 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a>对比总结</h4><ul><li><p>数据一致性对比</p><ul><li>Replication 一般采用异步复制，无法保证数据的强一致性。</li><li>PXC 采用同步复制，事务在所有集群节点要么都提交，要么都不提交，可以保证数据的强一致性。</li></ul></li><li><p>写入性能对比</p><ul><li>Replication 写入速度快，但是不能保证数据的强一致性。</li><li>PXC 可以保证数据的强一致性，但写入速度慢（所有节点都可以同时读写）。</li><li>PXC 和 Replication 都只实现了数据的同步，并没有提供数据切分（分片）的的功能。</li></ul></li><li><p>两者的区别总结</p><ul><li>PXC 集群的所有节点都是可读可写，但 Replication 的从节点不能写入，因为主从同步是单向的，无法从 Slave 节点向 Master 节点同步。</li><li>PXC 的同步机制是同步进行的，这也是它能保证数据强一致性的根本原因，Replication 的同步机制是异步进行的，如果从节点停止同步，依然可以向主节点插入数据，且正确返回给客户端，造成主从节点的数据不一致。</li><li>PXC 是用牺牲性能保证数据的一致性，Replication 在性能上是高于 PXC 的，所以两者用途也不一样。PXC 是用于重要数据的存储，例如：订单信息、支付信息、用户信息等。Replication 用于一般信息的存储，能够容忍数据丢失，例如：购物车、用户行为日志等。</li></ul></li></ul><h3 id="PXC-高性能高可用部署方案"><a href="#PXC-高性能高可用部署方案" class="headerlink" title="PXC 高性能高可用部署方案"></a>PXC 高性能高可用部署方案</h3><h4 id="PXC-集群基础架构部署"><a href="#PXC-集群基础架构部署" class="headerlink" title="PXC 集群基础架构部署"></a>PXC 集群基础架构部署</h4><p><img data-src="../../../asset/2023/10/mysql-ha-12.png"></p><p><img data-src="../../../asset/2023/10/mysql-ha-14.png"></p><p><img data-src="../../../asset/2023/10/mysql-ha-13.png"></p><h4 id="PXC-集群混合架构部署"><a href="#PXC-集群混合架构部署" class="headerlink" title="PXC 集群混合架构部署"></a>PXC 集群混合架构部署</h4><p><img data-src="../../../asset/2023/10/mysql-ha-15.png"></p><h2 id="MySQL-InnoDB-Cluster"><a href="#MySQL-InnoDB-Cluster" class="headerlink" title="MySQL InnoDB Cluster"></a>MySQL InnoDB Cluster</h2><p>MySQL InnoDB Cluster 是 MySQL 官方推出的一套完整高可用性解决方案。</p><h3 id="整体架构-1"><a href="#整体架构-1" class="headerlink" title="整体架构"></a>整体架构</h3><ul><li>MySQL InnoDB Cluster 的核心组件<ul><li><code>MySQL Group Replication</code>：简称 MGR，是 MySQL 的主从同步高可用方案，包括数据同步及角色选举。</li><li><code>MySQL Router</code>：业务流量的统一入口，支持对 MGR 的主从角色判断，可以配置不同的端口分别对外提供读写服务，实现读写分离等功能。</li><li><code>MySQL Shell</code>：MySQL InnoDB Cluster 的管理工具，用来创建和管理集群。</li></ul></li></ul><p><img data-src="../../../asset/2023/10/mysql-ha-18.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.51cto.com/u_16099257/7022269">MySQL 高可用方案推荐</a></li><li><a href="https://bigdata.it168.com/a2016/0822/2871/000002871893.shtml">链家 MySQL 高可用架构设计</a></li><li><a href="https://mt.sohu.com/20170323/n484341088.shtml">10 款常见 MySQL 高可用方案选型解读</a></li><li><a href="https://www.php.cn/faq/554468.html">MySQL 中常见的高可用架构部署方案有哪些</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4NjE4NTUwNQ==&amp;mid=2247495043&amp;idx=8&amp;sn=85a4c8aa143ac9e11e1fea11ab134a1e">MySQL 高可用架构 - MMM、MHA、MGR、PXC</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 MySQL 的高可用架构方案，包括 Galera Cluster、Percona XtraDB Cluster 等。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 高可用基础教程之二高可用架构方案介绍</title>
    <link href="https://www.techgrow.cn/posts/d6058b93.html"/>
    <id>https://www.techgrow.cn/posts/d6058b93.html</id>
    <published>2023-10-18T12:13:32.000Z</published>
    <updated>2023-10-18T12:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/2f77f23a.html">MySQL 高可用基础教程之一主从复制方案介绍</a></li><li><a href="/posts/d6058b93.html">MySQL 高可用基础教程之二高可用架构方案介绍</a></li><li><a href="/posts/cc846db2.html">MySQL 高可用基础教程之三高可用架构方案介绍</a></li><li><a href="/posts/56993278.html">MySQL 高可用基础教程之四数据可靠性方案介绍</a></li><li><a href="/posts/ff0f2d6.html">MySQL 高可用基础教程之五 Debian 部署 PXC 集群</a></li><li><a href="/posts/aba17375.html">MySQL 高可用基础教程之六 Docker 部署 PXC 集群</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="高可用架构方案分类"><a href="#高可用架构方案分类" class="headerlink" title="高可用架构方案分类"></a>高可用架构方案分类</h3><table><thead><tr><th>高可用方案</th><th>保证数据强一致性</th><th>使用说明</th><th>描述</th></tr></thead><tbody><tr><td>主从复制</td><td>否</td><td>支持单主</td><td>只适用于对可用性和数据一致性要求较低的业务场景。</td></tr><tr><td>MMM</td><td> 否</td><td>支持单主</td><td>基本淘汰了，在一致性和高并发稳定性等方面有些问题。</td></tr><tr><td>MHA</td><td> 否</td><td>支持单主</td><td>有少数开发者还在用，但也有些问题，也是趋于淘汰的 MySQL 主从高可用方案。</td></tr><tr><td>MGR</td><td> 是</td><td>支持单主 / 多主</td><td>基于 MySQL 官方从 <code>5.7.17</code> 版本开始引入的组复制技术。</td></tr><tr><td>MySQL Cluster</td><td> 是</td><td>支持多主</td><td> MySQL 官方提供的一种分布式数据库解决方案，只支持 NDB 引擎。</td></tr><tr><td>Galera Cluster</td><td> 是</td><td>支持多主</td><td>引领时代的主从复制高可用技术。</td></tr><tr><td>Galera Cluster for MySQL</td><td> 是</td><td>支持多主</td><td> MySQL 对 Galera Cluster 的实现。</td></tr><tr><td>MariaDB Galera Cluster (MGC)</td><td> 是</td><td>支持多主</td><td> MariaDB 对 Galera Cluster 的实现。</td></tr><tr><td>Percona XtraDB Cluster (PXC)</td><td> 是</td><td>支持多主</td><td> Percona 对 Galera Cluster 的实现，目前业界使用 PXC 的会多一些。</td></tr><tr><td>MySQL InnoDB Cluster</td><td> 是</td><td>支持单主 / 多主</td><td> MySQL 官方推出的一套完整高可用性解决方案。</td></tr></tbody></table><span id="more"></span><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>主从之间一般使用异步复制，这意味无法保证数据的一致性，对于数据一致性要求比较高的业务场景是不适用的（如金融、银行业务）。</p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="../../../asset/2023/10/mysql-ha-19.png"></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点</p><ul><li>架构简单，维护起来比较方便。</li></ul></li><li><p>缺点</p><ul><li>无法保证数据的一致性。</li><li>主库宕机后，整个系统都无法写入数据。</li><li>Proxy 存在单点问题，建议使用 Keepalived + HAProxy 实现数据库中间件的负载均衡。</li></ul></li></ul><h2 id="MMM"><a href="#MMM" class="headerlink" title="MMM"></a>MMM</h2><p>MMM（Master-Master Replication Manager）是一套支持 MySQL 双主故障切换和双主日常管理的脚本程序，可以实现 MySQL 数据库的高可用性和负载均衡。MMM 基于 Perl 语言开发，主要用于监控和管理 MySQL Master-Master（双主） 复制，可以说是 MySQL 主主复制的管理器。<strong>虽然叫做双主复制，但在业务上同一时刻只能有一个主库进行数据的写入，另一台主备库会提供部分读服务，以加速在主主切换时主备库的预热。另外，主备库会在主库失效时，进行主备切换和故障转移</strong>。可以说 MMM 这套脚本程序一方面实现了主备切换的功能，另一方面其内部附加的工具脚本也可以实现多个 Slave 节点的读负载均衡。<strong>简而言之，MMM 是一套基于 MySQL 主从复制的高可用性解决方案，通过使用双主复制架构、自动故障检测与切换机制、故障恢复机制，实现了 MySQL 数据库的高可用性和数据同步。</strong></p><div class="admonition warning"><p class="admonition-title">注意</p><p>MMM 方案基本淘汰了，在生产环境中不建议使用。</p></div><h3 id="整体架构-1"><a href="#整体架构-1" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="../../../asset/2023/10/mysql-ha-3.png"></p><ul><li>MMM 架构包括三大组件：监控器（Monitor）、代理（Agent）和 MySQL 实例。</li><li>在 MMM 中是通过一个 VIP（虚拟 IP）的机制来保证集群的高可用。在整个 MySQL 集群中，在主节点会提供一个 VIP 地址来提供数据读写服务，当出现故障的时候，VIP 就会从原来的主节点切换到其他节点，由其他节点提供服务。</li><li>VIP（虚拟 IP）是基于 ARP 协议，因此所有节点必须处于同一局域网。</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li><code>工作原理</code>：MMM 采用了一种双主复制架构，其中有两个 MySQL 主服务器（Master1 和 Master2），它们之间通过 MySQL 的复制功能进行数据同步。在这种架构中，应用程序可以同时连接到 Master1 和 Master2，从而实现读写负载的分担和高可用性。</li><li><code>主从复制</code>：MMM 利用 MySQL 的主从复制机制，将一个 MySQL 主服务器（Master1）作为主节点，另一个 MySQL 主服务器（Master2）作为从节点。主节点接收写操作并将其复制到从节点，从而保持数据的同步。当主节点发生故障时，从节点可以自动接管主节点的角色，确保数据库的高可用性。</li><li><code>自动故障检测与切换</code>：MMM 具有自动检测主节点故障的能力。它通过监控主节点的心跳以及与从节点的复制延迟来确定主节点是否正常工作。如果主节点发生故障或延迟过高，MMM 会自动将从节点切换为主节点，并将所有写操作重定向到新的主节点。</li><li><code>故障恢复</code>：当主节点恢复正常工作后，MMM 可以自动将其重新加入复制拓扑，并将其配置为从节点。这样，当前的主节点（之前的从节点）会将数据同步到恢复的主节点，以确保数据的一致性。</li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><p>使用 MMM 可以有效地提高 MySQL 数据库的可用性和性能。特别注意的是，MMM 并不能解决所有的高可用问题，例如网络分区和数据一致性等问题。</p></div><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点</p><ul><li><code>高可用性</code>：MMM 通过自动故障检测和故障转移机制，可以快速将一个从节点提升为新的主节点，从而实现数据库的高可用性，减少系统的停机时间。</li><li><code>负载均衡</code>：MMM 可以根据节点的负载情况，将读操作分发到不同的节点上，从而实现负载均衡，提高系统的整体性能。</li><li><code>简单易用</code>：MMM 提供了一些管理工具，可以方便地进行节点的添加、删除和配置修改等操作，使得系统的管理和维护变得简单易用。</li><li><code>VIP 支持</code>：默认提供了读写 VIP（虚拟 IP）的支持。</li></ul></li><li><p>缺点：</p><ul><li><code>无法完全保证数据一致性</code>：由于 MMM 默认采用了 MySQL 的异步复制机制，主节点和从节点之间的同步存在一定的延迟，可能会导致数据的不一致。在某些场景下，需要额外的措施来确保数据的一致性。</li><li><code>单点故障</code>：虽然 MMM 可以自动进行故障转移，但在故障转移过程中，可能会存在一段时间的数据库不可用。如果 MMM 本身发生故障，可能会导致整个系统的不可用。</li><li><code>配置复杂性</code>：MMM 的配置相对复杂，需要对 MySQL 的复制机制和 MMM 的工作原理有一定的了解。在配置过程中，需要注意各个节点的配置一致性和正确性。</li><li><code>故障切换会丢事务</code>：出现故障切换时，容易丢失事务，建议主从库采用半同步复制方式解决，减少出问题的概率。</li><li><code>不支持 GTID</code>：MMM 不支持基于 GTID 的复制，只支持基于日志点的复制。</li><li><code>社区不活跃</code>：目前 MMM 开源社区已经缺少维护者。</li></ul></li></ul><h2 id="MHA"><a href="#MHA" class="headerlink" title="MHA"></a>MHA</h2><p>MHA（Master High Availability）是一种用于 MySQL 数据库的高可用性架构。它的设计目标是确保在主数据库发生故障时，能够快速自动地将备库（Slave）提升为新的主库，以保证系统的连续性和可用性。MHA 专门用于监控主库的状态，当发现 Master 节点发生故障的时候，会自动提升其中拥有最新数据的 Slave 节点成为新的 Master 节点；在此期间，MHA 会通过其他从节点获取额外的信息来避免数据一致性问题。MHA 还提供了一种在线切换 Master-Slave 节点的功能，可以根据需要进行切换。MHA 可在 30 秒内实现故障转移，同时最大程度确保数据一致性。</p><div class="admonition warning"><p class="admonition-title">注意</p><ul><li>MHA 方案比较适合旧版本的 MySQL，即小于 <code>5.7.17</code> 的版本，如 <code>5.5</code>、<code>5.6</code> 等。</li><li>MySQL 官方从 <code>5.7.17</code> 版本开始提供了组复制技术，因此版本号大于 <code>5.7.17</code> 的 MySQL，建议采用 MGR（MySQL Group Replication）或者其他高可用方案。</li></ul></div><h3 id="整体架构-2"><a href="#整体架构-2" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="../../../asset/2023/10/mysql-ha-4.png"></p><ul><li>MHA 由两部分组成，分别是 MHA Manager（管理节点）和 MHA Node（数据节点）。</li><li>MHA Manager 可以单独部署在一台独立的机器上管理单个或多个 Master-Slave 集群，也可以部署在一台 Slave 节点上。MHA Node 运行在每台 MySQL 服务器上。</li><li>Slave 节点是 MySQL 数据库的备库，负责同步主库的数据。MHA 会通过与 Slave 节点建立 SSH 连接，实时监测备库的状态。</li><li>Master 节点是 MySQL 数据库的主库，负责处理所有的写操作和读操作。MHA 会通过与 Master 节点建立 SSH 连接，实时监测主库的状态。</li><li>Manager 节点是 MHA 的核心组件，负责监控主库的状态并自动执行故障切换操作。它通过与 MySQL 主库和备库建立 SSH 连接，实时监测集群中的 Master 节点；<strong>当 Master 节点出现故障时，它可以自动将拥有最新数据的 Slave 节点提升为新的 Master 节点，然后将所有其他的 Slave 节点重新指向新的 Master 节点。</strong></li></ul><blockquote><p>MHA 可以扩展为多主多从的集群架构，如下图所示</p></blockquote><p><img data-src="../../../asset/2023/10/mysql-ha-5.png"></p><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><p>目前 MHA 主要支持一主多从的架构，要搭建 MHA，则必须保证在一个 MySQL 复制集群中最少有三台数据库服务器，一主二从，即一台 Master 节点，一台充当备用 Master 节点，另外一台充当 Slave 节点，因为至少需要三台服务器。</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>MHA 架构的工作流程如下：</p><ul><li>从宕机崩溃的 Master 中保存二进制日志事件（binlog events）</li><li>识别最新更新的 Slave 节点</li><li>应用差异的中继日志（relay log）到其他 Slave 节点</li><li>应用从 Master 保存的二进制日志事件（binlog events）</li><li>提升其中一个 Slave 节点为新 Master 节点</li><li>让其他的 Slave 节点连接新的 Master 节点进行复制</li></ul><h4 id="自动故障切换"><a href="#自动故障切换" class="headerlink" title="自动故障切换"></a>自动故障切换</h4><p>在 MHA 自动故障切换的过程中，MHA 会尝试从宕机的主服务器上最大限度的保存二进制日志，最大程度的保证数据的不丢失，但这并不总是可行的。例如，主服务器硬件故障或无法通过 SSH 访问，导致 MHA 无法保存二进制日志，只进行故障转移而丢失了最新的数据。使用从 MySQL 5.5 开始支持的半同步复制，可以大大降低数据丢失的风险。<strong>值得一提的是，MHA 很适合与半同步复制机制结合起来使用。</strong>如果只有一个 Slave 节点已经接收到了最新的二进制日志，MHA 可以将最新的二进制日志应用于其他所有的 Slave 节点上，因此可以保证所有节点的数据一致性。</p><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点：</p><ul><li><code>自动故障切换</code>：MHA 能够自动检测主库的故障，并快速将备库提升为新的主库，减少了手动干预的需要，提高了系统的可用性。</li><li><code>实时监测</code>：MHA 通过与 Master 节点和 Slave 节点建立 SSH 连接，实时监测它们的状态，能够及时发现故障并采取相应的措施。</li><li><code>简化配置</code>：MHA 提供了简单易用的配置文件，可以轻松地配置主库和备库的信息，减少了配置的复杂性。</li><li><code>高可扩展性</code>：MHA 支持多个备库，可以根据需求灵活地扩展系统的容量和性能。</li><li><code>支持 GTID 与日志点</code>：支持基于 GTID 的复制模式，在进行故障转移时更不易产生数据丢失，同时还支持基于日志点的复制。</li><li><code>支持监控多个集群</code>：同一个监控节点可以监控多个集群。</li></ul></li><li><p>缺点：</p><ul><li><code>配置复杂性</code>：尽管 MHA 提供了简化的配置文件，但对于不熟悉 MHA 的用户来说，配置仍然可能是一项复杂的任务。特别是在涉及多个主库和备库的复杂环境中，配置可能变得更加困难。</li><li><code>依赖 SSH 连接</code>：MHA 通过 SSH 连接与主库和备库进行通信和监控。这意味着在配置和使用 MHA 时，必须确保 SSH 连接的可用性和稳定性，否则可能会导致 MHA 无法正常工作。由于需要基于 SSH 免认证配置，存在一定的安全隐患。</li><li><code>故障切换过程中的数据同步延迟</code>：在故障切换期间，MHA 需要将备库提升为新的主库，并重新配置其他备库作为新的从库。这个过程可能需要一些时间，导致在切换期间存在一定的数据同步延迟，这可能会对某些应用程序的数据一致性产生影响。</li><li><code>依赖 MySQL 复制功能</code>：MHA 依赖 MySQL 的半同步复制方式来实现数据的同步和复制。如果 MySQL 的复制功能出现问题，可能会导致 MHA 无法正常工作或数据同步不完整。</li><li><code>需要额外的硬件资源</code>：为了实现高可用性，MHA 需要至少一个备库来作为冗余备份。这意味着需要额外的硬件资源来支持备库的运行和数据复制，增加了系统的成本和复杂性。</li><li><code>只监控 Master 节点</code>：MHA 启动后只会对主数据库进行监控，并不关注 Slave 节点的运行状态，这可能会导致 Master 节点挂掉后切换到无效的 Slave 节点，从而导致系统崩溃。</li><li><code>需要配置 VIP</code>：MHA 需要编写脚本或利用第三方工具来实现 VIP（虚拟 IP）的配置。</li><li><code>存在脑裂的问题</code>：可能会因网络分区导致脑裂问题的发生。</li></ul></li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><p>MHA 并不是万能的解决方案，它适用于大多数的 MySQL 数据库场景，但在特定的情况下可能需要根据实际需求进行定制化的配置和调整。此外，为了确保 MHA 的正常运行，还需要进行定期的监控和维护工作，以保证系统的稳定性和可靠性。</p></div><h2 id="MGR"><a href="#MGR" class="headerlink" title="MGR"></a>MGR</h2><p>MGR（MySQL Group Replication）是 MySQL 官方在 <code>5.7.17</code> 版本引进的一个数据库高可用解决方案，以插件形式提供，用于实现 MySQL 数据库的主从复制和自动故障切换。MGR 基于 MySQL 的 InnoDB 存储引擎和 Group Replication 插件实现，引入组复制主要是为了解决传统异步复制和半同步复制可能产生数据不一致的问题。<strong>值得一提的是，MGR 支持单主模式与多主模式，多主模式支持多点写入，MySQL 官方推荐使用单主模式。</strong></p><ul><li><p>MGR 架构的核心组件</p><ul><li><code>Group Replication 组件</code>：Group Replication 是 MySQL 官方提供的插件，用于实现多主复制和自动故障切换。它基于 Paxos 协议，通过在集群中的成员之间进行通信和协调，实现数据的同步和一致性。</li><li><code>Primary 节点</code>：Primary 节点是 MGR 集群中的主节点，负责处理所有的写操作和读操作。Primary 节点接收来自应用程序的写请求，并将数据复制到其他节点（Secondary 节点）上。</li><li><code>Secondary 节点</code>：Secondary 节点是 MGR 集群中的从节点，负责复制 Primary 节点上的数据。Secondary 节点通过与 Primary 节点进行通信，接收并应用 Primary 节点上的写操作，以保持数据的一致性。</li></ul></li><li><p>MGR 架构的工作流程</p><ul><li><code>初始化集群</code>：在 MGR 架构中，首先需要选择一个节点作为初始 Primary 节点，并将其配置为 Group Replication 组件的成员。然后，其他节点可以加入到集群中，并通过与 Primary 节点进行通信，获取数据并成为 Secondary 节点。</li><li><code>数据同步</code>：一旦集群初始化完成，Primary 节点开始接收来自应用程序的写请求，并将数据复制到其他节点上。Secondary 节点通过与 Primary 节点进行通信，接收并应用 Primary 节点上的写操作，以保持数据的一致性。</li><li><code>自动故障切换</code>：如果 Primary 节点发生故障，Group Replication 组件会自动选择一个 Secondary 节点作为新的 Primary 节点，并将其他节点重新配置为新的 Secondary 节点。这个过程是自动的，无需人工干预。</li></ul></li></ul><h3 id="整体架构-3"><a href="#整体架构-3" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="../../../asset/2023/10/mysql-ha-6.png"></p><h3 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>MGR 由若干个节点共同组成一个复制组，一个事务的提交，必须经过组内大多数节点（N / 2 + 1）决议并通过，才能得以提交。</li><li>MGR 基于分布式 Paxos 协议，实现组复制，保证数据的强一致性，自带故障检测和自动选主功能。</li><li>MGR 基于 ROW 格式的二进制日志文件和 GTID 特性。</li></ul><h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点</p><ul><li><code>自动故障切换</code>：MGR 能够自动检测 Primary 节点的故障，并快速将一个 Secondary 节点提升为新的 Primary 节点，实现自动故障切换，提高了系统的可用性。只要有 N / 2 + 1 节点可用，集群就可用。</li><li><code>保证数据的强一致性</code>：MGR 使用 Paxos 协议来保证数据的强一致性。在写操作提交之前，集群中的成员会达成一致，确保数据在所有节点上的复制是一致的。</li><li><code>简化配置和管理</code>：MGR 提供了简单易用的配置选项和管理工具，使得集群的配置和管理变得更加简单和方便。</li><li><code>高可扩展性</code>：MGR 支持多主复制，可以根据需求灵活地扩展系统的容量和性能。</li><li><code>支持多主模式，但目前该技术还不是很成熟</code><ul><li>多主模式下，客户端可以随机向 MySQL 节点写入数据。</li><li>单主模式下，MGR 集群会选出 Primary 节点负责写请求，Primary 和 Secondary 节点都可以进行读请求的处理。</li></ul></li></ul></li><li><p>缺点</p><ul><li><code>网络稳定性</code>：MGR 对网络的稳定性要求较高，因为节点之间需要进行频繁的通信和数据同步。如果网络不稳定，可能会导致数据同步延迟或节点之间的通信故障。</li><li><code>数据冲突</code>：由于 MGR 支持多主复制，如果应用程序在不同的节点上同时进行写操作，可能会导致数据冲突和一致性问题。因此，需要在应用程序层面进行合理的设计和处理。</li><li><code>配置复杂性</code>：尽管 MGR 提供了简化的配置选项和管理工具，但对于不熟悉 MGR 的用户来说，配置仍然可能是一项复杂的任务。特别是在涉及多个节点和复杂环境中，配置可能变得更加困难。</li><li><code>存在较多限制</code>：<ul><li>仅支持 Innodb 储存引擎，且储存引擎的版本必须一致。</li><li>所有节点的 MySQL 版本必须一致，否则无法添加到 MGR 中。</li><li>不支持异构的 MySQL 节点，也就是说，所有 MySQL 节点的操作系统和版本必须一致。</li><li>只能在 GTID 模式下使用。</li><li>Binlog 的日志格式必须为 ROW 格式。</li><li>每个表都必须有主键，在进行事务冲突检测时需要利用主键值进行对比。</li><li>RP 和普通复制 Binlog 校验不能共存，需设置 <code>--binlog-checksum=none</code>。</li><li>不支持 <code>gap lock（间隙锁）</code>，隔离级别需设置为 <code>read_committed</code>。</li><li>不支持对表进行锁操作（如 <code>lock table</code>、<code>unlock table</code>）。</li><li>不支持在不同的 MGR 节点上，对同一个表分别执行 DML 和 DDL，可能会造成数据丢失或节点报错退出。</li><li>DDL 语句不支持原子性，不能检测冲突，执行后需自行校验是否一致。</li><li>多主模式下不支持使用外键，但单主模式下支持使用外键。</li><li>不支持 <code>serializable（串行）</code> 隔离级别。</li><li>不支持复制过滤（Replication Filters）设置。</li><li>最多支持 9 个节点，超过 9 个节点无法加入组。</li></ul></li></ul></li><li><p>适用场景</p><ul><li>要求数据强一致性的业务场景</li><li>希望对数据库的写服务提供高可用保障，但又不想安装第三方软件</li></ul></li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>在使用 MGR 之前，建议进行充分的测试和评估，以确保它能够满足系统的可用性和性能要求，并根据具体的应用场景和需求进行适当的配置和调整。</p></div><h2 id="MySQL-Cluster"><a href="#MySQL-Cluster" class="headerlink" title="MySQL Cluster"></a>MySQL Cluster</h2><p>MySQL Cluster （又叫 MySQL NDB Cluster）是 MySQL 官方开源的一种分布式数据库解决方案，旨在提供高可用性、可扩展性和实时性能。它基于 NDB（Network DataBase）存储引擎，使用多台服务器组成一个集群，提供数据的分片和复制，以实现高可用性和自动的读写负载均衡。值得一的是，MySQL Cluster 兼容 ACID 事务，不存在单点故障，支持自动水平扩容，可以保证数据的强一致性。</p><div class="admonition warning"><p class="admonition-title">注意</p><p>由于 MySQL Cluster 的使用和配置都比较复杂，该方案在国内并没有被大规模使用。</p></div><h3 id="整体架构-4"><a href="#整体架构-4" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="../../../asset/2023/10/mysql-ha-8.png"></p><ul><li>MySQL Cluster 架构的核心组件<ul><li><code>Management 节点</code>：Management 节点是 MySQL Cluster 的控制节点，负责集群的管理和配置。它负责监控集群中的各个节点，并协调数据的分片和复制。</li><li><code>Data 节点</code>：Data 节点是 MySQL Cluster 的数据节点，负责存储和处理数据。每个 Data 节点都运行 NDB 存储引擎，数据被分片存储在不同的 Data 节点上，以实现数据的分布和负载均衡。</li><li><code>SQL 节点</code>：SQL 节点是 MySQL Cluster 的查询节点，负责处理应用程序的查询请求。SQL 节点接收来自应用程序的 SQL 查询，并将查询分发到适当的 Data 节点上进行处理。</li></ul></li></ul><h3 id="工作原理-3"><a href="#工作原理-3" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a>工作流程</h4><p>MySQL Cluster 架构的工作流程如下：</p><ul><li><code>集群初始化</code>：在 MySQL Cluster 中，首先需要配置和启动 Management 节点，然后配置和启动 Data 节点和 SQL 节点。Management 节点负责监控和管理集群中的各个节点。</li><li><code>数据分片和复制</code>：一旦集群初始化完成，Management 节点会根据配置的规则将数据分片存储在不同的 Data 节点上。数据的复制和同步由 MySQL Cluster 自动处理，以保证数据的一致性和可用性。</li><li><code>查询处理</code>：当应用程序发送查询请求时，SQL 节点接收并解析查询，并将查询分发到适当的 Data 节点上进行处理。Data 节点返回查询结果给 SQL 节点，然后 SQL 节点将结果返回给应用程序。</li></ul><h3 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点</p><ul><li><code>高可用性</code>：MySQL Cluster 通过数据的分片和复制，以及自动故障检测和恢复机制，实现了高可用性。即使某个节点发生故障，集群仍然可以继续提供服务。</li><li><code>可扩展性</code>：MySQL Cluster 支持水平扩展，可以通过增加 Data 节点来扩展存储容量和处理能力。同时，由于数据的分片和负载均衡，可以实现更好的性能和吞吐量。</li><li><code>实时性能</code>：MySQL Cluster 的设计目标之一是提供实时性能。通过将数据存储在内存中，并使用并行处理和分布式计算，可以实现较低的延迟和更高的吞吐量。</li><li><code>数据的强一致性</code>：MySQL Cluster 使用多副本复制和同步机制，以保证数据的强一致性。即使在节点故障或网络分区的情况下，数据仍然可以保持一致。</li></ul></li><li><p>缺点：</p><ul><li><code>配置复杂性</code>：MySQL Cluster 的配置相对复杂，需要考虑数据分片、复制和负载均衡等因素。对于不熟悉 MySQL Cluster 的用户来说，配置可能是一项具有挑战性的任务。</li><li><code>内存需求</code>：由于 MySQL Cluster 将数据存储在内存中，因此对内存的需求较高，需要根据数据量和性能需求来配置足够的内存资源。</li><li><code>存储引擎需求</code>：MySQL Cluster 需要使用 NDB 存储引擎，与 MySQL 常用引擎（如 Innodb 引擎）存在一定的差异。</li><li><code>网络稳定性</code>：MySQL Cluster 对网络的稳定性要求较高，因为节点之间需要进行频繁的通信和数据同步。如果网络不稳定，可能会导致数据同步延迟或节点之间的通信故障。</li><li><code>重启时间长</code>：重启的时候，数据节点将数据加载到内存需要很长时间。</li><li><code>备份和恢复</code>：MySQL Cluster 对数据备份和恢复并不友好。</li><li><code>节点数需求</code>：搭建 MySQL Cluster 时，要求至少有三个服务器节点。</li><li><code>存在较多限制</code>：如不支持外键，数据行不能超过 8K（不包括 BLOB 和 TEXT 中的数据）等。</li></ul></li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>在使用 MySQL Cluster 之前，建议进行充分的测试和评估，以确保它能够满足系统的可用性、性能和扩展性要求，并根据具体的应用场景和需求进行适当的配置和调整。</p></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.51cto.com/u_16099257/7022269">MySQL 高可用方案推荐</a></li><li><a href="https://bigdata.it168.com/a2016/0822/2871/000002871893.shtml">链家 MySQL 高可用架构设计</a></li><li><a href="https://mt.sohu.com/20170323/n484341088.shtml">10 款常见 MySQL 高可用方案选型解读</a></li><li><a href="https://www.php.cn/faq/554468.html">MySQL 中常见的高可用架构部署方案有哪些</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4NjE4NTUwNQ==&amp;mid=2247495043&amp;idx=8&amp;sn=85a4c8aa143ac9e11e1fea11ab134a1e">MySQL 高可用架构 - MMM、MHA、MGR、PXC</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 MySQL 的高可用架构方案，包括 MMM、MHA、MGR、MySQL Cluster。</summary>
    
    
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 高可用基础教程之一主从复制方案介绍</title>
    <link href="https://www.techgrow.cn/posts/2f77f23a.html"/>
    <id>https://www.techgrow.cn/posts/2f77f23a.html</id>
    <published>2023-10-15T12:13:32.000Z</published>
    <updated>2023-10-15T12:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/2f77f23a.html">MySQL 高可用基础教程之一主从复制方案介绍</a></li><li><a href="/posts/d6058b93.html">MySQL 高可用基础教程之二高可用架构方案介绍</a></li><li><a href="/posts/cc846db2.html">MySQL 高可用基础教程之三高可用架构方案介绍</a></li><li><a href="/posts/56993278.html">MySQL 高可用基础教程之四数据可靠性方案介绍</a></li><li><a href="/posts/ff0f2d6.html">MySQL 高可用基础教程之五 Linux 部署 PXC 集群</a></li><li><a href="/posts/aba17375.html">MySQL 高可用基础教程之六 Docker 部署 PXC 集群</a></li></ul><h2 id="主从复制概述"><a href="#主从复制概述" class="headerlink" title="主从复制概述"></a>主从复制概述</h2><h3 id="主从复制用途"><a href="#主从复制用途" class="headerlink" title="主从复制用途"></a>主从复制用途</h3><ul><li><code>实时灾备</code>：用于故障切换（高可用）</li><li><code>读写分离</code>：提供查询服务（读扩展）</li><li><code>数据备份</code>：避免影响业务（高可用）</li></ul><span id="more"></span><h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><ul><li>主从复制的原理<ul><li> (1) Master 节点将数据的改变都记录到二进制 Binlog 日志中，只要 Master 上的数据发生改变，则将其改变写入二进制日志。</li><li>(2) Salve 节点会在一定时间间隔内对 Master 二进制日志进行探测，判断其是否发生改变，如果发生改变，则启动一个 I/O 线程请求 Master 二进制事件。</li><li>(3) 同时 Master 节点会为每个 I/O 线程启动一个 Binlog Dump 线程，用于向其发送二进制事件，让 Slave 节点保存至本地的 Relay-Log （中继日志）中。</li><li>(4) Slave 节点启动 SQL 线程从 Relay-Log （中继日志）中读取二进制日志，并在本地重放，使得其数据和 Master 节点的保持一致。</li><li>(5) 最后 Slave 节点的 I/O 线程 和 SQL 线程将进入睡眠状态，等待下一次被唤醒。</li></ul></li></ul><p><img data-src="../../../asset/2023/10/mysql-replication-5.png"></p><ul><li>主从复制的重点<ul><li> (1) Slave 节点会启动两个线程，分别是 I/O 线程和 SQL 线程。</li><li>(2) Slave 节点的 I/O 线程会去请求 Master 节点的 Binlog，并将得到的 Binlog 写入本地的 Relay-Log（中继日志）文件中。</li><li>(3) Master 节点会启动一个 Binlog Dump 线程，用来给 Slave 节点的 I/O 线程传 Binlog。</li><li>(4) Slave 节点的 SQL 线程会读取本地 Relay-Log（中继日志）文件中的日志，并解析成 SQL 语句逐一执行。</li></ul></li></ul><h3 id="主从复制方式"><a href="#主从复制方式" class="headerlink" title="主从复制方式"></a>主从复制方式</h3><ul><li><code>基于语句的复制</code>: 在主服务器执行的 SQL 语句，在从服务器也执行同样语句，这是 MySQL 默认采用的复制方式。</li><li><code>基于行的复制</code>: 将改变的数据复制给从服务器，而不是让 SQL 语句在从服务器上执行一遍，从 MySQL <code>5.0</code> 版本开始支持。</li><li><code>混合类型的复制</code>: 默认采用基于 SQL 语句的复制（效率较高），一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</li></ul><h2 id="主从复制类型"><a href="#主从复制类型" class="headerlink" title="主从复制类型"></a>主从复制类型</h2><h3 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h3><p>异步复制是 MySQL 默认使用的复制类型。</p><div class="admonition warning"><p class="admonition-title">特别注意</p><p>异步复制不能保证 Slave 节点一定能接收到 Binlog 日志，即无法保证数据的一致性，但执行效率是最高的。</p></div><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p><img data-src="../../../asset/2023/10/mysql-replication-1.png"></p><h3 id="半同步复制"><a href="#半同步复制" class="headerlink" title="半同步复制"></a>半同步复制</h3><p>从 MySQL <code>5.5</code> 版本开始，MySQL 可以让 Master 节点在某一个时间点等待 Slave 节点的 ACK 消息，接收到 ACK 消息后才进行事务提交，这就是半同步复制。半同步复制可以保证至少有一个 Slave 节点的 Relay Log（中继日志）是完整的数据，即对数据一致性有一定的保障，但执行效率较慢。</p><ul><li>半同步复制在提交过程中增加了一个延迟，即在提交事务时，在客户端接收到查询结束反馈前必须保证二进制日志已经传输到一台 Slave 节点上。</li><li>半同步不会阻塞 Master 节点上的事务提交，只有通知客户端被延迟了。</li><li>Slave 节点在接收到事务后发送 ACK 消息，而不是完成事务后再发送。</li><li><strong>如果 Slave 节点一直没有回应，会超时自动切换为异步复制模式。</strong></li></ul><h4 id="整体流程-1"><a href="#整体流程-1" class="headerlink" title="整体流程"></a>整体流程</h4><p><img data-src="../../../asset/2023/10/mysql-replication-2.png"></p><h4 id="半同步复制插件"><a href="#半同步复制插件" class="headerlink" title="半同步复制插件"></a>半同步复制插件</h4><p>MySQL 的半同步复制是以插件的形式提供的，因此在使用之前需要安装对应的插件，如下所示：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主库安装半同步复制插件</span></span><br><span class="line">mysql&gt; install plugin rpl_semi_sync_master soname <span class="string">'semisync_master.so'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从库安装半同步复制插件</span></span><br><span class="line">mysql&gt; install plugin rpl_semi_sync_slave soname <span class="string">'semisync_slave.so'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的插件</span></span><br><span class="line">mysql&gt; show plugins;</span><br></pre></td></tr></tbody></table></figure><h4 id="半同步复制大坑"><a href="#半同步复制大坑" class="headerlink" title="半同步复制大坑"></a>半同步复制大坑</h4><p>在极端情况下，半同步复制也无法保证数据的一致性（至少有一个 Slave 节点的数据是完整的），如下图所示：</p><p><img data-src="../../../asset/2023/10/mysql-replication-3.png"></p><p>为了避免出现上述图中数据不一致的问题，强烈建议使用 <code>SET rpl_semi_sync_master_wait_point=AFTER_SYNC</code> 开启了 MySQL 的增强半同步，从 <code>5.7</code> 版本开始默认就是开启的。<strong>特别注意，MySQL <code>5.7</code> 之前的旧版本默认是使用 <code>AFTER_COMMIT</code>（传统半同步）。</strong></p><div class="admonition note"><p class="admonition-title">MHA 与半同步复制是绝配</p><p>MHA 高可用架构非常适合搭配半同步复制一起使用，详细介绍请看 <a href="/posts/d6058b93.html#MHA-%E6%96%B9%E6%A1%88">这里</a> 的教程。</p></div><h3 id="全同步复制"><a href="#全同步复制" class="headerlink" title="全同步复制"></a>全同步复制</h3><p>全同步复制属于主从强一致方案，对 Binlog 有一定的要求，且执行效率最慢。MySQL <code>5.7.17</code> 版本开始引入了组复制技术，因此全同步复制可以配合 <a href="/posts/d6058b93.html#MGR-%E6%96%B9%E6%A1%88">MGR 高可用架构</a> 一起使用。MGR 中的组复制协议如下图所示：</p><p><img data-src="../../../asset/2023/10/mysql-replication-4.png"></p><h2 id="主从复制进阶"><a href="#主从复制进阶" class="headerlink" title="主从复制进阶"></a>主从复制进阶</h2><h3 id="并行复制"><a href="#并行复制" class="headerlink" title="并行复制"></a>并行复制</h3><p>MySQL 从 <code>5.6</code> 版本开始引入了并行复制功能，用于改善复制延迟的问题。这是因为 Slave 节点只有一个 SQL 线程，当主库写压力大时，复制很可能会延迟。</p><h4 id="5-6-版本并行复制"><a href="#5-6-版本并行复制" class="headerlink" title="5.6 版本并行复制"></a>5.6 版本并行复制</h4><p>MySQL <code>5.6</code> 版本仅支持基于库的并行复制，也就是多个线程分别执行不同库的复制操作，互不干扰。值得一提的是，单库多表的复制效率并没有提升。</p><p><img data-src="../../../asset/2023/10/mysql-replication-6.png"></p><h4 id="5-7-版本并行复制"><a href="#5-7-版本并行复制" class="headerlink" title="5.7 版本并行复制"></a>5.7 版本并行复制</h4><p>MySQL <code>5.7</code> 版本支持基于组提交的并行复制，不再有库的并行复制限制（即支持单库多表的并行复制）。当事务提交时，通过在主库上的二进制日志中添加组提交信息，并将在单个操作中写入到二进制日志中。如果多个事务能同时提交成功，那么它们意味着没有冲突，因此可以在 Slave 节点上并行执行。InnoDB 事务提交采用的是两阶段提交模式。一个阶段是 Prepare，另一个阶段是 Commit。MySQL <code>5.7</code> 版本的并行复制基于一个前提，即所有已经处于 Prepare 阶段的事务，都是可以并行提交的。在 MySQL <code>5.7</code> 版本中，其设计方式是将组提交的信息存放在 GTID 中。为了避免用户没有开启 GTID 功能，MySQL <code>5.7</code> 又引入了称之为 <code>Anonymous_Gtid</code> 的二进制日志 Event 类型，即日志中具有相同的 <code>last_committed</code>，表示这些事务都在一组内。</p><h4 id="8-0-版本并行复制"><a href="#8-0-版本并行复制" class="headerlink" title="8.0 版本并行复制"></a>8.0 版本并行复制</h4><p>MySQL <code>8.0</code> 版本支持基于 <code>write-set</code> 的并行复制。有一个集合变量来存储事务修改的记录信息（主键哈希值），所有已经提交的事务所修改的主键值经过 Hash 后都会与那个变量的集合进行对比，来判断改行是否与其冲突，并以此来确定依赖关系，没有冲突即可并行，Row 级别的粒度，类似于之前的表锁行锁差异，效率会更高。</p><h3 id="日志点与-GTID"><a href="#日志点与-GTID" class="headerlink" title="日志点与 GTID"></a>日志点与 GTID</h3><p>MySQL 的主从复制，支持基于日志点或者 GTID 进行复制。</p><ul><li><p>基于日志点复制</p><ul><li>Slave 节点请求 Master 节点的增量日志依赖于日志偏移量。</li><li>配置主从复制链路时需要指定参数。</li><li>支持 MMM 和 MHA。</li></ul></li><li><p>基于 GTID 复制</p><ul><li>GTID（全局事务唯一 ID），其构成是 <code>GTID = source_id:transaction_id</code>。</li><li>Slave 节点增量同步 Master 节点的数据依赖于其未同步的全局事务 ID。</li><li>配置主从复制链路时，Slave 节点会根据已经同步的事务 ID 继续自动同步。</li><li>支持 MHA。</li></ul></li></ul><div class="admonition note"><p class="admonition-title">复制方式选择</p><p>如何是为了兼容旧版本的 MySQL 和 MMM，建议选择基于日志点复制，其他业务场景可以选择基于 GTID 复制。</p></div><h3 id="主从复制架构"><a href="#主从复制架构" class="headerlink" title="主从复制架构"></a>主从复制架构</h3><p>MySQL 常见的主从复制架构如下：</p><p><img data-src="../../../asset/2023/10/mysql-replication0-7.png"></p><h2 id="主从复制常见问题"><a href="#主从复制常见问题" class="headerlink" title="主从复制常见问题"></a>主从复制常见问题</h2><h3 id="主从复制高延迟"><a href="#主从复制高延迟" class="headerlink" title="主从复制高延迟"></a>主从复制高延迟</h3><p>造成 MySQL 主从复制高延迟的常见原因如下：</p><ul><li><code>网络</code>：如主库或者从库的带宽打满，或者主从之间的网络延迟很大，导致主库上的 Binlog 没有全量传输到从库，造成了延迟。</li><li><code>机器性能</code>：从库的硬件性能较差，比如主库使用 SSD 硬盘，而从库使用 SATA 硬盘。</li><li><code>从库高负载</code>：有很多业务会在从库上做统计，把从库服务器搞成高负载，从而造成从库延迟很大的情况。</li><li><code>大事务</code>：比如在 RBR 模式下，执行带有大量的 Delete 操作，这种通过查看 <code>processlist</code> 相关信息以及使用 <code>mysqlbinlog</code> 查看 Binlog 中的 SQL 就能快速进行排查。</li><li><code>锁</code>: 锁冲突问题也可能导致从库的 SQL 线程执行慢，比如从库上有一些 <code>select ... for update</code> 的 SQL，或者使用了 MyISAM 存储引擎等。</li></ul><p>MySQL 主从复制高延迟硬件方面的优化方案如下：</p><ul><li>采用性能更高的服务器，比如 4U 比 2U 性能明显要更好。</li><li>数据库存储使用 SSD 硬盘、磁盘阵列或者 SAN 存储网络，提升随机写的性能。</li><li>主从库之间保证处在同一个交换机下面，并且是万兆环境。</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>全同步复制相对于半同步复制来说，数据的一致性更高，但性能代价也更高。具体选择哪种复制，取决于对数据一致性和性能的需求权衡。</li><li>在关键业务场景下（对数据一致性的要求较高），可以更倾向于选择全同步复制，而在某些读写分离的场景下，可以考虑半同步复制。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/383463007">MySQL 集群架构</a></li><li><a href="https://www.cnblogs.com/junjun511/p/11412313.html">MySQL 主从复制原理</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 MySQL 的主从复制方案，包括异步复制、半同步复制、全同步复制、并行复制等内容。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 模块化入门教程</title>
    <link href="https://www.techgrow.cn/posts/1ce314e0.html"/>
    <id>https://www.techgrow.cn/posts/1ce314e0.html</id>
    <published>2023-10-09T12:23:35.000Z</published>
    <updated>2023-10-09T12:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="模块化介绍"><a href="#模块化介绍" class="headerlink" title="模块化介绍"></a>模块化介绍</h2><h3 id="模块化的概念"><a href="#模块化的概念" class="headerlink" title="模块化的概念"></a>模块化的概念</h3><p>模块化的本质是将一个复杂的程序依据一定的规则 (规范) 封装成几个块 (文件)，并进行组合在一起，块 (文件) 的内部数据和操作实现是私有的，只是对外部暴露一些接口 (方法) 与外部其它模块通信。</p><span id="more"></span><h3 id="模块化的进化史"><a href="#模块化的进化史" class="headerlink" title="模块化的进化史"></a>模块化的进化史</h3><blockquote><p>一、将不同的功能封装成不同的全局函数（全局函数模式）</p></blockquote><ul><li>缺点：Global 被污染，很容易引起命名冲突</li></ul><p><img data-src="../../../asset/2023/10/javascript-modular-1.png"></p><blockquote><p>二、简单对象封装（命名模式）</p></blockquote><ul><li>优点：减少 Global 上的变量数目</li><li>缺点：本质是对象，一点都不安全</li></ul><p><img data-src="../../../asset/2023/10/javascript-modular-2.png"></p><blockquote><p>三、匿名函数自调用【闭包】（IIFE 模式）</p></blockquote><ul><li>优点：函数是 JavaScript 唯一的 Local Scope</li><li> 缺点：如果当前这个模块依赖另一个模块怎么办？</li></ul><p><img data-src="../../../asset/2023/10/javascript-modular-3.png"></p><blockquote><p>四、引入依赖（IIFE 模式增强），<strong>这是现代模块化实现的基石</strong></p></blockquote><p><img data-src="../../../asset/2023/10/javascript-modular-4.png"></p><h3 id="为什么要模块化"><a href="#为什么要模块化" class="headerlink" title="为什么要模块化"></a>为什么要模块化</h3><h4 id="前端开发的现状"><a href="#前端开发的现状" class="headerlink" title="前端开发的现状"></a>前端开发的现状</h4><p>前端开发的现状往往是在页面中引入加载大量的 JavaScript 文件（如下图），这会导致页面请求过多、依赖模糊、代码难以维护等问题。值得一提的是，这些问题可以通过现代模块化编码和项目构建来解决。</p><p><img data-src="../../../asset/2023/10/javascript-modular-5.png"></p><h4 id="模块化的需求"><a href="#模块化的需求" class="headerlink" title="模块化的需求"></a>模块化的需求</h4><ul><li>Web sites are turning into Web apps（网站正转变为网络应用程序）</li><li>Code complexity grows as the site gets bigger（代码复杂度随着站点变大而变复杂）</li><li>Assembly gets harder（组装变得更难）</li><li>Developer wants discrete JS files/modules（开发者想分离 JS 文件 / 模块）</li><li>Deployment wants optimized code in just one or a few HTTP calls（网站部署者想通过使用一个或者很少 HTTP 请求来优化代码）</li></ul><h4 id="模块化的优点"><a href="#模块化的优点" class="headerlink" title="模块化的优点"></a>模块化的优点</h4><ul><li>避免命名冲突（减少命名空间污染）</li><li>更好的分离，按需加载</li><li>更高的复用性</li><li>更高的可维护性</li></ul><h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><p>JavaScript 的模块化规范分为四大类，分别是 CommonJS、ES 6、AMD、CMD。</p><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>每个 JavaScript 文件都可以当一个模块，并具有以下特性：</p><ul><li><code>在服务器端</code>：模块的加载是在运行时同步加载的</li><li><code>在浏览器端</code>：模块需要提前编译打包处理</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li><p>服务端的实现</p><ul><li><a href="https://nodejs.cn/">Node.js</a></li></ul></li><li><p> 浏览器端的实现</p><ul><li><a href="https://browserify.org/">Browserify</a>，它也称为 CommonJS 的浏览器端的打包工具</li></ul></li></ul><div class="admonition note"><p class="admonition-title">Node.js 与 Browserify 的区别</p><p>Node.js 是在运行时动态加载模块（同步），而 Browserify 是在转译（编译）时就会加载并打包 （合并） <code>require</code> 的模块。</p></div><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><ul><li><p>暴露模块</p><ul><li><code>module.exports = value</code></li><li><code>exports.xxx = value</code></li></ul></li><li><p>引入模块</p><ul><li><code>require(xxx)</code><ul><li>内置模块： <code>xxx</code> 为模块名</li><li>第三方模块： <code>xxx</code> 为模块名</li><li>自定义模块： <code>xxx</code> 为模块文件的路径</li></ul></li></ul></li></ul><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><ul><li>创建项目结构 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">05</span><br><span class="line">├── app.js</span><br><span class="line">├── modules</span><br><span class="line">│   ├── module1.js</span><br><span class="line">│   ├── module2.js</span><br><span class="line">│   └── module3.js</span><br><span class="line">└── package.json</span><br></pre></td></tr></tbody></table></figure><ul><li>Node 安装第三方模块 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uniq --save</span><br></pre></td></tr></tbody></table></figure><ul><li>模块化编码 - module1.js</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.exports = value 暴露一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="attr">msg</span> : <span class="string">'module1 msg'</span>,</span><br><span class="line">    <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'module1 foo()'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>模块化编码 - module2.js</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.exports = value 暴露一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'module2()'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>模块化编码 - module3.js</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// exports.xxx = value 暴露多个目标</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'module3 foo()'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'module3 bar()'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>模块化编码 - app.js</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入内置模块</span></span><br><span class="line"><span class="keyword">const</span> fs = require(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入第三方模块</span></span><br><span class="line"><span class="keyword">const</span> uniq = require(<span class="string">'uniq'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入自定义模块</span></span><br><span class="line"><span class="keyword">const</span> module1 = require(<span class="string">'./modules/module1'</span>);</span><br><span class="line"><span class="keyword">const</span> module2 = require(<span class="string">'./modules/module2'</span>);</span><br><span class="line"><span class="keyword">const</span> module3 = require(<span class="string">'./modules/module3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模块</span></span><br><span class="line">fs.readFile(<span class="string">'app.js'</span>, function(error, data) {</span><br><span class="line">    console.log(data.toString());</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">let arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">console.log(uniq(arr));</span><br><span class="line"></span><br><span class="line">module1.foo();</span><br><span class="line">module2();</span><br><span class="line">module3.foo();</span><br><span class="line">module3.bar();</span><br></pre></td></tr></tbody></table></figure><ul><li>通过 Node 运行 app.js</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍 JavaScript 模块化的入门教程，包括 CommonJS、ES 6、AMD、CMD 的模块化使用。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 使用自带的事件调度器定时执行 SQL</title>
    <link href="https://www.techgrow.cn/posts/15d17038.html"/>
    <id>https://www.techgrow.cn/posts/15d17038.html</id>
    <published>2023-09-07T12:48:23.000Z</published>
    <updated>2023-09-07T12:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发过程中经常会遇到这样一个问题，每天或者每月必须定时去执行一条 SQL 语句，下面这篇文章主要给大家介绍如何使用 MySQL 自带的事件调度器定时执行 SQL 语句。</p><h2 id="启用事件调度器"><a href="#启用事件调度器" class="headerlink" title="启用事件调度器"></a>启用事件调度器</h2><p>查看事件调度器的运行状态</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">'%sche%'</span>;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/09/mysql-event-1.png"></p><span id="more"></span><p>如果 <code>event_scheduler</code> 的值为 <code>OFF</code>，则需要启用事件调度器（下述方式属于临时启用）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> event_scheduler<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p>或者更改 MySQL 的配置文件（如 <code>my.conf</code>），在 <code>[mysqld]</code> 标记下添加以下内容，然后重启 MySQL 服务器（下述方式属于永久启用）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">event_scheduler = ON</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">为什么建议在 MySQL 的配置文件中启用事件调度器</p><p>这是为了防止在操作系统断电重启后，导致数据库的事件调度器又变回默认关闭的状态 <code>OFF</code>，这样定时事件就不再自动执行了。通过更改 MySQL 的配置文件，将它设置成默认开启状态 <code>ON</code>，这使得在断电重启后 MySQL 依旧会自动正常执行定时事件。</p></div><h2 id="管理定时事件"><a href="#管理定时事件" class="headerlink" title="管理定时事件"></a>管理定时事件</h2><h3 id="创建定时事件"><a href="#创建定时事件" class="headerlink" title="创建定时事件"></a>创建定时事件</h3><p>创建定时事件，<code>DO</code> 后面的内容是需要定时执行的 SQL 语句，也可以使用 <code>CALL</code> 指令调用存储过程</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 每天0点执行</span></span><br><span class="line"><span class="keyword">CREATE</span> EVENT clear_logging_event_property</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">1</span> <span class="keyword">DAY</span> STARTS <span class="type">DATE</span>(<span class="built_in">CURRENT_DATE</span> <span class="operator">+</span> <span class="number">1</span>) </span><br><span class="line">DO <span class="keyword">truncate</span> <span class="keyword">table</span> logging_event_property;</span><br></pre></td></tr></tbody></table></figure><p><code>on schedule at</code> 表示在特定时间执行，<code>on schedule every</code> 表示重复执行</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 特定的日期特定的时间点执行定时任务</span></span><br><span class="line"><span class="keyword">ON</span> SCHEDULE <span class="keyword">at</span> <span class="string">'2023-10-05 19:14:10'</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 每五分钟执行一次定时任务</span></span><br><span class="line"><span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">5</span> <span class="keyword">MINUTE</span> STARTS CURDATE()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 每小时执行一次定时任务</span></span><br><span class="line"><span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">1</span> <span class="keyword">HOUR</span> STARTS CURDATE()</span><br></pre></td></tr></tbody></table></figure><h3 id="查看定时事件"><a href="#查看定时事件" class="headerlink" title="查看定时事件"></a>查看定时事件</h3><ul><li>查看所有定时事件，将显示事件的详细信息，包括事件名称、定时器时间、事件状态和执行操作等 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> events;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/09/mysql-event-2.png"></p><ul><li>查看所有定时事件的执行历史记录，将显示事件的详细信息，包括事件名称、定时器时间、事件状态、执行操作、最后一次执行的时间等 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.events;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/09/mysql-event-3.png"></p><h3 id="开启定时事件"><a href="#开启定时事件" class="headerlink" title="开启定时事件"></a>开启定时事件</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 开启某个定时事件</span></span><br><span class="line"><span class="keyword">alter</span> event user_event <span class="keyword">on</span> completion preserve enable;</span><br></pre></td></tr></tbody></table></figure><h3 id="关闭定时事件"><a href="#关闭定时事件" class="headerlink" title="关闭定时事件"></a>关闭定时事件</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 关闭某个定时事件</span></span><br><span class="line"><span class="keyword">alter</span> event user_event <span class="keyword">on</span> completion preserve disable;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除定时事件"><a href="#删除定时事件" class="headerlink" title="删除定时事件"></a>删除定时事件</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 删除某个定时事件</span></span><br><span class="line"><span class="keyword">drop</span> event user_event;</span><br></pre></td></tr></tbody></table></figure><h2 id="常用定时事件案例"><a href="#常用定时事件案例" class="headerlink" title="常用定时事件案例"></a>常用定时事件案例</h2><h3 id="一次性执行"><a href="#一次性执行" class="headerlink" title="一次性执行"></a>一次性执行</h3><blockquote><p>满足指定条件时，只会执行一次定时事件，然后定时事件结束执行</p></blockquote><ul><li>在未来指定时间点执行一次 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> user_event;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT user_event</span><br><span class="line">    <span class="keyword">ON</span> SCHEDULE <span class="keyword">AT</span> <span class="type">TIMESTAMP</span> <span class="string">'2023-09-24 18:26:00'</span></span><br><span class="line">    <span class="keyword">ON</span> COMPLETION <span class="keyword">NOT</span> PRESERVE</span><br><span class="line">DO <span class="keyword">call</span> user_procedure();</span><br></pre></td></tr></tbody></table></figure><ul><li>从现在开始 1 小时后执行一次 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> user_event;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT user_event</span><br><span class="line">    <span class="keyword">ON</span> SCHEDULE <span class="keyword">AT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">HOUR</span></span><br><span class="line">    <span class="keyword">ON</span> COMPLETION <span class="keyword">NOT</span> PRESERVE</span><br><span class="line">DO <span class="keyword">call</span> user_procedure();</span><br></pre></td></tr></tbody></table></figure><h3 id="周期性一直执行"><a href="#周期性一直执行" class="headerlink" title="周期性一直执行"></a>周期性一直执行</h3><blockquote><p>定时事件一直周期性地执行</p></blockquote><ul><li>从现在开始每隔 N 天执行一次 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> user_event;    </span><br><span class="line"><span class="keyword">CREATE</span> EVENT user_event</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">9</span> <span class="keyword">DAY</span> STARTS NOW()</span><br><span class="line">DO <span class="keyword">call</span> user_procedure();</span><br></pre></td></tr></tbody></table></figure><ul><li>每天凌晨 1 点执行 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> user_event;    </span><br><span class="line"><span class="keyword">CREATE</span> EVENT user_event</span><br><span class="line"><span class="keyword">on</span> schedule <span class="keyword">EVERY</span> <span class="number">1</span> <span class="keyword">DAY</span> STARTS date_add(<span class="type">date</span>( ADDDATE(curdate(),<span class="number">1</span>)),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">hour</span>)  </span><br><span class="line">DO <span class="keyword">call</span> user_procedure();  </span><br></pre></td></tr></tbody></table></figure><ul><li>每个月的一号凌晨 1 点执行 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> user_event;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT user_event</span><br><span class="line"><span class="keyword">ON</span> schedule <span class="keyword">every</span> <span class="number">1</span> <span class="keyword">month</span> starts date_add(date_add(date_sub(curdate(),<span class="type">interval</span> <span class="keyword">day</span>(curdate())<span class="number">-1</span> <span class="keyword">day</span>),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">month</span>),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">hour</span>)</span><br><span class="line">DO <span class="keyword">call</span> user_procedure();  </span><br></pre></td></tr></tbody></table></figure><ul><li>每个季度一号的凌晨 1 点执行 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> user_event;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT user_event</span><br><span class="line"><span class="keyword">ON</span> schedule <span class="keyword">every</span> <span class="number">1</span> quarter starts date_add(date_add(<span class="type">date</span>(concat(<span class="keyword">year</span>(curdate()),<span class="string">'-'</span>,elt(quarter(curdate()),<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>),<span class="string">'-'</span>,<span class="number">1</span>)),<span class="type">interval</span> <span class="number">1</span> quarter),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">hour</span>)</span><br><span class="line">DO <span class="keyword">call</span> user_procedure(); </span><br></pre></td></tr></tbody></table></figure><ul><li>每年 1 月 1 号凌晨 1 点执行 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> user_event;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT user_event</span><br><span class="line"><span class="keyword">ON</span> schedule <span class="keyword">every</span> <span class="number">1</span> quarter starts date_add(date_add(<span class="type">date</span>(concat(<span class="keyword">year</span>(curdate()),<span class="string">'-'</span>,elt(quarter(curdate()),<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>),<span class="string">'-'</span>,<span class="number">1</span>)),<span class="type">interval</span> <span class="number">1</span> quarter),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">hour</span>)</span><br><span class="line">DO <span class="keyword">call</span> user_procedure();  </span><br></pre></td></tr></tbody></table></figure><h3 id="周期性多次执行"><a href="#周期性多次执行" class="headerlink" title="周期性多次执行"></a>周期性多次执行</h3><blockquote><p>定时事件执行多次后，在满足某个条件时，定时事件结束执行</p></blockquote><ul><li>从现在开始每天执行一次，5 天后停止执行 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> user_event;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT user_event</span><br><span class="line">    <span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">1</span> <span class="keyword">DAY</span></span><br><span class="line">    ENDS <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">5</span> <span class="keyword">DAY</span></span><br><span class="line">DO <span class="keyword">call</span> user_procedure();</span><br></pre></td></tr></tbody></table></figure><ul><li>从现在开始 5 天后开始执行，一个月后停止执行 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> user_event;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT user_event</span><br><span class="line">    <span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">1</span> <span class="keyword">DAY</span></span><br><span class="line">    STARTS <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">5</span> <span class="keyword">DAY</span></span><br><span class="line">    ENDS <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span></span><br><span class="line">DO <span class="keyword">call</span> user_procedure();</span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jb51.net/article/276735.htm">如何用 MySQL 自带的定时器定时执行 SQL</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 MySQL 使用自带的事件调度器定时执行 SQL 语句。</summary>
    
    
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux 挂载 NTFS 硬盘分区出错</title>
    <link href="https://www.techgrow.cn/posts/3ea887f5.html"/>
    <id>https://www.techgrow.cn/posts/3ea887f5.html</id>
    <published>2023-09-06T14:32:44.000Z</published>
    <updated>2023-09-06T14:32:44.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><p>Linux 系统断电重启后，再次挂载 NTFS 格式的硬盘分区时，出现以下错误信息：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount -t ntfs-3g /dev/sdb1 /mnt/share</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$MFTMirr does not match $MFT (record 0).</span><br><span class="line">Failed to mount '/dev/sdb1': Input/output error</span><br><span class="line">NTFS is either inconsistent, or there is a hardware fault, or it's a</span><br><span class="line">SoftRAID/FakeRAID hardware. In the first case run chkdsk /f on Windows</span><br><span class="line">then reboot into Windows twice. The usage of the /f parameter is very</span><br><span class="line">important! If the device is a SoftRAID/FakeRAID then first activate</span><br><span class="line">it and mount a different device under the /dev/mapper/ directory, (e.g.</span><br><span class="line">/dev/mapper/nvidia_eahaabcc1). Please see the 'dmraid' documentation</span><br><span class="line">for more details.</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>在删除、拷贝或者移动硬盘文件时，如果硬盘突然断电或者掉落（断掉、接口松动），那么再次挂载硬盘时，可能会提示硬盘分区的 <code>$MFT</code> 文件出现了问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 Linux 系统下使用 <code>ntfsfix</code> 命令进行修复，而在 Windows 系统下可以使用 <code>chkdsk</code> 命令进行修复。</p><ul><li>安装 ntfsprogs 工具 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install ntfsprogs</span></span><br></pre></td></tr></tbody></table></figure><ul><li>使用 <code>ntfsfix</code> 命令进行修复 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ntfsfix /dev/sdb1</span></span><br><span class="line"></span><br><span class="line">Mounting volume... <span class="variable">$MFTMirr</span> does not match <span class="variable">$MFT</span> (record 0).</span><br><span class="line">FAILED</span><br><span class="line">Attempting to correct errors... </span><br><span class="line">Processing <span class="variable">$MFT</span> and <span class="variable">$MFTMirr</span>...</span><br><span class="line">Reading <span class="variable">$MFT</span>... OK</span><br><span class="line">Reading <span class="variable">$MFTMirr</span>... OK</span><br><span class="line">Comparing <span class="variable">$MFTMirr</span> to <span class="variable">$MFT</span>... FAILED</span><br><span class="line">Correcting differences <span class="keyword">in</span> <span class="variable">$MFTMirr</span> record 0...OK</span><br><span class="line">Processing of <span class="variable">$MFT</span> and <span class="variable">$MFTMirr</span> completed successfully.</span><br><span class="line">Setting required flags on partition... OK</span><br><span class="line">Going to empty the journal (<span class="variable">$LogFile</span>)... OK</span><br><span class="line">Checking the alternate boot sector... OK</span><br><span class="line">NTFS volume version is 3.1.</span><br><span class="line">NTFS partition /dev/sdb1 was processed successfully.</span><br></pre></td></tr></tbody></table></figure><p>重新挂载 NTFS 硬盘分区</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount -t ntfs-3g /dev/sdb1 /mnt/share</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">特别注意</p><p>笔者的硬盘分区路径是 <code>/dev/sdb1</code>，您需要根据实际情况指定自己的硬盘分区路径。值得一提的是，可以使用 <code>fdisk -l</code> 命令来查看硬盘分区的详细信息。</p></div>]]></content>
    
    
    <summary type="html">本文主要介绍如何解决 Linux 挂载 NTFS 硬盘分区出错的问题。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Linux" scheme="https://www.techgrow.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 开机启动失败问题解决</title>
    <link href="https://www.techgrow.cn/posts/2032e2a7.html"/>
    <id>https://www.techgrow.cn/posts/2032e2a7.html</id>
    <published>2023-09-02T12:10:21.000Z</published>
    <updated>2023-09-02T12:10:21.000Z</updated>
    
    
    <summary type="html">本文主要介绍 Centos7 如何解决开机启动失败的问题。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Centos" scheme="https://www.techgrow.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 3 进阶教程之二 GraalVM 与 AOT</title>
    <link href="https://www.techgrow.cn/posts/885fde15.html"/>
    <id>https://www.techgrow.cn/posts/885fde15.html</id>
    <published>2023-08-26T15:12:43.000Z</published>
    <updated>2023-08-30T15:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/1b2af7f9.html">SpringBoot 3 进阶教程之一整合 Prometheus</a></li><li><a href="/posts/885fde15.html">SpringBoot 3 进阶教程之二 GraalVM 与 AOT</a></li><li><a href="/posts/2cc2991f.html">SpringBoot 3 进阶教程之三整合 Spring Security</a></li><li><a href="/posts/308cedc0.html">SpringBoot 3 进阶教程之四自定义 Starter</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 SpringBoot 3 如何使用 AOT 技术，包括在 Windows、Linux 平台使用 GraalVM 将 SpringBoot 应用编译成原生镜像（二进制可执行文件）。</p><h2 id="AOT-与-JIT"><a href="#AOT-与-JIT" class="headerlink" title="AOT 与 JIT"></a>AOT 与 JIT</h2><ul><li><code>AOT</code>：Ahead of Time（提前编译），程序执行前，全部被编译成机器码</li><li><code>JIT</code>：Just in Time（即时编译），程序边编译边运行</li></ul><h3 id="编译器与解释器"><a href="#编译器与解释器" class="headerlink" title="编译器与解释器"></a>编译器与解释器</h3><div class="admonition note"><p class="admonition-title">编程语言的分类</p><ul><li>编译型语言：依赖编译器 (Complier)，如 C、C++</li><li> 解释型语言：依赖解释器 (Interpreter)，如 JavaScrpt、Python</li></ul></div><span id="more"></span><p><img data-src="../../../asset/2023/08/spring-boot3-study-52.png"></p><table><thead><tr><th> 对比项目</th><th>编译器 (Complier)</th><th> 解释器 (Interpreter)</th></tr></thead><tbody><tr><td> 机器执行速度</td><td>快，因为源代码只需被转换一次</td><td>慢，因为每行代码都需要被解释执行</td></tr><tr><td>开发效率</td><td>慢，因为需要耗费大量时间编译</td><td>快，无需花费时间生成目标代码，更快的开发和测试</td></tr><tr><td>调试</td><td>难以调试编译器生成的目标代码</td><td>容易调试源代码，因为解释器一行一行地执行</td></tr><tr><td>可移植性（跨平台）</td><td>不同平台需要重新编译目标平台代码</td><td>同一份源码可以跨平台执行，因为每个平台会开发对应的解释器</td></tr><tr><td>学习难度</td><td>相对较高，需要了解源代码、编译器以及目标机器的知识</td><td>相对较低，无需了解机器的细节</td></tr><tr><td>错误检查</td><td>编译器可以在编译代码时检查错误</td><td>解释器只能在执行代码时检查错误</td></tr><tr><td>运行时增强</td><td>无</td><td>可以动态增强</td></tr></tbody></table><h3 id="AOT-与-JIT-对比"><a href="#AOT-与-JIT-对比" class="headerlink" title="AOT 与 JIT 对比"></a>AOT 与 JIT 对比</h3><p><img data-src="../../../asset/2023/08/spring-boot3-study-53.png"></p><blockquote><p>在 OpenJDK 的官方 Wiki 上，介绍了 HotSpot 虚拟机一个相对比较全面的、即时编译器（JIT）中采用的 <a href="https://wiki.openjdk.org/display/HotSpot/PerformanceTacticIndex">优化技术列表</a>。Java 应用可以使用 JVM 参数 <code>-XX:+PrintCompilation</code> 打印 JIT 编译信息。</p></blockquote><h2 id="JVM-编译原理"><a href="#JVM-编译原理" class="headerlink" title="JVM 编译原理"></a>JVM 编译原理</h2><h3 id="JVM-整体架构"><a href="#JVM-整体架构" class="headerlink" title="JVM 整体架构"></a>JVM 整体架构</h3><p><img data-src="../../../asset/2023/08/spring-boot3-study-54.png"></p><blockquote><p>JVM 既有解释器，又有编译器，因此可以说 Java 是半编译半解释的编程语言。</p></blockquote><h3 id="Java-执行流程"><a href="#Java-执行流程" class="headerlink" title="Java 执行流程"></a>Java 执行流程</h3><div class="admonition note"><p class="admonition-title">建议阅读</p><ul><li>OpenJDK 官方文档：<a href="https://wiki.openjdk.org/display/HotSpot/Compiler">https://wiki.openjdk.org/display/HotSpot/Compiler</a></li><li> 美团技术团队的博客：<a href="https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html">https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html</a></li></ul></div><h4 id="流程概要"><a href="#流程概要" class="headerlink" title="流程概要"></a>流程概要</h4><p><img data-src="../../../asset/2023/08/spring-boot3-study-55.png"></p><h4 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h4><p><img data-src="../../../asset/2023/08/spring-boot3-study-56.png"></p><h3 id="JVM-编译器"><a href="#JVM-编译器" class="headerlink" title="JVM 编译器"></a>JVM 编译器</h3><ul><li><p>JVM 中集成了两种编译器，分别是 Client Compiler 和 Server Compiler</p><ul><li><code>Client Compiler</code>：注重启动速度和局部的优化</li><li><code>Server Compiler</code>：更加关注全局优化，性能更好，但由于会进行更多的全局分析，所以启动速度会慢</li></ul></li><li><p> Client Compiler</p><ul><li>HotSpot 虚拟机带有一个 Client Compiler C1 编译器</li><li>这种编译器启动速度快，但是性能比较 Server Compiler 来说会差一些</li><li>编译后的机器码执行效率没有 C2 的高</li></ul></li><li><p> Server Compiler</p><ul><li>Hotspot 虚拟机中使用的 Server Compiler 有两种： C2 和 Graal</li><li> 在 Hotspot 虚拟机中，默认的 Server Compiler 是 C2 编译器</li></ul></li></ul><h3 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h3><p>在 Java 7 以前，需要研发人员根据服务的性质去选择编译器。对于需要快速启动的，或者一些不会长期运行的服务，可以采用编译效率较高的 C1，对应参数 <code>-client</code>。长期运行的服务，或者对峰值性能有要求的后台服务，可以采用峰值性能更好的 C2，对应参数 <code>-server</code>。Java 7 开始引入了分层编译的概念，它结合了 C1 和 C2 的优势，追求启动速度和峰值性能的一个平衡。分层编译将 JVM 的执行状态分为了五个层次。五个层级分别是：</p><ul><li>解释执行</li><li>执行不带 <code>profiling</code> 的 C1 代码</li><li>执行仅带方法调用次数以及循环回边执行次数 <code>profiling</code> 的 C1 代码。</li><li>执行带所有 <code>profiling</code> 的 C1 代码</li><li>执行 C2 代码</li></ul><p><img data-src="../../../asset/2023/08/spring-boot3-study-57.png"></p><ul><li>图中第 ① 条路径，代表编译的一般情况，热点方法从解释执行到被 3 层的 C1 编译，最后被 4 层的 C2 编译。</li><li>如果方法比较小（比如 Java 服务中常见的 <code>getter</code> 与 <code>setter</code> 方法），3 层的 <code>profiling</code> 没有收集到有价值的数据，JVM 就会断定该方法对于 C1 代码和 C2 代码的执行效率相同，就会执行图中第 ② 条路径。在这种情况下，JVM 会在 3 层编译之后，放弃进入 C2 编译，直接选择用 1 层的 C1 编译运行。</li><li>在 C1 忙碌的情况下，执行图中第 ③ 条路径，在解释执行过程中对程序进行 <code>profiling</code> ，根据信息直接由第 4 层的 C2 编译。</li><li>由于 C1 中的执行效率是 1 层 &gt; 2 层 &gt; 3 层，第 3 层一般要比第 2 层慢 35% 以上，所以在 C2 忙碌的情况下，执行图中第 ④ 条路径。这时方法会被 2 层的 C1 编译，然后再被 3 层的 C1 编译，以减少方法在 3 层的执行时间。</li><li>如果编译器做了一些比较激进的优化，比如分支预测，在实际运行时发现预测出错，这时就会进行反优化，重新进入解释执行，图中第 ⑤ 条执行路径代表的就是反优化。</li></ul><blockquote><p>总的来说，C1 的编译速度更快，C2 的编译质量更高，分层编译的不同编译路径，也就是 JVM 根据当前服务的运行情况来寻找当前服务的最佳平衡点的一个过程。从 JDK 8 开始，JVM 默认开启分层编译。</p></blockquote><h2 id="云原生介绍"><a href="#云原生介绍" class="headerlink" title="云原生介绍"></a>云原生介绍</h2><p>在云原生 (Cloud Native) 的背景下，Java 应用的运行条件发生了变化。</p><ul><li><p>存在的问题</p><ul><li>Java 应用如果用 Jar 启动，解释执行后热点代码才被编译成机器码，会导致初始启动速度慢，初始处理请求数量少。</li><li>大型云平台，要求每一种应用都必须秒级启动，每个应用都要求高效率。</li></ul></li><li><p>希望的效果</p><ul><li>Java 应用也能提前被编译成机器码，随时急速启动，一启动就急速运行，追求最高性能</li><li>编译成机器码的优点<ul><li>服务器不需要安装 Java 运行环境</li><li>应用编译成机器码后，可以在 Windows x64 等平台直接运行</li></ul></li></ul></li></ul><div class="admonition note"><p class="admonition-title">原生镜像是什么？</p><ul><li>原生镜像 (Native Image)：机器码、本地镜像</li><li>把应用打包成能适配本机平台的可执行文件（机器码、本地镜像）</li></ul></div><h2 id="GraalVM-介绍"><a href="#GraalVM-介绍" class="headerlink" title="GraalVM 介绍"></a>GraalVM 介绍</h2><p><a href="https://www.graalvm.org/">GraalVM</a> 是一个高性能的 JDK，旨在加速用 Java 和其他 JVM 语言编写的应用程序的执行，同时还提供 JavaScript、Python 和许多其他流行语言的运行时。GraalVM 提供了两种运行 Java 应用程序的方式：</p><ul><li><code>第一种运行方式</code>：在 HotSpot JVM 上使用 Graal 即时编译器（JIT）</li><li><code>第二种运行方式</code>：作为预先编译（AOT）的本机可执行文件运行（原生镜像）</li></ul><blockquote><p>值得一提的是，GraalVM 的多语言能力使得在单个应用程序中混合多种编程语言成为可能，同时消除了外部语言调用的成本。</p></blockquote><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img data-src="../../../asset/2023/08/spring-boot3-study-58.png"></p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>GraalVM 跨平台提供原生镜像的原理如下图所示：</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-59.png"></p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>目前并不是所有 Java 代码都支持直接使用 GraalVm 编译成原生镜像（二进制可执行文件），具体存在的兼容问题如下：</p><ul><li><p>动态能力损失：</p><ul><li>问题描述：GraalVM 不支持直接编译反射代码，包括动态获取构造器、反射创建对象、反射调用等</li><li>解决方案：额外使用 SpringBoot 提供的一些注解，提前告知 GraalVm 反射会用到哪些构造器、方法等</li></ul></li><li><p>配置文件损失：</p><ul><li>问题描述：以二进制可执行文件的方式运行 Java 应用，项目内原有的配置文件会失效</li><li>解决方案：额外处理（如使用配置中心、使用配置文件的相对路径等），提前告知 GraalVM 配置文件怎么处理</li></ul></li></ul><blockquote><p>值得一提的是，SpringBoot 可以保证 Spring 应用都能在使用 AOT 特性的时候，提前告知 GraalVm 怎么处理，但并不是所有框架都适配了 AOT 特性，尤其是第三方框架。</p></blockquote><h2 id="Linux-平台-编译原生镜像"><a href="#Linux-平台-编译原生镜像" class="headerlink" title="Linux 平台 编译原生镜像"></a>Linux 平台 编译原生镜像</h2><p>在 Linux 平台，使用 GraalVM 编译原生镜像，需要提前安装 GCC 和 GraalVM。</p><h3 id="GCC-安装"><a href="#GCC-安装" class="headerlink" title="GCC 安装"></a>GCC 安装</h3><p>安装 GCC/G++ 的目的是为了可以编译 C/C++ 代码。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ glibc-devel kernel-devel zlib-devel</span><br></pre></td></tr></tbody></table></figure><h3 id="Graalvm-安装"><a href="#Graalvm-安装" class="headerlink" title="Graalvm 安装"></a>Graalvm 安装</h3><h4 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h4><p>根据开发平台和 JDK 版本，在 <a href="https://github.com/graalvm/graalvm-ce-builds/releases/">GraalVM GitHub Releases</a> 页面上下载 GraalVM 与 Native Image 的软件包（如下图）。值得一提的是，GraalVM 有两种版本，分别是社区版和商业版，开发环境一般使用社区版即可。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-70.png"></p><p><img data-src="../../../asset/2023/08/spring-boot3-study-71.png"></p><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>解压 GraalVM 的软件包（如 <code>graalvm-ce-java17-linux-amd64-22.3.3.tar.gz</code>），然后添加或更改系统环境变量 <code>JAVA_HOME</code> 与 <code>Path</code>，其中 <code>JAVA_HOME</code> 指向 GraalVM 的解压目录，<code>PATH</code> 则指向 GraalVM 的 <code>bin</code> 目录路径。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">tar -zxvf graalvm-ce-java17-linux-amd64-22.3.2.tar.gz -C /opt/java/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/java/graalvm-ce-java17-22.3.2</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure><p>在命令行终端输入 <code>java -version</code> 命令，验证 JDK 环境是否为 GraalVM 提供的。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-72.png"></p><div class="admonition note"><p class="admonition-title">提示</p><p>上述配置 GraalVM 环境变量的方式，与平时配置 OpenJDK 或者 Oracle JDK 的环境变量并没有任何区别。</p></div><h4 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h4><p>安装 Native Image 工具，用于编译生成原生镜像，安装方式分为在线安装和离线安装两种，如下所示：</p><ul><li>网络环境好，可以选择在线安装 Native Image</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gu install native-image</span><br></pre></td></tr></tbody></table></figure><ul><li>网络环境不好，可以使用上面下载好的 Native Image Jar 包（如 <code>native-image-installable-xxxx.jar</code>）进行离线安装 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gu install --file native-image-installable-svm-java17-linux-amd64-22.3.3.jar</span><br></pre></td></tr></tbody></table></figure><ul><li>验证工具的安装结果 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">native-image --<span class="built_in">help</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>更多关于 Native Image 的安装说明，可以参考 <a href="https://www.graalvm.org/latest/reference-manual/native-image/">GraalVM 官方文档</a>。</p></div><h3 id="编译原生镜像"><a href="#编译原生镜像" class="headerlink" title="编译原生镜像"></a>编译原生镜像</h3><p>本章节完整的案例代码可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-18</code>。</p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建普通 Maven 项目，编写 <code>Main</code> 主类</p><ul><li>使用 <code>mvn clean package</code> 命令进行打包</li><li>使用 <code>java -jar xxx.jar</code> 命令确认 Jar 包是否可以执行</li><li>若 Jar 包不能正常执行，则需要通过 Maven 插件指定主类的全类名，如下所示：</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.clay.MainApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="编译镜像"><a href="#编译镜像" class="headerlink" title="编译镜像"></a>编译镜像</h4><p>在命令行终端使用 <code>native-image</code> 工具编译原生镜像（二进制可执行文件），如下所示：</p><ul><li>第一种编译方式 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只编译某个类，该类必须有 main 方法，否则无法编译（下面的 classes 目录一般是在 Maven 项目编译生成的 target 目录下）</span></span><br><span class="line">native-image -cp classes com.clay.boot.MainApplication -o graalvm-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行生成的原生镜像（二进制可执行文件）</span></span><br><span class="line">./graalvm-demo</span><br></pre></td></tr></tbody></table></figure><ul><li>第二种编译方式 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从主类开始，编译整个 Jar 包（下面的 Jar 包一般是在 Maven 项目编译生成的 target 目录下）</span></span><br><span class="line">native-image -cp spring-boot3-18-1.0.jar com.clay.boot.MainApplication -o spring-boot3-18</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行生成的原生镜像（二进制可执行文件）</span></span><br><span class="line">./spring-boot3-18</span><br></pre></td></tr></tbody></table></figure><h2 id="Windows-平台-编译原生镜像"><a href="#Windows-平台-编译原生镜像" class="headerlink" title="Windows 平台 编译原生镜像"></a>Windows 平台 编译原生镜像</h2><p>在 Windows 平台，使用 GraalVM 编译原生镜像，需要提前安装 GraalVM 和 Visual Studio。</p><h3 id="GraalVM-安装"><a href="#GraalVM-安装" class="headerlink" title="GraalVM 安装"></a>GraalVM 安装</h3><h4 id="下载软件-1"><a href="#下载软件-1" class="headerlink" title="下载软件"></a>下载软件</h4><p>根据开发平台和 JDK 版本，在 <a href="https://github.com/graalvm/graalvm-ce-builds/releases/">GraalVM GitHub Releases</a> 页面上下载 GraalVM 与 Native Image 的软件包（如下图）。值得一提的是，GraalVM 有两种版本，分别是社区版和商业版，开发环境一般使用社区版即可。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-65.png"></p><p><img data-src="../../../asset/2023/08/spring-boot3-study-64.png"></p><h4 id="配置环境-1"><a href="#配置环境-1" class="headerlink" title="配置环境"></a>配置环境</h4><p>解压 GraalVM 的软件包（如 <code>graalvm-ce-java17-windows-amd64-22.3.3.zip</code>），然后添加或更改系统环境变量 <code>JAVA_HOME</code> 与 <code>Path</code>，其中 <code>JAVA_HOME</code> 指向 GraalVM 的解压目录，<code>PATH</code> 则指向 GraalVM 的 <code>bin</code> 目录路径。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-68.png"></p><p><img data-src="../../../asset/2023/08/spring-boot3-study-69.png"></p><p>在 CMD 窗口输入 <code>java -version</code> 命令，验证 JDK 环境是否为 GraalVM 提供的。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-66.png"></p><div class="admonition note"><p class="admonition-title">提示</p><p>上述配置 GraalVM 环境变量的方式，与平时配置 OpenJDK 或者 Oracle JDK 的环境变量并没有任何区别。</p></div><h4 id="安装工具-1"><a href="#安装工具-1" class="headerlink" title="安装工具"></a>安装工具</h4><p>安装 Native Image 工具，用于编译生成原生镜像，安装方式分为在线安装和离线安装两种，如下所示：</p><ul><li>网络环境好，可以选择在线安装 Native Image</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gu install native-image</span><br></pre></td></tr></tbody></table></figure><ul><li>网络环境不好，可以使用上面下载好的 Native Image Jar 包（如 <code>native-image-installable-xxxx.jar</code>）进行离线安装 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gu install --file native-image-installable-svm-java17-windows-amd64-22.3.3.jar</span><br></pre></td></tr></tbody></table></figure><ul><li>验证工具的安装结果 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">native-image --<span class="built_in">help</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>更多关于 Native Image 的安装说明，可以参考 <a href="https://www.graalvm.org/latest/reference-manual/native-image/">GraalVM 官方文档</a>。</p></div><h3 id="Visual-Studio-安装"><a href="#Visual-Studio-安装" class="headerlink" title="Visual Studio 安装"></a>Visual Studio 安装</h3><p>安装 Visual Studio 的目的是为了使用 VS 提供的工具链编译 C/C++ 代码。值得一提的是，可以使用 MinGW、Cygwin 等编译工具替代 Visual Studio。</p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><div class="admonition note"><p class="admonition-title">Visual Studio 安装教程</p><ul><li>Visual Studio <a href="/posts/71979ec9.html">在线安装教程</a></li><li> Visual Studio <a href="/posts/f201bf82.html">离线安装教程</a></li></ul></div><p>在 Visual Studio 安装时，一般选择安装 <code>Microsoft.VisualStudio.Workload.NativeDesktop</code>、<code>Microsoft.VisualStudio.Workload.Universal</code> 这两大组件即可，分别对应下图红框内的组件。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-60.png"></p><p>语言包必须选择 <code>英语</code>，不能选择中文，否则在 GraalVM 编译原生镜像时，可能会出现各种莫名奇妙的问题。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-61.png"></p><p>安装步骤完成后，如果使用管理员身份可以正常运行 <code>x64 Native Tools Command Prompt for VS 20xx</code> 工具，则说明 Visual Studio 安装成功。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-62.png"></p><h3 id="编译原生镜像-1"><a href="#编译原生镜像-1" class="headerlink" title="编译原生镜像"></a>编译原生镜像</h3><p>本章节完整的案例代码可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-18</code>。</p><h4 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建普通 Maven 项目，编写 <code>Main</code> 主类</p><ul><li>使用 <code>mvn clean package</code> 命令进行打包</li><li>使用 <code>java -jar xxx.jar</code> 命令确认 Jar 包是否可以执行</li><li>若 Jar 包不能正常执行，则需要通过 Maven 插件指定主类的全类名，如下所示：</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.clay.MainApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="编译镜像-1"><a href="#编译镜像-1" class="headerlink" title="编译镜像"></a>编译镜像</h4><p>运行 Visual Studio 的 <code>x64 Native Tools Command Prompt for VS 20xx</code> 工具，使用 <code>native-image</code> 工具编译原生镜像（二进制可执行文件），如下所示：</p><ul><li>第一种编译方式 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只编译某个类，该类必须有 main 方法，否则无法编译（下面的 classes 目录一般是在 Maven 项目编译生成的 target 目录下）</span></span><br><span class="line">native-image -cp classes com.clay.boot.MainApplication -o graalvm-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行生成的原生镜像（二进制可执行文件）</span></span><br><span class="line">./graalvm-demo.exe</span><br></pre></td></tr></tbody></table></figure><ul><li>第二种编译方式 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从主类开始，编译整个 Jar 包（下面的 Jar 包一般是在 Maven 项目编译生成的 target 目录下）</span></span><br><span class="line">native-image -cp spring-boot3-18-1.0.jar com.clay.boot.MainApplication -o spring-boot3-18</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行生成的原生镜像（二进制可执行文件）</span></span><br><span class="line">./spring-boot3-18.exe</span><br></pre></td></tr></tbody></table></figure><h2 id="SpringBoot-编译原生镜像"><a href="#SpringBoot-编译原生镜像" class="headerlink" title="SpringBoot 编译原生镜像"></a>SpringBoot 编译原生镜像</h2><p>这里将演示 SpringBoot 项目如何使用 GraaVM 编译生成原生镜像，本章节完整的案例代码可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-19</code>。</p><div class="admonition warning"><p class="admonition-title">特别注意</p><p>在执行以下步骤之前，必须确保在 Windows/Linux 平台配置好了 GraalVM 编译所需要的环境，包括 GraalVM 安装、Visual Studio 安装或者 GCC 安装等。</p></div><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><ul><li>添加 GraalVM 编译插件和 SpringBoot 打包插件的依赖 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.graalvm.buildtools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>native-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编译镜像-2"><a href="#编译镜像-2" class="headerlink" title="编译镜像"></a>编译镜像</h3><ul><li>第一步：运行 Maven 的打包命令 <code>mvn clean package</code></li></ul><p><img data-src="../../../asset/2023/08/spring-boot3-study-77.png"></p><ul><li>第二步：运行 AOT 的提前处理命令 <code>mvn spring-boot:process-aot</code></li></ul><p><img data-src="../../../asset/2023/08/spring-boot3-study-75.png"></p><ul><li>第三步：运行 Native Image 的编译命令 <code>mvn -Pnative native:build</code>，其中的 <code>-Pnative</code> 表示激活 <code>native</code> 环境的 Profile 配置文件，建议都带上这参数进行编译</li></ul><p><img data-src="../../../asset/2023/08/spring-boot3-study-76.png"></p><h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><p>SpringBoot 应用成功编译原生镜像后，在项目的 <code>target</code> 目录下，可以看到编译生成的原生镜像（二进制可执行文件）。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-78.png"></p><p>在项目的 <code>target</code> 目录下，直接运行 <code>./spring-boot3-19.exe</code> 就可以快速启动镜像，观察可以发现应用的整个启动过程仅仅耗费 0.137 秒。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v3.0.5)</span><br><span class="line"></span><br><span class="line">2023-08-30T22:03:53.297+08:00  INFO 41976 --- [           main] com.clay.boot.MainApplication            : Starting AOT-processed MainApplication using Java 17.0.8 with PID 41976</span><br><span class="line">2023-08-30T22:03:53.298+08:00  INFO 41976 --- [           main] com.clay.boot.MainApplication            : No active profile set, falling back to 1 default profile: "default"</span><br><span class="line">2023-08-30T22:03:53.339+08:00  INFO 41976 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2023-08-30T22:03:53.342+08:00  INFO 41976 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2023-08-30T22:03:53.342+08:00  INFO 41976 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.7]</span><br><span class="line">2023-08-30T22:03:53.357+08:00  INFO 41976 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2023-08-30T22:03:53.357+08:00  INFO 41976 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 59 ms</span><br><span class="line">2023-08-30T22:03:53.400+08:00  INFO 41976 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''</span><br><span class="line">2023-08-30T22:03:53.401+08:00  INFO 41976 --- [           main] com.clay.boot.MainApplication            : Started MainApplication in 0.137 seconds (process running for 0.15)</span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Windows-平台"><a href="#Windows-平台" class="headerlink" title="Windows 平台"></a>Windows 平台</h3><h4 id="编译原生镜像失败"><a href="#编译原生镜像失败" class="headerlink" title="编译原生镜像失败"></a>编译原生镜像失败</h4><blockquote><p>问题描述：GraalVM 编译生成原生镜像时，可能出现如下各种错误</p></blockquote><ul><li>出现乱码</li><li>出现 <code>cl.exe</code> 找不到错误</li><li>提示 <code>no include path set</code></li><li>提示 <code>fatal error LNK1104: cannot open file 'LIBCMT.lib'</code></li><li>提示 <code>LINK : fatal error LNK1104: cannot open file 'kernel32.lib'</code></li><li>提示各种其他找不到的内容</li></ul><blockquote><p>解决方案：修改三个环境变量：<code>Path</code>、<code>INCLUDE</code>、<code>lib</code>，<strong>请自行根据 Visual Studio 的实际安装路径来更改环境变量的值</strong></p></blockquote><ul><li><code>PATH</code> 环境变量添加如下值：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\bin\Hostx64\x64</span><br></pre></td></tr></tbody></table></figure><ul><li>新建 <code>INCLUDE</code> 环境变量，值为：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include;C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\winrt</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/08/spring-boot3-study-74.png"></p><ul><li>新建 <code>lib</code> 环境变量，值为：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\lib\x64;C:\Program Files (x86)\Windows Kits\10\Lib\10.0.19041.0\um\x64;C:\Program Files (x86)\Windows Kits\10\Lib\10.0.19041.0\ucrt\x64</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/08/spring-boot3-study-73.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍 SpringBoot 3 如何使用 AOT 技术，包括 Windows 和 Linux 平台使用 GraalVM 编译原生镜像。</summary>
    
    
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Git &amp; GitHub 开发随笔</title>
    <link href="https://www.techgrow.cn/posts/d09e2a40.html"/>
    <id>https://www.techgrow.cn/posts/d09e2a40.html</id>
    <published>2023-08-22T15:12:43.000Z</published>
    <updated>2023-08-22T15:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><h3 id="Emoji-使用说明"><a href="#Emoji-使用说明" class="headerlink" title="Emoji 使用说明"></a>Emoji 使用说明</h3><p>不经意发现在大神的 GitHub 项目上，Git 的提交信息竟然有 Emoji 前缀，相当鹤立鸡群、别具一格，感觉挺有趣的。个人认为这样做有三点好处，后两点尤为重要：</p><ul><li>Emoji 比较呆萌，能美化提交记录和 GitHub 页面；</li><li>Emoji 作为标签，能很好的对提交记录分门别类，方便整理；</li><li>Emoji 蕴含的丰富语义和情绪，能提高提交信息的可读性、可理解性，增强提交历史的阅读体验；</li></ul><span id="more"></span><p><img data-src="../../../asset/2023/08/git-notes-1.png"></p><p>Emoji 的用法很简单，在 <code>git commit</code> 时如下书写提交信息，用 <code>:smile:</code> 即可插入一个笑脸 Emoji：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">':smile: 重构代码'</span></span><br></pre></td></tr></tbody></table></figure><p>Emoji 除了可以在 Git 提交时使用，还可以在 README.md 、GitHub Issues 和 GitHub Wiki 中直接使用 Emoji。这里整理出常用的 Emoji 列表：</p><p><img data-src="../../../asset/2023/08/git-emoji.png"></p><h3 id="Emoji-资源整理"><a href="#Emoji-资源整理" class="headerlink" title="Emoji 资源整理"></a>Emoji 资源整理</h3><ul><li><a href="https://gitmoji.dev/">Git Emoji 指南</a></li><li><a href="https://www.cnblogs.com/trigger-cn/p/16976232.html">Git Emoji 表情合集</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Git、GitHub 日常使用的笔记。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="版本控制" scheme="https://www.techgrow.cn/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 3 进阶教程之一整合 Prometheus</title>
    <link href="https://www.techgrow.cn/posts/1b2af7f9.html"/>
    <id>https://www.techgrow.cn/posts/1b2af7f9.html</id>
    <published>2023-08-17T15:12:43.000Z</published>
    <updated>2023-08-20T15:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/1b2af7f9.html">SpringBoot 3 进阶教程之一整合 Prometheus</a></li><li><a href="/posts/885fde15.html">SpringBoot 3 进阶教程之二 GraalVM 与 AOT</a></li><li><a href="/posts/2cc2991f.html">SpringBoot 3 进阶教程之三整合 Spring Security</a></li><li><a href="/posts/308cedc0.html">SpringBoot 3 进阶教程之四自定义 Starter</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 SpringBoot 3 如何整合 Actuator、Prometheus 与 Grafana，实现微服务应用的监控。</p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/">Spring Boot Actuator Web API 官方文档</a></li></ul><h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><h3 id="可观测性"><a href="#可观测性" class="headerlink" title="可观测性"></a>可观测性</h3><p>可观测性 (Observability) 一般是指对线上应用进行观测、监控、预警等，包括的详细内容如下：</p><ul><li>健康状况：组件状态、存活状态等，属于 Health 范畴</li><li>运行指标：CPU、内存、垃圾回收、吞吐量、响应成功率等，属于 Metrics 范畴</li><li>链路追踪</li><li>……</li></ul><span id="more"></span><h2 id="Actuator-整合"><a href="#Actuator-整合" class="headerlink" title="Actuator 整合"></a>Actuator 整合</h2><div class="admonition note"><p class="admonition-title">提示</p><p>本章节完整的案例代码可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-17</code>。</p></div><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露所有端点信息</span></span><br><span class="line"><span class="string">management.endpoints.enabled-by-default=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以Web方式暴露</span></span><br><span class="line"><span class="string">management.endpoints.web.exposure.include=*</span></span><br></pre></td></tr></tbody></table></figure><h3 id="访问端点"><a href="#访问端点" class="headerlink" title="访问端点"></a>访问端点</h3><p>SpringBoot 应用正常启动后，通过以下路径可以获取常用的端点信息。</p><ul><li><code>http://127.0.0.1:8080/actuator</code>：展示出所有可以用的监控端点</li><li><code>http://127.0.0.1:8080/actuator/beans</code></li><li><code>http://127.0.0.1:8080/actuator/configprops</code></li><li><code>http://127.0.0.1:8080/actuator/metrics</code></li><li><code>http://127.0.0.1:8080/actuator/metrics/jvm.gc.pause</code></li><li><code>http://127.0.0.1:8080/actuator/endpointName/detailPath</code></li></ul><h2 id="端点进阶使用"><a href="#端点进阶使用" class="headerlink" title="端点进阶使用"></a>端点进阶使用</h2><h3 id="常用端点"><a href="#常用端点" class="headerlink" title="常用端点"></a>常用端点</h3><div class="admonition note"><p class="admonition-title">提示</p><p>下述的所有端点信息，都可以使用 <code>http://ip:port/actuator/xxx</code> 的路径进行访问，如 <code>http://ip:port/actuator/health</code>。</p></div><table><thead><tr><th>ID</th><th> 描述</th></tr></thead><tbody><tr><td> auditevents</td><td> 暴露当前应用程序的审核事件信息。需要一个 <code>AuditEventRepository</code> 组件。</td></tr><tr><td>beans</td><td> 显示应用程序中所有 Spring Bean 的完整列表。</td></tr><tr><td>caches</td><td> 暴露可用的缓存。</td></tr><tr><td>conditions</td><td> 显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td></tr><tr><td>configprops</td><td> 显示所有 <code>@ConfigurationProperties</code> 的配置信息。</td></tr><tr><td>env</td><td> 暴露 Spring 的属性 <code>ConfigurableEnvironment</code></td></tr><tr><td>flyway</td><td> 显示已应用的所有 Flyway 数据库迁移。需要一个或多个 Flyway 组件。</td></tr><tr><td>health</td><td> 显示应用程序运行状况信息。</td></tr><tr><td>httptrace</td><td> 显示 HTTP 跟踪信息（默认情况下，最近 100 个 HTTP 请求 / 响应）。需要一个 <code>HttpTraceRepository</code> 组件。</td></tr><tr><td>info</td><td> 显示应用程序信息。</td></tr><tr><td>integrationgraph</td><td> 显示 Spring <code>integrationgraph</code>。需要依赖 <code>spring-integration-core</code>。</td></tr><tr><td>loggers</td><td> 显示和修改应用程序中日志的配置。</td></tr><tr><td>liquibase</td><td> 显示已应用的所有 Liquibase 数据库迁移。需要一个或多个 Liquibase 组件。</td></tr><tr><td>metrics</td><td> 显示当前应用程序的 “指标” 信息。</td></tr><tr><td>mappings</td><td> 显示所有 <code>@RequestMapping</code> 路径列表。</td></tr><tr><td>scheduledtasks</td><td> 显示应用程序中的计划任务。</td></tr><tr><td>sessions</td><td> 允许从 Spring Session 支持的会话存储中检索和删除用户会话。需要使用 Spring Session 的基于 Servlet 的 Web 应用程序。</td></tr><tr><td>shutdown</td><td> 使应用程序正常关闭。默认禁用。</td></tr><tr><td>startup</td><td> 显示由 <code>ApplicationStartup</code> 收集的启动步骤数据。需要使用 SpringApplication 配置 <code>BufferingApplicationStartup</code>。</td></tr><tr><td>threaddump</td><td> 执行线程转储。</td></tr><tr><td>heapdump</td><td> 返回 <code>hprof</code> 堆转储文件。</td></tr><tr><td>jolokia</td><td> 通过 HTTP 暴露 JMX Bean（需要引入 Jolokia，不适用于 WebFlux）。需要引入依赖 <code>jolokia-core</code>。</td></tr><tr><td>logfile</td><td> 返回日志文件的内容（如果已设置 <code>logging.file.name</code> 或 <code>logging.file.path</code> 属性）。支持使用 HTTP <code>Range</code> 标头来检索部分日志文件的内容。</td></tr><tr><td>prometheus</td><td> 以 Prometheus 服务器可以抓取的格式公开指标。需要依赖 <code>micrometer-registry-prometheus</code>。</td></tr><tr><td>threaddump</td><td> 显示 JVM 的所有线程信息</td></tr><tr><td> heapdump</td><td> 将 JVM 的堆内存导出为文件</td></tr><tr><td> metrics</td><td> 显示应用程序的度量指标信息，例如 CPU 使用率、内存使用率、请求次数等，如 <code>/actuator/metrics/system.cpu.usage</code></td></tr></tbody></table><h3 id="定制端点"><a href="#定制端点" class="headerlink" title="定制端点"></a>定制端点</h3><p>定制端点分为两种：</p><ul><li><code>HealthEndpoint (健康监控)</code>： 返回存活、死亡</li><li><code>MetricsEndpoint (指标监控)</code>： 返回次数、成功率 …</li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>本章节完整的案例代码可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-17</code>。</p></div><h4 id="定制-HealthEndpoint"><a href="#定制-HealthEndpoint" class="headerlink" title="定制 HealthEndpoint"></a>定制 HealthEndpoint</h4><div class="admonition note"><p class="admonition-title">提示</p><p>这里的案例，主要用于演示如何通过定制 HealthEndpoint 来监控自定义组件的运行状况。</p></div><ul><li>添加配置，显示详细的健康信息 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露所有端点信息</span></span><br><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 以Web方式暴露</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 总是显示详细健康信息，包括显示每个模块的状态信息</span></span><br><span class="line"><span class="meta">management.endpoint.health.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br></pre></td></tr></tbody></table></figure><ul><li>自定义被监控的组件 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBizComponent</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查自定义组件的健康状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 业务代码判断当前组件是否存活</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>第一种定制方式：实现 <code>HealthIndicator</code> 接口，建议这里实现类的类名以 <code>HealthIndicator</code> 结尾。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBizHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyBizComponent bizComponent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 检查自定义组件是否存活</span></span><br><span class="line">        <span class="keyword">boolean</span> check = bizComponent.check();</span><br><span class="line">        <span class="keyword">if</span> (check) {</span><br><span class="line">            <span class="comment">// 存活</span></span><br><span class="line">            <span class="keyword">return</span> Health.up()</span><br><span class="line">                .withDetail(<span class="string">"msg"</span>, <span class="string">"Servcie online"</span>)</span><br><span class="line">                .withDetail(<span class="string">"code"</span>, <span class="string">"200"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 下线</span></span><br><span class="line">            <span class="keyword">return</span> Health.down()</span><br><span class="line">                .withException(<span class="keyword">new</span> RuntimeException())</span><br><span class="line">                .withDetail(<span class="string">"msg"</span>, <span class="string">"Servcie offline"</span>)</span><br><span class="line">                .withDetail(<span class="string">"code"</span>, <span class="string">"500"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>第二种定制方式：继承 <code>MyHealthIndicator</code> 类，建议这里继承类的类名以 <code>HealthIndicator</code> 结尾。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBizHealthIndicator</span> <span class="keyword">extends</span> <span class="title">AbstractHealthIndicator</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyBizComponent bizComponent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        Map&lt;String, Object&gt; details = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 检查自定义组件是否存活</span></span><br><span class="line">        <span class="keyword">boolean</span> check = bizComponent.check();</span><br><span class="line">        <span class="keyword">if</span> (check) {</span><br><span class="line">            <span class="comment">// 存活</span></span><br><span class="line">            builder.status(Status.UP);</span><br><span class="line">            details.put(<span class="string">"msg"</span>, <span class="string">"Servcie online"</span>);</span><br><span class="line">            details.put(<span class="string">"code"</span>, <span class="number">200</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 下线</span></span><br><span class="line">            builder.status(Status.DOWN);</span><br><span class="line">            details.put(<span class="string">"msg"</span>, <span class="string">"Servcie offline"</span>);</span><br><span class="line">            details.put(<span class="string">"code"</span>, <span class="number">500</span>);</span><br><span class="line">        }</span><br><span class="line">        builder.withDetails(details);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>最后浏览器访问 <code>http://127.0.0.1:8080/actuator/health</code> 后，显示的健康监控信息如下：</li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">  <span class="attr">"components"</span>: {</span><br><span class="line">    <span class="attr">"diskSpace"</span>: {</span><br><span class="line">      <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">      <span class="attr">"details"</span>: {</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">26897127</span>,</span><br><span class="line">        <span class="attr">"free"</span>: <span class="number">18168525</span>,</span><br><span class="line">        <span class="attr">"threshold"</span>: <span class="number">104857</span>,</span><br><span class="line">        <span class="attr">"exists"</span>: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"myBiz"</span>: {</span><br><span class="line">      <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">      <span class="attr">"details"</span>: {</span><br><span class="line">        <span class="attr">"msg"</span>: <span class="string">"Servcie online"</span>,</span><br><span class="line">        <span class="attr">"code"</span>: <span class="string">"200"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"ping"</span>: {</span><br><span class="line">      <span class="attr">"status"</span>: <span class="string">"UP"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="定制-MetricsEndpoint"><a href="#定制-MetricsEndpoint" class="headerlink" title="定制 MetricsEndpoint"></a>定制 MetricsEndpoint</h4><div class="admonition note"><p class="admonition-title">提示</p><p>这里的案例，主要用于演示如何通过定制 MetricsEndpoint 来统计业务方法执行的次数。</p></div><ul><li>添加配置 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露所有端点信息</span></span><br><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 以Web方式暴露</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></tbody></table></figure><ul><li>控制器类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBizController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyBizService myBizService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/process")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>{</span><br><span class="line">        myBizService.process();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>服务类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBizService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Counter counter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动注入 MeterRegistry，用于保存和统计所有自定义指标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBizService</span><span class="params">(MeterRegistry meterRegistry)</span> </span>{</span><br><span class="line">        <span class="comment">// 获取一个名称是 myBizCounter 的计数器</span></span><br><span class="line">        counter = meterRegistry.counter(<span class="string">"myBizCounter"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理业务逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 统计业务方法被调用的次数</span></span><br><span class="line">        counter.increment();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>最后手动多次调用接口，浏览器访问 <code>http://127.0.0.1:8080/actuator/metrics/myBizCounter</code> 后，显示的指标监控信息如下：</li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"myBizCounter"</span>,</span><br><span class="line">  <span class="attr">"measurements"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"statistic"</span>: <span class="string">"COUNT"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="number">4.0</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"availableTags"</span>: [</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Prometheus-整合"><a href="#Prometheus-整合" class="headerlink" title="Prometheus 整合"></a>Prometheus 整合</h2><p>这里主要介绍 SpringBoot Actuator 如何整合 Prometheus，并基于 Grafana 实现微服务应用的监控，整体工作流程如下图所示：</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-44.png"></p><h3 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h3><div class="admonition note"><p class="admonition-title">提示</p><p>本章节完整的案例代码可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-17</code>。</p></div><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>推荐使用 Docker 快速安装 Prometheus 和 Grafana，详细的安装步骤如下。</p><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><ul><li>创建 <code>prometheus.yml</code> 配置文件，用于配置 Prometheus 的监控任务 </li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">'localhost:9090'</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>创建 <code>docker-compose.yml</code> 配置文件，用于 Docker Compose 管理容器 </li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.9'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9090:9090"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3000:3000"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">backend</span></span><br></pre></td></tr></tbody></table></figure><h4 id="启动-Docker-容器"><a href="#启动-Docker-容器" class="headerlink" title="启动 Docker 容器"></a>启动 Docker 容器</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并启动容器</span></span><br><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的运行状态</span></span><br><span class="line">docker compose ps -a</span><br></pre></td></tr></tbody></table></figure><h4 id="测试-Docker-容器"><a href="#测试-Docker-容器" class="headerlink" title="测试 Docker 容器"></a>测试 Docker 容器</h4><p>浏览器访问以下应用的控制台管理界面，若能正常访问，则说明对应的 Docker 容器正常运行（<strong>请自行更改容器的 IP 地址</strong>）</p><table><thead><tr><th>应用</th><th>访问地址</th></tr></thead><tbody><tr><td> Grafana</td><td><code>http://192.168.1.130:3000</code></td></tr><tr><td>Prometheus</td><td><code>http://192.168.1.130:9090</code></td></tr></tbody></table><div class="admonition note"><p class="admonition-title">Grafana 默认登录账号</p><p>Grafana 默认的用户名称是 <code>admin</code>，用户密码是 <code>admin</code>。值得一提的是，首次登录 Grafana 会提示更改用户名和密码。</p></div><h3 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h3><p>SpringBoot Actuator 整合 Prometheus 的步骤如下。</p><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Actuator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Prometheus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h4><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露所有端点信息</span></span><br><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 以Web方式暴露</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></tbody></table></figure><h4 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h4><p>启动 SpringBoot 应用，浏览器访问 <code>http://127.0.0.1:8080/actuator/prometheus</code>，若可以返回 Prometheus 格式的所有指标信息（如下），则说明 SpringBoot Actuator 整合 Prometheus 成功。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># HELP jvm_memory_usage_after_gc_percent The percentage of long-lived heap pool used after the last GC event, in the range [0..1]</span><br><span class="line"># TYPE jvm_memory_usage_after_gc_percent gauge</span><br><span class="line">jvm_memory_usage_after_gc_percent{area="heap",pool="long-lived",} 0.0</span><br><span class="line"># HELP executor_completed_tasks_total The approximate total number of tasks that have completed execution</span><br><span class="line"># TYPE executor_completed_tasks_total counter</span><br><span class="line">executor_completed_tasks_total{name="applicationTaskExecutor",} 0.0</span><br><span class="line"># HELP http_server_requests_active_seconds_max  </span><br><span class="line"># TYPE http_server_requests_active_seconds_max gauge</span><br><span class="line">http_server_requests_active_seconds_max{exception="none",method="GET",outcome="SUCCESS",status="200",uri="UNKNOWN",} 0.0038188</span><br><span class="line"># HELP http_server_requests_active_seconds  </span><br><span class="line"># TYPE http_server_requests_active_seconds summary</span><br><span class="line">http_server_requests_active_seconds_active_count{exception="none",method="GET",outcome="SUCCESS",status="200",uri="UNKNOWN",} 1.0</span><br><span class="line">http_server_requests_active_seconds_duration_sum{exception="none",method="GET",outcome="SUCCESS",status="200",uri="UNKNOWN",} 0.00379906</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><h3 id="Prometheus-拉取数据"><a href="#Prometheus-拉取数据" class="headerlink" title="Prometheus 拉取数据"></a>Prometheus 拉取数据</h3><h4 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h4><p>更改上述的 <code>prometheus.yml</code> 配置文件，添加 SpringBoot 应用的监控信息，完整的配置示例如下（<strong>请自行更改 SpringBoot 应用的 IP 地址</strong>）：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">'localhost:9090'</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'spring-boot-actuator-demo'</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">'/actuator/prometheus'</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">'192.168.2.130:8080'</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">nodename:</span> <span class="string">'actuator-demo'</span></span><br></pre></td></tr></tbody></table></figure><h4 id="重启-Docker-容器"><a href="#重启-Docker-容器" class="headerlink" title="重启 Docker 容器"></a>重启 Docker 容器</h4><p>重启 Prometheus 的 Docker 容器，使配置文件的更改生效。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker retart prometheus</span><br></pre></td></tr></tbody></table></figure><h4 id="验证配置文件生效"><a href="#验证配置文件生效" class="headerlink" title="验证配置文件生效"></a>验证配置文件生效</h4><p>浏览器打开 Prometheus 的控制台管理界面，如 <code>http://192.168.1.130:9090</code>。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-67.png"></p><p>菜单栏点击 <code>Status</code> -&gt; <code>Targets</code>，查看各个监控任务的运行状态。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-45.png"></p><h3 id="Grafana-添加监控面板"><a href="#Grafana-添加监控面板" class="headerlink" title="Grafana 添加监控面板"></a>Grafana 添加监控面板</h3><h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><p>浏览器打开 Grafana 的控制台管理界面，如 <code>http://192.168.1.130:3000</code>，默认的登录账号和密码都是 <code>admin</code>。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-51.png"></p><p>左侧菜单栏点击 <code>Connections</code> -&gt; <code>Data sources</code> -&gt; <code>Add data source</code> -&gt; 选择 <code>Prometheus</code> -&gt; 填写 Prometheus 的服务器地址（可以使用 Docker 容器的名称替代服务器的 IP） -&gt; 点击 <code>Save &amp; test</code> 按钮。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-46.png"></p><h4 id="添加监控面板"><a href="#添加监控面板" class="headerlink" title="添加监控面板"></a>添加监控面板</h4><p>在 Grafana 官方的 <a href="https://grafana.com/grafana/dashboards/">DashBoard 市场</a> 搜索一款合适的 SpringBoot 监控面板，记录下 DashBoard 的 ID 或者下载对应的 JSON 文件。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-47.png"></p><p>左侧菜单栏点击 <code>Dashboards</code> -&gt; <code>New</code> -&gt; <code>Import</code> -&gt; 填写 DashBoard 的 ID -&gt; 点击 <code>Load</code> 按钮。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-48.png"></p><p>数据源选择上面已经配置好的 <code>Prometheus</code>，点击 <code>Import</code> 按钮。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-49.png"></p><p>上述配置全部完成后，就可以在 Grafana 的 DashBoard 看到完整的 SpringBoot 应用监控信息，监控数据来自 Prometheus + Actuator。</p><p><img data-src="../../../asset/2023/08/spring-boot3-study-50.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍 SpringBoot 3 如何整合 Actuator 、Prometheus、Grafana 等内容。</summary>
    
    
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Debian 11 生产环境安装 Nginx</title>
    <link href="https://www.techgrow.cn/posts/cb193915.html"/>
    <id>https://www.techgrow.cn/posts/cb193915.html</id>
    <published>2023-08-16T11:50:21.000Z</published>
    <updated>2023-08-16T11:50:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux option 5.10.0-24-cloud-amd64 #1 SMP Debian 5.10.179-5 (2023-08-08) x86_64 GNU/Linux</span><br></pre></td></tr></tbody></table></figure><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装-Supervisor"><a href="#安装-Supervisor" class="headerlink" title="安装 Supervisor"></a>安装 Supervisor</h3><p>Supervisor 主要用于管理 Nginx 的开机自启动（带守护进程）。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="keyword"># yum</span> install<span class="params"> -y</span> supervisor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line"><span class="keyword"># systemctl</span> <span class="built_in">enable</span> supervisord</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="keyword"># systemctl</span> start supervisord</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line"><span class="keyword"># systemctl</span> status supervisord</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="创建-Nginx-用户和用户组"><a href="#创建-Nginx-用户和用户组" class="headerlink" title="创建 Nginx 用户和用户组"></a>创建 Nginx 用户和用户组</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换root用户</span></span><br><span class="line"><span class="keyword">$ sudo</span><span class="params"> -i</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建nginx用户组</span></span><br><span class="line"><span class="keyword"># groupadd</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建nginx用户（不允许远程登录）</span></span><br><span class="line"><span class="keyword"># useradd</span><span class="params"> -g</span> nginx nginx<span class="params"> -s</span> /bin/<span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="更改最大打开文件描述符数"><a href="#更改最大打开文件描述符数" class="headerlink" title="更改最大打开文件描述符数"></a>更改最大打开文件描述符数</h3><ul><li><a href="/posts/88a10b.html">本站教程</a></li></ul><h2 id="Nginx-编译安装"><a href="#Nginx-编译安装" class="headerlink" title="Nginx 编译安装"></a>Nginx 编译安装</h2><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建下载目录</span></span><br><span class="line"><span class="keyword"># mkdir</span><span class="params"> -p</span> /home/nginx/software</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="keyword"># cd</span> /home/nginx/software</span><br><span class="line"><span class="keyword"># wget</span> http://nginx.org/download/nginx-1.16.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="keyword"># tar</span><span class="params"> -xvf</span> nginx-1.16.0.tar.gz</span><br></pre></td></tr></tbody></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入下载目录</span></span><br><span class="line"><span class="keyword"># cd</span> /home/nginx/software/nginx-1.16.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖库</span></span><br><span class="line"><span class="keyword"># apt</span>-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev openssl libssl-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">./configure \<span class="params"></span></span><br><span class="line"><span class="params">  --user</span>=nginx \<span class="params"></span></span><br><span class="line"><span class="params">  --group</span>=nginx \<span class="params"></span></span><br><span class="line"><span class="params">  --prefix</span>=/usr/<span class="built_in">local</span>/nginx \<span class="params"></span></span><br><span class="line"><span class="params">  --with</span>-pcre \<span class="params"></span></span><br><span class="line"><span class="params">  --with</span>-http_v2_module \<span class="params"></span></span><br><span class="line"><span class="params">  --with</span>-http_ssl_module \<span class="params"></span></span><br><span class="line"><span class="params">  --with</span>-http_realip_module \<span class="params"></span></span><br><span class="line"><span class="params">  --with</span>-http_gzip_static_module \<span class="params"></span></span><br><span class="line"><span class="params">  --with</span>-http_stub_status_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="keyword"># make</span> &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份默认的配置文件</span></span><br><span class="line"><span class="keyword"># cd</span> /usr/<span class="built_in">local</span>/nginx/conf</span><br><span class="line"><span class="keyword"># cp</span> nginx.conf nginx.conf.default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件授权</span></span><br><span class="line"><span class="keyword"># chown</span><span class="params"> -R</span> nginx:nginx /usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></tbody></table></figure><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑nginx的配置文件</span></span><br><span class="line"><span class="keyword"># vim</span> /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">worker_processes  4;</span><br><span class="line">error_log  logs/error.<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验配置文件是否正确</span></span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -t</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放端口</span></span><br><span class="line"><span class="keyword"># firewall</span>-cmd<span class="params"> --zone</span>=public<span class="params"> --permanent</span><span class="params"> --add</span>-port=80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存防火墙配置</span></span><br><span class="line"><span class="keyword"># firewall</span>-cmd<span class="params"> --reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已开放的端口</span></span><br><span class="line"><span class="keyword"># firewall</span>-cmd<span class="params"> --list</span>-ports</span><br></pre></td></tr></tbody></table></figure><h2 id="Nginx-服务管理"><a href="#Nginx-服务管理" class="headerlink" title="Nginx 服务管理"></a>Nginx 服务管理</h2><h3 id="开机自启动-Nginx"><a href="#开机自启动-Nginx" class="headerlink" title="开机自启动 Nginx"></a>开机自启动 Nginx</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建nginx的supervistor配置文件</span></span><br><span class="line"><span class="keyword"># touch</span> /etc/supervisor/conf.d/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑nginx的supervistor配置文件</span></span><br><span class="line"><span class="keyword"># vim</span> /etc/supervisor/conf.d/nginx.conf</span><br><span class="line">[program:nginx]</span><br><span class="line">directory=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line"><span class="built_in">command</span>=/usr/<span class="built_in">local</span>/nginx/sbin/nginx<span class="params"> -g</span> <span class="string">'daemon off;'</span><span class="params"> -c</span> /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">user=root</span><br><span class="line">numprocs=1</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startretries=10</span><br><span class="line">process_name=%(program_name)s</span><br><span class="line">stdout_logfile_backups=5</span><br><span class="line">stdout_logfile_maxbytes=10MB</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/supervisor/nginx.<span class="built_in">log</span></span><br><span class="line">stderr_logfile_backups=5</span><br><span class="line">stderr_logfile_maxbytes=10MB</span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/supervisor/nginx-error.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的配置，主进程会以root用户运行，worker进程会以nginx用户运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载nginx的supervistor配置文件，会自动启动nginx服务</span></span><br><span class="line"><span class="keyword"># supervisorctl</span> reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx的运行状态</span></span><br><span class="line"><span class="keyword"># supervisorctl</span> status nginx</span><br><span class="line">nginx RUNNING   pid 9451, uptime 0:00:56     <span class="comment">#如果输出此日志信息，说明nginx启动成功，否则查看nginx的启动日志来排查问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问nginx</span></span><br><span class="line"><span class="keyword"># curl</span><span class="params"> -I</span><span class="params"> -X</span> GET 127.0.0.1:80</span><br></pre></td></tr></tbody></table></figure><h3 id="管理-Nginx-服务"><a href="#管理-Nginx-服务" class="headerlink" title="管理 Nginx 服务"></a>管理 Nginx 服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="keyword"># supervisorctl</span> stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="keyword"># supervisorctl</span> start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line"><span class="keyword"># supervisorctl</span> restart nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="keyword"># supervisorctl</span> status nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑更新nginx的配置文件</span></span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -s reload</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Nginx-配置文件概述"><a href="#Nginx-配置文件概述" class="headerlink" title="Nginx 配置文件概述"></a>Nginx 配置文件概述</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装目录：/usr/local/nginx</span><br><span class="line">配置文件：/usr/local/nginx/conf/nginx.conf</span><br><span class="line">错误日志：/usr/local/nginx/logs/error.log</span><br><span class="line">访问日志：/usr/local/nginx/logs/access.log</span><br><span class="line">nginx的supervistor配置文件：/etc/supervisor/conf.d/nginx.conf</span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.cn/post/7061998261904605214">详解 Debian 系统上如何编译安装 Nginx</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Debian 11 生产环境如何编译安装 Nginx。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Web服务器" scheme="https://www.techgrow.cn/tags/Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Debian" scheme="https://www.techgrow.cn/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>计算机类电子书资源整理</title>
    <link href="https://www.techgrow.cn/posts/f5d6bff2.html"/>
    <id>https://www.techgrow.cn/posts/f5d6bff2.html</id>
    <published>2023-08-15T13:23:30.000Z</published>
    <updated>2023-08-15T13:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="电子书资源网站"><a href="#电子书资源网站" class="headerlink" title="电子书资源网站"></a>电子书资源网站</h2><table><thead><tr><th>网站名称</th><th>网站链接</th><th>说明</th></tr></thead><tbody><tr><td> aibooks</td><td><a href="https://www.aibooks.cc/">https://www.aibooks.cc/</a></td><td></td></tr><tr><td>Java 菜市场 </td><td><a href="https://javaweb.shop/">https://javaweb.shop/</a></td><td></td></tr><tr><td>Z-Library</td><td><a href="https://singlelogin.re/">https://singlelogin.re/</a></td><td> 全球最大的免费电子书网站</td></tr><tr><td> kanshuy1234</td><td><a href="http://kanshuy1234.com/">http://kanshuy1234.com</a></td><td></td></tr></tbody></table><span id="more"></span><h2 id="电子书资源项目"><a href="#电子书资源项目" class="headerlink" title="电子书资源项目"></a>电子书资源项目</h2><table><thead><tr><th>项目名称</th><th>项目地址</th><th>说明</th></tr></thead><tbody><tr><td>最新 1500 多本计算机电子书免费下载 </td><td><a href="https://github.com/BitTigerInst/itdevbooks_pdf">https://github.com/BitTigerInst/itdevbooks_pdf</a></td><td></td></tr><tr><td> 超过 1000 本的计算机经典书籍、个人笔记资料以及本人在各平台发表文章中所涉及的资源等 </td><td><a href="https://github.com/forthespada/CS-Books">https://github.com/forthespada/CS-Books</a></td><td> 拓拔阿秀</td></tr><tr><td>经典编程书籍大全，涵盖：计算机系统与网络、系统架构、算法与数据结构、前后端开发等 </td><td><a href="https://github.com/imarvinle/awesome-cs-books">https://github.com/imarvinle/awesome-cs-books</a></td><td></td></tr><tr><td> 计算机类常用电子书，并且附带下载链接 </td><td><a href="https://github.com/cosen1024/awesome-cs-books">https://github.com/cosen1024/awesome-cs-books</a></td><td></td></tr><tr><td> 专门收集计算机领域经典书籍 </td><td><a href="https://github.com/Jackpopc/CS-Books-Store">https://github.com/Jackpopc/CS-Books-Store</a></td><td></td></tr><tr><td> 计算机体系结构与 C++ 书籍收集 </td><td><a href="https://github.com/zhangyachen/ComputerArchitectureAndCppBooks">https://github.com/zhangyachen/ComputerArchitectureAndCppBooks</a></td><td></td></tr><tr><td>Java 程序员必读书单，超 1000 本 PDF 电子书 </td><td><a href="https://github.com/itwanger/JavaBooks">https://github.com/itwanger/JavaBooks</a></td><td></td></tr></tbody></table><h2 id="电子书资源文章"><a href="#电子书资源文章" class="headerlink" title="电子书资源文章"></a>电子书资源文章</h2><table><thead><tr><th>文章标题</th><th>文章地址</th><th>说明</th></tr></thead><tbody><tr><td>计算机类电子书下载宝藏库 </td><td><a href="https://zhuanlan.zhihu.com/p/599899143">https://zhuanlan.zhihu.com/p/599899143</a></td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">本文主要整理计算机类的 PDF 电子书。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="生活随笔" scheme="https://www.techgrow.cn/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Debian 安装 MySQL 5.7</title>
    <link href="https://www.techgrow.cn/posts/24a08cfe.html"/>
    <id>https://www.techgrow.cn/posts/24a08cfe.html</id>
    <published>2023-08-12T13:25:21.000Z</published>
    <updated>2023-08-13T13:25:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 Debian 如何安装 MySQL 5.7 数据库，适用于 Debian 10 、Debian 11。</p><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td> Debian</td><td>11</td></tr><tr><td>MySQL</td><td>5.7.42</td></tr></tbody></table><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>更新系统软件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><ul><li>删除已安装的 MySQL</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看已安装的MySQL组件</span></span><br><span class="line">sudo dpkg-query -l | grep mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载已经安装的MySQL组件（保留配置文件，且不会删除依赖软件包）</span></span><br><span class="line">sudo apt-get remove xxxx</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL-服务安装"><a href="#MySQL-服务安装" class="headerlink" title="MySQL 服务安装"></a>MySQL 服务安装</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>在 <a href="https://downloads.mysql.com/archives/community/">MySQL 官网</a> 下载 5.7 版本的安装包，例如 <code>mysql-server_5.7.42-1debian10_amd64.deb-bundle.tar</code>，<a href="../../../asset/2023/08/debian-mysql-install-1.png">点击</a> 图解说明。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-server_5.7.42-1debian10_amd64.deb-bundle.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">tar -xvf mysql-server_5.7.42-1debian10_amd64.deb-bundle.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">rm -rf mysql-server_5.7.42-1debian10_amd64.deb-bundle.tar</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">兼容性说明</p><p>值得一提的是，MySQL 官网 5.7 版本只有 Debian 10 的，没有 Debian 11，但 Debian 11 可以直接使用 Debian 10 的安装包。</p></div><h3 id="依赖软件安装"><a href="#依赖软件安装" class="headerlink" title="依赖软件安装"></a>依赖软件安装</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install psmisc libaio1 libnuma1 libatomic1 libmecab2 perl</span><br></pre></td></tr></tbody></table></figure><h3 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a>MySQL 安装</h3><div class="admonition warning"><p class="admonition-title">特别注意</p><p>必须按照以下顺序依次安装各个 MySQL 软件包。</p></div><h4 id="安装组件"><a href="#安装组件" class="headerlink" title="安装组件"></a>安装组件</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-common_5.7.42-1debian10_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i libmysqlclient20_5.7.42-1debian10_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i libmysqlclient-dev_5.7.42-1debian10_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i libmysqld-dev_5.7.42-1debian10_amd64.deb</span><br></pre></td></tr></tbody></table></figure><h4 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-community-client_5.7.42-1debian10_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i mysql-client_5.7.42-1debian10_amd64.deb</span><br></pre></td></tr></tbody></table></figure><h4 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a>安装服务端</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装服务端，期间会提示输入密码，并确认密码</span></span><br><span class="line">sudo dpkg -i mysql-community-server_5.7.42-1debian10_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i mysql-server_5.7.42-1debian10_amd64.deb</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>如果在安装 MySQL 服务端的时候，提示缺少相关的依赖软件，那么可以执行 <code>sudo apt --fix-broken install</code> 命令修正安装过程。</p></div><h2 id="MySQL-服务管理"><a href="#MySQL-服务管理" class="headerlink" title="MySQL 服务管理"></a>MySQL 服务管理</h2><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">sudo systemctl status mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">sudo systemctl stop mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></tbody></table></figure><p>终端执行 <code>systemctl status mysql</code> 命令后，若输出以下的日志信息，则说明 MySQL 服务器正常运行。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">● mysql.service - MySQL Community Server</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Sat 2023-08-12 15:52:46 UTC; 33min ago</span><br><span class="line">    Process: 597 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class="line">    Process: 649 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 651 (mysqld)</span><br><span class="line">      Tasks: 27 (limit: 19018)</span><br><span class="line">     Memory: 219.9M</span><br><span class="line">        CPU: 1.639s</span><br><span class="line">     CGroup: /system.slice/mysql.service</span><br><span class="line">             └─651 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">Aug 12 15:52:45 uatoption01 systemd[1]: Starting MySQL Community Server...</span><br><span class="line">Aug 12 15:52:46 uatoption01 systemd[1]: Started MySQL Community Server.</span><br></pre></td></tr></tbody></table></figure><p>终端执行 <code>mysql -h localhost -u root -p</code> 命令，并输入密码后，若能登录 MySQL 数据库，则说明客户端成功连接 MySQL 服务器。</p><h2 id="MySQL-性能优化"><a href="#MySQL-性能优化" class="headerlink" title="MySQL 性能优化"></a>MySQL 性能优化</h2><h3 id="更改最大打开文件描述符数"><a href="#更改最大打开文件描述符数" class="headerlink" title="更改最大打开文件描述符数"></a>更改最大打开文件描述符数</h3><div class="admonition note"><p class="admonition-title">提示</p><p>关于更改最大打开文件描述符数的详细教程，可以看 <a href="/posts/88a10b.html">这里</a>。</p></div><h4 id="系统最大打开文件描述符数"><a href="#系统最大打开文件描述符数" class="headerlink" title="系统最大打开文件描述符数"></a>系统最大打开文件描述符数</h4><ul><li>查看限制 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n</span><br></pre></td></tr></tbody></table></figure><ul><li>更改配置 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步</span></span><br><span class="line">sudo vim /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">* soft nofile 1048576</span><br><span class="line">* hard nofile 1048576</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步</span></span><br><span class="line">sudo vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">fs.file-max = 1048576</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步（重启系统）</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></tbody></table></figure><ul><li>验证生效 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n</span><br><span class="line"></span><br><span class="line">sudo sysctl fs.file-max</span><br></pre></td></tr></tbody></table></figure><h4 id="MySQL-最大打开文件描述符数"><a href="#MySQL-最大打开文件描述符数" class="headerlink" title="MySQL 最大打开文件描述符数"></a>MySQL 最大打开文件描述符数</h4><ul><li>编辑 MySQL 系统服务的配置文件，更改 <code>LimitNOFILE</code> 的参数值 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/mysql.service</span><br><span class="line"></span><br><span class="line">LimitNOFILE=1048576</span><br></pre></td></tr></tbody></table></figure><ul><li>重载系统服务的配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure><ul><li>重启 MySQL 服务 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></tbody></table></figure><ul><li>验证生效，在输出结果中查看 <code>Max open files</code> 的显示值 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /proc/`pidof mysqld`/limits</span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="无法远程连接-MySQL"><a href="#无法远程连接-MySQL" class="headerlink" title="无法远程连接 MySQL"></a>无法远程连接 MySQL</h3><p>在默认情况下，MySQL 是不支持远程连接的，可以按照以下步骤实现远程连接。</p><blockquote><p>第一步，配置 MySQL 支持远程连接</p></blockquote><p>通过 <code>sudo netstat -anp|grep 3306</code> 命令查看 MySQL 占用的端口，可以得到以下信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      658/mysqld</span><br></pre></td></tr></tbody></table></figure><p>编辑 MySQL 的配置文件，将 <code>bind-address</code> 的配置内容注释掉，然后重启 MySQL 服务</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># bind-address = 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></tbody></table></figure><p>MySQL 服务重启后，再次执行 <code>sudo netstat -anp|grep 3306</code> 命令，可以得到以下信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      658/mysqld</span><br></pre></td></tr></tbody></table></figure><blockquote><p>第二步，创建新的用户，并授权用户远程访问特定的数据库</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'clay'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> my_db.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">'clay'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">授权 root 用户远程登录</p><ol><li>若希望授权 <code>root</code> 用户远程访问所有数据库（慎重考虑），可以执行以下 MySQL 命令。</li><li>值得一提的是，考虑到数据库安全问题，不建议授予 <code>root</code> 远程登录的权限，这可以降低数据库被攻击的风险。</li></ol></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'password'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">特别注意</p><p>按照上述步骤进行配置后，若 MySQL 依旧无法实现远程访问，那么请检查系统的防火墙是否开放了 <code>3306</code> 端口。</p></div><h3 id="MySQL-配置文件的位置"><a href="#MySQL-配置文件的位置" class="headerlink" title="MySQL 配置文件的位置"></a>MySQL 配置文件的位置</h3><p>MySQL 安装完成后，各个配置文件的位置如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PID 文件： /var/run/mysqld/mysqld.pid</span><br><span class="line">配置文件： /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">数据目录： /var/lib/mysql</span><br><span class="line">日志文件： /var/log/mysql/error.log</span><br><span class="line">服务启动脚本： /lib/systemd/system/mysql.service</span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/lanrenol/article/details/120668425">apt-get 卸载整理</a></li><li><a href="https://javascript.net.cn/articles/929">Debian 11 安装 MySQL 5.7</a></li><li><a href="https://zhuanlan.zhihu.com/p/630670161">Debian 下安装 MySQL 5.7/8.0</a></li><li><a href="https://blog.csdn.net/OOloveXX/article/details/102941481">MySQL 无法远程连接的问题分析及解决办法</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Debian 如何安装 MySQL 5.7，适用于 Debian 10、Debian 11。</summary>
    
    
    
    
    <category term="Debian" scheme="https://www.techgrow.cn/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 3 进阶教程之三整合 Spring Security</title>
    <link href="https://www.techgrow.cn/posts/2cc2991f.html"/>
    <id>https://www.techgrow.cn/posts/2cc2991f.html</id>
    <published>2023-08-11T15:12:43.000Z</published>
    <updated>2023-08-11T15:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/1b2af7f9.html">SpringBoot 3 进阶教程之一整合 Prometheus</a></li><li><a href="/posts/885fde15.html">SpringBoot 3 进阶教程之二 GraalVM 与 AOT</a></li><li><a href="/posts/2cc2991f.html">SpringBoot 3 进阶教程之三整合 Spring Security</a></li><li><a href="/posts/308cedc0.html">SpringBoot 3 进阶教程之四自定义 Starter</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://docs.spring.io/spring-security/reference/index.html">Spring Security 官方文档</a></li></ul><h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><h3 id="安全架构"><a href="#安全架构" class="headerlink" title="安全架构"></a>安全架构</h3><p>系统的安全架构有以下三大方面：</p><ul><li><code>认证 (Authentication)</code>: 登录系统，用户系统（解决你是谁的问题）</li><li><code>授权 (Authorization)</code>： 权限管理，用户授权（解决你能干什么的问题）</li><li><code>攻击防护</code><ul><li>XSS (Cross-site scripting)</li><li>CSRF (Cross-site request forgery)</li><li>CORS (Cross-Origin Resource Sharing)</li><li>SQL 注入</li></ul></li></ul><span id="more"></span><h3 id="权限模型"><a href="#权限模型" class="headerlink" title="权限模型"></a>权限模型</h3><h4 id="ACL-模型"><a href="#ACL-模型" class="headerlink" title="ACL 模型"></a>ACL 模型</h4><ul><li>ACL (Access Controll List)<ul><li> 用户（t_user）</li><li>用户_权限 (t_user_perm)<ul><li>N 对 N 关系，需要有中间表</li></ul></li><li>权限（t_permission）</li></ul></li></ul><h4 id="RBAC-模型"><a href="#RBAC-模型" class="headerlink" title="RBAC 模型"></a>RBAC 模型</h4><ul><li>RBAC (Role Based Access Controll)<ul><li> 用户 (<code>t_user</code>)</li><li> 用户_角色 (<code>t_user_role</code>)<ul><li>N 对 N 关系，需要有中间表</li></ul></li><li>角色 (<code>t_role</code>)</li><li> 角色_权限 (<code>t_role_perm</code>)<ul><li>N 对 N 关系，需要有中间表</li></ul></li><li>权限 (<code>t_permission</code>)</li></ul></li></ul><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="过滤器链架构"><a href="#过滤器链架构" class="headerlink" title="过滤器链架构"></a>过滤器链架构</h4><p>Spring Security 的底层利用 <code>FilterChainProxy</code> 封装了一系列过滤器链，并实现了各种安全过滤功能。</p><div class="admonition note"><p class="admonition-title">Servlet 三大组件</p><p>Servlet 的三大组件分别是：Servlet、Filter (过滤器)、Listener (监听器)。</p></div><p><img data-src="../../../asset/2023/08/spring-security-1.png"></p><h4 id="FilterChainProxy"><a href="#FilterChainProxy" class="headerlink" title="FilterChainProxy"></a>FilterChainProxy</h4><p><img data-src="../../../asset/2023/08/spring-security-2.png"></p><h4 id="SecurityFilterChain"><a href="#SecurityFilterChain" class="headerlink" title="SecurityFilterChain"></a>SecurityFilterChain</h4><p><img data-src="../../../asset/2023/08/spring-security-3.png"></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h4><ul><li><code>WebSecurityConfigurerAdapter</code></li><li><code>@EnableGlobalMethodSecurity</code>：开启全局方法安全配置<ul><li><code>@Secured</code></li><li><code>@PreAuthorize</code></li><li><code>@PostAuthorize</code></li></ul></li><li><code>UserDetailService</code>：获取用户详细信息（用户基本信息、用户角色、用户权限）的 Service 类</li></ul><h4 id="方法安全"><a href="#方法安全" class="headerlink" title="方法安全"></a>方法安全</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleSecureApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Secured("ROLE_USER")</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">secure</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello Security"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="HTTP-安全"><a href="#HTTP-安全" class="headerlink" title="HTTP 安全"></a>HTTP 安全</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Order(SecurityProperties.BASIC_AUTH_ORDER - 10)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    http.antMatcher(<span class="string">"/match1/**"</span>)</span><br><span class="line">      .authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">"/match1/user"</span>).hasRole(<span class="string">"USER"</span>)</span><br><span class="line">        .antMatchers(<span class="string">"/match1/spam"</span>).hasRole(<span class="string">"SPAM"</span>)</span><br><span class="line">        .anyRequest().isAuthenticated();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="整合案例"><a href="#整合案例" class="headerlink" title="整合案例"></a>整合案例</h3><p>本章节完整的案例代码可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-16</code>。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="引入依赖项"><a href="#引入依赖项" class="headerlink" title="引入依赖项"></a>引入依赖项</h5><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="创建首页的页面"><a href="#创建首页的页面" class="headerlink" title="创建首页的页面"></a>创建首页的页面</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"https://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Welcome to here.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/hello}"</span>&gt;</span>点击跳转 Hello 页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="创建登录的页面"><a href="#创建登录的页面" class="headerlink" title="创建登录的页面"></a>创建登录的页面</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"https://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@{/login}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span> User Name : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span> Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="创建-Hello-页面"><a href="#创建-Hello-页面" class="headerlink" title="创建 Hello 页面"></a>创建 Hello 页面</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"https://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello Spring Security.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><h5 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h5><div class="admonition note"><p class="admonition-title">提示</p><p>在主启动类上添加 <code>@EnableMethodSecurity</code> 注解，即开启方法级别的角色权限控制，这样就可以在方法上使用 <code>@Secured</code>、<code>@PreAuthorize</code>、<code>@PostAuthorize</code> 等注解了。</p></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableMethodSecurity</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="控制器类"><a href="#控制器类" class="headerlink" title="控制器类"></a>控制器类</h5><ul><li>登录控制器类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转登录页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/login")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/login"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Hello 控制器类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转Hello页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="meta">@PreAuthorize("hasAuthority('file_read')")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/hello"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="安全配置类"><a href="#安全配置类" class="headerlink" title="安全配置类"></a>安全配置类</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SecurityFilterChain <span class="title">defaultSecurityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 请求认证</span></span><br><span class="line">        http.authorizeHttpRequests(registry -&gt; {</span><br><span class="line">            registry</span><br><span class="line">                .requestMatchers((<span class="string">"/"</span>)).permitAll()         <span class="comment">// 首页支持所有人访问</span></span><br><span class="line">                .anyRequest().authenticated();              <span class="comment">// 其他任意请求都需要认证登录</span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户登录</span></span><br><span class="line">        http.formLogin(formLoginConfigurer -&gt; {</span><br><span class="line">            formLoginConfigurer.loginPage(<span class="string">"/login"</span>).permitAll();    <span class="comment">// 自定义登录页面，且所有人都可以访问登录页面</span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 退出登录</span></span><br><span class="line">        http.logout(logoutConfigurer -&gt; {</span><br><span class="line">            logoutConfigurer.permitAll();       <span class="comment">// 退出登录接口允许所有人访问</span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">(PasswordEncoder passwordEncoder)</span> </span>{</span><br><span class="line">        UserDetails user = User.withUsername(<span class="string">"admin"</span>)</span><br><span class="line">            .password(passwordEncoder.encode(<span class="string">"123456"</span>))</span><br><span class="line">            .roles(<span class="string">"admin"</span>, <span class="string">"hr"</span>)</span><br><span class="line">            .authorities(<span class="string">"file_read"</span>, <span class="string">"file_write"</span>)</span><br><span class="line">            .build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InMemoryUserDetailsManager(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>除了可以使用上述的 <code>UserDetailsService</code> 类自定义用户信息（账号、密码、角色等），还可以直接在 YML / Properties 配置文件中指定，如下所示：</p></div><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.security.user.roles</span>=<span class="string">admin,hr</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><ul><li>Spring Security 的自动配置类：<code>SecurityAutoConfiguration</code>、<code>SpringBootWebSecurityConfiguration</code>、<code>SecurityDataConfiguration</code>、<code>SecurityFilterAutoConfiguration</code> …</li><li>Spring Security 的所有配置都在 <code>SecurityProperties</code>，以 <code>spring.security</code> 为配置前缀</li><li>导入默认的 <code>SecurityFilterChain</code> 组件<ul><li>所有请求都需要认证（登录）</li><li>支持使用 HTTP Basic 方式登录</li><li>默认开启表单登录: Spring Security 提供一个默认登录页面，未经登录的所有请求都需要登录</li></ul></li><li><code>@EnableWebSecurity</code> 生效<ul><li><code>WebSecurityConfiguration</code> 生效，Web 安全配置</li><li><code>HttpSecurityConfiguration</code> 生效，HTTP 安全配置</li><li><code>@EnableGlobalAuthentication生效</code>：全局安全认证生效<ul><li><code>AuthenticationConfiguration</code>：认证配置</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 SpringBoot 3 如何整合 Spring Security。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Debian 安装 JDK</title>
    <link href="https://www.techgrow.cn/posts/cdbde47c.html"/>
    <id>https://www.techgrow.cn/posts/cdbde47c.html</id>
    <published>2023-08-11T13:48:23.000Z</published>
    <updated>2023-08-11T13:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="Debian-10"><a href="#Debian-10" class="headerlink" title="Debian 10"></a>Debian 10</h2><h3 id="OpenJDK-8-安装"><a href="#OpenJDK-8-安装" class="headerlink" title="OpenJDK 8 安装"></a>OpenJDK 8 安装</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索可用的软件包</span></span><br><span class="line">sudo apt-cache search openjdk</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装OpenJDK8</span></span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装版本</span></span><br><span class="line">java -version</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><div class="admonition note"><p class="admonition-title">OpenJDK 8 的安装路径</p><p>OpenJDK 8 安装完成后，其完整的安装路径是 <code>/usr/lib/jvm/java-8-openjdk-amd64/</code>。</p></div><h2 id="Debian-11"><a href="#Debian-11" class="headerlink" title="Debian 11"></a>Debian 11</h2><p>Debian 11 官方将不再对 OpenJDK 8 提供支持，建议安装 OpenJDK 11 或者 OpenJDK 17。</p><h3 id="OpenJDK-11-安装"><a href="#OpenJDK-11-安装" class="headerlink" title="OpenJDK 11 安装"></a>OpenJDK 11 安装</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索可用的软件包</span></span><br><span class="line">sudo apt-cache search openjdk</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装OpenJDK11</span></span><br><span class="line">sudo apt-get install openjdk-11-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装版本</span></span><br><span class="line">java -version</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">OpenJDK 11 的安装路径</p><p>OpenJDK 11 安装完成后，其完整的安装路径是 <code>/usr/lib/jvm/java-11-openjdk-amd64/</code>。</p></div><h3 id="OpenJDK-17-安装"><a href="#OpenJDK-17-安装" class="headerlink" title="OpenJDK 17 安装"></a>OpenJDK 17 安装</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索可用的软件包</span></span><br><span class="line">sudo apt-cache search openjdk</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装OpenJDK17</span></span><br><span class="line">sudo apt-get install openjdk-17-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装版本</span></span><br><span class="line">java -version</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">OpenJDK 17 的安装路径</p><p>OpenJDK 17 安装完成后，其完整的安装路径是 <code>/usr/lib/jvm/java-17-openjdk-amd64/</code>。</p></div><h2 id="切换-OpenJDK-版本"><a href="#切换-OpenJDK-版本" class="headerlink" title="切换 OpenJDK 版本"></a>切换 OpenJDK 版本</h2><p>如果在 Debian 上使用 <code>apt-get</code> 命令安装了多个不同版本的 OpenJDK，则可以使用以下的方式动态切换到指定的版本。</p><h3 id="设置-Java-默认版本"><a href="#设置-Java-默认版本" class="headerlink" title="设置 Java 默认版本"></a>设置 Java 默认版本</h3><p>运行以下命令，检查当前将哪个版本设置为了默认版本</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></tbody></table></figure><p>命令将会打印出一个列表，其中 <code>*</code> 开头的行表示当前默认使用的 Java。若希望更改默认使用的 Java，只需要输入要用作默认版本的数字，然后按 <code>Enter</code> 键，即可完成 Java 版本的切换。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">There are 2 choices <span class="keyword">for</span> the alternative java (providing /usr/bin/java).</span><br><span class="line"></span><br><span class="line">  Selection    Path                                            Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      1111      auto mode</span><br><span class="line">  1            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      1111      manual mode</span><br><span class="line">  2            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      manual mode</span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or <span class="built_in">type</span> selection number: </span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>值得一提的是，还可以运行命令 <code>java -version</code> 检查当前使用的 Java 版本。</p></div><h3 id="设置-Javac-默认版本"><a href="#设置-Javac-默认版本" class="headerlink" title="设置 Javac 默认版本"></a>设置 Javac 默认版本</h3><p>值得一提的是，除了更改默认的 Java 的版本之外，还可以更改 Javac 的默认版本，也就是 Java 编译器的版本。建议 Java 和 Javac 使用相同的版本号，避免因版本导致的问题。更改 Javac 默认版本与更改默认 Java 版本类似，可以运行以下命令实现。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config javac</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>值得一提的是，还可以运行命令 <code>javvc -version</code> 检查当前使用的 Javac 版本。</p></div><h2 id="Java-环境变量配置"><a href="#Java-环境变量配置" class="headerlink" title="Java 环境变量配置"></a>Java 环境变量配置</h2><p>某些 Java 应用程序会使用 <code>JAVA_HOME</code> 环境变量来确定 Java 的安装位置，因此需要设置 <code>JAVA_HOME</code> 环境变量。</p><div class="admonition warning"><p class="admonition-title">特别注意</p><ol><li>在配置 <code>JAVA_HOME</code> 环境变量时，应该始终使用设置为默认 Java 版本的安装路径，如果设置为其它 Java 版本的安装路径，可能会带来一系列的版本兼容问题。</li><li>默认 Java 版本的安装路径可以使用命令 <code>sudo update-alternatives --config java</code> 查找到。</li></ol></div><h3 id="JDK-8-环境变量配置"><a href="#JDK-8-环境变量配置" class="headerlink" title="JDK 8 环境变量配置"></a>JDK 8 环境变量配置</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证环境变量生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></tbody></table></figure><h3 id="JDK-11-环境变量配置"><a href="#JDK-11-环境变量配置" class="headerlink" title="JDK 11 环境变量配置"></a>JDK 11 环境变量配置</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证环境变量生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></tbody></table></figure><h3 id="JDK-17-环境变量配置"><a href="#JDK-17-环境变量配置" class="headerlink" title="JDK 17 环境变量配置"></a>JDK 17 环境变量配置</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证环境变量生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.myfreax.com/install-java-on-debian-10/">如何在 Debian 10 安装 JDK</a></li><li><a href="https://www.myfreax.com/how-to-install-java-on-debian-11/">如何在 Debian 11 安装 JDK</a></li><li><a href="https://blog.csdn.net/m0_57194110/article/details/128847508">Debian 11 解压方式安装 JDK 8</a></li><li><a href="https://juejin.cn/post/7162819754804609061">如何在 Debian 11 上用 Apt 安装 JDK</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Debian 如何安装 JDK，包括 OpenJDK、OracleJDK 的各个版本。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Debian" scheme="https://www.techgrow.cn/tags/Debian/"/>
    
    <category term="开发工具" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 3 进阶教程之四自定义 Starter</title>
    <link href="https://www.techgrow.cn/posts/308cedc0.html"/>
    <id>https://www.techgrow.cn/posts/308cedc0.html</id>
    <published>2023-08-05T15:12:44.000Z</published>
    <updated>2023-08-05T15:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/1b2af7f9.html">SpringBoot 3 进阶教程之一整合 Prometheus</a></li><li><a href="/posts/885fde15.html">SpringBoot 3 进阶教程之二 GraalVM 与 AOT</a></li><li><a href="/posts/2cc2991f.html">SpringBoot 3 进阶教程之三整合 Spring Security</a></li><li><a href="/posts/308cedc0.html">SpringBoot 3 进阶教程之四自定义 Starter</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 SpringBoot 3 如何自定 Starter，完整的案例代码可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-09</code> 和 <code>spring-boot3-10</code>。值得一提的是，下述教程适用于 SpringBoot 2.x 和 SpringBoot 3.x。</p><h2 id="自定义-Starter"><a href="#自定义-Starter" class="headerlink" title="自定义 Starter"></a>自定义 Starter</h2><h3 id="自定义场景"><a href="#自定义场景" class="headerlink" title="自定义场景"></a>自定义场景</h3><ul><li><code>使用场景</code>：抽取聊天机器人场景，它可以打招呼</li><li><code>最终效果</code>：任何项目导入此 Starter 都具有打招呼功能，并且问候语中的人名支持在配置文件中修改</li></ul><span id="more"></span><h3 id="自定义步骤"><a href="#自定义步骤" class="headerlink" title="自定义步骤"></a>自定义步骤</h3><ul><li>1、创建自定义 Starter 模块，引入 <code>spring-boot-starter</code> 基础依赖</li><li> 2、开发模块功能，引入模块所有需要的依赖</li><li> 3、创建 <code>XxxAutoConfiguration</code> 自动配置类，帮其他项目导入使用这个模块所需要的全部组件</li><li> 4、为其他项目引入 <code>XxxAutoConfiguration</code> 自动配置类<ul><li>第一种方式： 创建 <code>@EnableXxx</code> 注解类，使用 <code>@Import(XxxAutoConfiguration.class)</code> 注解引入自定义配置类</li><li>第二种方式： 创建 SPI 配置文件 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，指定应用启动时需要加载的自动配置类</li></ul></li><li> 5、其他项目引入自定义的 Starter 即可使用对应的功能</li></ul><h3 id="自定义案例"><a href="#自定义案例" class="headerlink" title="自定义案例"></a>自定义案例</h3><h4 id="开发业务逻辑代码"><a href="#开发业务逻辑代码" class="headerlink" title="开发业务逻辑代码"></a>开发业务逻辑代码</h4><ul><li>创建配置属性类，绑定 <code>YML</code> 或者 <code>Properties</code> 配置文件中指定前缀的内容 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "robot")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>创建控制器和服务类，模拟自定义 Starter 提供的业务功能 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RobotProperties robotProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + robotProperties.getName();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/robot")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RobotService robotService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/saveHello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> robotService.sayHello();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>创建自动配置类，导入使用自定义 Starter 功能所需要的全部组件 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import({RobotController.class, RobotService.class})</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RobotProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotAutoConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">为什么自定义 Starter 模块里的组件默认不会扫描进来？</p><p>这是自定义 Starter 所在的包和引入它的项目的主程序所在的包不是父子层级关系。 因此需要创建 <code>XxxAutoConfiguration</code> 自动配置类，将需要用到的组件统一导入进来。</p></div><ul><li>引入配置处理器依赖，重启项目后，在 IDEA 里面写 <code>YML</code> 或者 <code>Properties</code> 配置文件时就会有代码提示效果 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="使用-EnableXxx-机制实现自动配置"><a href="#使用-EnableXxx-机制实现自动配置" class="headerlink" title="使用 @EnableXxx 机制实现自动配置"></a>使用 @EnableXxx 机制实现自动配置</h4><p>在自定义 Starter 模块内创建 <code>@EnableXxx</code> 注解类，当其他项目需要使用自定义 Starter 提供的功能，只需要简单使用 <code>@EnableXxx</code> 注解即可开启对应的功能。值得一提的，此方式属于 <code>半自动配置</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(RobotAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRobot {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用-SpringBoot-SPI-机制实现自动配置"><a href="#使用-SpringBoot-SPI-机制实现自动配置" class="headerlink" title="使用 SpringBoot SPI 机制实现自动配置"></a>使用 SpringBoot SPI 机制实现自动配置</h4><p>使用 SpringBoot 提供的 SPI 机制，在自定义 Starter 模块内创建 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 配置文件，并写入自动配置类的全类名即可。当其他项目引入自定义 Starter 模块后，应用在启动时就会自动加载对应的自动配置类。值得一提的，此方式属于 <code>完全自动配置</code>。</p><ul><li>SPI 配置文件的内容 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">com.clay.boot.starter.robot.config.RobotAutoConfiguration</span></span><br></pre></td></tr></tbody></table></figure><ul><li>自定义 Starter 模块的目录结构 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │&nbsp;&nbsp; └── com</span><br><span class="line">        │&nbsp;&nbsp;     └── clay</span><br><span class="line">        │&nbsp;&nbsp;         └── boot</span><br><span class="line">        │&nbsp;&nbsp;             └── starter</span><br><span class="line">        │&nbsp;&nbsp;                 └── robot</span><br><span class="line">        │&nbsp;&nbsp;                     ├── config</span><br><span class="line">        │&nbsp;&nbsp;                     │&nbsp;&nbsp; └── RobotAutoConfiguration.java</span><br><span class="line">        │&nbsp;&nbsp;                     ├── controller</span><br><span class="line">        │&nbsp;&nbsp;                     │&nbsp;&nbsp; └── RobotController.java</span><br><span class="line">        │&nbsp;&nbsp;                     ├── properties</span><br><span class="line">        │&nbsp;&nbsp;                     │&nbsp;&nbsp; └── RobotProperties.java</span><br><span class="line">        │&nbsp;&nbsp;                     └── service</span><br><span class="line">        │&nbsp;&nbsp;                         └── RobotService.java</span><br><span class="line">        └── resources</span><br><span class="line">            └── META-INF</span><br><span class="line">                └── spring</span><br><span class="line">                    └── org.springframework.boot.autoconfigure.AutoConfiguration.imports</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍 SpringBoot 3 如何自定义 Starter。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 项目将 Logback 日志写入数据库</title>
    <link href="https://www.techgrow.cn/posts/5217ca97.html"/>
    <id>https://www.techgrow.cn/posts/5217ca97.html</id>
    <published>2023-07-29T15:12:42.000Z</published>
    <updated>2023-07-29T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 SpringBoot 项目如何将 Logback 日志写入 MySQL 数据库，使用各组件的版本如下：</p><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td> SpringBoot</td><td>2.2.6</td></tr><tr><td>Logback</td><td>1.2.3</td></tr><tr><td>Druid</td><td>1.1.9</td></tr></tbody></table><span id="more"></span><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><p>首先手动创建 Logback 所需的三张数据库表，分别是 <code>logging_event</code>、<code>logging_event_property</code>、<code>logging_event_exception</code>，可以通过下述的方式找到创建数据库表的 SQL 脚本文件。</p><p><img data-src="../../../asset/2023/07/springboot-logback-db-1.png"></p><h2 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h2><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/demo?characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Logback-配置"><a href="#Logback-配置" class="headerlink" title="Logback 配置"></a>Logback 配置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JMX 支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jmxConfigurator</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志上下文名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件的目录路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"/tmp/log/demo"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库的连接属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"DATA_SOURCE"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.type"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"JDBC_URL"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.url"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"USER_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"PASSWORD"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.password"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"DRIVER_CLASS_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.driver-class-name"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类与彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>${CONSOLE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到日志文件--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出level为DEBUG日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DEBUG_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志归档 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录DEBUG级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出level为INFO日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录INFO级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出level为WARN日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录WARN级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出level为ERROR日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DataSourceConnectionSource"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"${DATA_SOURCE}"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>${JDBC_URL}<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>${USER_NAME}<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>${PASSWORD}<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>${DRIVER_CLASS_NAME}<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DB"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在上面的配置内容中，最重点的是配置 MySQL 数据库的连接信息和 <code>DBAppender</code>，并引用 <code>DBAppender</code>，如下所示 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库的连接属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"DATA_SOURCE"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.type"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"JDBC_URL"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"USER_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"PASSWORD"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"DRIVER_CLASS_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.driver-class-name"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出到数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DataSourceConnectionSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"${DATA_SOURCE}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>${JDBC_URL}<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>${USER_NAME}<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>${PASSWORD}<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>${DRIVER_CLASS_NAME}<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用 DBAppender --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>如果只希望记录某个包（如 <code>com.clay.demo</code>）的错误日志信息到 MySQL 数据库，可以参考以下配置内容 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出到数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DataSourceConnectionSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"${DATA_SOURCE}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>${JDBC_URL}<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>${USER_NAME}<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>${PASSWORD}<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>${DRIVER_CLASS_NAME}<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库只记录ERROR级别的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定某个包的日志记录方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.clay.demo"</span> <span class="attr">value</span>=<span class="string">"ERROR"</span>  <span class="attr">additivity</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbackTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(LogbackTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogToSql</span><span class="params">()</span></span>{</span><br><span class="line">        logger.debug(<span class="string">"数据库日志 Debug"</span>);</span><br><span class="line">        logger.info(<span class="string">"数据库日志 Info"</span>);</span><br><span class="line">        logger.warn(<span class="string">"数据库日志 Warn"</span>);</span><br><span class="line">        logger.error(<span class="string">"数据库日志 Error"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Logback 成功将日志信息写入 MySQL 数据库后，<code>logging_event</code> 表的数据如下：</p></blockquote><p><img data-src="../../../asset/2023/07/springboot-logback-db-2.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.freesion.com/article/3147233431/">Logback 将日志写到 MySQL 数据库</a></li><li><a href="https://blog.csdn.net/sinat_38628764/article/details/121748560">SpringBoot 项目将 Logback 写入数据库</a></li><li><a href="https://blog.csdn.net/philip502/article/details/105268526/">Logback 指定某一包或者类下日志记录到不同文件中</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 SpringBoot 项目如何将 Logback 日志写入 MySQL 数据库。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
