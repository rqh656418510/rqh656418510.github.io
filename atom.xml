<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clay 的技术空间</title>
  
  <subtitle>用进废退 | 艺不压身</subtitle>
  <link href="https://www.techgrow.cn/atom.xml" rel="self"/>
  
  <link href="https://www.techgrow.cn/"/>
  <updated>2024-09-29T13:32:38.000Z</updated>
  <id>https://www.techgrow.cn/</id>
  
  <author>
    <name>Clay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式链路追踪技术选型介绍</title>
    <link href="https://www.techgrow.cn/posts/b5d62eb5.html"/>
    <id>https://www.techgrow.cn/posts/b5d62eb5.html</id>
    <published>2024-09-29T13:32:38.000Z</published>
    <updated>2024-09-29T13:32:38.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="Jaeger"><a href="#Jaeger" class="headerlink" title="Jaeger"></a>Jaeger</h2><ul><li>简介：<ul><li>Jaeger 是 Uber 开源的分布式追踪系统，具备强大的追踪、监控和故障诊断功能。它是 CNCF 的项目之一，得到了广泛的社区支持。</li></ul></li><li>特点：<ul><li>高性能：Jaeger 专为大规模分布式系统设计，适合高并发、大规模系统。</li><li>丰富的功能：支持多种存储后端（如 Elasticsearch、Cassandra），具备查询、可视化、错误诊断等多种强大功能。</li><li>支持 OpenTracing：与 OpenTracing 标准完全兼容，可与多种语言和平台进行集成。</li><li>扩展性：支持多种采样策略和链路追踪数据的丰富查询。</li></ul></li><li>适用场景：<ul><li>适合大型分布式系统，尤其是在要求高性能、高并发的场景下表现优异。</li><li>适合系统需要和其他平台或语言进行互操作，且希望遵循 OpenTracing 标准的场景。</li></ul></li></ul><span id="more"></span><h2 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h2><ul><li>简介：<ul><li>Zipkin 是 Twitter 开发的一个分布式链路追踪系统，最早集成在 Spring Cloud Sleuth 中，可以用于收集时序数据并可视化微服务调用链路。</li></ul></li><li>特点：<ul><li>轻量级：它的架构相对简单，容易部署，尤其适合中小规模系统。</li><li>集成度高：Spring Cloud Sleuth 对 Zipkin 的支持非常完善，集成简单，提供了现成的解决方案。</li><li>查询功能：支持可视化链路展示，方便查看微服务调用的延时、失败等信息。</li><li>插件化支持：可以支持不同的存储后端，比如 MySQL、Elasticsearch 等。</li></ul></li><li>适用场景： <ul><li>适合中小型项目（规模不大），且已使用 Spring Cloud 生态技术。</li></ul></li></ul><h2 id="Sleuth"><a href="#Sleuth" class="headerlink" title="Sleuth"></a>Sleuth</h2><ul><li>简介：<ul><li>Sleuth 是 Spring Cloud 自带的分布式链路追踪工具，支持自动为 Spring Cloud 的微服务添加 TraceId 和 SpanId。</li></ul></li><li>特点：<ul><li>深度集成：和 Spring Cloud 生态高度集成，几乎开箱即用，默认使用 Zipkin 来进行数据存储和展示。</li><li>自动化：自动为 HTTP 请求、消息队列、数据库操作等关键操作添加追踪信息，无需开发者手动干预。</li><li>可扩展性：支持与其他追踪系统（如 Jaeger）的集成，具备较高的扩展性。</li></ul></li><li>适用场景： <ul><li>适合基于 Spring Cloud 架构的中小型项目团队，尤其是希望利用 Spring 生态快速集成链路追踪的情况。</li></ul></li></ul><h2 id="OpenTracing"><a href="#OpenTracing" class="headerlink" title="OpenTracing"></a>OpenTracing</h2><ul><li>简介：<ul><li>OpenTracing 是一个开源的 API 标准，诞生于 2016 年，旨在为分布式追踪系统提供统一的接口规范。它允许开发者在应用程序代码中无缝插入追踪代码，而无需绑定到特定的追踪工具（如 Jaeger 或 Zipkin）</li></ul></li><li>目标：<ul><li>提供跨语言的标准 API 来记录分布式系统中的 Trace 和 Span，使得开发者能够通过标准接口与各种追踪实现集成。</li></ul></li><li>局限性：<ul><li>OpenTracing 仅提供了 API 规范，没有包含具体的实现和上下文传播等内容。因此，开发者还需要额外的库或工具来实际记录和处理追踪数据。</li></ul></li></ul><h2 id="OpenCensus"><a href="#OpenCensus" class="headerlink" title="OpenCensus"></a>OpenCensus</h2><ul><li>简介：<ul><li>OpenCensus 由 Google 开发，最初作为其内部监控系统的开源版本，旨在解决分布式系统的追踪和度量问题。与 OpenTracing 不同，OpenCensus 不仅提供 API 规范，还包含了用于收集和导出追踪和度量数据的库和实现。</li></ul></li><li>特点：<ul><li>OpenCensus 不仅支持分布式追踪，还提供应用程序级别的度量（Metrics），如请求速率、延迟等。它还包含了一些内置的采集和上下文传播机制。</li></ul></li><li>局限性： <ul><li>OpenCensus 不仅提供了 API，还提供了具体的实现，这与 OpenTracing 产生了竞争关系。</li><li>OpenCensus 与 OpenTracing 的功能重叠，并且各自采用了不同的 API 规范，导致生态系统中出现了分裂。</li></ul></li></ul><h2 id="OpenTelemetry"><a href="#OpenTelemetry" class="headerlink" title="OpenTelemetry"></a>OpenTelemetry</h2><ul><li>简介：<ul><li>OpenTelemetry 是 OpenTracing 和 OpenCensus 的合并项目，由 CNCF 领导。它于 2019 年启动，旨在统一追踪和度量的标准，成为云原生应用的统一遥测（Telemetry）解决方案。</li></ul></li><li>目标：<ul><li>结合 OpenTracing 的标准化 API 和 OpenCensus 的实现，OpenTelemetry 提供了一个统一的库，支持分布式追踪、度量和日志的收集和导出。</li></ul></li><li>特点：<ul><li>分布式追踪： 提供类似于 OpenTracing 的 API，用于记录分布式系统中的追踪信息。</li><li>度量： 像 OpenCensus 一样，OpenTelemetry 也提供了应用性能度量数据的收集。</li><li>日志： 除了追踪和度量，OpenTelemetry 计划支持日志数据的统一收集和处理。</li><li>支持多种后端： OpenTelemetry 支持将数据导出到多种后端系统，如 Jaeger、Zipkin、Prometheus 等。</li></ul></li><li>发展现状：<ul><li>OpenTelemetry 是目前 CNCF 重点支持的项目，逐渐成为行业标准，并被广泛应用于云原生应用程序中。</li></ul></li></ul><h2 id="SkyWalking"><a href="#SkyWalking" class="headerlink" title="SkyWalking"></a>SkyWalking</h2><ul><li>简介：<ul><li>SkyWalking 是一个非常强大的全栈 APM（应用性能监控）和分布式链路追踪解决方案，而 OpenTracing、OpenCensus、OpenTelemetry 则是更倾向于标准化和 API 的解决方案。</li></ul></li><li>核心功能：<ul><li>开箱即用：SkyWalking 从数据收集到可视化仪表盘都有现成的功能，尤其适合希望快速搭建一整套 APM 解决方案的团队。</li><li>分布式链路追踪：自动追踪微服务之间的调用，记录服务调用链，提供请求延迟、错误率等信息。</li><li>性能监控（APM）：提供如响应时间、吞吐量、系统健康状况等性能指标的监控。</li><li>服务拓扑图：SkyWalking 生成微服务之间的交互拓扑图，帮助用户快速理解系统的依赖关系。</li><li>日志和度量集成：支持集成日志系统（如 ELK）以及度量系统，形成一个全方位的监控平台。</li><li>自动探针：通过代理（Agent）自动采集应用程序的 Trace 和 Metrics，无需对代码进行显式修改。</li><li>性能和扩展性：支持大规模分布式系统的监控，具备强大的可扩展性，支持高并发的链路追踪数据采集和处理。</li></ul></li><li>适用场景：<ul><li>多语言支持：SkyWalking 支持多种编程语言和框架，这使得它非常适合多技术栈的团队。</li><li>完整的 APM 需求：如果系统不仅需要链路追踪，还需要监控应用性能、日志分析，那么非常适合选择 SkyWalking。</li><li>自动化集成：对于已经运行的大规模分布式系统，如果不想在代码中手动添加追踪信息，SkyWalking 的自动探针功能非常适合。</li></ul></li></ul><blockquote><p>SkyWalking 与 OpenTelemetry 的对比</p></blockquote><ul><li>生态与标准：<ul><li>OpenTelemetry 是 CNCF 的标准项目，提供追踪、度量和日志的统一 API，并且可以与 Jaeger、Prometheus、Zipkin 等工具进行深度集成。</li><li>SkyWalking 则是一个完整的监控和链路追踪解决方案，不仅仅是一个 API 标准。它提供了完整的前端 UI、数据存储后端，以及自动化的数据收集器。</li><li>SkyWalking 也兼容 OpenTracing 和 OpenTelemetry API，这意味着可以将 SkyWalking 与其他系统结合使用，甚至可以使用 OpenTelemetry 的 API 通过 SkyWalking 收集和处理数据。</li></ul></li><li>功能差异：<ul><li>自动化程度：SkyWalking 提供了强大的 自动探针功能，开发者不需要在代码中显式添加追踪代码。这对于已经运行中的大型分布式系统特别有用。而 OpenTelemetry 需要通过 SDK 或 API 来实现追踪（尽管有一些自动化探针，也需要配置）。</li><li>全栈 APM：SkyWalking 不仅仅是一个分布式追踪工具，它是一个完整的 APM 解决方案，提供应用性能监控、链路追踪、日志集成等功能。OpenTelemetry 本身只是一个标准和工具库，需要和其他工具（如 Jaeger 或 Prometheus）配合使用才能实现同样的功能。</li><li>可视化和存储：SkyWalking 内置了完善的可视化仪表盘和后端存储解决方案（如 Elasticsearch、MySQL 等）。而 OpenTelemetry 没有内置的存储和可视化功能，需要与 Jaeger、Prometheus、Grafana 等工具组合使用。</li><li>生态支持：SkyWalking 提供了对多种环境的深度支持，包括 Java、Go、Node.js、PHP 等语言，且支持多种微服务框架（如 Kubernetes、Spring Cloud、Envoy、Istio 等）。</li></ul></li></ul><blockquote><p>SkyWalking 与 Jaeger 和 Zipkin 的对比</p></blockquote><ul><li>功能集成度：<ul><li>SkyWalking 是一个集成度更高的系统，除了链路追踪，还包括性能监控、日志管理等功能。</li><li>Jaeger 和 Zipkin 专注于分布式追踪，它们侧重于提供链路追踪的可视化和数据采集。</li></ul></li><li>可视化体验：<ul><li>SkyWalking 的 UI 更加用户友好，内置了服务拓扑图、依赖分析、告警功能，可以提供更丰富的可视化体验。</li><li>Jaeger 和 Zipkin 更偏重于单一的追踪功能，可能需要与其他工具组合使用才能达到同样的监控效果。</li></ul></li></ul><div class="admonition note"><p class="admonition-title">如何选择 SkyWalking 和 OpenTracing？</p><ul><li>如果目标是快速构建一个可视化、自动化的监控平台，SkyWalking 是一个非常合适的选择。</li><li>如果需要使用行业标准（比如 OpenTracing），且需要与结合其他工具来构建定制化的监控系统，OpenTelemetry 是一个更灵活、标准化的选择。</li></ul></div>]]></content>
    
    
    <summary type="html">本文主要介绍分布式链路追踪技术选型的内容，包括 Jaeger、Zipkin、Sleuth、OpenTracing、OpenCensus、OpenTelemetry 等。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="分布式" scheme="https://www.techgrow.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Debian 11 安装 Docker 与 Docker-Compose</title>
    <link href="https://www.techgrow.cn/posts/a4847c57.html"/>
    <id>https://www.techgrow.cn/posts/a4847c57.html</id>
    <published>2024-09-16T13:18:02.000Z</published>
    <updated>2024-09-16T13:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://www.docker.com/">Docker 官网</a></li><li><a href="https://hub.docker.com/">Docker Hub 官网</a></li><li><a href="https://docs.docker.com/">Docker 官方文档</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="卸载已有软件"><a href="#卸载已有软件" class="headerlink" title="卸载已有软件"></a>卸载已有软件</h3><p>卸载已安装的 Docker，避免对后续的安装步骤产生影响。</p><span id="more"></span><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧版本，包括有关的配置文件</span></span><br><span class="line">sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保证卸载干净</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">sudo rm -rf /etc/docker</span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /usr/libexec/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br><span class="line">sudo rm -rf /etc/apt/keyrings</span><br></pre></td></tr></tbody></table></figure><h3 id="安装依赖软件"><a href="#安装依赖软件" class="headerlink" title="安装依赖软件"></a>安装依赖软件</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><h3 id="添加存储库"><a href="#添加存储库" class="headerlink" title="添加存储库"></a>添加存储库</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 Docker 的官方 GPG 密钥</span></span><br><span class="line">sudo curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Docker 的 APT 存储库</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable"</span> | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 APT 索引</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></tbody></table></figure><h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装最新版本的 Docker</span></span><br><span class="line">sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>Docker Buildx 是 Docker 官方推出的一款增强型构建工具，旨在简化和优化多架构容器映像的构建流程。它整合了 QEMU 模拟器和多平台构建能力，使得开发者可以在单一的构建过程中同时为多个平台（如 x86、ARM 等）构建容器映像，极大地提高了构建效率和开发体验。</p></div><h3 id="Docker-启动"><a href="#Docker-启动" class="headerlink" title="Docker 启动"></a>Docker 启动</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自启动 Docker</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Docker 的运行状态</span></span><br><span class="line">sudo systemctl status docker</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">普通用户使用 Docker 命令</p><p>如果希望让非 <code>root</code> 用户也能使用 Docker 命令，可以将该用户添加到 <code>docker</code> 用户组，比如 <code>sudo usermod -aG docker your-user-name</code>。</p></div><h3 id="Docker-配置源"><a href="#Docker-配置源" class="headerlink" title="Docker 配置源"></a>Docker 配置源</h3><p>由于 Docker Hub 存在不可抗拒因素，导致在国内无法访问，因此需要配置 Docker 使用国内镜像源。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置目录</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [       </span><br><span class="line">     <span class="string">"https://ustc-edu-cn.mirror.aliyuncs.com"</span>,</span><br><span class="line">     <span class="string">"https://docker.m.daocloud.io"</span>,</span><br><span class="line">     <span class="string">"https://docker.mirrors.ustc.edu.cn"</span>,     </span><br><span class="line">     <span class="string">"https://hub-mirror.c.163.com"</span>,        </span><br><span class="line">     <span class="string">"https://mirror.baidubce.com"</span>,         </span><br><span class="line">     <span class="string">"https://ccr.ccs.tencentyun.com"</span>,</span><br><span class="line">     <span class="string">"https://huecker.io"</span>,</span><br><span class="line">     <span class="string">"https://dockerhub.timeweb.cloud"</span>,</span><br><span class="line">     <span class="string">"https://noohub.ru"</span></span><br><span class="line">    ]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置文件生效</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Docker 的运行状态</span></span><br><span class="line">sudo systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Docker 的运行信息</span></span><br><span class="line">sudo docker info</span><br></pre></td></tr></tbody></table></figure><h3 id="Docker-验证安裝"><a href="#Docker-验证安裝" class="headerlink" title="Docker 验证安裝"></a>Docker 验证安裝</h3><p>验证是否正确安装了 Docker，以下命令将下载一个测试镜像并在容器中运行它，容器在运行时将输出一条参考消息并退出</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker-Compose"></a>安装 Docker-Compose</h2><div class="admonition note"><p class="admonition-title">提示</p><p>推荐使用第二种方式（基于 <code>curl</code> 命令）进行安装，因为可以指定具体安装哪个版本的 Docker-Compose，而且后期升级维护也更方便。</p></div><h3 id="第一种安装方式"><a href="#第一种安装方式" class="headerlink" title="第一种安装方式"></a>第一种安装方式</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Docker-Compose 插件</span></span><br><span class="line">sudo apt install -y docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证 Docker-Compose 插件</span></span><br><span class="line">sudo docker compose -v</span><br></pre></td></tr></tbody></table></figure><h3 id="第二种安装方式"><a href="#第二种安装方式" class="headerlink" title="第二种安装方式"></a>第二种安装方式</h3><p>这里除了可以使用 <code>curl</code> 命令来下载 Docker-Compose 的二进制包，还可以在 <a href="https://github.com/docker/compose/releases">GitHub Releases</a> 上面手动下载对应的文件，然后上传到目标服务器。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件授权</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证下载</span></span><br><span class="line">sudo docker-compose -v</span><br></pre></td></tr></tbody></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="/posts/57bca56f.html">Docker 介绍与安装</a></li><li><a href="/posts/b31f4d18.html">Docker-Compose 安装与使用</a></li><li><a href="https://blog.csdn.net/weixin_49187218/article/details/136935982">Debian 11 上安装 Docker</a></li><li><a href="https://blog.csdn.net/qq_30818545/article/details/124514016">Debian11 之 Docker 稳定版本安装</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Debian 11 如何安装 Docker 与 Docker-Compose。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="Debian" scheme="https://www.techgrow.cn/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 Docker 与 Docker-Compose</title>
    <link href="https://www.techgrow.cn/posts/efd9e9f2.html"/>
    <id>https://www.techgrow.cn/posts/efd9e9f2.html</id>
    <published>2024-09-15T13:18:02.000Z</published>
    <updated>2024-09-15T13:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://www.docker.com/">Docker 官网</a></li><li><a href="https://hub.docker.com/">Docker Hub 官网</a></li><li><a href="https://docs.docker.com/">Docker 官方文档</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="卸载已有软件"><a href="#卸载已有软件" class="headerlink" title="卸载已有软件"></a>卸载已有软件</h3><p>卸载已安装的 Docker，避免对后续的安装步骤产生影响。</p><span id="more"></span><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否安装了 Docker</span></span><br><span class="line">sudo yum list installed | grep docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载旧版本的 Docker</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-selinux \</span><br><span class="line">                docker-engine-selinux \</span><br><span class="line">                docker-engine</span><br></pre></td></tr></tbody></table></figure><h3 id="安装依赖软件"><a href="#安装依赖软件" class="headerlink" title="安装依赖软件"></a>安装依赖软件</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><h3 id="添加存储库"><a href="#添加存储库" class="headerlink" title="添加存储库"></a>添加存储库</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加存储库</span></span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></tbody></table></figure><h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装最新版本的 Docker</span></span><br><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>Docker Buildx 是 Docker 官方推出的一款增强型构建工具，旨在简化和优化多架构容器映像的构建流程。它整合了 QEMU 模拟器和多平台构建能力，使得开发者可以在单一的构建过程中同时为多个平台（如 x86、ARM 等）构建容器映像，极大地提高了构建效率和开发体验。</p></div><h3 id="Docker-启动"><a href="#Docker-启动" class="headerlink" title="Docker 启动"></a>Docker 启动</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自启动 Docker</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Docker 的运行状态</span></span><br><span class="line">sudo systemctl status docker</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">普通用户使用 Docker 命令</p><p>如果希望让非 <code>root</code> 用户也能使用 Docker 命令，可以将该用户添加到 <code>docker</code> 用户组，比如 <code>sudo usermod -aG docker your-user-name</code>。</p></div><h3 id="Docker-配置源"><a href="#Docker-配置源" class="headerlink" title="Docker 配置源"></a>Docker 配置源</h3><p>由于 Docker Hub 存在不可抗拒因素，导致在国内无法访问，因此需要配置 Docker 使用国内镜像源。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置目录</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [       </span><br><span class="line">     <span class="string">"https://ustc-edu-cn.mirror.aliyuncs.com"</span>,</span><br><span class="line">     <span class="string">"https://docker.m.daocloud.io"</span>,</span><br><span class="line">     <span class="string">"https://docker.mirrors.ustc.edu.cn"</span>,     </span><br><span class="line">     <span class="string">"https://hub-mirror.c.163.com"</span>,        </span><br><span class="line">     <span class="string">"https://mirror.baidubce.com"</span>,         </span><br><span class="line">     <span class="string">"https://ccr.ccs.tencentyun.com"</span>,</span><br><span class="line">     <span class="string">"https://huecker.io"</span>,</span><br><span class="line">     <span class="string">"https://dockerhub.timeweb.cloud"</span>,</span><br><span class="line">     <span class="string">"https://noohub.ru"</span></span><br><span class="line">    ]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置文件生效</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Docker 的运行状态</span></span><br><span class="line">sudo systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Docker 的运行信息</span></span><br><span class="line">sudo docker info</span><br></pre></td></tr></tbody></table></figure><h3 id="Docker-验证安裝"><a href="#Docker-验证安裝" class="headerlink" title="Docker 验证安裝"></a>Docker 验证安裝</h3><p>验证是否正确安装了 Docker，以下命令将下载一个测试镜像并在容器中运行它，容器在运行时将输出一条参考消息并退出</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker-Compose"></a>安装 Docker-Compose</h2><div class="admonition note"><p class="admonition-title">提示</p><p>推荐使用第二种方式（基于 <code>curl</code> 命令）进行安装，因为可以指定具体安装哪个版本的 Docker-Compose，而且后期升级维护也更方便。</p></div><h3 id="第一种安装方式"><a href="#第一种安装方式" class="headerlink" title="第一种安装方式"></a>第一种安装方式</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Docker-Compose 插件</span></span><br><span class="line">sudo yum install -y docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证 Docker-Compose 插件</span></span><br><span class="line">sudo docker compose -v</span><br></pre></td></tr></tbody></table></figure><h3 id="第二种安装方式"><a href="#第二种安装方式" class="headerlink" title="第二种安装方式"></a>第二种安装方式</h3><p>这里除了可以使用 <code>curl</code> 命令来下载 Docker-Compose 的二进制包，还可以在 <a href="https://github.com/docker/compose/releases">GitHub Releases</a> 上面手动下载对应的文件，然后上传到目标服务器。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Curl</span></span><br><span class="line">sudo yum install -y curl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件授权</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证下载</span></span><br><span class="line">sudo docker-compose -v</span><br></pre></td></tr></tbody></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="/posts/57bca56f.html">Docker 介绍与安装</a></li><li><a href="/posts/b31f4d18.html">Docker-Compose 安装与使用</a></li><li><a href="https://blog.csdn.net/weixin_67658096/article/details/135208212">CentOS 7 安装 Docker 和 Docker-Compose</a></li><li><a href="https://blog.csdn.net/weixin_45807466/article/details/137029322">CentOS 7 安装 Docker 与 Docker-Compose（图文教程）</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 CentOS 7 如何安装 Docker 与 Docker-Compose。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="Centos" scheme="https://www.techgrow.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 自研 Redis 缓存组件</title>
    <link href="https://www.techgrow.cn/posts/e7c5e7ed.html"/>
    <id>https://www.techgrow.cn/posts/e7c5e7ed.html</id>
    <published>2024-08-29T15:12:42.000Z</published>
    <updated>2024-08-29T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/e2d22e3.html">SpringBoot 封装接口性能统计组件</a></li><li><a href="/posts/9d2005a2.html">SpringBoot 自研分布式限流组件</a></li><li><a href="/posts/e7c5e7ed.html">SpringBoot 自研 Redis 缓存组件</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍在 SpringBoot 项目中，如何基于 Redis + AOP + 反射 + 自定义注解自研缓存组件，且支持拔插式使用。由于篇幅有限，下面使用的是 Redis 单机服务，若是在生产环境，为了保证系统的可用性，建议部署 Redis 集群，这里不再累述。</p><div class="admonition warning"><p class="admonition-title">特别注意</p><ul><li>本文只自定义了 <code>@RedisCacheable</code> 注解，用于将方法运行的结果进行缓存，在缓存时效内再次调用该方法时不会调用方法本身，而是直接从缓存获取结果并返回给调用方。由于执行数据库的 Update 或者 Delete 操作时，需用同步更新或者删除 Redis 中的缓存数据，否则数据会存在一致性问题。</li><li>因此在企业项目开发中，通常还需要自定义 <code>@RedisCachePut</code> 或者 <code>@RedisCacheEvict</code> 等其他注解，以满足业务需求。具体可以参考 <a href="/posts/e792e01b.html">Spring Cache</a> 官方的实现（JSR-107 规范），或者直接使用 Spring Cache 提供的缓存注解，比如 <code>@Cacheable</code>、<code>@CachePut</code>、<code>@CacheEvict</code>、<code>@Caching</code> 等。</li></ul></div><span id="more"></span><div class="admonition note"><p class="admonition-title">代码下载</p><p>完整的案例代码可以从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/distributed-cache/distributed-cache-study">这里</a> 下载得到。值得一提的是，本文的案例代码不仅适用于 SpringBoot 项目，理论上适用于任何 Spring 项目。</p></div><h2 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h2><ul><li>可配置<ul><li>自定义缓存注解标签</li></ul></li><li>可插拔<ul><li>添加，方法自带 Redis 缓存查询功能</li><li>不添加，方法没有 Redis 缓存查询功能</li></ul></li><li>可通用<ul><li>开发自定义 Redis 缓存组件，可以给整个开发团队赋能公用</li><li>不能和业务逻辑代码写死，支持独立出来，并可以配置</li></ul></li><li>高可用<ul><li>在高并发环境下，可以实时生效</li></ul></li></ul><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.8.27<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.springboot.version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">mybatis.springboot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper.version</span>&gt;</span>4.2.3<span class="tag">&lt;/<span class="name">mapper.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-api.version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">persistence-api.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.cloud.version</span>&gt;</span>2023.0.0<span class="tag">&lt;/<span class="name">spring.cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.cloud.alibaba.version</span>&gt;</span>2023.0.0.0-RC1<span class="tag">&lt;/<span class="name">spring.cloud.alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.cloud.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.cloud.alibaba.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--hutool--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${hutool.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mysql.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${druid.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mybatis.springboot.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--persistence--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${persistence-api.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通用Mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mapper.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/db_cache?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;rewriteBatchedStatements=true&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># MyBatis</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.clay.cache.entity</span></span><br><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Redis</span></span><br><span class="line"><span class="meta">spring.data.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.data.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.data.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.data.redis.lettuce.pool.max-wait</span>=<span class="string">-1ms</span></span><br><span class="line"><span class="meta">spring.data.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.data.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><ul><li>Redis 配置类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span> </span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        <span class="comment">//设置key序列化方式String</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置value的序列化方式Json</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        <span class="comment">//设置key序列化方式String</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置value的序列化方式Json</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>自定义注解 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 自定义缓存注解</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 将方法运行的结果进行缓存，在缓存时效内再次调用该方法时不会调用方法本身，而是直接从缓存获取结果并返回给调用方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisCacheable {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">keyPrefix</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringEL 表达式解析占位符对应的匹配 value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">matchValue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>AOP 切面类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.clay.cache.annotations.RedisCacheable;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.DefaultParameterNameDiscoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.EvaluationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.support.StandardEvaluationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheableAspect</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around("@annotation(com.clay.cache.annotations.RedisCacheable)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">cacheable</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>{</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 通过反射获取目标方法</span></span><br><span class="line">            MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">            Method method = signature.getMethod();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过反射获取目标方法上的RedisCacheable注解，如果存在，则说明需要使用缓存</span></span><br><span class="line">            RedisCacheable RedisCacheableAnnotation = method.getAnnotation(RedisCacheable.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获得注解上面配置的参数</span></span><br><span class="line">            String keyPrefix = RedisCacheableAnnotation.keyPrefix();</span><br><span class="line">            String matchValueSpringEL = RedisCacheableAnnotation.matchValue();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// SpringEL 表达式的解析器</span></span><br><span class="line">            ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">            Expression expression = parser.parseExpression(matchValueSpringEL);</span><br><span class="line">            EvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获得目标方法的形参列表</span></span><br><span class="line">            Object[] parameterValues = joinPoint.getArgs();</span><br><span class="line">            DefaultParameterNameDiscoverer discoverer = <span class="keyword">new</span> DefaultParameterNameDiscoverer();</span><br><span class="line">            String[] parameterNames = discoverer.getParameterNames(method);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterNames.length; i++) {</span><br><span class="line">                log.debug(parameterNames[i] + <span class="string">"="</span> + parameterValues[i].toString());</span><br><span class="line">                context.setVariable(parameterNames[i], parameterValues[i].toString());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解析 SpringEL 表达式，拼接 Redis 的最终 key 形式</span></span><br><span class="line">            String key = keyPrefix + <span class="string">":"</span> + expression.getValue(context).toString();</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isBlank(key)) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"it's danger, redis key cannot be empty"</span>);</span><br><span class="line">            }</span><br><span class="line">            log.info(<span class="string">"Cache key is "</span> + key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询 Redis 缓存</span></span><br><span class="line">            result = redisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="comment">// 缓存不为空，则直接返回缓存值</span></span><br><span class="line">                log.info(<span class="string">"Cache value found"</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行目标方法</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将目标方法的执行结果写入 Redis 缓存，并设置过期时间</span></span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) {</span><br><span class="line">                redisTemplate.opsForValue().set(key, result, <span class="number">24</span>, TimeUnit.HOURS);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Throwable e) {</span><br><span class="line">            log.error(<span class="string">"Occur Exception"</span>, e);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>主启动类，添加了 <code>@EnableAspectJAutoProxy</code> 注解 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@MapperScan("com.clay.cache.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户名'</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'手机号'</span>,</span><br><span class="line">  `age` tinyint <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'年龄'</span>,</span><br><span class="line">  `status` tinyint <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'有效状态，1有效，0无效'</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">'更新时间'</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_user(`phone`, `name`, `age`, `status`) <span class="keyword">values</span>(<span class="string">'911'</span>, <span class="string">'Jim'</span>, <span class="number">18</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> t_user(`phone`, `name`, `age`, `status`) <span class="keyword">values</span>(<span class="string">'911'</span>, <span class="string">'Amy'</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> t_user(`phone`, `name`, `age`, `status`) <span class="keyword">values</span>(<span class="string">'911'</span>, <span class="string">'Tom'</span>, <span class="number">25</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> t_user(`phone`, `name`, `age`, `status`) <span class="keyword">values</span>(<span class="string">'911'</span>, <span class="string">'Peter'</span>, <span class="number">28</span>, <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h3><ul><li>实体类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table(name = "t_user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = "JDBC")</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有效状态，1有效，0无效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = "update_time")</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = "create_time")</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Mapper 接口 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.cache.entity.User;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>服务接口 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.cache.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">get</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>服务实现类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.cache.annotations.RedisCacheable;</span><br><span class="line"><span class="keyword">import</span> com.clay.cache.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.clay.cache.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.clay.cache.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@RedisCacheable(keyPrefix = "User", matchValue = "#id")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>控制器类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.cache.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.clay.cache.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/add")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>{</span><br><span class="line">        userService.add(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/get/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> userService.get(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><ul><li>当第一次调用 <code>/user/get/1</code> 接口时，会从数据库查询数据，并将查询结果写入 Redis，控制台输出的日志信息如下：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[http-nio-8080-exec-1] INFO  c.c.c.aspect.RedisCacheableAspect - Cache key is User:1</span><br><span class="line">[http-nio-8080-exec-1] INFO  c.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited</span><br></pre></td></tr></tbody></table></figure><ul><li>当第二次调用 <code>/user/get/1</code> 接口时，会直接从 Redis 获取到数据，而不再查询数据库，控制台输出的日志信息如下：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[http-nio-8080-exec-3] INFO  c.c.c.aspect.RedisCacheableAspect - Cache key is User:1</span><br><span class="line">[http-nio-8080-exec-3] INFO  c.c.c.aspect.RedisCacheableAspect - Cache value found</span><br></pre></td></tr></tbody></table></figure><ul><li>在 Redis 中，缓存的数据如下图所示</li></ul><p><img data-src="../../../asset/2024/08/redis-cache-annotation-1.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="/posts/55e5dfd.html">Spring 之 AOP 的基础使用</a></li><li><a href="/posts/e792e01b.html">Spring Cache 使用教程之一</a></li><li><a href="/posts/a843c693.html">Spring Cache 使用教程之二</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍在 SpringBoot 项目中，如何基于自研 Redis 缓存组件。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="缓存" scheme="https://www.techgrow.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 自研分布式限流组件</title>
    <link href="https://www.techgrow.cn/posts/9d2005a2.html"/>
    <id>https://www.techgrow.cn/posts/9d2005a2.html</id>
    <published>2024-08-25T15:12:42.000Z</published>
    <updated>2024-08-25T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/e2d22e3.html">SpringBoot 封装接口性能统计组件</a></li><li><a href="/posts/9d2005a2.html">SpringBoot 自研分布式限流组件</a></li><li><a href="/posts/e7c5e7ed.html">SpringBoot 自研 Redis 缓存组件</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍在 SpringBoot 项目中，如何基于 Redis + Lua 脚本 + AOP + 反射 + 自定义注解自研分布式限流组件，且支持拔插式使用。由于篇幅有限，下面使用的是 Redis 单机服务，若是在生产环境，为了保证系统的可用性，建议部署 Redis 集群，并使用 Redisson 作为 Redis 的客户端，这里不再累述。</p><span id="more"></span><div class="admonition note"><p class="admonition-title">代码下载</p><p>完整的案例代码可以从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/distributed-limit/distributed-limit-study">这里</a> 下载得到。值得一提的是，本文的案例代码不仅适用于 SpringBoot 项目，理论上适用于任何 Spring 项目。</p></div><h2 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h2><p>公司内部使用了自研的 RPC 框架或者 Dubbo 来开发微服务项目，又或者为了安全性不允许项目引入过多的外部组件，导致无法使用 Spring Cloud 相关的限流组件（如 Sentinel），因此需要自研限流组件来满足业务需求。</p><ul><li>可配置<ul><li>在规定时间内，可以随意调整限流的时间和次数</li><li>比如，支持设定 1 秒内最多允许访问 5 次接口，超过设定会启动限流功能，保护系统不过载</li></ul></li><li>可插拔<ul><li>可以按照促销活动、VIP 等级、方法使用频率等业务规则，要求 Controller 里面的业务方法有标识性的限流控制机制<ul><li>添加，方法自带限流功能</li><li>不添加，方法没有限流功能</li></ul></li></ul></li><li>可通用<ul><li>开发的自定义限流共用模块，可以给整个开发团队赋能公用</li><li>不能和业务逻辑代码写死，支持独立出来，并可以配置</li></ul></li><li>高可用<ul><li>在高并发环境下，可以实时生效</li></ul></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>通过自定义注解来实现业务解耦，可配置（在规定时间内，可以随意调整限流的时间和次数），可拔插使用，即一个注解就可以搞定限流的核心功能。</li><li>底层使用 Redis + Lua 脚本实现，支持高并发，且满足事务的一致性与原子性要求。</li><li>自定义 AOP 切面类，实现业务解耦。</li></ul><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.8.27<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.cloud.version</span>&gt;</span>2023.0.0<span class="tag">&lt;/<span class="name">spring.cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.cloud.alibaba.version</span>&gt;</span>2023.0.0.0-RC1<span class="tag">&lt;/<span class="name">spring.cloud.alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.cloud.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.cloud.alibaba.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Test--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--HuTool--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${hutool.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Lua-脚本"><a href="#Lua-脚本" class="headerlink" title="Lua 脚本"></a>Lua 脚本</h3><p>创建 Lua 脚本文件 <code>RateLimiter.lua</code>，并存放在项目的 <code>/src/main/resources</code> 目录下</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取KEY，针对特定的接口进行限流</span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取在限流注解上标注的限流次数</span></span><br><span class="line"><span class="keyword">local</span> limit = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前已访问接口的次数</span></span><br><span class="line"><span class="keyword">local</span> curentLimit = <span class="built_in">tonumber</span>(redis.call(<span class="string">'get'</span>, key) <span class="keyword">or</span> <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 超过限流次数直接返回-1，否则递增访问次数</span></span><br><span class="line"><span class="keyword">if</span> curentLimit + <span class="number">1</span> &gt; limit</span><br><span class="line"><span class="keyword">then</span> <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- 自增长 1</span></span><br><span class="line">    redis.call(<span class="string">'INCRBY'</span>, key, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">-- 设置过期时间</span></span><br><span class="line">    redis.call(<span class="string">'EXPIRE'</span>, key, ARGV[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> curentLimit + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><ul><li>自定义异常类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLimitException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLimitException</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLimitException</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLimitException</span><span class="params">(String message, Throwable cause)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Redis 配置类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span> </span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        <span class="comment">//设置key序列化方式String</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置value的序列化方式Json</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        <span class="comment">//设置key序列化方式String</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置value的序列化方式Json</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>自定义注解 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target({ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisLimitAnnotation {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源的唯一 Key</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 作用：不同的接口，不同的流量控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许访问的最大次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">limit</span><span class="params">()</span> <span class="keyword">default</span> 5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间，也可以理解为单位时间或者滑动窗口时间</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 单位为秒，默认值为 60</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">expire</span><span class="params">()</span> <span class="keyword">default</span> 60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流的提示语</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">msg</span><span class="params">()</span> <span class="keyword">default</span> "当前接口的负载过高，请稍后再试"</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>AOP 切面类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.clay.limit.annotations.RedisLimitAnnotation;</span><br><span class="line"><span class="keyword">import</span> com.clay.limit.exception.RedisLimitException;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.DefaultRedisScript;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scripting.support.ResourceScriptSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLimitAspect</span> </span>{</span><br><span class="line"></span><br><span class="line">    Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultRedisScript&lt;Long&gt; redisLuaScript;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 加载 Lua 脚本</span></span><br><span class="line">        redisLuaScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        redisLuaScript.setResultType(Long.class);</span><br><span class="line">        redisLuaScript.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">"RateLimiter.lua"</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around("@annotation(com.clay.limit.annotations.RedisLimitAnnotation)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"---------@Around before"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获取目标方法</span></span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获取目标方法上的RedisLimitAnnotation注解，如果存在，则说明需要限流</span></span><br><span class="line">        RedisLimitAnnotation redisLimitAnnotation = method.getAnnotation(RedisLimitAnnotation.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (redisLimitAnnotation != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">// 获取Redis中的key</span></span><br><span class="line">            String key = redisLimitAnnotation.key();</span><br><span class="line">            String className = method.getDeclaringClass().getName();</span><br><span class="line">            String methodName = method.getName();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isBlank(key)) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RedisLimitException(<span class="string">"it's danger, limit key cannot be empty"</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            String limitInfo = key + <span class="string">"\t"</span> + className + <span class="string">"."</span> + methodName + <span class="string">"()"</span>;</span><br><span class="line">            log.info(limitInfo);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> limit = redisLimitAnnotation.limit();</span><br><span class="line">            <span class="keyword">long</span> expire = redisLimitAnnotation.expire();</span><br><span class="line">            List&lt;String&gt; keys = Collections.singletonList(key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行 Lua 脚本</span></span><br><span class="line">            Long count =</span><br><span class="line">                stringRedisTemplate.execute(redisLuaScript, keys, String.valueOf(limit), String.valueOf(expire));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count != <span class="keyword">null</span> &amp;&amp; count == -<span class="number">1</span>) {</span><br><span class="line">                log.warn(<span class="string">"启动限流功能, Key 为 "</span> + key);</span><br><span class="line">                <span class="keyword">return</span> redisLimitAnnotation.msg();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"Access try count is "</span> + count + <span class="string">", limit key is "</span> + key);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 执行目标方法</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">        } <span class="keyword">catch</span> (Throwable e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------@Around after"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>主启动类，添加了 <code>@EnableAspectJAutoProxy</code> 注解 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><ul><li>控制器类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.IdUtil;</span><br><span class="line"><span class="keyword">import</span> com.clay.limit.annotations.RedisLimitAnnotation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/order")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/limit")</span></span><br><span class="line">    <span class="meta">@RedisLimitAnnotation(key = "orderLimit", limit = 5, expire = 10, msg = "当前排队人数较多，请稍后再试！")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">limit</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"正常业务返回，订单流水："</span> + IdUtil.fastUUID();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>当正常调用接口时，控制台输出的日志信息如下：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[http-nio-8080-exec-4] INFO  c.clay.limit.aspect.RedisLimitAspect - orderLimitcom.clay.limit.controller.OrderController.limit()</span><br><span class="line">[http-nio-8080-exec-4] INFO  c.clay.limit.aspect.RedisLimitAspect - Access try count is 1, limit key is orderLimit</span><br></pre></td></tr></tbody></table></figure><ul><li>当频繁调用接口时，控制台输出的日志信息如下：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[http-nio-8080-exec-9] INFO  c.clay.limit.aspect.RedisLimitAspect - orderLimitcom.clay.limit.controller.OrderController.limit()</span><br><span class="line">[http-nio-8080-exec-9] WARN  c.clay.limit.aspect.RedisLimitAspect - 启动限流功能, Key 为 orderLimit</span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="/posts/55e5dfd.html">Spring 之 AOP 的基础使用</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍在 SpringBoot 项目中，如何基于 Redis + Lua 脚本 + AOP + 反射 + 自定义注解自研分布式限流组件。</summary>
    
    
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 封装接口性能统计组件</title>
    <link href="https://www.techgrow.cn/posts/e2d22e3.html"/>
    <id>https://www.techgrow.cn/posts/e2d22e3.html</id>
    <published>2024-08-23T15:12:42.000Z</published>
    <updated>2024-08-23T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/e2d22e3.html">SpringBoot 封装接口性能统计组件</a></li><li><a href="/posts/9d2005a2.html">SpringBoot 自研分布式限流组件</a></li><li><a href="/posts/e7c5e7ed.html">SpringBoot 自研 Redis 缓存组件</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍在 SpringBoot 项目中，如何通过 AOP + 反射 + 自定义注解来统计接口的性能，且支持拔插式使用。在不引入分布式日志链路追踪技术的情况下，统计接口的性能一般有以下几种实现方式：</p><ul><li>(1) 基于 Filter（过滤器）实现</li><li> (2) 基于 AOP + 反射 + 自定义注解实现</li><li> (3) 在 Spring Cloud GateWay 中，基于 GlobalFilter（全局过滤器）实现</li></ul><div class="admonition note"><p class="admonition-title">代码下载</p><p>完整的案例代码可以从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/distributed-log-tracing/distributed-log-tracing-study">这里</a> 下载得到。值得一提的是，本文的案例代码不仅适用于 SpringBoot 项目，理论上适用于任何 Spring 项目。</p></div><span id="more"></span><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><ul><li>引入依赖，如果仅仅是 Spring 项目，需要改为引入 <code>spring-aop</code> 和 <code>aspectjweaver</code> 依赖 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>自定义注解 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target({ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MethodExporter {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>AOP 切面类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.log.tracing.annotations.MethodExporter;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.DefaultParameterNameDiscoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodExporterAspect</span> </span>{</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知，使用了MethodExporter注解将会触发Around业务逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around("@annotation(com.clay.log.tracing.annotations.MethodExporter)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">methodExporter</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="comment">// 方法的返回结果</span></span><br><span class="line">        Object resultValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"----- @Around before"</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行目标方法</span></span><br><span class="line">        resultValue = proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> costTime = endTime - startTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获取目标方法</span></span><br><span class="line">        MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获取目标方法上的注解标签，如果存在，则说明需要统计性能</span></span><br><span class="line">        MethodExporter methodExporterAnnotation = method.getAnnotation(MethodExporter.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (methodExporterAnnotation != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">// 获得方法里面的形参信息</span></span><br><span class="line">            StringBuilder jsonParam = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            Object[] parameterValues = proceedingJoinPoint.getArgs();</span><br><span class="line">            DefaultParameterNameDiscoverer discoverer = <span class="keyword">new</span> DefaultParameterNameDiscoverer();</span><br><span class="line">            String[] parameterNames = discoverer.getParameterNames(method);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterNames.length; i++) {</span><br><span class="line">                jsonParam.append(parameterNames[i] + <span class="string">" = "</span> + parameterValues[i].toString() + <span class="string">"; "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 将返回结果序列化</span></span><br><span class="line">            String jsonResult = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (resultValue != <span class="keyword">null</span>) {</span><br><span class="line">                jsonResult = <span class="keyword">new</span> ObjectMapper().writeValueAsString(resultValue);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                jsonResult = <span class="string">"null"</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"\n方法分析上报中 "</span> +</span><br><span class="line">                <span class="string">"\n类名方法名: "</span> + proceedingJoinPoint.getTarget().getClass().getName() + <span class="string">"."</span> +</span><br><span class="line">                proceedingJoinPoint.getSignature().getName() + <span class="string">"()"</span> +</span><br><span class="line">                <span class="string">"\n执行耗时: "</span> + costTime + <span class="string">"毫秒"</span> +</span><br><span class="line">                <span class="string">"\n输入参数: "</span> + jsonParam + <span class="string">""</span> +</span><br><span class="line">                <span class="string">"\n返回结果: "</span> + jsonResult + <span class="string">""</span> +</span><br><span class="line">                <span class="string">"\n方法分析上报结束"</span></span><br><span class="line">            );</span><br><span class="line">            log.info(<span class="string">"----- @Around after"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultValue;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>主启动类，添加了 <code>@EnableAspectJAutoProxy</code> 注解 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><ul><li>控制器类，在需要统计性能的接口上添加 <code>@MethodExporter</code> 自定义注解即可 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.log.tracing.annotations.MethodExporter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/pay")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MethodExporter</span></span><br><span class="line">    <span class="meta">@GetMapping(value = "/list")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">list</span><span class="params">(<span class="meta">@RequestParam(value = "page", defaultValue = "1")</span> <span class="keyword">int</span> page,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@RequestParam(value = "rows", defaultValue = "5")</span> <span class="keyword">int</span> rows)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">"code"</span>, <span class="string">"200"</span>);</span><br><span class="line">        result.put(<span class="string">"message"</span>, <span class="string">"success"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停毫秒</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MethodExporter</span></span><br><span class="line">    <span class="meta">@GetMapping(value = "/get")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">get</span><span class="params">()</span> </span>{</span><br><span class="line">        Map&lt;String, String&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">"code"</span>, <span class="string">"404"</span>);</span><br><span class="line">        result.put(<span class="string">"message"</span>, <span class="string">"not-found"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停毫秒</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = "/update")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"invoke method without @MethodExporter"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>访问 <code>http://127.0.0.1:8080/pay/list</code> 接口后，控制台输出的日志信息如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方法分析上报中 </span><br><span class="line">类名方法名: com.clay.log.tracing.controller.PayController.list()</span><br><span class="line">执行耗时: 865毫秒</span><br><span class="line">输入参数: page = 1; rows = 5; </span><br><span class="line">返回结果: {"code":"200","message":"success"}</span><br><span class="line">方法分析上报结束</span><br></pre></td></tr></tbody></table></figure><p>访问 <code>http://127.0.0.1:8080/pay/update</code> 接口后，控制台输出的日志信息如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke method without @MethodExporter</span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="/posts/55e5dfd.html">Spring 之 AOP 的基础使用</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍如何基于 SpringBoot，通过 AOP + 反射 + 自定义注解来统计接口的性能。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 MySQL 8 教程</title>
    <link href="https://www.techgrow.cn/posts/2669f243.html"/>
    <id>https://www.techgrow.cn/posts/2669f243.html</id>
    <published>2024-08-08T02:39:25.000Z</published>
    <updated>2024-08-08T02:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="官方镜像"><a href="#官方镜像" class="headerlink" title="官方镜像"></a>官方镜像</h2><ul><li><a href="https://hub.docker.com/_/mysql">Docker Hub 镜像地址</a></li></ul><h2 id="启动-MySQL-容器"><a href="#启动-MySQL-容器" class="headerlink" title="启动 MySQL 容器"></a>启动 MySQL 容器</h2><h3 id="Docker-启动容器"><a href="#Docker-启动容器" class="headerlink" title="Docker 启动容器"></a>Docker 启动容器</h3><ul><li>简单启动容器（后台运行）</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ docker</span> run<span class="params"> --name</span> mysql8<span class="params"> -e</span> MYSQL_ROOT_PASSWORD=your-password<span class="params"> -d</span> mysql:8.0.39</span><br></pre></td></tr></tbody></table></figure><ul><li>持久化 MySQL 容器内的数据库数据（后台运行）</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ docker</span> run<span class="params"> --name</span> mysql8<span class="params"> -v</span> /my/own/datadir:/var/lib/mysql<span class="params"> -e</span> MYSQL_ROOT_PASSWORD=your-password<span class="params"> -d</span> mysql:8.0.39</span><br></pre></td></tr></tbody></table></figure><ul><li>指定 MySQL 配置文件来启动容器（后台运行），假设本地配置文件的路径为 <code>/my/custom/config-file.cnf</code></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ docker</span> run<span class="params"> --name</span> mysql8<span class="params"> -v</span> /my/custom:/etc/mysql/conf.d<span class="params"> -e</span> MYSQL_ROOT_PASSWORD=your-password<span class="params"> -d</span> mysql:8.0.39</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="Docker-Compose-启动容器"><a href="#Docker-Compose-启动容器" class="headerlink" title="Docker Compose 启动容器"></a>Docker Compose 启动容器</h3><ul><li>创建 <code>docker-compose.yml</code> 配置文件，并写入以下内容：</li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.9'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.39</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql8</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">your-password</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'/my/own/datadir:/var/lib/mysql'</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在 <code>docker-compose.yml</code> 配置文件所在的目录下，使用以下命令创建并启动容器 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ docker</span> compose up<span class="params"> -d</span></span><br></pre></td></tr></tbody></table></figure><h2 id="测试-MySQL-容器"><a href="#测试-MySQL-容器" class="headerlink" title="测试 MySQL 容器"></a>测试 MySQL 容器</h2><h3 id="查看容器的日志信息"><a href="#查看容器的日志信息" class="headerlink" title="查看容器的日志信息"></a>查看容器的日志信息</h3><ul><li>查看容器运行的日志信息 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ docker</span> logs mysql8</span><br></pre></td></tr></tbody></table></figure><ul><li>或者 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ docker</span> logs<span class="params"> -f</span><span class="params"> --tail</span> 50 mysql8</span><br></pre></td></tr></tbody></table></figure><h3 id="登录-MySQL-服务器"><a href="#登录-MySQL-服务器" class="headerlink" title="登录 MySQL 服务器"></a>登录 MySQL 服务器</h3><ul><li>使用 <code>docker exec</code> 命令连接进 Docker 容器内部 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ docker</span> <span class="built_in">exec</span><span class="params"> -it</span> mysql8 bash</span><br></pre></td></tr></tbody></table></figure><ul><li>连接进 Doker 容器内部后，可以使用以下命令登录 MySQL 服务器 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ mysql</span><span class="params"> -h</span> localhost<span class="params"> -u</span> root<span class="params"> -p</span></span><br></pre></td></tr></tbody></table></figure><h2 id="远程登录-MySQL"><a href="#远程登录-MySQL" class="headerlink" title="远程登录 MySQL"></a>远程登录 MySQL</h2><p>在默认情况下，MySQL 是不支持远程登录的，详细说明请看 <a href="/posts/24a08cfe.html#%E6%97%A0%E6%B3%95%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-MySQL">这里</a>。强烈建议单独创建一个普通用户，然后授权该用户可以远程访问特定的数据库。首先连接进 Docker 容器的内部，然后使用 <code>root</code> 用户登录 MySQL 服务器，最后执行以下 SQL 语句。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'your-user-name'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'your-password'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> your<span class="operator">-</span>db<span class="operator">-</span>name.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">'your-user-name'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍如何使用 Docker 快速安装 MySQL 8，包括远程登录。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 锁的使用</title>
    <link href="https://www.techgrow.cn/posts/bf389d6q.html"/>
    <id>https://www.techgrow.cn/posts/bf389d6q.html</id>
    <published>2024-07-03T14:39:42.000Z</published>
    <updated>2024-07-03T14:39:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/bf389d6q.html">MySQL 锁的使用</a></li><li><a href="/posts/ba389f6e.html">MySQL 索引的使用</a></li><li><a href="/posts/bf8bc8c0.html">MySQL 索引的底层数据结构详解</a></li><li><a href="/posts/284a5386.html">MySQL 索引的最左前缀原则详解</a></li></ul><h2 id="MySQL-锁的介绍"><a href="#MySQL-锁的介绍" class="headerlink" title="MySQL 锁的介绍"></a>MySQL 锁的介绍</h2><h3 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h3><p>在 MySQL 中，锁机制可以用来解决事务并发问题。MySQL 的锁有以下几种类型：</p><ul><li><strong>按锁的粒度可以分为：</strong><ul><li>行锁：锁住某行数据，锁粒度最小，并发度高。开销大，加锁慢，会出现死锁。</li><li>表锁：锁住整张表，锁粒度较大，并发度低。开销小，加锁快，不会出现死锁。</li><li>间隙锁：锁住的是一个区间。</li><li>全局锁：锁住整个数据库，锁粒度最大。</li></ul></li></ul><span id="more"></span><ul><li><p><strong>按锁的排它性可以分为：</strong></p><ul><li>共享锁：也就是读锁，一个事务给某行数据加了读锁，其他事务也可以读，但是不能写。</li><li>排它锁：也就是写锁，一个事务给某行数据加了写锁，其他事务不能读，也不能写。</li></ul></li><li><p><strong>按锁的逻辑可以分为：</strong></p><ul><li>乐观锁：并不会真正的去锁住某行记录，而是通过一个版本号来控制数据的并发访问。</li><li>悲观锁：比如行锁、表锁等都是悲观锁。</li></ul></li></ul><h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><p>MySQL 中常用的锁主要分为以下几类：</p><ul><li><p>(1) 全局锁（Global Lock）</p><ul><li><strong>全局锁（Global Lock）</strong>：用于在整个数据库级别上进行锁定操作，通常用于数据库备份和维护操作。加锁可以使用命令 <code>FLUSH TABLES WITH READ LOCK;</code>，解锁可以使用命令 <code>UNLOCK TABLES;</code>。这种锁会将整个数据库置于只读模式，阻止所有写操作（包括数据更新、插入和删除），但允许读操作。常用于整个数据库备份时，以确保备份的一致性。</li></ul></li><li><p>(2) 表级锁（Table Locks）</p><ul><li><strong>表锁（Table Lock）</strong>：将整张表锁定。<ul><li><strong>表共享锁（读锁）</strong>：允许多个事务同时读取同一个表的数据，但不允许任何事务对表进行写操作。</li><li><strong>表排它锁（写锁）</strong>：只允许持有锁的事务对表进行读和写操作，不允许其他事务访问被锁定的表，既不允许读操作，也不允许写操作。</li></ul></li></ul></li><li><p>(3) 行级锁（Row Locks）</p><ul><li><strong>行锁（Row Lock）</strong>：锁定表中的特定行。行锁的粒度更小，允许更高的并发性。主要用于 InnoDB 存储引擎。<ul><li><strong>行共享锁（读锁）</strong>：允许多个事务读取同一行数据，但不能修改。其他事务可以继续加共享锁，但不能加排它锁。</li><li><strong>行排它锁（写锁）</strong>：一个事务获取排它锁后，其他事务不能再读取或修改该行。排它锁会阻塞其他事务的共享锁和排它锁请求。</li></ul></li></ul></li><li><p>(4) 意向锁（Intention Locks）</p><ul><li><strong>意向锁（Intention Lock）</strong>：在表级别上设置的锁，用于表示某事务准备对某些行加共享锁或排它锁。<ul><li><strong>意向共享锁（IS Lock，Intention Shared Lock）</strong>：事务准备加共享锁时，先在表上加一个意向共享锁。</li><li><strong>意向排它锁（IX Lock，Intention Exclusive Lock）</strong>：事务准备加排它锁时，先在表上加一个意向排它锁。</li></ul></li></ul></li><li><p>(5) 自增锁（AUTO-INC Locks）</p><ul><li><strong>自增锁（AUTO-INC Lock）</strong>：用于处理包含 <code>AUTO_INCREMENT</code> 列的插入操作，确保自增列的值唯一性，主要用于 InnoDB 存储引擎。如果有事务回滚操作，数据会回滚，但自增序列不会回滚。</li></ul></li><li><p>(6) 间隙锁（Gap Locks）</p><ul><li><strong>间隙锁（Gap Lock）</strong>：锁定一个范围，而不是锁定记录本身，主要用于防止幻读现象。间隙锁通常只有在可重复读（REPEATABLE READ）和串行化（SERIALIZABLE）隔离级别下才会使用到。</li></ul></li><li><p>(7) 临键锁（Next-Key Locks）</p><ul><li><strong>临键锁（Next-Key Lock）</strong>：是行锁和间隙锁的组合，锁定记录以及它前面的间隙，主要用于防止幻读现象。</li></ul></li><li><p>(8) 插入意向锁（Insert Intention Locks）</p><ul><li><strong>插入意向锁（Insert Intention Lock）</strong>：是一种特殊的间隙锁，多个事务在同一个间隙中插入记录时，不会互相阻塞。</li></ul></li></ul><h3 id="间隙锁是什么"><a href="#间隙锁是什么" class="headerlink" title="间隙锁是什么"></a>间隙锁是什么</h3><p>MySQL 的间隙锁（Gap Lock）是 InnoDB 存储引擎实现的锁机制之一，用于避免幻读现象并确保一致性。在可重复读（REPEATABLE READ）隔离级别下，间隙锁是必不可少的。间隙锁的主要特点和作用如下：</p><ul><li>(1) <strong>锁定范围</strong>：间隙锁锁定的是记录之间的空隙。例如，在表中有两条记录 ID 分别为 10 和 20，间隙锁可以锁定 ID 在 10 和 20 之间的范围，使得该范围内不能插入新的记录。</li><li>(2) <strong>防止幻读</strong>：通过锁定记录之间的空隙，间隙锁防止了其他事务在这个空隙内插入新记录，从而避免了幻读现象。在幻读现象中，一个事务在执行多次相同查询时，看到的结果集不同，这是因为其他事务插入了新记录。</li><li>(3) <strong>实现方式</strong>：在 InnoDB 中，间隙锁通常与临键锁（Next-Key Lock）结合使用。临键锁是行锁和间隙锁的组合，用于锁定记录以及它前面的间隙，这样可以确保查询范围内的所有记录和间隙都被锁定。</li><li>(4) <strong>性能影响</strong>：间隙锁在提高一致性的同时，也会影响并发性能，因为它会锁定较大的范围，导致更多的等待和锁冲突。因此，在某些高并发应用中，需要权衡一致性和性能。</li><li>(5) <strong>事务隔离级别</strong>：间隙锁主要在可重复读（REPEATABLE READ）和串行化（SERIALIZABLE）隔离级别下使用。对于读已提交（READ COMMITTED）和读未提交（READ UNCOMMITTED）隔离级别，MySQL 通常不会使用间隙锁，因为这些隔离级别允许一定程度的并发和数据不一致。</li></ul><div class="admonition note"><p class="admonition-title">总结</p><p>间隙锁通过锁定记录之间的空隙，可以防止其他事务在这个空隙（范围）内插入新记录，从而避免幻读现象。</p></div><p>比如，有一个带有索引的表 <code>students</code>，其中包含两条记录 ID 分别为 10 和 20。一个事务执行以下查询：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> id <span class="keyword">between</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">20</span> <span class="keyword">FOR</span> UPDATE;</span><br></pre></td></tr></tbody></table></figure><p>此查询会通过间隙锁来锁定 ID 在 10 和 20 之间的间隙，所以其他事务不能在 ID 为 15 的位置插入新记录。</p><h2 id="MySQL-锁的使用"><a href="#MySQL-锁的使用" class="headerlink" title="MySQL 锁的使用"></a>MySQL 锁的使用</h2><h3 id="行锁的使用"><a href="#行锁的使用" class="headerlink" title="行锁的使用"></a>行锁的使用</h3><h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h4><p>行共享锁（读锁）允许多个事务读取同一行数据，但不能修改。其他事务可以继续加共享锁，但不能加排它锁。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加行共享锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span> <span class="keyword">FOR</span> SHARE;</span><br></pre></td></tr></tbody></table></figure><p>行排它锁（写锁）只允许持有锁的事务对一行数据进行读和写操作，其他事务不能再读取或修改该行。排它锁会阻塞其他事务的共享锁和排它锁请求。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加行排它锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span> <span class="keyword">FOR</span> UPDATE;</span><br></pre></td></tr></tbody></table></figure><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><p>假设有一张 <code>accounts</code> 表，其表结构如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> accounts (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    balance <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>如果希望防止脏读、不可重复读和幻读，可以使用事务和行锁来实现。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务 1</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> balance <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> UPDATE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务 2</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> balance <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> UPDATE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务 1 可以修改 balance</span></span><br><span class="line">UPDATE accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务 2 在事务 1 提交之前无法继续执行</span></span><br></pre></td></tr></tbody></table></figure><h3 id="表锁的使用"><a href="#表锁的使用" class="headerlink" title="表锁的使用"></a>表锁的使用</h3><h4 id="使用语法-1"><a href="#使用语法-1" class="headerlink" title="使用语法"></a>使用语法</h4><p>表共享锁（读锁）允许多个事务同时读取同一个表的数据，但不允许任何事务对表进行写操作。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用表共享锁</span></span><br><span class="line">LOCK TABLES your_table_name READ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 进行读取操作</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></tbody></table></figure><p>表排它锁（写锁）只允许持有锁的事务对表进行读和写操作，不允许其他事务访问被锁定的表，既不允许读操作，也不允许写操作。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用表排它锁</span></span><br><span class="line">LOCK TABLES your_table_name WRITE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 进行写操作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> your_table_name (column1, column2) <span class="keyword">VALUES</span> (<span class="string">'value1'</span>, <span class="string">'value2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者进行读操作（只有当前事务可以读）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></tbody></table></figure><h4 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 锁定表以进行写操作</span></span><br><span class="line">LOCK TABLES employees WRITE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入新数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, position) <span class="keyword">VALUES</span> (<span class="string">'John Doe'</span>, <span class="string">'Manager'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新数据</span></span><br><span class="line">UPDATE employees <span class="keyword">SET</span> position <span class="operator">=</span> <span class="string">'Senior Manager'</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">'John Doe'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 读取表数据（只有当前事务可以读）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL-锁的注意事项"><a href="#MySQL-锁的注意事项" class="headerlink" title="MySQL 锁的注意事项"></a>MySQL 锁的注意事项</h2><h3 id="使用注意案例一"><a href="#使用注意案例一" class="headerlink" title="使用注意案例一"></a>使用注意案例一</h3><ul><li>创建表 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_customer` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `cname` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` TINYINT(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `birth` <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_cname <span class="keyword">on</span> t_customer(cname);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_customer(cname,age,phone,sex,birth) <span class="keyword">VALUES</span>(<span class="string">'z3'</span>,<span class="number">22</span>,<span class="string">'13811112222'</span>,<span class="number">1</span>,NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_customer(cname,age,phone,sex,birth) <span class="keyword">VALUES</span>(<span class="string">'z4'</span>,<span class="number">24</span>,<span class="string">'13811112223'</span>,<span class="number">0</span>,NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_customer(cname,age,phone,sex,birth) <span class="keyword">VALUES</span>(<span class="string">'z5'</span>,<span class="number">25</span>,<span class="string">'13811112224'</span>,<span class="number">1</span>,NOW());</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2024/08/mysql-locker-1.png"></p><ul><li>操作步骤一（使用聚簇索引 - 主键索引）</li></ul><table><thead><tr><th>MySQL 客户端一</th><th> MySQL 客户端二</th></tr></thead><tbody><tr><td> BEGIN; <br> UPDATE t_customer SET age=55 WHERE id=4;</td><td></td></tr><tr><td></td><td>UPDATE t_customer SET age=55 WHERE id=5; # 正常执行 <br> 或者 <br> UPDATE t_customer SET age=33 WHERE id=6; # 正常执行 <br> 或者 <br> UPDATE t_customer SET age=11 WHERE id=4; # 转圈等待 <br></td></tr><tr><td>COMMIT;</td><td></td></tr><tr><td></td><td>OK</td></tr><tr><td><strong> 注意：id 字段建立了主键索引</strong></td><td></td></tr></tbody></table><blockquote><p>为什么上面的 MySQL 客户端二在执行第 3 个 UPDATE 操作时，会一直转圈等待呢？这是因为在 <code>t_customer</code> 表中，<code>id</code> 字段建立了主键索引，这导致了 MySQL 客户端一执行 UPDATE 操作时使用了行锁，间接导致 MySQL 客户端二的 UPDATE 操作要等待 MySQL 客户端一执行完成后才能执行。换言之，索引生效后，UPDATE 操作使用的就是行锁。</p></blockquote><ul><li>操作步骤二（使用非聚簇索引 - 普通索引）</li></ul><table><thead><tr><th>MySQL 客户端一</th><th> MySQL 客户端二</th></tr></thead><tbody><tr><td> BEGIN; <br> UPDATE t_customer SET age=1 WHERE cname=’z3’;</td><td></td></tr><tr><td></td><td>UPDATE t_customer SET age=44 WHERE cNAME=’z4’; #正在执行 <br> 或者 <br> UPDATE t_customer SET age=55 WHERE cNAME=’z5’; #正在执行 <br> 或者 <br> UPDATE t_customer SET age=11 WHERE cNAME=’z3’ # 转圈等待 <br> 或者 <br> UPDATE t_customer SET age=11 WHERE id=4 # 转圈等待</td></tr><tr><td> COMMIT;</td><td></td></tr><tr><td></td><td>OK</td></tr><tr><td><strong> 注意：id 和 cname 字段都建立了普通索引</strong></td><td></td></tr></tbody></table><blockquote><p>为什么上面的 MySQL 客户端二在执行第 3 和第 4 个 UPDATE 操作时，会一直转圈等待呢？这是因为在 <code>t_customer</code> 表中，<code>cname</code> 和 <code>id</code> 字段都建立了索引，这导致了 MySQL 客户端一执行 UPDATE 操作时使用了行锁，间接导致 MySQL 客户端二的 UPDATE 操作要等待 MySQL 客户端一执行完成后才能执行。换言之，索引生效后，UPDATE 操作使用的就是行锁。</p></blockquote><div class="admonition note"><p class="admonition-title">提示</p><p>更多关于聚簇索引与非聚簇索引的介绍，请看 <a href="/posts/bf8bc8c0.html#%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95">这里</a> 的教程。</p></div><h3 id="使用注意案例二"><a href="#使用注意案例二" class="headerlink" title="使用注意案例二"></a>使用注意案例二</h3><ul><li>创建表 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_customer` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `cname` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` TINYINT(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `birth` <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_cname <span class="keyword">on</span> t_customer(cname);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_customer(cname,age,phone,sex,birth) <span class="keyword">VALUES</span>(<span class="string">'z3'</span>,<span class="number">22</span>,<span class="string">'13811112222'</span>,<span class="number">1</span>,NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_customer(cname,age,phone,sex,birth) <span class="keyword">VALUES</span>(<span class="string">'z4'</span>,<span class="number">24</span>,<span class="string">'13811112223'</span>,<span class="number">0</span>,NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_customer(cname,age,phone,sex,birth) <span class="keyword">VALUES</span>(<span class="string">'z5'</span>,<span class="number">25</span>,<span class="string">'13811112224'</span>,<span class="number">1</span>,NOW());</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2024/08/mysql-locker-1.png"></p><ul><li>操作步骤</li></ul><table><thead><tr><th> MySQL 客户端一</th><th> MySQL 客户端二</th></tr></thead><tbody><tr><td> BEGIN; <br> UPDATE t_customer SET age=55 WHERE phone=’13811112222’;</td><td></td></tr><tr><td></td><td>UPDATE t_customer SET age=55 WHERE id=5; # 转圈等待。<br> 或者 <br> UPDATE t_customer SET age=44 WHERE id=6; # 转圈等待。</td></tr><tr><td>COMMIT;</td><td></td></tr><tr><td></td><td>OK</td></tr><tr><td><strong> 注意： phone 字段没有建立索引</strong></td><td></td></tr></tbody></table><blockquote><p>为什么上面的 MySQL 客户端二在执行 UPDATE 操作时，会一直转圈等待呢？这是因为在 <code>t_customer</code> 表中，并没有给 <code>phone</code> 字段加索引，这导致了 MySQL 客户端一执行 UPDATE 操作时使用了表锁（全表扫描），间接导致 MySQL 客户端二的 UPDATE 操作要等待 MySQL 客户端一执行完成后才能执行。换言之，MySQL 客户端二使用的行锁变成了表锁。</p></blockquote><div class="admonition warning"><p class="admonition-title">特别注意</p><p>在 UPDATE 操作中，如果 WHERE 后面的字段没有建立索引或者索引不生效，那么就会导致其他事务的 UPDATE 操作中的行锁变成表锁，查询性能大大降低。</p></div><h3 id="使用注意案例的总结"><a href="#使用注意案例的总结" class="headerlink" title="使用注意案例的总结"></a>使用注意案例的总结</h3><p>InnoDB 的行锁，是通过锁住索引来实现的。如果加锁执行查询或者更新的时候，没有使用到索引，那么就会将整个聚簇索引（B+ 树）都锁住，这相当于锁表了，会大大降低数据库表的性能。</p>]]></content>
    
    
    <summary type="html">本文主要 MySQL 如何使用锁，包括行锁、表锁、间隙锁等。</summary>
    
    
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 的 Yum 包管理</title>
    <link href="https://www.techgrow.cn/posts/295a93a1.html"/>
    <id>https://www.techgrow.cn/posts/295a93a1.html</id>
    <published>2024-06-27T12:10:21.000Z</published>
    <updated>2024-06-27T12:10:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="查看软件包的可用版本"><a href="#查看软件包的可用版本" class="headerlink" title="查看软件包的可用版本"></a>查看软件包的可用版本</h3><ul><li>方法一：使用 <code>yum info</code> 命令 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum info &lt;包名&gt;<span class="params"> --showduplicates</span></span><br></pre></td></tr></tbody></table></figure><ul><li>方法二：使用 <code>yum list</code> 命令 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum list &lt;包名&gt;<span class="params"> --showduplicates</span></span><br></pre></td></tr></tbody></table></figure><ul><li>方法三：使用 <code>yum-utils</code> 工具 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 yum-utils 工具</span></span><br><span class="line">sudo yum install yum-utils</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看软件包的历史版本</span></span><br><span class="line">sudo repoquery --show-duplicates --qf <span class="string">"%{name}-%{version}-%{release}"</span> &lt;包名&gt;</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="安装指定版本的软件包"><a href="#安装指定版本的软件包" class="headerlink" title="安装指定版本的软件包"></a>安装指定版本的软件包</h3><p>在使用 <code>yum</code> 安装软件时，可以指定要安装的版本。以下是安装指定版本软件的方法：</p><blockquote><p>查找可用版本</p></blockquote><p>首先，查看某个软件包的所有可用版本：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list &lt;包名&gt;<span class="params"> --showduplicates</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>安装指定版本</p></blockquote><p>使用 <code>yum install</code> 命令并指定要安装的版本号：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install &lt;包名&gt;-&lt;版本号&gt;</span><br></pre></td></tr></tbody></table></figure><p>例如，要安装 <code>httpd</code> 的特定版本 <code>2.4.6-90.el7.centos</code>，可以使用以下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd-2.4.6-90.el7.centos</span><br></pre></td></tr></tbody></table></figure><blockquote><p>排除其他版本（可选）</p></blockquote><p>如果想确保不会意外升级到其他版本，可以配置 <code>yum</code> 排除其他版本。编辑 <code>/etc/yum.conf</code> 文件，并添加以下行：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line">exclude=&lt;包名&gt;</span><br></pre></td></tr></tbody></table></figure><p>可以排除多个软件包，使用空格分隔：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line">exclude=&lt;包名1&gt; &lt;包名2&gt;</span><br></pre></td></tr></tbody></table></figure><p>然后，在需要安装特定版本时，可以使用以下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install<span class="params"> --disableexcludes</span>=all &lt;包名&gt;-&lt;版本号&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>降级到指定版本（可选）</p></blockquote><p>如果已经安装了某个包，但想降级到某个特定版本，可以使用 <code>yum downgrade</code> 命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum downgrade &lt;包名&gt;-&lt;版本号&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>回滚到特定版本（可选）</p></blockquote><p>可以使用 <code>yum history</code> 命令来查看和回滚特定版本：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有的历史记录</span></span><br><span class="line">yum <span class="built_in">history</span> list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定的历史记录</span></span><br><span class="line">yum <span class="built_in">history</span> info &lt;历史ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到指定的历史记录</span></span><br><span class="line">yum <span class="built_in">history</span> undo &lt;历史ID&gt;</span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">特别注意</p><p>如果在某个 YUM 历史操作记录中，安装或更新了多个软件包，那么执行回滚后，该历史记录里的所有操作都会回滚（即可能会批量回滚多个软件的版本）。</p></div><h3 id="排除更新指定的软件包"><a href="#排除更新指定的软件包" class="headerlink" title="排除更新指定的软件包"></a>排除更新指定的软件包</h3><p>在 CentOS 7 系统中，如果想使用 <code>yum update</code> 更新系统时排除某个软件包，可以通过以下几种方法来实现：</p><blockquote><p>方法一</p></blockquote><p>在运行 <code>yum update</code> 命令时，使用 <code>--exclude</code> 选项来排除特定的软件包。例如，如果想要排除 <code>httpd</code> 软件包，可以运行以下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update<span class="params"> --exclude</span>=httpd</span><br></pre></td></tr></tbody></table></figure><p>也可以排除多个软件包，例如：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update<span class="params"> --exclude</span>=httpd<span class="params"> --exclude</span>=nginx</span><br></pre></td></tr></tbody></table></figure><blockquote><p>方法二</p></blockquote><p>如果希望永久性地排除某个软件包的更新，可以编辑 <code>yum</code> 的配置文件 <code>/etc/yum.conf</code>，在 <code>[main]</code> 部分添加 <code>exclude</code> 选项。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line">exclude=httpd</span><br></pre></td></tr></tbody></table></figure><p>可以排除多个软件包，使用空格分隔：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line">exclude=httpd nginx</span><br></pre></td></tr></tbody></table></figure><p>这样配置之后，每次运行 <code>yum update</code> 时，都会自动排除指定的软件包。</p><blockquote><p>方法三</p></blockquote><p>可以使用 <code>yum-plugin-versionlock</code> 插件来锁定特定软件包的版本。首先安装该插件：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install yum-plugin-versionlock</span><br></pre></td></tr></tbody></table></figure><p>然后锁定想要的版本的软件包，例如：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum versionlock add httpd</span><br></pre></td></tr></tbody></table></figure><p>这将会锁定当前安装的 <code>httpd</code> 软件包版本，防止它被更新，可以查看当前锁定的软件包列表：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum versionlock list</span><br></pre></td></tr></tbody></table></figure><p>如果需要取消版本锁定，可以使用以下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum versionlock delete httpd</span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="域名无法解析"><a href="#域名无法解析" class="headerlink" title="域名无法解析"></a>域名无法解析</h3><p>当执行 <code>yum update</code> 命令时，出现 <code>mirrorlist.centos.org no longer resolve</code> 的错误信息。这是由于域名 <code>mirrorlist.centos.org</code> 已经失效，新的的域名应该是 <code>vault.centos.org</code>。解决方法是使用 <code>sed</code> 命令批量更改 Repo 文件里的域名，如下所示：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed<span class="params"> -i</span> <span class="string">'s/mirror.centos.org/vault.centos.org/g'</span> /etc/yum.repos.d/*.repo</span><br><span class="line">sed<span class="params"> -i</span> <span class="string">'s/^#.*baseurl=http/baseurl=http/g'</span> /etc/yum.repos.d/*.repo</span><br><span class="line">sed<span class="params"> -i</span> <span class="string">'s/^mirrorlist=http/#mirrorlist=http/'</span> /etc/yum.repos.d/*.repo</span><br></pre></td></tr></tbody></table></figure><h3 id="YUM-更新系统出错"><a href="#YUM-更新系统出错" class="headerlink" title="YUM 更新系统出错"></a>YUM 更新系统出错</h3><p>在 Centos7 上执行 <code>yum update</code> 命令更新系统时，出现 “Invalid version flag: or” 错误，通常是由于 Yum 配置文件或某些第三方软件包配置不正确导致的。以下是解决该问题的一些方法：</p><ul><li>方法一：清理缓存。尝试清理 Yum 的缓存，并重新更新。</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum clean all</span><br><span class="line">sudo yum makecache</span><br><span class="line">sudo yum update</span><br></pre></td></tr></tbody></table></figure><ul><li>方法二：检查并修复软件仓库配置。某些第三方仓库配置文件可能会引起该错误，尝试禁用所有第三方仓库，只使用默认的 CentOS 仓库进行更新。</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有启用的仓库</span></span><br><span class="line">sudo yum repolist enabled</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用所有第三方仓库</span></span><br><span class="line">1. 打开 `/etc/yum.repos.d/` 目录下的各个 `.repo` 文件。</span><br><span class="line">2. 将 `.repo` 文件里的 `enabled=1` 改为 `enabled=0`，只保留官方仓库启用。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再次尝试更新</span></span><br><span class="line">sudo yum update</span><br></pre></td></tr></tbody></table></figure><ul><li>方法三：查看并修复依赖关系。有时依赖关系可能会引起问题，尝试修复：</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum check</span><br><span class="line">sudo package-cleanup<span class="params"> --problems</span></span><br><span class="line">sudo package-cleanup<span class="params"> --dupes</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍 Centos7 的 Yum 包管理。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Centos" scheme="https://www.techgrow.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 索引的最左前缀原则详解</title>
    <link href="https://www.techgrow.cn/posts/284a5386.html"/>
    <id>https://www.techgrow.cn/posts/284a5386.html</id>
    <published>2024-06-23T14:39:42.000Z</published>
    <updated>2024-06-23T14:39:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/bf389d6q.html">MySQL 锁的使用</a></li><li><a href="/posts/ba389f6e.html">MySQL 索引的使用</a></li><li><a href="/posts/bf8bc8c0.html">MySQL 索引的底层数据结构详解</a></li><li><a href="/posts/284a5386.html">MySQL 索引的最左前缀原则详解</a></li></ul><h2 id="最左前缀原则的介绍"><a href="#最左前缀原则的介绍" class="headerlink" title="最左前缀原则的介绍"></a>最左前缀原则的介绍</h2><p>最左前缀原则指的是：使用组合索引（联合索引）时，查询条件需要从索引的最左列开始匹配，并且不跳过索引中的列。如果跳跃某一列，索引将会部分失效 (这一列后面的字段的索引会失效)。比如，针对 A、B、C 三个字段建立了一个组合索引，那么在写一个 SQL 时就一定要提供 A 字段的查询条件，这样才能让组合索引生效。这是由于在建立 A、B、C 三个字段的组合索引时，MySQL 底层的 B+ 树是按照 A、B、C 三个字段从左往右去比较大小进行排序的，也就是说 B+ 树的索引结构依赖于从左到右逐层递进地有序搜索路径。如果查询条件中缺少了最左边的列，B+ 树将无法确定初始的搜索路径，从而无法利用索引进行高效查询。</p><span id="more"></span><h2 id="最左前缀原则的使用"><a href="#最左前缀原则的使用" class="headerlink" title="最左前缀原则的使用"></a>最左前缀原则的使用</h2><h3 id="使用案例一"><a href="#使用案例一" class="headerlink" title="使用案例一"></a>使用案例一</h3><blockquote><p>组合索引 + <code>where</code> 子句的使用</p></blockquote><p><img data-src="../../../asset/2024/07/mysql-index-left-rule.png"></p><h3 id="使用案例二"><a href="#使用案例二" class="headerlink" title="使用案例二"></a>使用案例二</h3><blockquote><p>组合索引 + <code>where</code> 子句的使用</p></blockquote><p>假设 MySQL 8.0 数据库中有一张表 <code>t_user</code>，表里面有 <code>id</code>、<code>phone</code>、<code>name</code>、<code>age</code>、<code>status</code> 这些字段，而且 <code>phone</code>、<code>name</code>、<code>age</code> 这三个字段创建了组合索引 <code>idx_phone_name_age</code>。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建组合索引</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_phone_name_age <span class="keyword">on</span> t_user(phone, name, age);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 索引不会失效，因为遵循最左前缀原则</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">'123456'</span> <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">'Amy'</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>               <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">221</span>     <span class="operator">|</span> const,const,const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"></span><br><span class="line"># 索引不会失效，最左前缀原则和过滤条件的顺序无关</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'Amy'</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">20</span> <span class="keyword">and</span> phone <span class="operator">=</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>               <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">221</span>     <span class="operator">|</span> const,const,const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"></span><br><span class="line"># 索引部分失效，因为跳跃了 name 这里一列</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">'123456'</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">63</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>    <span class="number">25.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line"></span><br><span class="line"># 索引全部失效，因为跳跃了 phone 这里一列，将不遵循最左前缀原则</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'Amy'</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>    <span class="number">25.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用案例三"><a href="#使用案例三" class="headerlink" title="使用案例三"></a>使用案例三</h3><blockquote><p>组合索引 + <code>where</code> 子句 + <code>order by</code> 子句的使用</p></blockquote><p>假设 MySQL 8.0 数据库中有一张表 <code>t_user</code>，表里面有 <code>id</code>、<code>phone</code>、<code>name</code>、<code>age</code>、<code>status</code> 这些字段，而且 <code>phone</code>、<code>name</code>、<code>age</code> 这三个字段创建了组合索引 <code>idx_phone_name_age</code>。</p><ul><li>创建组合索引 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_phone_name_age <span class="keyword">on</span> t_user(phone, name, age);</span><br></pre></td></tr></tbody></table></figure><ul><li>无过滤条件（如 <code>where</code> 条件，不包括 <code>limit</code> 条件），索引不会生效 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 索引全部失效，因为没有过滤条件</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> phone, name, age;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"></span><br><span class="line"># 索引全部失效，因为没有过滤条件，不包括 `limit` 条件</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> phone, name, age limit <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"></span><br><span class="line"># 索引不会失效，因为有过滤条件</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">'123456'</span> <span class="keyword">order</span> <span class="keyword">by</span> phone, name, age;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">63</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-------+</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查询字段与过滤字段对索引的影响 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 索引部分生效</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">'123456'</span> <span class="keyword">and</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">order</span> <span class="keyword">by</span> phone, name, age;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">63</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>    <span class="number">33.33</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------+</span></span><br><span class="line"></span><br><span class="line"># 索引完全生效，因为触发了覆盖索引</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> phone, age <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">'123456'</span> <span class="keyword">and</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">order</span> <span class="keyword">by</span> phone, name, age;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">63</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>    <span class="number">33.33</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+--------------------------+</span></span><br></pre></td></tr></tbody></table></figure><ul><li>排序字段的顺序和索引的顺序不一致对索引的影响 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 排序字段的顺序和索引的顺序一致时，不会触发 `filesort`</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> phone, age <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">'123456'</span> <span class="keyword">order</span> <span class="keyword">by</span> phone, name, age;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">63</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-------------+</span></span><br><span class="line"></span><br><span class="line"># 排序字段的顺序和索引的顺序不一致时，会触发 `filesort`</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> phone, age <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">'123456'</span> <span class="keyword">order</span> <span class="keyword">by</span> phone, age, name;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">63</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index; <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------------+</span></span><br></pre></td></tr></tbody></table></figure><ul><li>多个索引字段排序时，排序方向（升序、降序）不一致对索引的影响 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 多个索引字段排序时，排序方向（升序、降序）一致，不会触发 `filesort`</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> phone, age <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">'123456'</span> <span class="keyword">order</span> <span class="keyword">by</span> phone <span class="keyword">desc</span>, name <span class="keyword">desc</span>, age <span class="keyword">desc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">63</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> Backward index scan; <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+----------------------------------+</span></span><br><span class="line"></span><br><span class="line"># 多个索引字段排序时，排序方向（升序、降序）不一致，会触发 `filesort`</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> phone, age <span class="keyword">from</span> t_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">'123456'</span> <span class="keyword">order</span> <span class="keyword">by</span> phone <span class="keyword">desc</span>, name <span class="keyword">asc</span>, age <span class="keyword">desc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys      <span class="operator">|</span> key                <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> idx_phone_name_age <span class="operator">|</span> <span class="number">63</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index; <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+--------------------+--------------------+---------+-------+------+----------+-----------------------------+</span></span><br></pre></td></tr></tbody></table></figure><h2 id="最左前缀原则的原理"><a href="#最左前缀原则的原理" class="headerlink" title="最左前缀原则的原理"></a>最左前缀原则的原理</h2><p>最左前缀原则指的是在使用组合索引时，查询必须从索引的最左边开始匹配。换句话说，如果针对 A、B、C 三个字段建立了一个组合索引，那么在查询中需要至少包含字段 A，才能有效地利用索引。具体原因可以从 B+ 树的结构来分析。</p><h3 id="B-树的结构"><a href="#B-树的结构" class="headerlink" title="B+ 树的结构"></a>B+ 树的结构</h3><p>B+ 树是一种平衡树，每个节点包含多个键，并且所有的叶子节点处在同一层。B+ 树有以下几个特性：</p><ul><li>叶子节点之间形成一个有序的链表。</li><li>所有的值（Value）都只在叶子节点上出现。</li><li>非叶子节点只存储键（Key），用于指导搜索方向。</li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>更多关于 MySQL 索引底层的 B+ 树数据结构的介绍，请看 <a href="/posts/bf8bc8c0.html">这里</a>。</p></div><h3 id="底层原理分析"><a href="#底层原理分析" class="headerlink" title="底层原理分析"></a>底层原理分析</h3><ul><li>(1) <strong>B+ 树的键排序</strong>：B+ 树的非叶子节点包含键，这些键按照字典顺序排序。在组合索引 (A、B、C) 中，键的排序是先按照列 A 排序，在列 A 相同的情况下，再按照列 B 排序，最后按照列 C 排序。因此，B+ 树的节点实际上形成了一种层次排序结构。</li><li>(2) <strong>搜索路径的确定</strong>：在 B+ 树中进行搜索时，从根节点开始，根据节点中的键判断搜索路径。例如，根节点包含列 A 的不同值范围，如果查询条件中不包含列 A，B+ 树无法判断该走哪条路径，从而无法使用索引。</li><li>(3) <strong>最左前缀匹配</strong>：如果查询条件中包含了列 A，那么 B+ 树可以使用列 A 的值来定位到相应的子节点。如果查询条件进一步包含列 B 和列 C，B+ 树可以继续使用这些列的值来精确定位。但是，如果查询条件中缺少列 A，B+ 树将无法进行初步的路径选择，导致无法使用索引。</li></ul><h3 id="案例分析说明"><a href="#案例分析说明" class="headerlink" title="案例分析说明"></a>案例分析说明</h3><p>假设有一个表 <code>my_table</code>，在 A、B、C 三个字段上建立了一个组合索引，数据如下：</p><table><thead><tr><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>1</td><td>3</td><td>2</td></tr><tr><td>2</td><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td><td>2</td></tr></tbody></table><p>B+ 树索引的结构如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">       A</span><br><span class="line">     /   \</span><br><span class="line">    1     2</span><br><span class="line">   / \   / \</span><br><span class="line">  B   B B   B</span><br><span class="line"> / \ / \/ \ / \</span><br><span class="line">2  3 1  2 1  2</span><br></pre></td></tr></tbody></table></figure><ul><li>查询 <code>SELECT * FROM my_table WHERE A = 1 AND B = 2</code> 可以有效利用索引，因为从根节点 A 出发，找到值为 1 的分支，再在 B 节点找到值为 2 的分支。</li><li>查询 <code>SELECT * FROM my_table WHERE B = 2</code> 则无法利用索引，因为无法确定从根节点 A 的哪个分支开始搜索。</li></ul><div class="admonition note"><p class="admonition-title">总结</p><p>最左前缀原则之所以存在，正是因为 B+ 树的索引结构依赖于从左到右逐层递进地有序搜索路径。如果查询条件中缺少了最左边的列，B+ 树将无法确定初始的搜索路径，从而无法利用索引进行高效查询。</p></div><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="最佳实践一"><a href="#最佳实践一" class="headerlink" title="最佳实践一"></a>最佳实践一</h3><p>组合索引的创建应该遵从以下规则：</p><ul><li>(1) 在创建组合索引的时候，过滤性（唯一性）最好的字段在索引字段顺序中，位置越靠左边越好</li><li> (2) 组合索引出现范围查询时，应该尽量把这个字段放在索引顺序的最右边</li><li> (3) 在创建组合索引的时候，应该尽量包含 <code>where</code> 子句中的字段</li><li> (4) 应该尽量避免造成索引失效的情况</li></ul><h3 id="最佳实践二"><a href="#最佳实践二" class="headerlink" title="最佳实践二"></a>最佳实践二</h3><p>索引的使用应该注意以下几点内容：</p><ul><li>(1) 如果排序字段不在索引列上，MySQL 就会触发 <code>filesort</code>，导致查询性能降低；有两种排序算法：单路排序和双路排序</li><li> (2) 无过滤不索引，即如果没有过滤条件（如 <code>where</code> 条件，不包括 <code>limit</code> 条件），索引不会生效</li><li> (3) 在 SQL 语句中，如果索引字段的顺序写错了，会触发 <code>filesort</code></li><li>(4) 使用 <code>order by</code> 查询时，如果索引字段的位置非最左，会触发 <code>filesort</code></li><li>(5) 使用 <code>order by</code> 查询时，如果索引字段的排序方向（升序、降序）不一致，会触发 <code>filesort</code></li><li>(6) 熟练使用 <code>explain</code>，必要时使用 <code>optimizer_trace</code></li></ul><h3 id="最佳实践三"><a href="#最佳实践三" class="headerlink" title="最佳实践三"></a>最佳实践三</h3><p>利用最左前缀原则优化 Order By 语句，最关键的几点如下：</p><ul><li>(1) 在 SQL 语句中，一定要有过滤条件（如 <code>where</code> 条件），否则执行 <code>order by</code> 时索引会失效</li><li> (2) 首先要对 SQL 进行分析，检查必要的查询字段、过滤字段、排序字段是否按顺序创建好了素引</li><li> (3) 如果查询字段没有创建索引，可能会产生回表操作，导致触发 <code>filesort</code>，降低查询性能</li><li> (4) 排序字段的顺序和索引的顺序不一致时，会触发 <code>filesort</code>，降低查询性能</li><li> (5) 多个索引字段排序时，如果排序方向（升序、降序）不一致，会触发 <code>filesort</code>，降低查询性能</li><li> (6) 使用 <code>explain</code> 观察查询类型和索引利用情况</li><li> (7) 尽可能减少不必要的 <code>filesort</code></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 MySQL 索引的最左前缀原则详解。</summary>
    
    
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 索引的底层数据结构详解</title>
    <link href="https://www.techgrow.cn/posts/bf8bc8c0.html"/>
    <id>https://www.techgrow.cn/posts/bf8bc8c0.html</id>
    <published>2024-06-18T14:39:42.000Z</published>
    <updated>2024-06-18T14:39:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/bf389d6q.html">MySQL 锁的使用</a></li><li><a href="/posts/ba389f6e.html">MySQL 索引的使用</a></li><li><a href="/posts/bf8bc8c0.html">MySQL 索引的底层数据结构详解</a></li><li><a href="/posts/284a5386.html">MySQL 索引的最左前缀原则详解</a></li></ul><h2 id="索引的介绍"><a href="#索引的介绍" class="headerlink" title="索引的介绍"></a>索引的介绍</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><p><strong>MySQL 官方对索引的定义为：索引（Index）是帮助 MySQL 高效获取数据的数据结构</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。<strong>简而言之，索引的本质是数据结构</strong>。</p><span id="more"></span><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p>MySQL 的索引是在存储引擎层实现的，不同的存储引擎支持不同的索引结构，主要包含以下几种：</p><p><img data-src="../../../asset/2024/06/mysql-index-1.png"></p><p>MySQL 不同的存储引擎对于索引结构的支持情况如下：</p><p><img data-src="../../../asset/2024/06/mysql-index-2.png"></p><div class="admonition note"><p class="admonition-title">提示</p><p>在 MySQL 中，通常所说的索引，如果没有特别指明，都是指 B+ 树数据结构的索引。</p></div><h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>假如说 MySQL 的索引结构采用二叉树的数据结构，比较理想的结构如下：</p><p><img data-src="../../../asset/2024/06/mysql-index-3.png"></p><p>如果主键（数据）是顺序插入的，则会形成一个单向链表，结构如下：</p><p><img data-src="../../../asset/2024/06/mysql-index-4.png"></p><p>所以，如果选择二叉树作为索引结构，会存在以下缺点：</p><ul><li>按顺序插入时，会形成一个链表，查询性能大大降低。</li><li>大数据量情况下，层级较深，检索速度慢。</li></ul><p><img data-src="../../../asset/2024/06/mysql-index-5.png"></p><p>由于红黑树（如上所示）也是一颗二叉树，因此也存在 “大数据量情况下，层级较深，检索速度慢” 的问题。所以，在 MySQL 的索引结构中，并没有选择二叉树或者红黑树，而选择的是 B+ 树。那什么是 B+ 树呢？在详解 B+ 树 之前，先来介绍一下 B- 树。</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B- 树"></a>B- 树</h3><p><img data-src="../../../asset/2024/06/mysql-index-6.png"></p><ul><li><p>定义：</p><ul><li>B- 树是一种多叉路平衡查找树，相对于二叉树，B- 树每个节点可以有多个分支，即多叉。</li><li>以一颗最大度数（max-degree）为 5 (5 阶) 的 B- 树为例，那这个 B- 树每个节点最多存储 4 个 Key，5 个指针。</li><li>树的度数指的是一个节点的子节点个数。</li></ul></li><li><p>特点：</p><ul><li>5 阶的 B- 树，每一个节点最多存储 4 个 Key，对应 5 个指针。</li><li>一旦节点存储的 Key 数量到达 5，就会裂变，中间元素向上分裂。</li><li>在 B- 树中，非叶子节点和叶子节点都会存放数据。</li></ul></li></ul><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+ 树"></a>B+ 树</h3><p>B+ 树是 B- 树的变种，以一颗最大度数（max-degree）为 4（4 阶）的 B+ 树为例，来看一下其结构示意图：</p><p><img data-src="../../../asset/2024/06/mysql-index-7.png"></p><p>从上图可以看到，两部分：</p><ul><li>绿色框框起来的部分，是索引部分，仅仅起到索引数据的作用，不存储数据。</li><li>红色框框起来的部分，是数据存储部分，在其叶子节点中要存储具体的数据。</li></ul><p><strong>B+ 树与 B- 树的区别</strong>：</p><ul><li>B+ 树的叶子节点会形成一个单向链表。</li><li>B+ 树的所有数据都只会存放在叶子节点。</li><li>B+ 树的非叶子节点仅仅起到索引数据作用，具体的数据都是存放在叶子节点。</li></ul><p><strong>B+ 树相比 B- 树的优势</strong>：</p><ul><li>单一节点存储更多的元素，使得查询的 I/O 次数更少。</li><li>所有查询都要查找到叶子节点，查询性能稳定。</li><li>所有叶子节点形成有序链表，便于范围查询。</li></ul><p>上述所看到的结构是标准的 B+ 树的数据结构，接下来再看看 MySQL 中优化之后的 B+ 树。MySQL 索引数据结构对经典的 B+ 树进行了优化，在原 B+ 树的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+ 树，提高区间访问的性能，利于排序。</p><p><img data-src="../../../asset/2024/06/mysql-index-8.png"></p><p><strong>为什么 InnoDB 选择 B+ 树作为索引结构？</strong></p><ul><li>相对于二叉树，B+ 树的层级更少，搜索效率更高。</li><li>相对 Hash 索引，B+ 树支持范围查找以及排序操作。</li><li>对于 B- 树，无论是叶子节点还是非叶子节点都会保存数据，这样会导致一页中存储的键值减少，指针跟着减少；要同样保存大量数据，只能增加树的高度，导致性能降低。</li><li>B+ 树中间节点没有卫星数据（索引元素所指向的数据记录），只有索引。这就意味着同样的大小的磁盘页可以容纳更多节点元素，在相同的数据量下，B+ 树更加 “矮胖”，I/O 操作更少。</li><li>因为卫星数据的不同，导致查询过程也不同；B- 树的查找只需找到匹配元素即可，最好情况下查找到根节点，最坏情况下查找到叶子结点，所说性能很不稳定，而 B+ 树每次必须查找到叶子结点，性能稳定。</li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>MySQL 索引使用的是 B+ 树，因为索引是用来加快查询速度的，而 B+ 树会对数据进行排序，所以它可以提高查询速度。另外，在一个 B+ 树的节点中可以存储多个元素，从而可以使得 B+ 树的高度不会太高。在 MySQL 中一个 InnoDB ⻚就是一个 B+ 树节点，一个 InnoDB ⻚默认 16KB， 所以一般情况下一颗两层的 B+ 树可以存 2000 万行左右的数据。通过利用 B+ 树的叶子节点存储所有数据，并进行排序，而且叶子节点之间通过链表连接，这样可以很好地支持范围查询等 SQL 语句。</p></div><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>MySQL 中除了支持 B+ 树索引，还支持一种 Hash 索引类型。</p><ul><li>结构：<ul><li>哈希索引就是采用一定的 Hash 算法，将键值换算成新的 Hash 值，映射到对应的槽位上，然后存储在 Hash 表中。</li></ul></li></ul><p><img data-src="../../../asset/2024/06/mysql-index-9.png"></p><p>如果两个（或多个）键值，映射到一个相同的槽位上，那就会产生哈希冲突（也称为哈希碰撞），可以通过链表来解决。</p><p><img data-src="../../../asset/2024/06/mysql-index-10.png"></p><ul><li>特点：<ul><li>Hash 索引只支持对等比较（如 =，in），不支持范围查询（如 between、&gt;、&lt;、…）。</li><li>无法利用索引完成排序操作。</li><li>查询效率高，通常（不存在哈希冲突的情况）只需要一次检索就可以了，效率通常要高于 B+ 树索引。</li></ul></li></ul><div class="admonition note"><p class="admonition-title">存储引擎的支持</p><p>在 MySQL 中，支持 Hash 索引的是 Memory 存储引擎。而 InnoDB 中具有自适应 Hash 功能，Hash 索引是 InnoDB 存储引擎根据 B+ 树索引在指定条件下自动构建的。</p></div><h2 id="联合索引的数据结构"><a href="#联合索引的数据结构" class="headerlink" title="联合索引的数据结构"></a>联合索引的数据结构</h2><h3 id="联合索引的定义"><a href="#联合索引的定义" class="headerlink" title="联合索引的定义"></a>联合索引的定义</h3><p>联合索引又叫组合索引（复合索引），例如下表：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">24</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `position` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `birthday` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_name_age_position` (`name`,`age`,`position`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></tbody></table></figure><p>如下索引就是一个联合索引：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`idx_name_age_position` (`name`,`age`,`position`) <span class="keyword">USING</span> BTREE</span><br></pre></td></tr></tbody></table></figure><h3 id="联合索引的结构"><a href="#联合索引的结构" class="headerlink" title="联合索引的结构"></a>联合索引的结构</h3><p>联合索引的底层数据结构如下：</p><p><img data-src="../../../asset/2024/06/mysql-index-14.png"></p><p>比较相等时，先比较第一列的值，如果相等，再继续比较第二列，以此类推。了解联合索引的存储结构后，就知道索引最左前缀匹配原则是怎么回事了。在使用联合索引时，对于索引列的定义顺序将会影响到最终查询时索引的使用情况。例如联合索引 <code>(name, age, position)</code>，MySQL 会从最左边的列优先匹配，如果最左边的带头大哥 <code>name</code> 字段没有使用到，在未使用覆盖索引的情况下，就只能全表扫描（因为索引失效了）。简而言之，使用联合索引时，MySQL 会优先使用联合索引的第一列进行匹配，此后才会匹配下一列；如果不指定第一列匹配的值，也就无法得知下一步查询哪个节点。</p><h2 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h2><h3 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h3><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为两种：聚簇索引（主键索引、聚集索引）、非聚簇索引（非主键索引、辅助索引、二级索引）。</p><p><img data-src="../../../asset/2024/06/mysql-index-11.png"></p><ul><li><p><strong>聚簇索引（Clustered Index）</strong>：</p><ul><li>定义：索引和数据存储在一起。数据表中的记录按索引的键值顺序存储在磁盘上。每个表只能有一个聚簇索引。</li><li>特点：<ul><li>数据存储顺序：数据物理上按索引键的顺序存储。</li><li>主键：通常主键会自动成为聚簇索引，但也可以指定其他列为聚簇索引。</li><li>索引结构：InnoDB 的聚簇索引是按照主键顺序构建 B+ 树结构的。</li><li>检索速度：对索引键的查询速度较快，因为数据和索引在一起。</li><li>插入和更新：插入和更新可能会比较慢，因为需要保持数据的物理顺序。</li><li>适用场景：适用于经常需要范围查询的场景，比如查找某一范围内的数据。</li></ul></li></ul></li><li><p><strong>非聚簇索引（Non-Clustered Index）</strong>：</p><ul><li>定义：索引和数据分开存储。非聚簇索引存储的是索引键值和指向数据记录的指针。每个表可以有多个非聚簇索引。</li><li>特点：<ul><li>数据存储顺序：数据的物理存储顺序与索引无关。</li><li>索引存储：索引存储的是键值和指向数据的指针。</li><li>检索速度：对索引键的检索速度较快，但访问实际数据时需要通过指针进行二次查找。</li><li>插入和更新：插入和更新相对较快，因为不需要保持数据的物理顺序。</li><li>适用场景：适用于查找特定值或者少量记录的场景。</li></ul></li></ul></li><li><p><strong>聚簇索引的选取规则</strong>：</p><ul><li>如果存在主键（Primary Key），主键索引就是聚簇索引。</li><li>如果不存在主键，将使用第一个唯一（Unique）索引作为聚簇索引。</li><li>如果表没有主键，或没有合适的唯一索引，则 InnoDB 会自动创建一个隐藏的 row-id 作为聚簇索引。</li></ul></li></ul><div class="admonition note"><p class="admonition-title">存储引擎的支持</p><ul><li>InnoDB 使用的是聚簇索引，树的叶子节点上的 data 就是数据本身。</li><li>MyISAM 使用的是非聚簇索引，树的叶子节点上的 data 不是数据本身，而是数据存放的地址。</li></ul></div><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><p>当执行如下的 SQL 语句时（name 字段建立了索引），具体的查找过程是什么样子的？</p><p><img data-src="../../../asset/2024/06/mysql-index-12.png"></p><p>具体查找过程如下:</p><ul><li>(1) 由于是根据 name 字段进行查询，所以先根据 name=’Arm’ 条件到 name 字段的二级索引中进行匹配查找，但是在二级索引中只能查找到 Arm 对应的主键值 10。</li><li>(2) 由于查询返回的数据是主键值，所以此时，还需要根据主键值 10，到聚集索引中查找对应的数据记录。</li><li>(3) 最终拿到这一行的数据，直接返回即可。</li></ul><h3 id="思考题目一"><a href="#思考题目一" class="headerlink" title="思考题目一"></a>思考题目一</h3><p>以下两条 SQL 语句（id 字段为主键，name 字段建立了索引），哪个执行效率更高？为什么？</p><ul><li>A. select * from user where id = 10;</li><li>B. select * from user where name = ‘Arm’;</li></ul><p>A 语句的执行效率要高于 B 语句。因为 A 语句直接走聚簇索引，可以直接返回数据。而 B 语句需要先查询 name 字段的非聚簇索引（二级索引），然后再查询聚簇索引，也就是需要进行回表查询，所以效率不高。</p><div class="admonition note"><p class="admonition-title">什么是回表查询</p><p>先根据普通索引（非聚簇索引）查询到主键值，再根据主键值在聚簇索引中获取行记录，这就是回表查询。值得一提的是，回表查询，相对于只扫描一遍聚簇索引的性能，要低一些。</p></div><p>使用覆盖索引来避免回表：</p><ul><li><p>什么是覆盖索引：指索引包含了查询中涉及的所有列（包括需要筛选、排序和返回的列），这样就可以直接从索引中获取所有需要的数据，而不需要访问数据表本身。覆盖索引是一种避免回表查询的优化策略，只需要在一棵索引树上就能获取 SQL 所需的所有列数据，无需回表，速度更快。</p></li><li><p>具体的实现方式：将被查询的字段都建立普通索引或者联合索引，这样的话就可以直接返回索引中的数据，不需要再通过聚簇索引去定位行记录，避免了回表操作的执行。</p></li></ul><h3 id="思考题目二"><a href="#思考题目二" class="headerlink" title="思考题目二"></a>思考题目二</h3><p>InnoDB 主键索引的 B+ 树最多能存储多少条记录？</p><p><img data-src="../../../asset/2024/06/mysql-index-13.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">假设：一行数据大小为 1k，一页中就可以存储 16 行这样的数据（页的大小 16K）。</span><br><span class="line">InnoDB 的指针占用 6 个字节的空间，主键即使为 bigint，占用字节数为 8。</span><br><span class="line"></span><br><span class="line">高度为 2 时：设 key 为 n ，则指针数量为 n + 1。</span><br><span class="line">n * 8 + (n + 1) * 6 = 16 * 1024，算出 n 约为 1170</span><br><span class="line"></span><br><span class="line">每一个指针指向一个页，一个页是 16K，一行数据大小为 1k。</span><br><span class="line">1171 * 16 = 18736，指针 × 行数 = 记录。</span><br><span class="line"></span><br><span class="line">也就是说，如果 B+ 树的高度为 2，则可以存储 18000 条左右记录。</span><br><span class="line"></span><br><span class="line">高度为 3 时：第一层根节点只有一个节点，一个节点由上面算出来是 1171 个指针，在第 2 层每一个节点那就也有 1171 个指针。</span><br><span class="line">所以此时指针共有 1711 * 1171 个，再 x16 就是记录数。</span><br><span class="line">1171 * 1171 * 16 = 21939856</span><br><span class="line"></span><br><span class="line">也就是说，如果 B+ 树的高度为 3，则可以存储 2200w 条左右的记录。</span><br><span class="line"></span><br><span class="line">所以 InnoDB 中的 B+ 树高度一般为 1 ~ 3 层，就可以满足千万级别的数据存储。在查找数据时，一次页的查找代表一次 I/O，所以通过主键索引查询通常只需要 1 ~ 3 次 I/O 操作即可查找到数据。</span><br></pre></td></tr></tbody></table></figure><h2 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h2><h3 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍"></a>语法介绍</h3><ul><li>创建索引 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT ] INDEX index_name <span class="keyword">ON</span> table_name (index_col_name, ... ) ;</span><br></pre></td></tr></tbody></table></figure><ul><li>查看索引 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name ;</span><br></pre></td></tr></tbody></table></figure><ul><li>删除索引 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name ;</span><br></pre></td></tr></tbody></table></figure><h3 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- A. name 字段为姓名字段，该字段的值可能会重复，为该字段创建索引。</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_user_name <span class="keyword">ON</span> tb_user(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B. phone 手机号字段的值，是非空，且唯一的，为该字段创建唯一索引。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_user_phone <span class="keyword">ON</span> tb_user(phone);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- C. 为 profession、age、status 创建联合索引。</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_user_pro_age_sta <span class="keyword">ON</span> tb_user(profession, age, status);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- D. 为 email 建立合适的索引来提升查询效率。</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_email <span class="keyword">ON</span> tb_user(email);</span><br></pre></td></tr></tbody></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="高频面试题一"><a href="#高频面试题一" class="headerlink" title="高频面试题一"></a>高频面试题一</h3><blockquote><p>面试题：为什么建议 InnoDB 表必须创建主键，并且推荐使用整型的自增主键？</p></blockquote><ul><li><p>(1) 如果在创建表时不设置主键，InnoDB 会自动从第一列开始筛选一列数据不重复的列（唯一列）做为主键，如果找不到这样的列，就会自动创建一个隐藏的列（row-id）做为主键，这会大大增加 MySQL 的工作量，所以建议在创建 InnoDB 表时一定要设置主键。</p></li><li><p>(2) 使用整型的字段做为主键，一方面在数据比较时不需要进行转换，另一方面存储也比较节省空间。那为什么要强调主键自增呢？如果主键 ID 是无序的，那么很有可能新插入的值会导致当前节点分裂，此时 MySQL 不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过 OPTIMIZE TABLE 来重建表并优化填充页面。反之，如果每次插入有序，那就会在当前页后面连续写入，写不下就会重新分配一个节点，内存都是连续的，这样效率自然也就最高了。</p></li></ul><h3 id="高频面试题二"><a href="#高频面试题二" class="headerlink" title="高频面试题二"></a>高频面试题二</h3><blockquote><p>面试题：为什么非聚簇索引结构的叶子节点存储的是主键值？</p></blockquote><p>非聚簇索引的叶子节点存储主键值而非全部数据，主要也是为了一致性和节省空间。如果非聚簇索引储存的也是数据，那么每次插入 MySQL 都不得不更新每棵索引树，这样就加剧了新增、更改数据时的性能损耗，并且这样一来空间利用率也不高，必然产生了大量冗余数据。</p><h3 id="高频面试题三"><a href="#高频面试题三" class="headerlink" title="高频面试题三"></a>高频面试题三</h3><blockquote><p>面试题：为什么 InnoDB 选择 B+ 树作为索引结构？</p></blockquote><ul><li>相对于二叉树，B+ 树的层级更少，搜索效率更高。</li><li>相对 Hash 索引，B+ 树支持范围查找以及排序操作。</li><li>对于 B- 树，无论是叶子节点还是非叶子节点都会保存数据，这样会导致一页中存储的键值减少，指针跟着减少；要同样保存大量数据，只能增加树的高度，导致性能降低。</li><li>B+ 树中间节点没有卫星数据（索引元素所指向的数据记录），只有索引。这就意味着同样的大小的磁盘页可以容纳更多节点元素，在相同的数据量下，B+ 树更加 “矮胖”，I/O 操作更少。</li><li>因为卫星数据的不同，导致查询过程也不同；B- 树的查找只需找到匹配元素即可，最好情况下查找到根节点，最坏情况下查找到叶子结点，所说性能很不稳定，而 B+ 树每次必须查找到叶子结点，性能稳定。</li></ul><h3 id="高频面试题四"><a href="#高频面试题四" class="headerlink" title="高频面试题四"></a>高频面试题四</h3><blockquote><p>面试题：B 树与 B+ 树的区别是什么？</p></blockquote><p>B 树和 B+ 树是两种不同的树形数据结构，主要用于数据库索引和文件系统。</p><ul><li><p><strong>B 树</strong>：</p><ul><li>(1) 节点结构：每个节点包含键值和指向子节点的指针。一个节点可以存储多个键值和多个指针。</li><li>(2) 数据存储：所有节点（包括叶子节点和非叶子节点）都可以存储数据记录。</li><li>(3) 查找路径：在查找过程中，可以在任意节点上找到目标键值。</li><li>(4) 叶子节点：叶子节点没有链表结构，不需要相互连接。</li><li>(5) 保证有序：键值在节点内是按顺序排列的，而且节点之间的子节点指针也会根据键值的顺序进行排列。</li></ul></li><li><p><strong>B+ 树</strong>：</p><ul><li>(1) 节点结构：非叶子节点只存储键值和指向子节点的指针，不存储数据记录。</li><li>(2) 数据存储：所有数据记录都存储在叶子节点上，非叶子节点仅用于索引。</li><li>(3) 查找路径：在查找过程中，所有查找最终都会落在叶子节点上，因为数据记录只存储在叶子节点。</li><li>(4) 叶子节点：所有叶子节点形成一个有序的链表，便于范围查询和顺序访问。</li><li>(5) 保证有序：键值在非叶子节点内是按顺序排列的，而且数据记录在叶子节点内也是按顺序排列的。</li></ul></li></ul><p>B 树与 B+ 树的区别如下：</p><ul><li><p>(1) <strong>叶子节点的结构</strong>：</p><ul><li>B 树：叶子节点之间没有链表结构。</li><li>B+ 树：叶子节点通过链表连接，便于顺序访问。</li></ul></li><li><p>(2) <strong>数据存储位置</strong>：</p><ul><li>B 树：数据记录存储在所有节点上。</li><li>B+ 树：数据记录只存储在叶子节点上，非叶子节点仅用于索引。</li></ul></li><li><p>(3) <strong>查询效率</strong>：</p><ul><li>B 树：查询时可能在非叶子节点找到数据，搜索路径较短。</li><li>B+ 树：所有查询都必须到达叶子节点，但叶子节点之间的有序链表结构提高了范围查询和顺序访问的效率。</li></ul></li><li><p>(4) <strong>范围查询</strong>：</p><ul><li>B 树：范围查询不如 B+ 树高效，叶子节点之间没有链表结构。</li><li>B+ 树：范围查询更高效，因为叶子节点按顺序链表连接。</li></ul></li></ul><p>综上所述，B 树和 B+ 树各有优劣。B 树在查找单个键值时可能效率更高，而 B+ 树在范围查询和顺序访问方面表现更佳，因此在数据库系统中，B+ 树更为常用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://cloud.tencent.com/developer/article/2197608">MySQL 6 种索引数据结构详解</a></li><li><a href="https://cloud.tencent.com/developer/article/1739709">深入理解 MySQL 索引底层数据结构</a></li><li><a href="https://blog.csdn.net/fvdfsdafdsafs/article/details/138211176">索引原理分析 (AVL 树、B-Tree、B+Tree)</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 MySQL 索引的底层数据结构，包括二叉树、B- 树、B+ 树、哈希表等。</summary>
    
    
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>抖音直播卖货和 B 站直播的弹幕技术实现方案</title>
    <link href="https://www.techgrow.cn/posts/f93d2b47.html"/>
    <id>https://www.techgrow.cn/posts/f93d2b47.html</id>
    <published>2024-06-15T13:43:32.000Z</published>
    <updated>2024-09-01T13:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍抖音直播卖货和 B 站直播的弹幕技术，不涉及直播视频流媒体技术，只关注非视频内容，比如弹幕。值得一提的是，本文不涉及大型直播技术，所讲案例仅作为面试思路参考。</p><div class="admonition note"><p class="admonition-title">代码下载</p><p>完整的案例代码可以从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/distributed-scene/distributed-scene-study">这里</a> 下载得到。</p></div><span id="more"></span><h2 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a>业务分析</h2><p><img data-src="../../../asset/2024/09/live-broadcast-barrage-1.png"></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p><img data-src="../../../asset/2024/09/live-broadcast-barrage-2.png"></p><blockquote><p>问题一：用户首次进入某个直播间后，如何拉取弹幕数据？</p></blockquote><ul><li>按照业务做如下约定，用户进入某个直播间后，默认只拉取最新的前 5 条弹幕，因为不可能呈现全部弹幕数据，这类似分页显示。</li><li>记录当前用户拉取弹幕数据的时间，并存入 Redis，提供给用户下次拉取弹幕数据使用。</li></ul><blockquote><p>问题二：用户持续观看直播时，如何将弹幕实时推送给用户？</p></blockquote><ul><li>直播客户端（APP）通过定时器周期性地拉取弹幕数据，比如每隔 5 秒钟请求一次直播服务。</li><li>直播服务器接收到请求后，采用时间范围的拉取，查询用户上次拉取弹幕数据的时间到当前请求时间内产生的弹幕数据。</li><li>记录当前用户拉取弹幕数据的时间，并存入 Redis，提供给用户下次拉取弹幕数据使用。</li></ul><blockquote><p>问题三：应该用什么样的数据结构来存放高并发实时的弹幕数据？</p></blockquote><ul><li>使用 Redis 的 ZSet 数据类型来存放弹幕数据，具体来说就是每个直播间的弹幕数据都存放在一个独立的 ZSet 中。</li><li>ZSet 是不可重复的有序集合，可以根据指定的 <code>score</code> 进行排序，而且还可以很方便地获取指定分数范围内的元素。</li></ul><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_barrage` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `room_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'直播间ID'</span>,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户ID'</span>,</span><br><span class="line">  `content` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'弹幕内容'</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">'弹幕'</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/live_broadcast?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;rewriteBatchedStatements=true&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># MyBatis</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.clay.scene.entity</span></span><br><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Redis</span></span><br><span class="line"><span class="meta">spring.data.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.data.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.data.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.data.redis.lettuce.pool.max-wait</span>=<span class="string">-1ms</span></span><br><span class="line"><span class="meta">spring.data.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.data.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h3><ul><li>常量类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直播间的 Key</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 比如：room:100，其中的 100 就是直播间的房间号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROOM_KEY = <span class="string">"room:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户获取弹幕数据的时间戳 Key</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 比如，room:user:time:100_12，其中的 100 是直播间的房间号，12 就是用户的 ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROOM_USER_TIME_KEY = <span class="string">"room:user:time:"</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Redis 配置类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span> </span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        <span class="comment">//设置key序列化方式String</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置value的序列化方式Json</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        <span class="comment">//设置key序列化方式String</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置value的序列化方式Json</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>实体类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table(name = "t_barrage")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Barrage</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = "JDBC")</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直播间 ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = "room_id")</span></span><br><span class="line">    <span class="keyword">private</span> Long roomId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户 ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = "user_id")</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 弹幕内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = "content")</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = "create_time")</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Mapper 类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BarrageMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Barrage</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><ul><li>任务调度类，模拟直播间内不同的用户发送弹幕 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarrageTaskService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BarrageService barrageService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟在直播间内发送弹幕</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        log.info(<span class="string">"初始化直播间的弹幕数据..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动一个线程，模拟直播间内不同用户发送弹幕，在分布式系统中，建议用 XXL-JOB 来实现定时任务的调度执行</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">                <span class="comment">// 控制直播间的关闭</span></span><br><span class="line">                <span class="keyword">if</span> (atomicInteger.get() == <span class="number">100</span>) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模拟房间号为 100 的直播间的弹幕数据，拼接 Redis 的 Key，比如 room:100</span></span><br><span class="line">                <span class="keyword">long</span> roomId = <span class="number">100</span>;</span><br><span class="line">                String roomKey = Constants.ROOM_KEY + roomId;</span><br><span class="line">                Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模拟用户发送弹幕，每 5 秒生成一批弹幕数据</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) {</span><br><span class="line">                    Barrage barrage = <span class="keyword">new</span> Barrage();</span><br><span class="line">                    barrage.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">                    barrage.setRoomId(roomId);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">long</span> userId = random.nextLong(<span class="number">100000</span>) + <span class="number">1</span>;</span><br><span class="line">                    barrage.setUserId(userId);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> temp = random.nextInt(<span class="number">30</span>) + <span class="number">1</span>;</span><br><span class="line">                    String content = <span class="string">"发送弹幕: "</span> + temp + <span class="string">"\t"</span> + RandomUtil.randomString(temp);</span><br><span class="line">                    barrage.setContent(content);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 将弹幕数据保存到 MySQL（可选操作）</span></span><br><span class="line">                    barrageService.add(barrage);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">long</span> timestamp = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 将弹幕数据写入 Redis，对应的 Redis 命令，zadd room:100 time content</span></span><br><span class="line">                    redisTemplate.opsForZSet().add(roomKey, barrage, timestamp);</span><br><span class="line">                    <span class="comment">// 设置弹幕数据的过期时间</span></span><br><span class="line">                    redisTemplate.expire(roomKey, <span class="number">24</span>, TimeUnit.HOURS);</span><br><span class="line"></span><br><span class="line">                    log.info(<span class="string">"模拟房间号为 100 的直播间的弹幕数据： {}"</span>, barrage);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="comment">// 模拟用户发送弹幕，每 5 秒生成一批弹幕数据</span></span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                atomicInteger.getAndIncrement();</span><br><span class="line">                System.out.println();</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"Init_Live_Data"</span>).start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>业务接口 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BarrageService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加弹幕数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Barrage barrage)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取特定直播间的最新弹幕数据</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 适用于用户首次进入直播间获取弹幕数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roomId 直播间 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 弹幕数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Barrage&gt; <span class="title">getRoomNewest</span><span class="params">(Long roomId, Long userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据时间范围拉取特定直播间的弹幕数据</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 适用于用户持续观看直播时拉取弹幕数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roomId 直播间 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 弹幕数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Barrage&gt; <span class="title">pullRoomData</span><span class="params">(Long roomId, Long userId)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>业务实现类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarrageServiceImpl</span> <span class="keyword">implements</span> <span class="title">BarrageService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BarrageMapper barrageMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Barrage barrage)</span> </span>{</span><br><span class="line">        barrageMapper.insertSelective(barrage);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Barrage&gt; <span class="title">getRoomNewest</span><span class="params">(Long roomId, Long userId)</span> </span>{</span><br><span class="line">        List&lt;Barrage&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String roomKey = Constants.ROOM_KEY + roomId;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定直播间的最新 5 条弹幕数据，对应的 Redis 命令 "zrevrange room:100 0 4 withscores"</span></span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Barrage&gt;&gt; set = <span class="keyword">this</span>.redisTemplate.opsForZSet().reverseRangeWithScores(roomKey, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;Barrage&gt; item : set) {</span><br><span class="line">            list.add(item.getValue());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前时间戳存入 Redis，提供给用户下次拉取弹幕数据使用，用于控制看过的弹幕不再拉取</span></span><br><span class="line">        Long now = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">        String timeKey = Constants.ROOM_USER_TIME_KEY + roomId + <span class="string">"_"</span> + userId;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(timeKey, now, <span class="number">24</span>, TimeUnit.HOURS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Barrage&gt; <span class="title">pullRoomData</span><span class="params">(Long roomId, Long userId)</span> </span>{</span><br><span class="line">        List&lt;Barrage&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String roomKey = Constants.ROOM_KEY + roomId;</span><br><span class="line">        String timeKey = Constants.ROOM_USER_TIME_KEY + roomId + <span class="string">"_"</span> + userId;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取用户上次拉取弹幕数据的时间</span></span><br><span class="line">        Long lastTime = <span class="keyword">null</span>;</span><br><span class="line">        Object lastValue = <span class="keyword">this</span>.redisTemplate.opsForValue().get(timeKey);</span><br><span class="line">        <span class="keyword">if</span> (lastValue == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">// 默认拉取 10 秒前的弹幕数据</span></span><br><span class="line">            lastTime = now - <span class="number">10</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            lastTime = Long.parseLong(lastValue.toString());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取从上次拉取到现在的弹幕数据，对应的 Redis 命令 "zrangebyscore room:100 1725093501 1725093606 withscores"</span></span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Barrage&gt;&gt; set = <span class="keyword">this</span>.redisTemplate.opsForZSet().rangeByScoreWithScores(roomKey, lastTime, now);</span><br><span class="line">        <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;Barrage&gt; item : set) {</span><br><span class="line">            list.add(item.getValue());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前时间戳存入 Redis，提供给用户下次拉取弹幕数据使用，用于控制看过的弹幕不再拉取</span></span><br><span class="line">        now = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(timeKey, now, <span class="number">24</span>, TimeUnit.HOURS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>控制器类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/barrage/")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarrageController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BarrageService barrageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/add")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> Barrage barrage)</span> </span>{</span><br><span class="line">        barrageService.add(barrage);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取特定直播间的最新弹幕数据</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 适用于用户首次进入直播间获取弹幕数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roomId 直播间 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 弹幕数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/getRoomNewest")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Barrage&gt; <span class="title">getRoomNewest</span><span class="params">(Long roomId, Long userId)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> barrageService.getRoomNewest(roomId, userId);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据时间范围拉取特定直播间的弹幕数据</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 适用于用户持续观看直播时拉取弹幕数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roomId 直播间 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 弹幕数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/pullRoomData")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Barrage&gt; <span class="title">pullRoomData</span><span class="params">(Long roomId, Long userId)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> barrageService.pullRoomData(roomId, userId);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><ul><li>在 MySQL 数据库中，查询到的部分数据如下</li></ul><p><img data-src="../../../asset/2024/09/live-broadcast-barrage-3.png"></p><ul><li>在 Redis 中，获取房间号为 100 的直播间的最新 5 条弹幕数据，语法：<code>ZREVRANGE key start stop [WITHSCORES] 通过索引区间返回有序集中指定区间内的成员，其中成员的位置按分数值从大到小来排序</code></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrevrange room:100 0 4 withscores</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1)  "{"@class":"com.clay.scene.entity.Barrage","id":15,"roomId":100,"userId":76521,"content":"发送弹幕: 1\t5","createTime":["java.util.Date",1725093606766]}"</span><br><span class="line">2)  "1725093606"</span><br><span class="line">3)  "{"@class":"com.clay.scene.entity.Barrage","id":14,"roomId":100,"userId":51830,"content":"发送弹幕: 29\taFiVkBPGwerKMUc046aEJGD2wdlz5","createTime":["java.util.Date",1725093606759]}"</span><br><span class="line">4)  "1725093606"</span><br><span class="line">5)  "{"@class":"com.clay.scene.entity.Barrage","id":13,"roomId":100,"userId":67512,"content":"发送弹幕: 18\tHyvp1E5AHzUFKNYbrK","createTime":["java.util.Date",1725093606751]}"</span><br><span class="line">6)  "1725093606"</span><br><span class="line">7)  "{"@class":"com.clay.scene.entity.Barrage","id":12,"roomId":100,"userId":90667,"content":"发送弹幕: 9\tdF5dfMvI9","createTime":["java.util.Date",1725093606743]}"</span><br><span class="line">8)  "1725093606"</span><br><span class="line">9)  "{"@class":"com.clay.scene.entity.Barrage","id":11,"roomId":100,"userId":34093,"content":"发送弹幕: 23\tp92wDPDiVDT4BCUeBLVWPsx","createTime":["java.util.Date",1725093606732]}"</span><br><span class="line">10) "1725093606"</span><br></pre></td></tr></tbody></table></figure><ul><li>在 Redis 中，获取房间号为 100 的直播间在某个时间段内的弹幕数据，按分数（时间戳）从小大到排序 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore room:100 1725097605 1725097614 WITHSCORES</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1)  "{"@class":"com.clay.scene.entity.Barrage","id":241,"roomId":100,"userId":70800,"content":"发送弹幕: 3\tByM","createTime":["java.util.Date",1725097609115]}"</span><br><span class="line">2)  "1725097609"</span><br><span class="line">3)  "{"@class":"com.clay.scene.entity.Barrage","id":242,"roomId":100,"userId":53458,"content":"发送弹幕: 30\t7sgjLpy2aJett9zOYIrnxTHT9LKBrv","createTime":["java.util.Date",1725097609123]}"</span><br><span class="line">4)  "1725097609"</span><br><span class="line">5)  "{"@class":"com.clay.scene.entity.Barrage","id":243,"roomId":100,"userId":21666,"content":"发送弹幕: 20\tpolw7hUGzJ8KX030JTyK","createTime":["java.util.Date",1725097609129]}"</span><br><span class="line">6)  "1725097609"</span><br><span class="line">7)  "{"@class":"com.clay.scene.entity.Barrage","id":244,"roomId":100,"userId":81783,"content":"发送弹幕: 21\trLNrZqBb1xXU9fqE5izlG","createTime":["java.util.Date",1725097609135]}"</span><br><span class="line">8)  "1725097609"</span><br><span class="line">9)  "{"@class":"com.clay.scene.entity.Barrage","id":245,"roomId":100,"userId":94230,"content":"发送弹幕: 7\tAGn63yr","createTime":["java.util.Date",1725097609140]}"</span><br><span class="line">10) "1725097609"</span><br><span class="line">11) "{"@class":"com.clay.scene.entity.Barrage","id":246,"roomId":100,"userId":69976,"content":"发送弹幕: 7\tDVQb0UB","createTime":["java.util.Date",1725097614145]}"</span><br><span class="line">12) "1725097614"</span><br><span class="line">13) "{"@class":"com.clay.scene.entity.Barrage","id":247,"roomId":100,"userId":9728,"content":"发送弹幕: 18\tw7Ky02PgDUfnKX1JrD","createTime":["java.util.Date",1725097614154]}"</span><br><span class="line">14) "1725097614"</span><br><span class="line">15) "{"@class":"com.clay.scene.entity.Barrage","id":248,"roomId":100,"userId":74132,"content":"发送弹幕: 20\t5osGP2mkf9kXb8S2Fk5U","createTime":["java.util.Date",1725097614159]}"</span><br><span class="line">16) "1725097614"</span><br><span class="line">17) "{"@class":"com.clay.scene.entity.Barrage","id":249,"roomId":100,"userId":57720,"content":"发送弹幕: 8\tazefKWXh","createTime":["java.util.Date",1725097614164]}"</span><br><span class="line">18) "1725097614"</span><br><span class="line">19) "{"@class":"com.clay.scene.entity.Barrage","id":250,"roomId":100,"userId":61004,"content":"发送弹幕: 29\t2zr4MhtPSwoyLXuK7Xaw0ZzEPuTev","createTime":["java.util.Date",1725097614170]}"</span><br><span class="line">20) "1725097614"</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍抖音直播卖货和 B 站弹幕技术。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="架构设计" scheme="https://www.techgrow.cn/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly 主题整合 TechGrow 公众号引流工具</title>
    <link href="https://www.techgrow.cn/posts/8e3e42f0.html"/>
    <id>https://www.techgrow.cn/posts/8e3e42f0.html</id>
    <published>2024-05-11T12:52:08.000Z</published>
    <updated>2024-05-11T12:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a> 是一款优秀的 Hexo 第三方主题，高版本的 Butterfly（如 4.13.0 版本），不能使用 <a href="https://github.com/rqh656418510/hexo-readmore">hexo-readmore</a> 插件来整合 <a href="https://docs.techgrow.cn/">TechGrow 公众号引流工具</a>；否则会导致 Pjax 不能完全生效，比如从首页点击文章链接进入文章页面后，APlayer 播放器会中断播放（即记不住播放进度）。解决方法是，采用手动整合的方式来使用公众号引流工具。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>第一步：卸载已安装的 <code>hexo-readmore</code> 插件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-readmore --save</span><br></pre></td></tr></tbody></table></figure><ul><li>第二步：在 Hexo 的 <code>_config.yml</code> 配置文件里面，删除所有与 <code>hexo-readmore</code> 插件相关的配置信息</li></ul><span id="more"></span><h2 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h2><p>更改 Butterfly 主题的 <code>_config.yml</code> 文件，添加以下配置信息</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel="stylesheet"</span> <span class="string">type="text/css"</span> <span class="string">href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">data-pjax</span> <span class="string">src="https://qiniu.techgrow.cn/readmore/dist/readmore.js"</span> <span class="string">type="text/javascript"&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">data-pjax&gt;var</span> <span class="string">isMobile=navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows</span> <span class="string">Phone)/i);var</span> <span class="string">allowMobile=false;if(!isMobile||(isMobile&amp;&amp;allowMobile)){try{var</span> <span class="string">plugin=new</span> <span class="string">ReadmorePlugin();plugin.init({"type":"hexo","id":"article-container","name":"全栈技术驿站","blogId":"18762-1609305354821-257","qrcode":"https://www.techgrow.cn/img/wx_mp_qr.png","keyword":"Tech","random":"1","height":"auto","expires":"365","interval":"30","tocSelector":"#card-toc"})}catch(e){console.warn("readmore</span> <span class="string">plugin</span> <span class="string">occurred</span> <span class="string">error")}}&lt;/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>上面最后一行的配置内容，是基于下面的 HTML 代码压缩得到，请根据实际情况更改对应的博客信息。如何希望在移动端设备中，也需要扫码关注才能解锁文章，那么可以将下述代码更改为 <code>var allowMobile = true;</code></p></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-pjax</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> isMobile = navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> allowMobile = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (!isMobile || (isMobile &amp;&amp; allowMobile)) {</span></span><br><span class="line"><span class="javascript"><span class="keyword">try</span> {</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> plugin = <span class="keyword">new</span> ReadmorePlugin();</span></span><br><span class="line"><span class="javascript">plugin.init({</span></span><br><span class="line"><span class="javascript"><span class="string">"type"</span>: <span class="string">"hexo"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"id"</span>: <span class="string">"article-container"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"name"</span>: <span class="string">"全栈技术驿站"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"blogId"</span>: <span class="string">"18762-1609305354821-257"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"qrcode"</span>: <span class="string">"https://www.techgrow.cn/img/wx_mp_qr.png"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"keyword"</span>: <span class="string">"Tech"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"random"</span>: <span class="string">"1"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"height"</span>: <span class="string">"auto"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"expires"</span>: <span class="string">"365"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"interval"</span>: <span class="string">"30"</span>,</span></span><br><span class="line"><span class="javascript"><span class="string">"tocSelector"</span>: <span class="string">"#card-toc"</span></span></span><br><span class="line"><span class="javascript">});</span></span><br><span class="line"><span class="javascript">} <span class="keyword">catch</span>(e) {</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.warn(<span class="string">"readmore plugin occurred error"</span>);</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="构建博客"><a href="#构建博客" class="headerlink" title="构建博客"></a>构建博客</h2><p>执行以下的 Hexo 命令，重新构建博客，并在本地预览。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理静态文件</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建静态文件</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动预览服务</span></span><br><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍 Butterfly 主题如何整合 TechGrow 公众号引流工具。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 MySQL 8.4（LTS 版本）</title>
    <link href="https://www.techgrow.cn/posts/e2e13214.html"/>
    <id>https://www.techgrow.cn/posts/e2e13214.html</id>
    <published>2024-05-05T14:39:42.000Z</published>
    <updated>2024-05-05T14:39:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/e2e13214.html">CentOS 7 安装 MySQL 8.4（LTS 版本）</a></li><li><a href="/posts/7e824ec5.html">Debian 11 安装 MySQL 8.4（LTS 版本）</a></li><li><a href="/posts/b159cb20.html">Debian 12 安装 MySQL 8.4（LTS 版本）</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍 CentOS 7 如何使用已编译的二进制包原生安装 MySQL 8.4（LTS 版本），绝大部分安装步骤同样适用于其他 Linux 发行版，比如 Debian、Ubuntu 等。值得一提的是，在 CentOS 7 上，由于默认的官方 YUM 存储库中并不包含 MySQL 8.4，因此无法通过 YUM 存储库在线安装 MySQL 8.4。</p><span id="more"></span><h3 id="版本历史"><a href="#版本历史" class="headerlink" title="版本历史"></a>版本历史</h3><ul><li><a href="https://cloud.tencent.com/developer/article/2414843">MySQL 版本发展历史</a></li></ul><h3 id="LTS-版本"><a href="#LTS-版本" class="headerlink" title="LTS 版本"></a>LTS 版本</h3><p>MySQL 8.4 是一个长期支持（LTS）版本，它的<strong>主流支持</strong>将持续到 <strong>2029 年 4 月 30 日</strong>，而<strong>延长支持</strong>将持续到 <strong>2032 年 4 月 30 日</strong>。这意味着 MySQL 8.4 将享有总计 8 年的支持周期，其中前 5 年为完全支持，后 3 年为延长支持。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装常用工具"><a href="#安装常用工具" class="headerlink" title="安装常用工具"></a>安装常用工具</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y vim curl tree net-tools binutils</span><br></pre></td></tr></tbody></table></figure><h3 id="安装软件依赖"><a href="#安装软件依赖" class="headerlink" title="安装软件依赖"></a>安装软件依赖</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y libaio ncurses numactl</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-GLIBC-依赖"><a href="#安装-GLIBC-依赖" class="headerlink" title="安装 GLIBC 依赖"></a>安装 GLIBC 依赖</h3><p>执行以下命令查看系统是否支持 GLIBC 2.17，如果没有任何输出内容，则说明不支持，此时则需要手动安装 GLIBC 2.17，具体的安装步骤请自行查阅网络资料。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否支持 GLIBC 2.17</span></span><br><span class="line">sudo strings /lib64/libc.so.6 | grep GLIBC_2.17</span><br></pre></td></tr></tbody></table></figure><h3 id="创建-Linux-用户"><a href="#创建-Linux-用户" class="headerlink" title="创建 Linux 用户"></a>创建 Linux 用户</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line">sudo groupadd mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，禁止远程登录</span></span><br><span class="line">sudo useradd -r -g mysql -s /bin/<span class="literal">false</span> mysql</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL-下载"><a href="#MySQL-下载" class="headerlink" title="MySQL 下载"></a>MySQL 下载</h2><p>打开 <a href="https://dev.mysql.com/downloads/mysql/">MySQL 官方网</a>，根据自己的系统架构选择下载对应的二进制包。</p><p><img data-src="../../../asset/2024/09/debian-11-mysql-8-6.png"></p><p>或者通过 <code>wget</code> 命令下载，比如：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-8.4/mysql-8.4.2-linux-glibc2.17-x86_64.tar.xz</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a>MySQL 安装</h2><h3 id="移除旧版本数据库"><a href="#移除旧版本数据库" class="headerlink" title="移除旧版本数据库"></a>移除旧版本数据库</h3><div class="admonition warning"><p class="admonition-title">特别注意</p><p>如果以前安装过旧版本的 MySQL，切记要先备份数据，然后再移除旧版本 MySQL。</p></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">sudo systemctl stop mysql</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询已安装的 MySQL 相关包</span></span><br><span class="line">sudo rpm -qa | grep -i mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载 MySQL 相关包</span></span><br><span class="line">sudo yum remove mysql-*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询是否卸载干净</span></span><br><span class="line">sudo rpm -qa | grep -i mysql</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">sudo rm -rf /etc/my.cnf</span><br><span class="line">sudo rm -rf /var/lib/mysql</span><br><span class="line">sudo rm -rf /etc/mysql</span><br></pre></td></tr></tbody></table></figure><h3 id="安装新版本数据库"><a href="#安装新版本数据库" class="headerlink" title="安装新版本数据库"></a>安装新版本数据库</h3><h4 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">sudo tar -xvf mysql-8.4.2-linux-glibc2.17-x86_64.tar.xz -C /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名安装目录</span></span><br><span class="line">sudo mv /usr/<span class="built_in">local</span>/mysql-8.4.2-linux-glibc2.17-x86_64/ /usr/<span class="built_in">local</span>/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给安装目录</span></span><br><span class="line">sudo chown mysql:mysql -R /usr/<span class="built_in">local</span>/mysql/</span><br></pre></td></tr></tbody></table></figure><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><ul><li>数据目录 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line">sudo mkdir -p /var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给数据目录</span></span><br><span class="line">sudo chown mysql:mysql /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure><ul><li>日志目录 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建日志目录</span></span><br><span class="line">sudo mkdir -p /var/<span class="built_in">log</span>/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建错误日志文件</span></span><br><span class="line">sudo touch /var/<span class="built_in">log</span>/mysql/error.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给日志目录</span></span><br><span class="line">sudo chown mysql:mysql -R /var/<span class="built_in">log</span>/mysql</span><br></pre></td></tr></tbody></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在配置文件的末尾添加以下内容后保存退出</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mysql/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置文件生效</span></span><br><span class="line">sudo <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><ul><li>创建配置文件，MySQL 在初始化和正常运行的时候都会使用到该配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">sudo touch /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给配置文件</span></span><br><span class="line">sudo chown mysql:mysql /etc/my.cnf</span><br></pre></td></tr></tbody></table></figure><ul><li>编辑配置文件 <code>/etc/my.cnf</code></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/my.cnf</span><br></pre></td></tr></tbody></table></figure><ul><li>往配置文件添加以下内容 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"># 设置客户端的默认字符集</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"># 客户端连接时使用的套接字文件路径</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"># 设置命令行客户端的默认字符集</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"># MySQL 服务的运行用户</span><br><span class="line">user = mysql</span><br><span class="line"># MySQL 的监听端口</span><br><span class="line">port = 3306</span><br><span class="line"># 允许访问数据库的 IP 地址</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line"># MySQL 的安装目录</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line"># MySQL 的数据目录</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line"># MySQL 服务器端的套接字文件路径</span><br><span class="line">socket  = /var/lib/mysql/mysql.sock</span><br><span class="line"># MySQL 的 PID 文件路径</span><br><span class="line">pid_file = /var/lib/mysql/mysql.pid</span><br><span class="line"># MySQL 的错误日志文件路径</span><br><span class="line">log_error = /var/log/mysql/error.log</span><br><span class="line"># 允许的最大连接数</span><br><span class="line">max_connections = 151</span><br><span class="line"># 设置每个客户端在连接时默认使用的字符集，如何客户端在连接时明确指定了字符集，则客户端指定的字符集具有较高优先级</span><br><span class="line">init_connect = 'SET NAMES utf8mb4'</span><br><span class="line"># 设置服务端的默认字符集</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line"># 设置服务端的默认排序规则</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line"># 创建新表时使用的默认存储引擎</span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line"># MySQL8 默认使用 caching_sha2_password 插件认证，以前默认是 mysql_native_password（已被弃用）</span><br><span class="line">mysql_native_password = ON</span><br><span class="line"># MySQL 使用的 SQL 模式</span><br><span class="line">sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'</span><br></pre></td></tr></tbody></table></figure><h4 id="初始化-MySQL"><a href="#初始化-MySQL" class="headerlink" title="初始化 MySQL"></a>初始化 MySQL</h4><p>初始化 MySQL，未指定的初始参数默认会从配置文件 <code>/etc/my.conf</code> 获取，成功初始化后会在 MySQL 的数据目录下创建对应的数据文件。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 未指定的初始参数会自动从配置文件中获取</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/bin/mysqld --initialize</span><br></pre></td></tr></tbody></table></figure><p>若需要指定部分初始参数，可以参考以下命令：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定部分初始化参数</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/var/lib/mysql --log-error=/var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><p>初始化参数说明：</p><ul><li><code>--user</code>：指定使用哪个 Linux 用户</li><li><code>--basedir</code>：指定 MySQL 的安装目录</li><li><code>--datadir</code>：指定 MySQL 的数据目录</li><li><code>--log-error</code>：指定 MySQL 的错误日志文件</li></ul><p>初始化完成后，默认会将 <code>root</code> 账户的初始化密码输出在错误日志文件中。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看错误日志文件</span></span><br><span class="line">sudo cat /var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><p>错误日志文件的内容如下，其中包含了 <code>root</code> 账户的初始化密码</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2024-05-02T08:35:45.327763Z 0 [System] [MY-015017] [Server] MySQL Server Initialization - start.</span><br><span class="line">2024-05-02T08:35:48.227966Z 0 [System] [MY-013169] [Server] /usr/<span class="built_in">local</span>/mysql/bin/mysqld (mysqld 8.4.2) initializing of server <span class="keyword">in</span> progress as process 723</span><br><span class="line">2024-05-02T08:35:48.308630Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">2024-05-02T08:35:53.705371Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">2024-05-02T09:33:05.832399Z 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: _:ti(yFd58rh</span><br><span class="line">2024-05-02T09:33:14.256519Z 0 [System] [MY-015018] [Server] MySQL Server Initialization - end.</span><br></pre></td></tr></tbody></table></figure><p>或者直接使用以下命令来查看 <code>root</code> 账户的初始化密码</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grep <span class="string">'root@localhost:'</span> /var/<span class="built_in">log</span>/mysql/error.log | cut -d<span class="string">':'</span> -f2-</span><br></pre></td></tr></tbody></table></figure><h4 id="创建运行时文件"><a href="#创建运行时文件" class="headerlink" title="创建运行时文件"></a>创建运行时文件</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 PID 文件</span></span><br><span class="line">sudo touch /var/lib/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建套接字文件</span></span><br><span class="line">sudo touch /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给文件</span></span><br><span class="line">sudo chown mysql:mysql -R /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure><h4 id="注册-MySQL-服务"><a href="#注册-MySQL-服务" class="headerlink" title="注册 MySQL 服务"></a>注册 MySQL 服务</h4><h5 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h5><ul><li>创建配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /lib/systemd/system/mysqld.service</span><br></pre></td></tr></tbody></table></figure><ul><li>编辑配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/mysqld.service</span><br></pre></td></tr></tbody></table></figure><ul><li>在配置文件中添加以下内容 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=MySQL Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">TimeoutSec=300</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure><ul><li>使用配置文件生效 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure><h5 id="移除服务"><a href="#移除服务" class="headerlink" title="移除服务"></a>移除服务</h5><ul><li>在移除服务之前，先确保该服务已停止 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mysqld</span><br></pre></td></tr></tbody></table></figure><ul><li>删除配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /lib/systemd/system/mysqld.service</span><br></pre></td></tr></tbody></table></figure><ul><li>使用配置文件生效 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure><h4 id="管理-MySQL-服务"><a href="#管理-MySQL-服务" class="headerlink" title="管理 MySQL 服务"></a>管理 MySQL 服务</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自启动服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">sudo systemctl stop mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">sudo systemctl status mysqld</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL-连接"><a href="#MySQL-连接" class="headerlink" title="MySQL 连接"></a>MySQL 连接</h2><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>如果 CentOS 7 启用了防火墙，则需要开放 MySQL 的 <code>3306</code> 端口，否则外部无法连接 MySQL。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙的运行状态</span></span><br><span class="line">sudo systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放 MySQL 端口</span></span><br><span class="line">sudo firewall-cmd --zone=public --permanent --add-port=3306/tcp</span><br><span class="line">sudo firewall-cmd --zone=public --permanent --add-port=3306/udp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存防火墙配置</span></span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙已开放的端口</span></span><br><span class="line">sudo firewall-cmd --list-ports</span><br></pre></td></tr></tbody></table></figure><h3 id="更改-Root-用户的密码"><a href="#更改-Root-用户的密码" class="headerlink" title="更改 Root 用户的密码"></a>更改 Root 用户的密码</h3><ul><li>登录 MySQL，<code>root</code> 账户的初始化密码在 <code>/var/log/mysql/error.log</code> 错误日志文件中 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></tbody></table></figure><ul><li>更改 <code>root</code> 账户的密码 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>若希望可以使用 <code>root</code> 账户远程登录 MySQL，则可以执行以下授权（考虑到数据库的安全性，不建议授权 <code>root</code> 账户远程登录）</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 切换数据库</span><br><span class="line">USE mysql;</span><br><span class="line"></span><br><span class="line"># 更改记录</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> host <span class="operator">=</span> <span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">'root'</span>; </span><br><span class="line"></span><br><span class="line"># 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"># 验证修改结果</span><br><span class="line"><span class="keyword">select</span> host, <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="初始化-MySQL-失败"><a href="#初始化-MySQL-失败" class="headerlink" title="初始化 MySQL 失败"></a>初始化 MySQL 失败</h3><p>MySQL 初始化失败，一般是配置文件 <code>/etc/my.conf</code> 的内容有误，解决方法如下：</p><ul><li>查看 MySQL 的错误日志文件，观察有没有可用的错误信息 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><ul><li>删除 MySQL 数据目录下的所有文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/mysql/*</span><br></pre></td></tr></tbody></table></figure><ul><li>清空 MySQL 错误日志文件的内容 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">""</span> &gt; /var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><ul><li>修正 MySQL 配置文件 <code>/etc/my.conf</code> 的内容后，重新初始化 MySQL</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 未指定的初始参数会自动从配置文件中获取</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/bin/mysqld --initialize</span><br></pre></td></tr></tbody></table></figure><ul><li>查看 MySQL 的错误日志文件，观察是否初始化成功 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><ul><li>MySQL 初始化成功后，重新创建运行时文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 PID 文件</span></span><br><span class="line">sudo touch /var/lib/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建套接字文件</span></span><br><span class="line">sudo touch /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给文件</span></span><br><span class="line">sudo chown mysql:mysql -R /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure><ul><li>最后启动 MySQL 服务 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自启动服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">sudo systemctl status mysqld</span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/weixin_42703501/article/details/139533319">Linux 原生安装最新版 MySQL 8.4</a></li><li><a href="https://www.cnblogs.com/tothk/p/16498848.html">Debian 11 安装 MySQL 8 详细教程</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 CentOS 7 如何安装 MySQL 8.4（LTS 版本）。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Centos" scheme="https://www.techgrow.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Debian 12 安装 MySQL 8.4（LTS 版本）</title>
    <link href="https://www.techgrow.cn/posts/b159cb20.html"/>
    <id>https://www.techgrow.cn/posts/b159cb20.html</id>
    <published>2024-05-04T14:39:42.000Z</published>
    <updated>2024-05-04T14:39:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/e2e13214.html">CentOS 7 安装 MySQL 8.4（LTS 版本）</a></li><li><a href="/posts/7e824ec5.html">Debian 11 安装 MySQL 8.4（LTS 版本）</a></li><li><a href="/posts/b159cb20.html">Debian 12 安装 MySQL 8.4（LTS 版本）</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍 Debian 12 如何基于 APT 包管理器在线安装 MySQL 8.4（LTS 版本）。</p><span id="more"></span><h3 id="版本历史"><a href="#版本历史" class="headerlink" title="版本历史"></a>版本历史</h3><ul><li><a href="https://cloud.tencent.com/developer/article/2414843">MySQL 版本发展历史</a></li></ul><h3 id="LTS-版本"><a href="#LTS-版本" class="headerlink" title="LTS 版本"></a>LTS 版本</h3><p>MySQL 8.4 是一个长期支持（LTS）版本，它的<strong>主流支持</strong>将持续到 <strong>2029 年 4 月 30 日</strong>，而<strong>延长支持</strong>将持续到 <strong>2032 年 4 月 30 日</strong>。这意味着 MySQL 8.4 将享有总计 8 年的支持周期，其中前 5 年为完全支持，后 3 年为延长支持。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份配置文件</span></span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改配置文件</span></span><br><span class="line">sudo cat &gt; /etc/apt/sources.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string">deb-src https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 APT 索引</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></tbody></table></figure><h3 id="安装常用工具"><a href="#安装常用工具" class="headerlink" title="安装常用工具"></a>安装常用工具</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y vim curl tree net-tools</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a>MySQL 安装</h2><h3 id="下载存储库工具"><a href="#下载存储库工具" class="headerlink" title="下载存储库工具"></a>下载存储库工具</h3><p>MySQL Server 8 在默认的 Debian 存储库中不可用，MySQL 团队提供了一个可下载的存储库工具包，该工具将为 MySQL Server 8 安装并配置存储库。</p><ul><li>打开 <a href="https://dev.mysql.com/downloads/">MySQL 官网</a> </li></ul><p><img data-src="../../../asset/2024/09/debian-11-mysql-8-1.png"></p><ul><li>选择 MySQL 版本和操作系统</li></ul><p><img data-src="../../../asset/2024/09/debian-11-mysql-8-2.png"></p><ul><li>点击 <code>Download</code> 按钮，跳转到下载页面</li></ul><p><img data-src="../../../asset/2024/09/debian-11-mysql-8-3.png"></p><ul><li>跳过登录，直接下载 <code>.deb</code> 文件</li></ul><p><img data-src="../../../asset/2024/09/debian-11-mysql-8-4.png"></p><ul><li>比如，还可以直接使用命令进行下载 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://repo.mysql.com//mysql-apt-config_0.8.32-1_all.deb</span><br></pre></td></tr></tbody></table></figure><h3 id="安装存储库工具"><a href="#安装存储库工具" class="headerlink" title="安装存储库工具"></a>安装存储库工具</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">sudo apt install -y gnupg </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装存储库工具</span></span><br><span class="line">sudo dpkg -i mysql-apt-config_0.8.32-1_all.deb</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 APT 索引</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 MySQL</span></span><br><span class="line">sudo apt install -y mysql-server</span><br></pre></td></tr></tbody></table></figure><h3 id="启动-MySQL"><a href="#启动-MySQL" class="headerlink" title="启动 MySQL"></a>启动 MySQL</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机启动服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">sudo systemctl status mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></tbody></table></figure><h3 id="验证-MySQL"><a href="#验证-MySQL" class="headerlink" title="验证 MySQL"></a>验证 MySQL</h3><ul><li>查看 MySQL 服务状态 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></tbody></table></figure><ul><li>查看 MySQL 日志 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tail -f -n 100 /var/<span class="built_in">log</span>/mysql/mysqld.log</span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://cloud.tencent.com/developer/article/2239311">Debian 11 上安装 MySQL Server 8</a></li><li><a href="https://blog.csdn.net/qq_27816785/article/details/132745371">Debian11 安装 MySQL 8.0 并连接 Navicat</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Debian 12 如何安装 MySQL 8.4（LTS 版本）。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Debian" scheme="https://www.techgrow.cn/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Debian 11 安装 MySQL 8.4（LTS 版本）</title>
    <link href="https://www.techgrow.cn/posts/7e824ec5.html"/>
    <id>https://www.techgrow.cn/posts/7e824ec5.html</id>
    <published>2024-05-02T14:39:42.000Z</published>
    <updated>2024-05-02T14:39:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/e2e13214.html">CentOS 7 安装 MySQL 8.4（LTS 版本）</a></li><li><a href="/posts/7e824ec5.html">Debian 11 安装 MySQL 8.4（LTS 版本）</a></li><li><a href="/posts/b159cb20.html">Debian 12 安装 MySQL 8.4（LTS 版本）</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍 Debian 11 如何使用已编译的二进制包原生安装 MySQL 8.4（LTS 版本），绝大部分安装步骤同样适用于其他 Linux 发行版，比如 CentOS、Ubuntu 等。值得一提的是，Debian 11 不支持使用 APT 存储库的方式来安装 MySQL 8.4，因为 MySQL 官方没有相应的支持。</p><span id="more"></span><h3 id="版本历史"><a href="#版本历史" class="headerlink" title="版本历史"></a>版本历史</h3><ul><li><a href="https://cloud.tencent.com/developer/article/2414843">MySQL 版本发展历史</a></li></ul><h3 id="LTS-版本"><a href="#LTS-版本" class="headerlink" title="LTS 版本"></a>LTS 版本</h3><p>MySQL 8.4 是一个长期支持（LTS）版本，它的<strong>主流支持</strong>将持续到 <strong>2029 年 4 月 30 日</strong>，而<strong>延长支持</strong>将持续到 <strong>2032 年 4 月 30 日</strong>。这意味着 MySQL 8.4 将享有总计 8 年的支持周期，其中前 5 年为完全支持，后 3 年为延长支持。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份配置文件</span></span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改配置文件</span></span><br><span class="line">sudo cat &gt; /etc/apt/sources.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span></span><br><span class="line"><span class="string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span></span><br><span class="line"><span class="string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span></span><br><span class="line"><span class="string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ bullseye-security main contrib non-free</span></span><br><span class="line"><span class="string">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ bullseye-security main contrib non-free</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 APT 索引</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></tbody></table></figure><h3 id="安装常用工具"><a href="#安装常用工具" class="headerlink" title="安装常用工具"></a>安装常用工具</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y vim curl tree net-tools binutils</span><br></pre></td></tr></tbody></table></figure><h3 id="安装软件依赖"><a href="#安装软件依赖" class="headerlink" title="安装软件依赖"></a>安装软件依赖</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y libaio1 libncurses6 libnuma1 sysv-rc-conf</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-GLIBC-依赖"><a href="#安装-GLIBC-依赖" class="headerlink" title="安装 GLIBC 依赖"></a>安装 GLIBC 依赖</h3><p>执行以下命令查看系统是否支持 GLIBC 2.28，如果没有任何输出内容，则说明不支持，此时则需要手动安装 GLIBC 2.28。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否支持 GLIBC 2.28</span></span><br><span class="line">sudo strings /lib/x86_64-linux-gnu/libc.so.6 | grep GLIBC_2.28</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">GLIBC 2.28 安装</p><ul><li><a href="https://blog.csdn.net/summer_lele/article/details/136166760">GLIBC 2.28 安装教程</a></li></ul></div><h3 id="创建-Linux-用户"><a href="#创建-Linux-用户" class="headerlink" title="创建 Linux 用户"></a>创建 Linux 用户</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line">sudo groupadd mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，禁止远程登录</span></span><br><span class="line">sudo useradd -r -g mysql -s /bin/<span class="literal">false</span> mysql</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL-下载"><a href="#MySQL-下载" class="headerlink" title="MySQL 下载"></a>MySQL 下载</h2><p>打开 <a href="https://dev.mysql.com/downloads/mysql/">MySQL 官方网</a>，根据自己的系统架构选择下载对应的二进制包。</p><p><img data-src="../../../asset/2024/09/debian-11-mysql-8-5.png"></p><p>或者通过 <code>wget</code> 命令下载，比如：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-8.4/mysql-8.4.2-linux-glibc2.28-x86_64.tar.xz</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a>MySQL 安装</h2><h3 id="移除旧版本数据库"><a href="#移除旧版本数据库" class="headerlink" title="移除旧版本数据库"></a>移除旧版本数据库</h3><div class="admonition warning"><p class="admonition-title">特别注意</p><p>如果以前安装过旧版本的 MySQL，切记要先备份数据，然后再移除旧版本 MySQL。</p></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">sudo systemctl stop mysql</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载软件</span></span><br><span class="line">sudo apt-get remove --purge mysql-*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除残留</span></span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo apt-get autoclean</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">sudo rm -rf /etc/my.cnf</span><br><span class="line">sudo rm -rf /var/lib/mysql</span><br><span class="line">sudo rm -rf /etc/mysql</span><br></pre></td></tr></tbody></table></figure><h3 id="安装新版本数据库"><a href="#安装新版本数据库" class="headerlink" title="安装新版本数据库"></a>安装新版本数据库</h3><h4 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">sudo tar -xvf mysql-8.4.2-linux-glibc2.28-x86_64.tar.xz -C /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名安装目录</span></span><br><span class="line">sudo mv /usr/<span class="built_in">local</span>/mysql-8.4.2-linux-glibc2.28-x86_64/ /usr/<span class="built_in">local</span>/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给安装目录</span></span><br><span class="line">sudo chown mysql:mysql -R /usr/<span class="built_in">local</span>/mysql/</span><br></pre></td></tr></tbody></table></figure><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><ul><li>数据目录 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line">sudo mkdir -p /var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给数据目录</span></span><br><span class="line">sudo chown mysql:mysql /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure><ul><li>日志目录 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建日志目录</span></span><br><span class="line">sudo mkdir -p /var/<span class="built_in">log</span>/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建错误日志文件</span></span><br><span class="line">sudo touch /var/<span class="built_in">log</span>/mysql/error.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给日志目录</span></span><br><span class="line">sudo chown mysql:mysql -R /var/<span class="built_in">log</span>/mysql</span><br></pre></td></tr></tbody></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在配置文件的末尾添加以下内容后保存退出</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mysql/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置文件生效</span></span><br><span class="line">sudo <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><ul><li>创建配置文件，MySQL 在初始化和正常运行的时候都会使用到该配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">sudo touch /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给配置文件</span></span><br><span class="line">sudo chown mysql:mysql /etc/my.cnf</span><br></pre></td></tr></tbody></table></figure><ul><li>编辑配置文件 <code>/etc/my.cnf</code></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/my.cnf</span><br></pre></td></tr></tbody></table></figure><ul><li>往配置文件添加以下内容 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"># 设置客户端的默认字符集</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"># 客户端连接时使用的套接字文件路径</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"># 设置命令行客户端的默认字符集</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"># MySQL 服务的运行用户</span><br><span class="line">user = mysql</span><br><span class="line"># MySQL 的监听端口</span><br><span class="line">port = 3306</span><br><span class="line"># 允许访问数据库的 IP 地址</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line"># MySQL 的安装目录</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line"># MySQL 的数据目录</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line"># MySQL 服务器端的套接字文件路径</span><br><span class="line">socket  = /var/lib/mysql/mysql.sock</span><br><span class="line"># MySQL 的 PID 文件路径</span><br><span class="line">pid_file = /var/lib/mysql/mysql.pid</span><br><span class="line"># MySQL 的错误日志文件路径</span><br><span class="line">log_error = /var/log/mysql/error.log</span><br><span class="line"># 允许的最大连接数</span><br><span class="line">max_connections = 151</span><br><span class="line"># 设置每个客户端在连接时默认使用的字符集，如何客户端在连接时明确指定了字符集，则客户端指定的字符集具有较高优先级</span><br><span class="line">init_connect = 'SET NAMES utf8mb4'</span><br><span class="line"># 设置服务端的默认字符集</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line"># 设置服务端的默认排序规则</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line"># 创建新表时使用的默认存储引擎</span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line"># MySQL8 默认使用 caching_sha2_password 插件认证，以前默认是 mysql_native_password（已被弃用）</span><br><span class="line">mysql_native_password = ON</span><br><span class="line"># MySQL 使用的 SQL 模式</span><br><span class="line">sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'</span><br></pre></td></tr></tbody></table></figure><h4 id="初始化-MySQL"><a href="#初始化-MySQL" class="headerlink" title="初始化 MySQL"></a>初始化 MySQL</h4><p>初始化 MySQL，未指定的初始参数默认会从配置文件 <code>/etc/my.conf</code> 获取，成功初始化后会在 MySQL 的数据目录下创建对应的数据文件。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 未指定的初始参数会自动从配置文件中获取</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/bin/mysqld --initialize</span><br></pre></td></tr></tbody></table></figure><p>若需要指定部分初始参数，可以参考以下命令：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定部分初始化参数</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/var/lib/mysql --log-error=/var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><p>初始化参数说明：</p><ul><li><code>--user</code>：指定使用哪个 Linux 用户</li><li><code>--basedir</code>：指定 MySQL 的安装目录</li><li><code>--datadir</code>：指定 MySQL 的数据目录</li><li><code>--log-error</code>：指定 MySQL 的错误日志文件</li></ul><p>初始化完成后，默认会将 <code>root</code> 账户的初始化密码输出在错误日志文件中。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看错误日志文件</span></span><br><span class="line">sudo cat /var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><p>错误日志文件的内容如下，其中包含了 <code>root</code> 账户的初始化密码</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2024-05-02T08:35:45.327763Z 0 [System] [MY-015017] [Server] MySQL Server Initialization - start.</span><br><span class="line">2024-05-02T08:35:48.227966Z 0 [System] [MY-013169] [Server] /usr/<span class="built_in">local</span>/mysql/bin/mysqld (mysqld 8.4.2) initializing of server <span class="keyword">in</span> progress as process 723</span><br><span class="line">2024-05-02T08:35:48.308630Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">2024-05-02T08:35:53.705371Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">2024-05-02T09:33:05.832399Z 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: _:ti(yFd58rh</span><br><span class="line">2024-05-02T09:33:14.256519Z 0 [System] [MY-015018] [Server] MySQL Server Initialization - end.</span><br></pre></td></tr></tbody></table></figure><p>或者直接使用以下命令来查看 <code>root</code> 账户的初始化密码</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grep <span class="string">'root@localhost:'</span> /var/<span class="built_in">log</span>/mysql/error.log | cut -d<span class="string">':'</span> -f2-</span><br></pre></td></tr></tbody></table></figure><h4 id="创建运行时文件"><a href="#创建运行时文件" class="headerlink" title="创建运行时文件"></a>创建运行时文件</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 PID 文件</span></span><br><span class="line">sudo touch /var/lib/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建套接字文件</span></span><br><span class="line">sudo touch /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给文件</span></span><br><span class="line">sudo chown mysql:mysql -R /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure><h4 id="注册-MySQL-服务"><a href="#注册-MySQL-服务" class="headerlink" title="注册 MySQL 服务"></a>注册 MySQL 服务</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><div class="admonition note"><p class="admonition-title">提示</p><p>推荐使用此方式来注册 MySQL 服务，因为可以手动指定 MySQL 使用哪个配置文件来启动。</p></div><h6 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h6><ul><li>创建配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /lib/systemd/system/mysqld.service</span><br></pre></td></tr></tbody></table></figure><ul><li>编辑配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/mysqld.service</span><br></pre></td></tr></tbody></table></figure><ul><li>在配置文件中添加以下内容 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=MySQL Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">TimeoutSec=300</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure><ul><li>使用配置文件生效 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure><h6 id="移除服务"><a href="#移除服务" class="headerlink" title="移除服务"></a>移除服务</h6><ul><li>在移除服务之前，先确保该服务已停止 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mysqld</span><br></pre></td></tr></tbody></table></figure><ul><li>删除配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /lib/systemd/system/mysqld.service</span><br></pre></td></tr></tbody></table></figure><ul><li>使用配置文件生效 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><div class="admonition warning"><p class="admonition-title">特别注意</p><p>不推荐使用此方式来注册 MySQL 服务，因为 <code>/etc/my.conf</code> 配置文件里指定的 PID 文件和 Socket 文件不会生效。</p></div><h6 id="注册服务-1"><a href="#注册服务-1" class="headerlink" title="注册服务"></a>注册服务</h6><ul><li>注册服务 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予可执行权限</span></span><br><span class="line">sudo chmod +x /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册服务</span></span><br><span class="line">sudo sysv-rc-conf mysqld on</span><br></pre></td></tr></tbody></table></figure><ul><li>验证服务 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务列表</span></span><br><span class="line">sudo sysv-rc-conf --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果看到 mysqld 服务，并且 3、4、5 都是 on 的话，则说明注册服务成功；如果是 off，则需要执行以下命令来开启</span></span><br><span class="line">sudo sysv-rc-conf --level 345 mysqld on</span><br></pre></td></tr></tbody></table></figure><h6 id="移除服务-1"><a href="#移除服务-1" class="headerlink" title="移除服务"></a>移除服务</h6><ul><li>在移除服务之前，先确保该服务已停止 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mysqld</span><br></pre></td></tr></tbody></table></figure><ul><li>运行 <code>sysv-rc-conf</code> 命令，然后找到需要移除的服务。在交互式界面中，取消该服务所有运行级别（0-6）中的复选框，这将从所有运行级别中禁用该服务 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysv-rc-conf</span><br></pre></td></tr></tbody></table></figure><ul><li>删除服务的启动脚本 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/init.d/mysqld</span><br></pre></td></tr></tbody></table></figure><ul><li>更新运行级别链接，以确保服务已完全移除 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d -f mysqld remove</span><br></pre></td></tr></tbody></table></figure><ul><li>验证服务已被移除 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service --status-all</span><br></pre></td></tr></tbody></table></figure><h4 id="管理-MySQL-服务"><a href="#管理-MySQL-服务" class="headerlink" title="管理 MySQL 服务"></a>管理 MySQL 服务</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自启动服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">sudo systemctl stop mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">sudo systemctl status mysqld</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL-连接"><a href="#MySQL-连接" class="headerlink" title="MySQL 连接"></a>MySQL 连接</h2><h3 id="更改-Root-用户的密码"><a href="#更改-Root-用户的密码" class="headerlink" title="更改 Root 用户的密码"></a>更改 Root 用户的密码</h3><ul><li>登录 MySQL，<code>root</code> 账户的初始化密码在 <code>/var/log/mysql/error.log</code> 错误日志文件中 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></tbody></table></figure><ul><li>更改 <code>root</code> 账户的密码 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>若希望可以使用 <code>root</code> 账户远程登录 MySQL，则可以执行以下授权（考虑到数据库的安全性，不建议授权 <code>root</code> 账户远程登录）</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 切换数据库</span><br><span class="line">USE mysql;</span><br><span class="line"></span><br><span class="line"># 更改记录</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> host <span class="operator">=</span> <span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">'root'</span>; </span><br><span class="line"></span><br><span class="line"># 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"># 验证修改结果</span><br><span class="line"><span class="keyword">select</span> host, <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="初始化-MySQL-失败"><a href="#初始化-MySQL-失败" class="headerlink" title="初始化 MySQL 失败"></a>初始化 MySQL 失败</h3><p>MySQL 初始化失败，一般是配置文件 <code>/etc/my.conf</code> 的内容有误，解决方法如下：</p><ul><li>查看 MySQL 的错误日志文件，观察有没有可用的错误信息 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><ul><li>删除 MySQL 数据目录下的所有文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/mysql/*</span><br></pre></td></tr></tbody></table></figure><ul><li>清空 MySQL 错误日志文件的内容 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">""</span> &gt; /var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><ul><li>修正 MySQL 配置文件 <code>/etc/my.conf</code> 的内容后，重新初始化 MySQL</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 未指定的初始参数会自动从配置文件中获取</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/bin/mysqld --initialize</span><br></pre></td></tr></tbody></table></figure><ul><li>查看 MySQL 的错误日志文件，观察是否初始化成功 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><ul><li>MySQL 初始化成功后，重新创建运行时文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 PID 文件</span></span><br><span class="line">sudo touch /var/lib/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建套接字文件</span></span><br><span class="line">sudo touch /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权给文件</span></span><br><span class="line">sudo chown mysql:mysql -R /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure><ul><li>最后启动 MySQL 服务 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自启动服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">sudo systemctl status mysqld</span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/weixin_42703501/article/details/139533319">Linux 原生安装最新版 MySQL 8.4</a></li><li><a href="https://www.cnblogs.com/tothk/p/16498848.html">Debian 11 安装 MySQL 8 详细教程</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Debian 11 如何安装 MySQL 8.4（LTS 版本）。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Debian" scheme="https://www.techgrow.cn/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>软件开发画图软件推荐</title>
    <link href="https://www.techgrow.cn/posts/796276ab.html"/>
    <id>https://www.techgrow.cn/posts/796276ab.html</id>
    <published>2024-04-27T13:18:36.000Z</published>
    <updated>2024-04-27T13:18:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="画图软件"><a href="#画图软件" class="headerlink" title="画图软件"></a>画图软件</h2><table><thead><tr><th>软件</th><th>官网</th><th>适用场景</th><th>收费说明</th><th>版本说明</th></tr></thead><tbody><tr><td>亿图图示 </td><td><a href="https://www.edrawsoft.cn/edrawmax/">https://www.edrawsoft.cn/edrawmax/</a></td><td> 思维盗图、流程图、组织结构图、UML 图、软件架构图</td><td>基础功能免费，高级功能收费</td><td> PC 版、Web 版</td></tr><tr><td> ProcessOn</td><td><a href="https://www.processon.com/">https://www.processon.com/</a></td><td> 思维导图、流程图、组织结构图、原型图、UML 图、网络拓扑图</td><td>基础功能免费，高级功能收费</td><td> Web 版</td></tr><tr><td> Excalidraw</td><td><a href="https://excalidraw.com/">https://excalidraw.com/</a></td><td> 一个白板工具，可轻松绘制具有手绘感觉的图表</td><td><a href="https://github.com/excalidraw/excalidraw">开源项目</a>，免费使用</td><td> Web 版</td></tr></tbody></table><span id="more"></span>]]></content>
    
    
    <summary type="html">本文主要推荐好用的画图软件。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="开发工具" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程死锁的定位与分析</title>
    <link href="https://www.techgrow.cn/posts/17b04dfd.html"/>
    <id>https://www.techgrow.cn/posts/17b04dfd.html</id>
    <published>2024-04-16T14:34:42.000Z</published>
    <updated>2024-04-16T14:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="线程死锁的介绍"><a href="#线程死锁的介绍" class="headerlink" title="线程死锁的介绍"></a>线程死锁的介绍</h2><p><strong>线程死锁是指在多线程编程中，两个或多个线程相互持有对方所需要的资源，而又同时等待对方释放资源，导致它们都无法继续执行的情况。</strong>在这种情况下，线程将被永久地阻塞，程序也无法正常执行下去。线程死锁是多线程编程中常见的问题，解决方法通常包括谨慎设计资源获取的顺序、使用超时机制、以及资源分配的策略等。</p><span id="more"></span><p><img data-src="../../../asset/2024/03/thread-dead-lock-1.png"></p><blockquote><p>产生线程死锁的原因</p></blockquote><ul><li>系统资源不足</li><li>资源分配不当</li><li>线程运行推进的顺序不对</li></ul><blockquote><p>产生线程死锁的四个必要条件</p></blockquote><ul><li>互斥<ul><li>解决方法：把互斥的共享资源封装成可同时访问（并发访问）</li></ul></li><li>占有且等待<ul><li>解决方法：在线程请求资源时，要求它不占有任何其它资源，也就是它必须一次性申请到所有的资源，这种方式会降低资源的利用效率</li></ul></li><li>非抢占式<ul><li>解决方法：如果线程不能立即分配到所需的全部资源，要求它不占有任何其他资源，也就是说只能够在同时获得所有需要的资源时，才执行资源分配操作</li></ul></li><li>循环等待<ul><li>解决方法：对资源进行排序，要求线程按顺序请求资源</li></ul></li></ul><h2 id="编写产生线程死锁的代码"><a href="#编写产生线程死锁的代码" class="headerlink" title="编写产生线程死锁的代码"></a>编写产生线程死锁的代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoldLockThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lockA;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lockB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HoldLockThread</span><span class="params">(String lockA, String lockB)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.lockA = lockA;</span><br><span class="line">        <span class="keyword">this</span>.lockB = lockB;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" get "</span> + lockA);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">synchronized</span> (lockB) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" get "</span> + lockB);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String lockA = <span class="keyword">new</span> String(<span class="string">"lockA"</span>);</span><br><span class="line">        String lockB = <span class="keyword">new</span> String(<span class="string">"lockB"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HoldLockThread(lockA, lockB), <span class="string">"T1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HoldLockThread(lockB, lockA), <span class="string">"T2"</span>).start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T1 get lockA</span><br><span class="line">T2 get lockB</span><br><span class="line">程序卡住，线程死锁 ....</span><br></pre></td></tr></tbody></table></figure><h2 id="线程死锁代码定位与分析"><a href="#线程死锁代码定位与分析" class="headerlink" title="线程死锁代码定位与分析"></a>线程死锁代码定位与分析</h2><p>当 Java 程序出现死锁的时候，首先需要使用 <code>jps</code> 命令，查看当前正在运行的 Java 应用程序的进程 ID (PID)</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps -l</span><br></pre></td></tr></tbody></table></figure><p>可以看到 DeadLockDemo 这个 Java 应用程序一直在运行，且进程 ID 是 73690</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">483 sun.tools.jps.Jps</span><br><span class="line">72677 com.intellij.idea.Main</span><br><span class="line">73669 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">73254 org.jetbrains.idea.maven.server.RemoteMavenServer36</span><br><span class="line">73690 com.java.interview.lock.DeadLockDemo</span><br></pre></td></tr></tbody></table></figure><p>然后使用 <code>jstack</code> 命令查看 Java 应用程序的堆栈信息</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack  73690    // 后面的数字是 jps 命令输出的 Java 应用程序的进程 ID (PID)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line">"T1":</span><br><span class="line">  waiting to lock monitor 0x00007f3794008200 (object 0x000000062ca6cfe8, a java.lang.String),</span><br><span class="line">  which is held by "T2"</span><br><span class="line">"T2":</span><br><span class="line">  waiting to lock monitor 0x00007f3794007f00 (object 0x000000062ca6cfa0, a java.lang.String),</span><br><span class="line">  which is held by "T1"</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">"T1":</span><br><span class="line">at com.java.interview.lock.HoldLockThread.run(DeadLockDemo.java:28)</span><br><span class="line">- waiting to lock &lt;0x000000062ca6cfe8&gt; (a java.lang.String)</span><br><span class="line">- locked &lt;0x000000062ca6cfa0&gt; (a java.lang.String)</span><br><span class="line">at java.lang.Thread.run(java.base@11.0.9/Thread.java:834)</span><br><span class="line">"T2":</span><br><span class="line">at com.java.interview.lock.HoldLockThread.run(DeadLockDemo.java:28)</span><br><span class="line">- waiting to lock &lt;0x000000062ca6cfa0&gt; (a java.lang.String)</span><br><span class="line">- locked &lt;0x000000062ca6cfe8&gt; (a java.lang.String)</span><br><span class="line">at java.lang.Thread.run(java.base@11.0.9/Thread.java:834)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></tbody></table></figure><p>通过查看最后一行的堆栈信息，可以看到 <code>Found 1 deadlock</code>，即表示 Java 应用程序存在一个死锁</p>]]></content>
    
    
    <summary type="html">本文主要介绍如何定位和分析 Java 线程死锁的代码。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="开发工具" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="并发编程" scheme="https://www.techgrow.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux 服务器的性能诊断工具</title>
    <link href="https://www.techgrow.cn/posts/3898ef75.html"/>
    <id>https://www.techgrow.cn/posts/3898ef75.html</id>
    <published>2024-04-11T14:13:45.000Z</published>
    <updated>2024-04-11T14:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="查看整机系统性能"><a href="#查看整机系统性能" class="headerlink" title="查看整机系统性能"></a>查看整机系统性能</h2><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>使用 <code>top</code> 命令，可以查看系统的负载情况，重点关注的是 <code>%CPU</code>、<code>%MEM</code> 、<code>load average</code> 三个性能指标。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p><img data-src="../../../asset/2024/04/linux-command-top.png"></p><p>这里的 <code>load average: 0.08, 0.10, 0.12</code> 代表系统的平均负载，三个值分别表示系统在过去 1 分钟、5 分钟、15 分钟内的平均负载情况。通常情况下，这个数值越低越好，因为它反映了系统的负载情况，即系统中正在运行或等待运行的进程数量。值得一提的是，在 <code>top</code> 命令运行期间，按下键盘的数字键 <code>1</code>，可以看到每个 CPU 的使用率。</p><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><p>使用 <code>htop</code> 命令，通过友好和丰富的界面，可以更方便地查看和管理系统资源的使用情况。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></tbody></table></figure><p><code>htop</code> 是一个交互式的系统监控工具，输出结果的格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1  [                                        0.0%]     Tasks: 94, 103 thr; 1 running</span><br><span class="line">2  [                                        0.1%]     Load average: 0.00 0.01 0.05</span><br><span class="line">3  [                                        0.0%]     Uptime: 10 days, 03:45:28</span><br><span class="line">4  [                                        0.0%]</span><br><span class="line">Mem[|||||||||||||||||||||||||||||||||||867/15861MB]</span><br><span class="line">Swp[                                        0/7999MB]</span><br><span class="line"></span><br><span class="line">PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command</span><br><span class="line">943 root       20   0  1.7G 53968  6720 S  0.0  0.3  0:03.56 systemd</span><br><span class="line">937 root       20   0  1.7G 37500  6348 S  0.0  0.2  0:05.76 (sd-pam)</span><br><span class="line">923 root       20   0  381M 18424 11140 S  0.0  0.1  0:00.38 NetworkManager</span><br><span class="line">911 root       20   0  6.2G 12932  8568 S  0.0  0.1  0:01.14 Xorg</span><br><span class="line">707 root       20   0  1.8G 11920  7476 S  0.0  0.1  0:01.55 dockerd</span><br><span class="line">841 root       20   0  1.6G 11692  4380 S  0.0  0.1  0:00.60 polkitd</span><br><span class="line">918 root       20   0  1.3G  9264  5144 S  0.0  0.1  0:00.56 ModemManager</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>在这个界面中，可以使用键盘上的方向键和其他功能键来浏览进程列表和查看系统资源的使用情况。可以按下 <code>F1</code> 键查看帮助文档，以了解更多操作方法。</p><h3 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h3><p>使用 <code>uptime</code> 命令，可以查看系统的运行时间以及系统的平均负载。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uptime</span><br></pre></td></tr></tbody></table></figure><p><code>uptime</code> 是系统性能命令的精简版，输出结果的格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15:32:11 up 10 days,  5:17,  2 users,  load average: 0.08, 0.10, 0.12</span><br></pre></td></tr></tbody></table></figure><h2 id="查看-CPU-信息"><a href="#查看-CPU-信息" class="headerlink" title="查看 CPU 信息"></a>查看 CPU 信息</h2><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><p>使用 <code>vmstat</code> 命令，可以查看进程、内存、I/O 操作和 CPU 活动等统计信息。一般配合两个数字参数来使用，第一个参数是采样的时间间隔（以秒为单位），第二个参数是采样的次数。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat -n 2 3   // 每隔2秒采样一次，一共采样3次</span><br></pre></td></tr></tbody></table></figure><p><code>vmstat</code> 命令的输出结果格式如下：</p><p><img data-src="../../../asset/2024/03/linux-command-vmstat-0.png"></p><p><code>vmstat</code> 命令的输出结果说明如下：</p><ul><li><p><code>procs</code></p><ul><li><code>r</code>: 正在运行或等待运行的进程数量。如果这个数字长期高于 CPU 核心数量，则表示系统可能存在 CPU 瓶颈。</li><li><code>b</code>: 在等待 I/O 操作完成时被阻塞的进程数量。如果这个数字持续增长，则表示可能存在磁盘 I/O、网络 I/O 等瓶颈。</li></ul></li><li><p><code>memory</code>:</p><ul><li><code>swpd</code>: 虚拟内存已使用的大小（单位：KB）。即表示被换出到磁盘的内存大小。</li><li><code>free</code>: 空闲内存的大小（单位：KB）。</li><li><code>buff</code>: 用作缓冲区的内存大小（单位：KB）。缓冲区是用于存储文件系统元数据的内存。</li><li><code>cache</code>: 用作缓存的内存大小（单位：KB）。缓存是用于存储文件数据的内存。</li><li><code>si</code>: 每秒从磁盘交换到内存的数据量（单位：KB）。</li><li><code>so</code>: 每秒从内存交换到磁盘的数据量（单位：KB）。</li></ul></li><li><p><code>swap</code>:</p><ul><li><code>si</code>: 每秒从磁盘交换到内存的数据量（单位：KB）。</li><li><code>so</code>: 每秒从内存交换到磁盘的数据量（单位：KB）。</li></ul></li><li><p><code>io</code>:</p><ul><li><code>bi</code>: 每秒从块设备读取的块数量（单位：blocks/s）。</li><li><code>bo</code>: 每秒写入块设备的块数量（单位：blocks/s）。</li></ul></li><li><p><code>system</code>:</p><ul><li><code>in</code>: 每秒中断的数量，包括时钟中断。</li><li><code>cs</code>: 每秒上下文切换的数量（单位：次 /s）。</li></ul></li><li><p><code>cpu</code></p><ul><li><code>us</code>：用户进程的 CPU 时间占用百分比，us 值越高，用户进程消耗的 CPU 时间越多，如果长期大于 <code>50%</code>，则需要优化程序。</li><li><code>sy</code>：内核进程的 CPU 时间占用百分比。</li><li><code>id</code>：CPU 空闲时间占用百分比。</li><li><code>wa</code>：等待 I/O 操作完成的 CPU 时间占用百分比。</li><li><code>st</code>：被虚拟机监控程序（如 KVM）偷取的 CPU 时间百分比</li></ul></li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><p>us + sy 的参考值为 <code>80%</code>，如果 us + sy 大于 <code>80%</code>，说明系统可能存在 CPU 资源不足的问题。</p></div><h3 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h3><p>使用 <code>mpstat</code> 命令，可以查看每个 CPU 的统计信息，包括 CPU 的使用情况、上下文切换、中断等。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpstat -P ALL 5     // 每隔5秒显示一次每个CPU的统计信息</span><br></pre></td></tr></tbody></table></figure><h3 id="pidstat"><a href="#pidstat" class="headerlink" title="pidstat"></a>pidstat</h3><p>使用 <code>pidstat</code> 命令，可以查看进程的 CPU、内存、I/O 以及上下文切换等资源的使用情况。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pidstat -u 5    // 每隔5秒显示一次所有进程的CPU使用情况</span><br><span class="line">pidstat -u 5 -p 14421    //每隔5秒显示一次进程ID为14421的CPU使用情况</span><br><span class="line">pidstat -u 5 -p 14421 25541    //每隔5秒显示一次进程ID为14421、25541的CPU使用情况</span><br></pre></td></tr></tbody></table></figure><p><code>pidstat</code> 命令的输出结果格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15时06分35秒   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">15时06分40秒  1000      5997    0.40    0.40    0.00    0.80    17  java</span><br></pre></td></tr></tbody></table></figure><p><code>pidstat</code> 命令的输出结果说明如下：</p><ul><li><code>PID</code>：进程 ID。</li><li><code>%usr</code>：用户空间的 CPU 使用率，即进程在用户模式下消耗 CPU 的百分比。</li><li><code>%system</code>：内核空间的 CPU 使用率，即进程在内核模式下消耗 CPU 的百分比。</li><li><code>%guest</code>：虚拟 CPU 使用率，即进程运行虚拟 CPU 的时间百分比。</li><li><code>%CPU</code>：进程在所有 CPU 上的 CPU 使用率。</li><li><code>CPU</code>：进程运行的 CPU 编号。</li><li><code>Command</code>：进程的命令名称。</li></ul><h2 id="查看内存信息"><a href="#查看内存信息" class="headerlink" title="查看内存信息"></a>查看内存信息</h2><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>使用 <code>free</code> 命令，可以查看系统内存的使用情况，包括物理内存、交换空间和系统缓存的使用情况。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">free       // 输出的内存大小会以KB为单位显示</span><br><span class="line">free -m    // 输出的内存大小会以MB为单位显示</span><br><span class="line">free -g    // 输出的内存大小会以GB为单位显示</span><br><span class="line">free -h    // 输出的内存大小会自动以人类能看懂的方式（如KB、MB、GB）来显示</span><br></pre></td></tr></tbody></table></figure><p><code>free</code> 命令的输出结果格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:       16238752     3190972     8253404      520508     4799376    12177876</span><br><span class="line">Swap:       2097148           0     2097148</span><br></pre></td></tr></tbody></table></figure><p><code>free</code> 命令的输出结果说明如下：</p><ul><li><code>total</code>: 总的物理内存大小。</li><li><code>used</code>: 已经被使用的物理内存大小。</li><li><code>free</code>: 可用的物理内存大小。</li><li><code>shared</code>: 被共享的内存大小，一般为 0。</li><li><code>buff/cache</code>: 用作缓存的内存大小。</li><li><code>available</code>: 可用的内存大小。</li><li><code>Swap total</code>: 交换空间的总大小。</li><li><code>Swap used</code>: 已经被使用的交换空间大小。</li><li><code>Swap free</code>: 可用的交换空间大小。</li></ul><h2 id="查看硬盘信息"><a href="#查看硬盘信息" class="headerlink" title="查看硬盘信息"></a>查看硬盘信息</h2><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>使用 <code>df</code> 命令，可以查看磁盘空间的使用情况，包括磁盘的总空间、已用空间、可用空间以及文件系统的挂载点。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h       // 输出的磁盘空间大小会以人类能看懂的方式（如KB、MB、GB）来显示</span><br></pre></td></tr></tbody></table></figure><h3 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h3><p>使用 <code>iostat</code> 命令，可以查看磁盘 I/O 活动、磁盘分区的吞吐量和响应时间等。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat -xdk 2 3     // 每隔2秒采样一次，一共采样3次</span><br></pre></td></tr></tbody></table></figure><p><code>iostat</code> 命令的输出结果格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00    34.63    1.56    2.57    28.16   148.78    85.77     0.91  220.93    5.91  351.07   3.30   1.36</span><br><span class="line">sdb               0.00     0.01    0.41    0.00     4.72     0.04    23.32     0.00    3.06    3.06    1.75   2.75   0.11</span><br></pre></td></tr></tbody></table></figure><p><code>iostat</code> 命令的输出结果说明如下：</p><ul><li><code>Device</code>：磁盘或分区的设备名。</li><li><code>rrqm/s</code>：每秒钟合并的读取请求。</li><li><code>wrqm/s</code>：每秒钟合并的写入请求。</li><li><code>r/s</code>：每秒钟完成的读取请求次数（独立请求）。</li><li><code>w/s</code>：每秒钟完成的写入请求次数（独立请求）。</li><li><code>rkB/s</code>：每秒从磁盘读取的数据量，单位为 KB/s。</li><li><code>wkB/s</code>：每秒写入到磁盘的数据量，单位为 KB/s。</li><li><code>avgrq-sz</code>：平均每个请求的扇区数。</li><li><code>avgqu-sz</code>：平均请求队列长度。</li><li><code>await</code>：平均 I/O 操作等待时间（单位为毫秒）。</li><li><code>r_await</code>：平均读取操作等待时间（单位为毫秒）。</li><li><code>w_await</code>：平均写入操作等待时间（单位为毫秒）。</li><li><code>svctm</code>：平均 I/O 操作服务时间（单位为毫秒）。</li><li><code>%util</code>：设备利用率，即设备在采样周期内的活动时间与周期总时间的比率。</li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><ul><li><code>awit</code> 的值越小，代表磁盘性能越好。</li><li><code>rkB/s</code> 与 <code>wkB/s</code> 根据系统应用不同会有不同的值，但有规律遵循：长期、超大数据的读写，肯定不正常，必须需要优化程序。</li><li><code>svctm</code> 的值与 <code>await</code> 的值很接近，表示几乎没有 I/O 等待，磁盘性能好。如果 <code>await</code> 的值远高于 <code>svctm</code> 的值，则表示 I/O 队列等待太长，需要优化程序或更换更快的磁盘（如 SSD 硬盘）。</li></ul></div><h3 id="pidstat-1"><a href="#pidstat-1" class="headerlink" title="pidstat"></a>pidstat</h3><p>使用 <code>pidstat</code> 命令，可以查看进程的磁盘 I/O 等统计信息。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pidstat -d -u 5                   // 每隔5秒显示一次所有进程的磁盘I/O情况</span><br><span class="line">pidstat -d -u 5 -p 14421          // 每隔5秒显示一次进程ID为14421的磁盘I/O情况</span><br><span class="line">pidstat -d -u 5 -p 14421 25541    // 每隔5秒显示一次进程ID为14421、25541的磁盘I/O情况</span><br></pre></td></tr></tbody></table></figure><p><code>pidstat</code> 命令的输出结果格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16时24分13秒   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command</span><br><span class="line">16时24分15秒  1000      5997      0.00      0.00      0.00  java</span><br></pre></td></tr></tbody></table></figure><p><code>pidstat</code> 命令的输出结果说明如下：</p><ul><li><code>UID</code>：进程所属用户的用户 ID。</li><li><code>PID</code>：进程 ID。</li><li><code>kB_rd/s</code>：每秒从磁盘读取的数据量（单位为 KB）。</li><li><code>kB_wr/s</code>：每秒写入到磁盘的数据量（单位为 KB）。</li><li><code>kB_ccwr/s</code>：每秒取消预读取的数据量（单位为 KB）。</li><li><code>Command</code>：进程的命令名称。</li></ul><h2 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h2><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>使用 <code>netstat</code> 命令，可以查看网络连接、路由表、接口统计信息等。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">netstat -a  // 显示所有活动的网络连接</span><br><span class="line">netstat -l  // 显示所有监听端口</span><br><span class="line">netstat -t  // 显示所有 TCP 连接</span><br><span class="line">netstat -u  // 显示所有 UDP 连接</span><br><span class="line">netstat -p  // 显示进程和 PID</span><br><span class="line">netstat -r  // 显示路由表</span><br><span class="line">netstat -i  // 显示接口统计信息</span><br><span class="line">netstat -n  // 以数字形式显示网络连接和路由信息，忽略对 IP 地址和端口号的主机名解析</span><br><span class="line">netstat -tuln | grep 3306  // 显示所有监听的 TCP 连接，并筛选出其中监听在本地端口 3306 上的连接</span><br><span class="line">netstat -aon|grep 3306  // 显示所有的网络连接和监听端口，并筛选出本地端口为 3306 的连接，并显示与之相关联的进程 ID</span><br></pre></td></tr></tbody></table></figure><p><code>netstat</code> 命令的输出结果格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1234/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      5678/sendmail       </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      9012/httpd          </span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           3456/dhclient       </span><br><span class="line">udp        0      0 0.0.0.0:123             0.0.0.0:*                           7890/ntpd           </span><br></pre></td></tr></tbody></table></figure><h3 id="ifstat"><a href="#ifstat" class="headerlink" title="ifstat"></a>ifstat</h3><p>使用 <code>ifstat</code> 命令，可以查看每个网络接口的输入和输出流量信息。Linux 系统默认是没有 <code>ifstat</code> 命令的，需要自行安装。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifstat         // 查看所有网络接口的流量信息</span><br><span class="line">ifstat eth0    // 查看特定网络接口的流量信息</span><br></pre></td></tr></tbody></table></figure><p><code>ifstat</code> 命令的输出结果格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Interface        RX Pkts/Rate    TX Pkts/Rate    RX Data/Rate    TX Data/Rate  </span><br><span class="line">                 RX Errs/Drop    TX Errs/Drop    RX Over/Rate    TX Coll/Rate  </span><br><span class="line">lo                  1175 0          1175 0        103200 0        103200 0      </span><br><span class="line">                       0 0             0 0             0 0             0 0      </span><br><span class="line">eth0                8183 0         24556 0        677082 0        34262K 0      </span><br><span class="line">                       0 0             0 0             0 0             0 0      </span><br><span class="line">eth1                   0 0             0 0             0 0             0 0      </span><br><span class="line">                       0 0             0 0             0 0             0 0   </span><br></pre></td></tr></tbody></table></figure><h3 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a>iftop</h3><p>使用 <code>iftop</code> 命令，可以实时查看系统的网络连接和流量使用情况。Linux 系统默认是没有 <code>iftop</code> 命令的，需要自行安装。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iftop            // 查看所有网络接口的实时流量信息</span><br><span class="line">iftop -i eth0    // 查看特定网络接口的实时流量信息</span><br><span class="line">iftop -n         // 查看所有网络接口的实时流量信息，并禁用 DNS 反解析，以加快显示速度</span><br></pre></td></tr></tbody></table></figure><p><code>iftop</code> 命令的输出结果格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface: en0</span><br><span class="line">IP address is: 192.168.1.2</span><br><span class="line">MAC address is: 00:1f:f3:6a:3d:97</span><br><span class="line">  1.94Mb         3.89Mb         5.83Mb</span><br></pre></td></tr></tbody></table></figure><p><code>iftop</code> 命令的输出结果说明如下：</p><ul><li><code>iftop</code> 默认每隔 2 秒更新一次数据。</li><li><code>iftop</code> 默认输出 3 列数据，分别表示入站流量、出站流量和总流量。</li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Linux 服务器的性能诊断工具。</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.techgrow.cn/tags/Linux/"/>
    
    <category term="开发工具" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="并发编程" scheme="https://www.techgrow.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C 语言和 C++ 精品电子书资源推荐</title>
    <link href="https://www.techgrow.cn/posts/1461029e.html"/>
    <id>https://www.techgrow.cn/posts/1461029e.html</id>
    <published>2024-03-12T15:12:41.000Z</published>
    <updated>2024-03-12T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="C-语言"><a href="#C-语言" class="headerlink" title="C 语言"></a>C 语言</h2><ul><li><a href="https://sn9.us/file/632278-376032112">C 专家编程</a></li><li><a href="https://sn9.us/file/632278-375759118">C 和指针</a></li><li><a href="https://sn9.us/file/632278-376032122">C 和指针课后题答案 (英文版)</a></li><li><a href="https://sn9.us/file/632278-413723421">C 标准库中文版</a></li><li><a href="https://sn9.us/file/632278-413723439">C 程序设计 (第四版 - 谭浩强 - 扫描版)</a></li><li><a href="https://sn9.us/file/632278-413723433">C 编程惯用法：高级程序员常用方法和技巧 (王昕 - 扫描版)</a></li><li><a href="https://sn9.us/file/632278-413723430">C 语言参考手册 (第五版)</a></li><li><a href="https://sn9.us/file/632278-376035626">C 语言接口与实现</a></li><li><a href="https://sn9.us/file/632278-376034345">你必须知道的 495 个 C 语言问题</a></li><li><a href="https://sn9.us/file/632278-376033973">C 语言程序设计现代方法 (第二版)</a></li><li><a href="https://sn9.us/file/632278-376033493">C 语言核心技术</a></li><li><a href="https://sn9.us/file/632278-376033508">C 语言深度解剖 (书签版)</a></li><li><a href="https://sn9.us/file/632278-376032403">C 陷阱与缺陷</a></li><li><a href="https://sn9.us/file/632278-376032115">C 和 C++ 代码精粹</a></li><li><a href="https://sn9.us/file/632278-413723448">The C Programming Language (中文版)</a></li><li><a href="https://sn9.us/file/632278-413723457">The C Programming Language (英文版)</a></li><li><a href="https://sn9.us/file/632278-376035095">高质量程序设计指南.C/C++ 语言 (第三版 - 林锐 - 扫描版)</a></li><li><a href="https://sn9.us/file/632278-383494044">程序员的自我修养 — 链接、装载与库</a></li></ul><span id="more"></span><h2 id="C-开发"><a href="#C-开发" class="headerlink" title="C++ 开发"></a>C++ 开发</h2><ul><li><a href="https://sn9.us/file/632278-382829324">C++ Primer Plus (第 6 版) 中文版</a></li><li><a href="https://sn9.us/file/632278-376126118">C++ Primer 第 5 版 中文版</a></li><li><a href="https://sn9.us/file/632278-375722464">C++ Primer 第 5 版 英文版</a></li><li><a href="https://sn9.us/file/632278-376192138">Accelerated C++</a></li><li><a href="https://sn9.us/file/632278-376163164">ACE 程序员指南 - 网络与系统编程的实用设计模式</a></li><li><a href="https://sn9.us/file/632278-375790397">API Design for C++</a></li><li><a href="https://sn9.us/file/632278-375760951">C++ API 设计</a></li><li><a href="https://sn9.us/file/632278-376144337">Boost_C++_Application_Development_Cookbook</a></li><li><a href="https://sn9.us/file/632278-376145819">Boost 程序库探秘</a></li><li><a href="https://sn9.us/file/632278-376148152">Boost 程序库完全开发指南</a></li><li><a href="https://sn9.us/file/632278-376166515">C++ Concurrency in Action</a></li><li><a href="https://sn9.us/file/632278-375759973">C++ 并发编程实战 (中文版)</a></li><li><a href="https://sn9.us/file/632278-375712822">C++ Templates (简体中文版)</a></li><li><a href="https://sn9.us/file/632278-376163878">C++STL 程序员开发指南</a></li><li><a href="https://sn9.us/file/632278-375794339">C++ 必知必会</a></li><li><a href="https://sn9.us/file/632278-375712907">C++ 编程规范 101 条规则、准则最佳实践</a></li><li><a href="https://sn9.us/file/632278-375713020">C++ 编程思想_中文版_第 2 版_第 1 卷</a></li><li><a href="https://sn9.us/file/632278-375713065">C++ 编程思想_中文版_第 2 版_第 2 卷</a></li><li><a href="https://sn9.us/file/632278-376163158">C++ 编程新思维</a></li><li><a href="https://sn9.us/file/632278-375793834">C++ 标准程序库 (侯捷译)</a></li><li><a href="https://sn9.us/file/632278-375736387">C++ 标准程序库英文版 (第二版)</a></li><li><a href="https://sn9.us/file/632278-375760243">C++ 沉思录</a></li><li><a href="https://sn9.us/file/632278-375711926">C++ 代码设计与重用</a></li><li><a href="https://sn9.us/file/632278-375712103">C++ 多线程编程实战</a></li><li><a href="https://sn9.us/file/632278-375712244">C++ 黑客编程揭秘与防范</a></li><li><a href="https://sn9.us/file/632278-375713290">C++ 跨平台开发技术指南</a></li><li><a href="https://sn9.us/file/632278-376162906">C++ 设计新思维泛型编程与设计模式之应用</a></li><li><a href="https://sn9.us/file/632278-375726523">Effective C++ 中文第三版</a></li><li><a href="https://sn9.us/file/632278-375728854">More Effective C++ (中文版)</a></li><li><a href="https://sn9.us/file/632278-375751015">STL 源码剖析简体中文完整版 (清晰扫描带目录)</a></li><li><a href="https://sn9.us/file/632278-375793871">Effective STL 中文版</a></li><li><a href="https://sn9.us/file/632278-375713354">Essential C++ 中文版</a></li><li><a href="https://sn9.us/file/632278-375713470">Exceptional C++ Style 中文版</a></li><li><a href="https://sn9.us/file/632278-375713501">More Exceptional C++ 中文版</a></li><li><a href="https://sn9.us/file/632278-375713486">Google C++ Style Guide (中文版)</a></li><li><a href="https://sn9.us/file/632278-375713554">The C++ Programming Language 3rd Edition</a></li><li><a href="https://sn9.us/file/632278-375712756">C++ 反汇编与逆向分析技术揭秘</a></li><li><a href="https://sn9.us/file/632278-376163167">代码的力量：C／C++ 中国象棋程序入门与提高</a></li><li><a href="https://sn9.us/file/632278-375712784">提高 C++ 性能的编程技术</a></li><li><a href="https://sn9.us/file/632278-376148651">Linux 多线程服务端编程：使用 muduo C++ 网络库</a></li><li><a href="https://sn9.us/file/632278-375760487">深度探索 C++ 对象模型</a></li><li><a href="https://sn9.us/file/632278-375759499">深入理解 C++11：C++11 新特性解析与应用</a></li><li><a href="https://sn9.us/file/632278-375712564">深入实践 C++ 模板编程</a></li><li><a href="https://sn9.us/file/632278-375713740">实用 C++ 调试指南</a></li><li><a href="https://sn9.us/file/632278-376163161">网络编程 卷 1 运用 ACE 和模式消除复杂性</a></li><li><a href="https://sn9.us/file/632278-376253828">网络编程 卷 2 基于 ACE 和框架的系统化复用</a></li></ul><h2 id="QT-开发"><a href="#QT-开发" class="headerlink" title="QT 开发"></a>QT 开发</h2><ul><li><a href="https://sn9.us/file/632278-383242788">精通 QT4 编程 (第二版)</a></li><li><a href="https://sn9.us/file/632278-383242886">Qt 学习之路</a></li><li><a href="https://sn9.us/file/632278-383242506">Qt5 类继承关系图</a></li><li><a href="https://sn9.us/file/632278-376189688">C++ GUI Qt4 编程 (第二版)</a></li><li><a href="https://sn9.us/file/632278-383243774">Qt Quick 核心编程</a></li><li><a href="https://sn9.us/file/632278-376188875">Qt 及 QtQuick 开发实战精解</a></li><li><a href="https://sn9.us/file/632278-376188515">Qt 及 QtQuick 开发实战精解源代码</a></li><li><a href="https://sn9.us/file/632278-376188832">《Qt Creator 快速入门》第 2 版源码</a></li><li><a href="https://sn9.us/file/632278-376188643">qt 高级编程</a></li><li><a href="https://sn9.us/file/632278-376188400">Linux 窗口程序设计 —Qt4 精彩实例分析</a></li><li><a href="https://sn9.us/file/632278-376188194">Linux 窗口程序设计 —Qt4 精彩实例分析源代码</a></li><li><a href="https://sn9.us/file/632278-376188209">Qt 中的 C++ 技术</a></li><li><a href="https://sn9.us/file/632278-376188175">Qt Creator 快速入门.</a></li><li><a href="https://sn9.us/file/632278-376188172">qml 杂记 Qt_Quick 中文手册</a></li><li><a href="https://sn9.us/file/632278-376188145">C++ Qt 设计模式 第 2 版 (中文版)</a></li></ul><h2 id="Linux-系统编程"><a href="#Linux-系统编程" class="headerlink" title="Linux 系统编程"></a>Linux 系统编程</h2><ul><li><a href="https://sn9.us/file/632278-383494041">Linux 程序设计 中文第 4 版</a></li><li><a href="https://sn9.us/file/632278-383494038">POSIX 多线程程序设计</a></li><li><a href="https://sn9.us/file/632278-376015739">POSIX 多线程程序设计中文版源代码</a></li><li><a href="https://sn9.us/file/632278-383494035">Linux 高级程序设计</a></li><li><a href="https://sn9.us/file/632278-383494032">Linux 程序设计第 4 版</a></li><li><a href="https://sn9.us/file/632278-376015243">Linux 程序设计 中文第 4 版源代码</a></li><li><a href="https://sn9.us/file/632278-376010578">Linux 系统编程</a></li><li><a href="https://sn9.us/file/632278-376019933">UNIX 网络编程卷 1：套接字联网 API 第 3 版</a></li><li><a href="https://sn9.us/file/632278-376016831">UNIX 网络编程 卷 2：进程间通信 第 2 版 源代码</a></li><li><a href="https://sn9.us/file/632278-376010578">Linux 系统编程</a></li><li><a href="https://sn9.us/file/632278-376017254">Unix 环境高级编程</a></li><li><a href="https://sn9.us/file/632278-376015885">Unix 环境高级编程 课后习题详细解答</a></li><li><a href="https://sn9.us/file/632278-376016822">UNIX 程序员手册</a></li><li><a href="https://sn9.us/file/632278-376020241">Linux C 编程从初学到精通</a></li></ul><h2 id="Windows-系统编程"><a href="#Windows-系统编程" class="headerlink" title="Windows 系统编程"></a>Windows 系统编程</h2><ul><li><a href="https://sn9.us/file/632278-382930409">WINDOWS 核心编程第五版</a></li><li><a href="https://sn9.us/file/632278-376164229">精通 Windows API - 函数、接口、编程实例</a></li><li><a href="https://sn9.us/file/632278-376163153">Windows 高级调试</a></li><li><a href="https://sn9.us/file/632278-376162901">Visual c++ 2012 入门经典</a></li><li><a href="https://sn9.us/file/632278-376160660">深入解析 Windows 操作系统 中文第四版</a></li><li><a href="https://sn9.us/file/632278-376158223">Visual Studio 程序员箴言</a></li><li><a href="https://sn9.us/file/632278-376156024">Visual_C++2010 入门经典 第 5 版</a></li><li><a href="https://sn9.us/file/632278-376156021">精通 Windows.Sockets 网络开发 - 基于 Visual.C. 实现</a></li><li><a href="https://sn9.us/file/632278-376152109">Visual Studio 2010 高级编程</a></li><li><a href="https://sn9.us/file/632278-376152101">Microsoft Windows 网络编程 (第 2 版)</a></li><li><a href="https://sn9.us/file/632278-376150600">Essntial COM by Meji</a></li><li><a href="https://sn9.us/file/632278-376150597">Com 技术内幕</a></li><li><a href="https://sn9.us/file/632278-376150591">Windows 编程 (第 6 版)</a></li><li><a href="https://sn9.us/file/632278-376150588">Windows 程序设计 (第 5 版，珍藏版)</a></li></ul>]]></content>
    
    
    <summary type="html">C 语言和 C++ 精品电子书资源推荐，涵盖 C 语言、C++ 开发、QT 开发、Linux 系统编程、Windows 系统编程等书籍。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="生活随笔" scheme="https://www.techgrow.cn/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    <category term="在线电子书" scheme="https://www.techgrow.cn/tags/%E5%9C%A8%E7%BA%BF%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    
  </entry>
  
</feed>
