<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clay 的技术博客</title>
  
  <subtitle>用进废退 | 艺不压身</subtitle>
  <link href="https://www.techgrow.cn/atom.xml" rel="self"/>
  
  <link href="https://www.techgrow.cn/"/>
  <updated>2023-02-19T13:12:35.000Z</updated>
  <id>https://www.techgrow.cn/</id>
  
  <author>
    <name>Clay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JMeter 压测教程之二 JVM 调优</title>
    <link href="https://www.techgrow.cn/posts/e0671e6d.html"/>
    <id>https://www.techgrow.cn/posts/e0671e6d.html</id>
    <published>2023-02-19T13:12:35.000Z</published>
    <updated>2023-02-19T13:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/7e51ed02.html">JMeter 压测教程之一基础使用</a></li><li><a href="/posts/e0671e6d.html">JMeter 压测教程之二 JVM 调优</a></li></ul><h2 id="JVM-简单介绍"><a href="#JVM-简单介绍" class="headerlink" title="JVM 简单介绍"></a>JVM 简单介绍</h2><h3 id="JVM-内存结构"><a href="#JVM-内存结构" class="headerlink" title="JVM 内存结构"></a>JVM 内存结构</h3><p>JVM 内存结构主要有三大块：栈、堆内存、方法区。堆内存是 JVM 中最大的一块。方法区存储类信息、静态变量、常量、常量池等数据，是线程共享的区域，为了与 Java 堆区分，方法区还有一个别名 Non-Heap （非堆）。栈又分为 Java 虚拟机栈和本地方法栈，主要用于方法的执行。</p><span id="more"></span><p><img data-src="../../../asset/2020/06/java-jvm-architecture.png"></p><h3 id="JVM-堆内存"><a href="#JVM-堆内存" class="headerlink" title="JVM 堆内存"></a>JVM 堆内存</h3><p>所有的对象实例以及数组都要在堆内存上分配，堆内存是垃圾收集器管理的主要区域，也被称为 <code>GC 堆</code>。堆内存由新生代和老年代组成，不包括永久代（方法区）；而新生代内存又被分成 Eden 空间、From Survivor 空间、To Survivor 空间，默认情况下新生代按照 8:1:1 的比例来分配。</p><div class="admonition note"><p class="admonition-title">提示</p><p>从 Java 8 开始，HotSpot 已经完全将永久代（Permanent Generation）移除，取而代之的是一个新的区域 — 元空间（MetaSpace）。</p></div><p><img data-src="../../../asset/2023/02/java-jvm-architecture-2.png"></p><h2 id="JVM-性能监控"><a href="#JVM-性能监控" class="headerlink" title="JVM 性能监控"></a>JVM 性能监控</h2><p>为了方便监控 JVM 的性能，JDK 提供了 <code>jconsole</code>、<code>jvisualvm</code> 工具，两者都可以通过命令行直接启动，支持监控本地和远程应用。值得一提的是，推荐使用 <code>jvisualvm</code>，因为它可以看作是升级版的 <code>jconsole</code>。</p><h3 id="Jconsole-监控"><a href="#Jconsole-监控" class="headerlink" title="Jconsole 监控"></a>Jconsole 监控</h3><h4 id="启动监控"><a href="#启动监控" class="headerlink" title="启动监控"></a>启动监控</h4><ul><li>启动命令 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jconsole</span><br></pre></td></tr></tbody></table></figure><ul><li>运行界面</li></ul><p><img data-src="../../../asset/2023/02/jvm-monitor-jconsole.png"></p><h3 id="Jvisualvm-监控"><a href="#Jvisualvm-监控" class="headerlink" title="Jvisualvm 监控"></a>Jvisualvm 监控</h3><p><code>jvisualvm</code> 可以监控内存泄露、跟踪垃圾回收、执行时内存分析、CPU 分析、线程分析等。</p><h4 id="启动监控-1"><a href="#启动监控-1" class="headerlink" title="启动监控"></a>启动监控</h4><ul><li>启动命令 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jvisualvm</span><br></pre></td></tr></tbody></table></figure><ul><li>运行界面</li></ul><p><img data-src="../../../asset/2023/02/jvm-monitor-jvisualvm.png"></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>为了方便查看 GC 的情况，<code>jvisualvm</code> 需要提前安装指定的插件。</p><ul><li>第一步：查看 JDK 版本 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></tbody></table></figure><ul><li>第二步：浏览器打开 <a href="https://visualvm.github.io/pluginscenters.html">官方插件中心</a> 的页面，根据 JDK 版本找到 Java VisualVM 的更新链接，例如 <code>https://visualvm.github.io/archive/uc/8u40/updates.xml.gz</code></li></ul><p><img data-src="../../../asset/2023/02/jvisualvm-plugin-update.png"></p><ul><li>第三步：菜单栏导航到 <code>工具</code> -&gt; <code>插件</code> -&gt; <code>设置</code>，点击 <code>编辑</code> 按钮，将 URL 更改为上面找到的 Java VisualVM 更新链接</li></ul><p><img data-src="../../../asset/2023/02/jvisualvm-plugin-update-2.png"></p><ul><li>第四步：菜单栏导航到 <code>工具</code> -&gt; <code>插件</code> -&gt; <code>可用插件</code>，点击 <code>检查最新版本</code> 按钮，等插件列表更新成功后，勾选 <code>Visual GC</code> 项，最后点击 <code>安装</code> 按钮即可。</li></ul><p><img data-src="../../../asset/2023/02/jvisualvm-plugin-update-3.png"></p><ul><li>第六步：重启 <code>jvisualvm</code> 后，选择要监控的应用，若在标签页中看到 <code>Visual GC</code> 页面，则说明 GC 插件安装成功。</li></ul><p><img data-src="../../../asset/2023/02/jvisualvm-plugin-update-4.png"></p><h2 id="性能监控指标"><a href="#性能监控指标" class="headerlink" title="性能监控指标"></a>性能监控指标</h2><h3 id="中间件指标"><a href="#中间件指标" class="headerlink" title="中间件指标"></a>中间件指标</h3><p>常用的中间件（如 Tomcat、Weblogic）监控指标，主要包括 JVM、ThreadPool、JDBC 等，具体如下：</p><p><img data-src="../../../asset/2023/02/jmeter-monitor-item.png"></p><ul><li>当前正在运行的线程数不能超过设定的最大值。一般情况下系统性能较好的情况下，线程数最小值设置为 50 和最大值设置为 200 比较合适。</li><li>当前运行的 JDBC 连接数不能超过设定的最大值。一般情况下系统性能较好的情况下，JDBC 最小值设置为 50 和最大值设置为 200 比较合适。</li><li>GC 频率不能频繁，特别是 FULL GC 更不能频繁，一般情况下系统性能较好的情况下，JVM 最小堆大小和最大堆大小分别设置 1024M 比较合适。</li></ul><h3 id="数据库指标"><a href="#数据库指标" class="headerlink" title="数据库指标"></a>数据库指标</h3><p>常用的数据库（如 MySQL）监控指标，主要包括 SQL 性能、吞吐量、缓存命中率、锁、连接数等，具体如下：</p><p><img data-src="../../../asset/2023/02/jmeter-monitor-item2.png"></p><ul><li>SQL 执行耗时越小越好，一般情况下微秒级别。</li><li>缓存命中率越高越好，一般情况下不能低于 95%。</li><li>锁等待次数越低越好，等待时间越短越好。</li></ul><h3 id="中间件压测案例"><a href="#中间件压测案例" class="headerlink" title="中间件压测案例"></a>中间件压测案例</h3><p>以简单的电商商城项目为例，各中间件的压测结果如下：</p><p><img data-src="../../../asset/2023/02/jmeter-monitor-middle.png"></p><div class="admonition note"><p class="admonition-title">总结</p><ul><li>中间件越多，性能损失越大，大多都损失在网络交互上。</li><li>业务优化方向：数据库、模板的渲染速度、静态资源。</li></ul></div><h2 id="JVM-分析-amp-调优"><a href="#JVM-分析-amp-调优" class="headerlink" title="JVM 分析 &amp; 调优"></a>JVM 分析 &amp; 调优</h2><p>JVM 调优，调的是稳定，并不能让性能得到大幅提升。服务稳定的重要性就不用多说了，保证服务的稳定，GC 永远会是 JAVA 程序员需要考虑的不稳定因素之一。复杂和高并发下的服务，必须保证每次 GC 不会出现性能下降，各种性能指标不会出现波动，GC 回收规律而且干净，找到合适的 JVM 设置。FULL GC 最会影响性能，根据代码问题，避免 FULL GC 频率。可以适当调大年轻代的容量，让大对象可以在年轻代触发 YONG GC，调整大对象在年轻代的回收频次，尽可能保证大对象在年轻代回收，减小老年代缩短回收时间。</p><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><table><thead><tr><th>工具</th><th>说明</th></tr></thead><tbody><tr><td> jstack</td><td> 查看 JVM 线程运行状态，是否有死锁现象等信息</td></tr><tr><td> jinfo</td><td> 可以输出并修改运行时的 Java 进程的 opts</td></tr><tr><td>jps</td><td> 与 Unix 上的 <code>ps</code> 命令类似，用来显示本地的 Java 进程，可以查看本地运行着几个 Java 程序，并显示它们的进程号</td></tr><tr><td> jstat</td><td> 一个极强的监视 VM 内存工具。可以用来监视 VM 内存内的各种堆和非堆的大小及其内存使用量</td></tr><tr><td> jmap</td><td> 打印出某个 Java 进程（使用 <code>pid</code>）内存内的所有 <code>对象</code> 的情况（如：产生哪些对象及其数量）</td></tr></tbody></table></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要记录如何使用 JMeter 进行压力测试，包括 JVM 性能监控与调优。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="软件测试" scheme="https://www.techgrow.cn/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT 资源整理</title>
    <link href="https://www.techgrow.cn/posts/78bfedfa.html"/>
    <id>https://www.techgrow.cn/posts/78bfedfa.html</id>
    <published>2023-02-16T11:41:00.000Z</published>
    <updated>2023-02-16T11:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="网站资源"><a href="#网站资源" class="headerlink" title="网站资源"></a>网站资源</h2><table><thead><tr><th>名称</th><th>网址</th><th>描述</th></tr></thead><tbody><tr><td> GPT-3 Demo</td><td><a href="https://gpt3demo.com/">https://gpt3demo.com/</a></td><td>ChatGPT, AI and GPT-3 Apps and use cases</td></tr></tbody></table></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">ChatGPT 资源整理，不限于网站、App、开源代码等。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="AI" scheme="https://www.techgrow.cn/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>JMeter 压测教程之一基础使用</title>
    <link href="https://www.techgrow.cn/posts/7e51ed02.html"/>
    <id>https://www.techgrow.cn/posts/7e51ed02.html</id>
    <published>2023-01-08T13:12:35.000Z</published>
    <updated>2023-01-08T13:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/7e51ed02.html">JMeter 压测教程之一基础使用</a></li><li><a href="/posts/e0671e6d.html">JMeter 压测教程之二 JVM 调优</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://jmeter.apache.org/">JMeter 官方网站</a></li><li><a href="https://github.com/apache/jmeter">JMeter GitHub 仓库</a></li></ul><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><ul><li><code>RT (Response Time)</code>：用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。</li><li><code>HPS (Hits Per Second)</code>：每秒点击的次数，单位是次 / 秒。</li><li><code>TPS (Transaction per Second)</code>：系统每秒处理交易 (事务) 的笔数，单位是笔 / 秒。</li><li><code>QPS (Query per Second)</code>：系统每秒处理查询的次数，单位是次 / 秒。</li></ul><span id="more"></span><p>对于互联网业务，如果某些业务有且仅有一个请求连接，那么 TPS=QPS=HPS。一般情况下用 TPS 来衡量整个业务流程，用 QPS 来衡量接口查询次数，用 HPS 来表示对服务器的单击请求。</p><ul><li><code>最大响应时间 (Max Response Time)</code>：指用户发出请求或者指令到系统做出反应 (响应) 的最大时间。</li><li><code>最少响应时间 (Mininum Response Time)</code>：指用户发出请求或者指令到系统做出反应 (响应) 的最少时间。</li><li><code>90% 响应时间 (90% Response Time)</code>：指将所有用户的响应时间进行排序，第 90% 的响应时间。</li></ul><p>无论 TPS、QPS、HPS，此指标是衡量系统处理能力非常重要的指标，越大越好，根据经验，一般情况下:</p><ul><li>金融行业：1000TPS~50000TPS，不包括互联网化的活动</li><li>保险行业：100TPS~100000TPS，不包括互联网化的活动</li><li>制造行业：10TPS~5000TPS</li><li> 互联网电子商务：10000TPS~1000000TPS</li><li> 互联网中型网站：1000TPS~50000TPS</li><li> 互联网小型网站：500TPS~10000TPS</li></ul><p>从外部看，性能测试主要关注如下三个指标：</p><ul><li><code>吞吐量</code>：每秒钟系统能够处理的请求数、任务数。</li><li><code>响应时间</code>：服务处理一个请求或一个任务的耗时。</li><li><code>错误率</code>：一批请求中结果出错的请求所占比例。</li></ul><h2 id="JMeter-安装"><a href="#JMeter-安装" class="headerlink" title="JMeter 安装"></a>JMeter 安装</h2><p>在 <a href="https://jmeter.apache.org/download_jmeter.cgi">JMeter 官网</a> 下载安装包，然后解压文件。进入解压后的 <code>bin</code> 目录，Windows 系统运行 <code>jmeter.bat</code>，而 Linux 系统运行 <code>jmeter.sh</code> 即可启动 JMeter。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li>本文使用的 JMeter 版本是 <code>5.5</code></li><li>JMeter 3.2 以上版本需要安装 JDK 1.8 以上版本才能使用。</li></ul></div><p>JMeter 默认支持国际化，因此可以很方便地支持中文显示，切换语言的步骤如下：</p><p><img data-src="../../../asset/2023/01/jmeter-0.png"></p><h2 id="JMeter-压测案例"><a href="#JMeter-压测案例" class="headerlink" title="JMeter 压测案例"></a>JMeter 压测案例</h2><h3 id="添加线程组"><a href="#添加线程组" class="headerlink" title="添加线程组"></a>添加线程组</h3><p>选中 <code>测试计划</code> 并右击，在弹出的菜单中选择 <code>添加</code> -&gt; <code>线程 (用户)</code> -&gt; <code>线程组</code></p><p><img data-src="../../../asset/2023/01/jmeter-1.png"></p><p><img data-src="../../../asset/2023/01/jmeter-2.png"></p><p>线程组参数详解:</p><ul><li><code>线程数</code>：虚拟用户数。一个虚拟用户占用一个进程或线程，在这里设置多少个虚拟用户，也就表示设置多少个线程。</li><li><code>Ramp-Up 时间 (秒)</code>：准备时长，即设置的线程数需要在多长时间内全部启动完成。如果线程数为 10， 准备时长为 2， 那么需要 2 秒钟启动 10 个线程，也就是每秒启动 5 个线程。</li><li><code>循环次数</code>：每个线程发送请求的次数。如果线程数为 10，循环次数为 100，那么每个线程发送 100 次请求，即总请求数为 10*100=1000。如果勾选了 <code>永远</code> 选项，那么所有线程会一直发送请求，直到选择停止运行脚本为止。</li><li><code>延迟创建线程直到需要</code>：直到需要时延迟线程的创建。</li><li><code>持续时间 (秒)</code>：测试持续时间，会覆盖结束时间。</li><li><code>启动延迟 (秒)</code>：测试延迟启动时间，会覆盖启动时间。</li><li><code>启动时间</code>：测试启动时间，启动延迟会覆盖它。当启动时间已过，手动只需测试时当前时间也会覆盖它。</li><li><code>结束时间</code>：测试结束时间，持续时间会覆盖它。</li></ul><h3 id="添加-HTTP-请求"><a href="#添加-HTTP-请求" class="headerlink" title="添加 HTTP 请求"></a>添加 HTTP 请求</h3><p>选中已创建的线程组并右击，在弹出的菜单中选择 <code>添加</code> -&gt; <code>取样器</code> -&gt; <code>HTTP 请求</code></p><p><img data-src="../../../asset/2023/01/jemeter-3.png"></p><p><img data-src="../../../asset/2023/01/jmeter-4.png"></p><h3 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h3><p>选中已创建的线程组并右击，在弹出的菜单中选择 <code>添加</code> -&gt; <code>监听器</code> -&gt; <code>汇总报告</code> 、<code>聚合报告</code></p><p><img data-src="../../../asset/2023/01/jmeter-5.png"></p><h3 id="启动压测脚本"><a href="#启动压测脚本" class="headerlink" title="启动压测脚本"></a>启动压测脚本</h3><h4 id="GUI-启动压测"><a href="#GUI-启动压测" class="headerlink" title="GUI 启动压测"></a>GUI 启动压测</h4><div class="admonition warning"><p class="admonition-title">特别注意</p><p>JMeter 官方要求在一般情况下，要使用命令行启动压测，而不是使用 GUI 的方式。</p></div><p><img data-src="../../../asset/2023/01/jmeter-6.png"></p><h4 id="命令行启动压测"><a href="#命令行启动压测" class="headerlink" title="命令行启动压测"></a>命令行启动压测</h4><h5 id="保存压测脚本"><a href="#保存压测脚本" class="headerlink" title="保存压测脚本"></a>保存压测脚本</h5><p>将所有操作保存为压测脚本，文件的后缀是 <code>jmx</code>。</p><p><img data-src="../../../asset/2023/01/jmeter-7.png"></p><h5 id="命令行执行压测"><a href="#命令行执行压测" class="headerlink" title="命令行执行压测"></a>命令行执行压测</h5><p>进入 JMeter 的 <code>bin</code> 目录，执行压测脚本。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter -n -t /tmp/jmeter/product-up.jmx -l /tmp/jmeter/result.jtl</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td> -n</td><td> 命令行模式</td></tr><tr><td> -t</td><td>JMX 脚本的路径</td></tr><tr><td> -l</td><td>JTL 结果文件的存放路径</td></tr></tbody></table><h5 id="分析命令行压测结果"><a href="#分析命令行压测结果" class="headerlink" title="分析命令行压测结果"></a>分析命令行压测结果</h5><p>使用命令行执行压测后，输出的日志信息如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using product-up.jmx</span><br><span class="line">Starting standalone test @ 2023 Jan 10 13:38:23 CST (1673329103194)</span><br><span class="line">Waiting for possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445</span><br><span class="line">Warning: Nashorn engine is planned to be removed from a future JDK release</span><br><span class="line">summary +  16585 in 00:00:06 = 2582.9/s Avg:    70 Min:     7 Max:   314 Err:     0 (0.00%) Active: 200 Started: 200 Finished: 0</span><br><span class="line">summary +   3415 in 00:00:01 = 3162.0/s Avg:    53 Min:     4 Max:    99 Err:     0 (0.00%) Active: 0 Started: 200 Finished: 200</span><br><span class="line">summary =  20000 in 00:00:08 = 2666.0/s Avg:    67 Min:     4 Max:   314 Err:     0 (0.00%)</span><br><span class="line">Tidying up ...    @ 2023 Jan 10 13:38:31 CST (1673329111081)</span><br><span class="line">... end of run</span><br></pre></td></tr></tbody></table></figure><ul><li><code>+</code>：表示过去 30 秒的执行情况</li><li><code>=</code>：表示脚本从开始到现在的运行情况</li><li>在 JMeter 的 <code>/bin/jmeter.properties</code> 配置文件中，可以修改 <code>summariser.interval</code> 参数来指定控制台取样的时间间隔，默认值是 <code>30</code></li></ul><h5 id="JMeter-查看压测结果"><a href="#JMeter-查看压测结果" class="headerlink" title="JMeter 查看压测结果"></a>JMeter 查看压测结果</h5><p>在 JMeter 的界面内打开压测脚本（后缀是 <code>jmx</code> 的文件），找到希望查看的监听器（例如 <code>聚合报告</code>、<code>汇总报告</code>），然后点击 <code>浏览</code> 按钮，选中上面生成 JTL 文件后，即可查看对应的压测结果。</p><p><img data-src="../../../asset/2023/01/jmeter-9.png"></p><h5 id="命令行生成-HTML-压测报表"><a href="#命令行生成-HTML-压测报表" class="headerlink" title="命令行生成 HTML 压测报表"></a>命令行生成 HTML 压测报表</h5><p>JMeter 支持根据 JTL 结果文件生成 HTML 压测报表，具体的使用步骤如下：</p><ul><li>进入 JMeter 的 <code>bin</code> 目录，修改 <code>reportgenerator.properties</code> 配置文件，将 <code>jmeter.reportgenerator.overall_granularity</code> 的参数值更改为 <code>1000</code>（设置报表中数据展示间隔 1 秒，默认值为 60 秒）</li><li>创建一个存放数据报表的文件夹 (例如 <code>report</code>)</li><li> 执行下述命令，根据 JTL 结果文件生成 HTML 报表 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter -g /tmp/jmeter/result.jtl -o /tmp/jmeter/report</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td> -g</td><td> 指定 JTL 文件的路径</td></tr><tr><td> -o</td><td> 指定 HTML 报表生成到哪个文件夹下</td></tr></tbody></table><ul><li>浏览器打开生成的 <code>index.html</code> 文件，就可以很直观地查看压测结果</li></ul><p><img data-src="../../../asset/2023/01/jmeter-8.png"></p><h3 id="压测结果分析"><a href="#压测结果分析" class="headerlink" title="压测结果分析"></a>压测结果分析</h3><ul><li>若有错误率则需同开发人员确认，确定是否允许错误的发生或者错误率允许在多大的范围内。</li><li>若吞吐量 (每秒请求的数) 大于并发数，则可以慢慢的往上面增加并发数；若在压测的机器性能很好的情况下，出现吞吐量小于并发数，说明并发数不能再增加了，可以慢慢的往下减，找到最佳的并发数。</li><li>压测结束，登陆相应的 Linux/Windows 服务器查看 CPU 与内存占用等性能指标，然后进行数据分析。</li><li>最大的 TPS：不断的增加并发数，加到 TPS 达到一定值开始出现下降，那么那个值就是最大的 TPS。</li><li>最大的并发数：最大的并发数和最大的 TPS 是不同的，一般不断增加并发数，达到一个值后，服务器出现请求超时，则可认为该值为最大的并发数。</li><li>压测过程出现性能瓶颈，若在压力机的任务管理器查看到 CPU、网络和内存占用都正常，即均未达到 90% 以上，则可以说明 Linux/Windows 服务器有问题，而压力机没有问题。</li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>影响性能的考虑点包括：数据库、应用程序、中间件 (Tomcat、Nginx)、网络和操作系统等方面，优先考虑运行的应用程序属于 CPU 密集型还是 IO 密集型。</p></div><h3 id="常见错误解决"><a href="#常见错误解决" class="headerlink" title="常见错误解决"></a>常见错误解决</h3><h4 id="错误一"><a href="#错误一" class="headerlink" title="错误一"></a>错误一</h4><p><strong>错误信息</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JMeter Address Already in use</span><br></pre></td></tr></tbody></table></figure><p><strong>错误分析</strong></p><p>这是 Windows 系统本身提供的端口访问机制导致的。Windows 提供给 TCP/IP 连接的端口为 1024 ~ 5000，并且要每隔四分钟来循环回收它们，因此就导致在短时间内跑大量的请求时将端口占满了。</p><p><strong>解决方法</strong></p><ul><li>在 CMD 窗口中，使用 <code>regedit</code> 命令打开注册表编辑器</li><li>在 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</code> 下<ul><li>右击 <code>Parameters</code>，添加一个新的 DWORD，名字为 <code>MaxUserPort</code>，然后双击 <code>MaxUserPort</code>，输入数值数据为 <code>65534</code>，基数选择十进制</li><li>右击 <code>Parameters</code>，添加一个新的 DWORD，名字为 <code>TCPTimedWaitDelay</code>，然后双击 <code>TCPTimedWaitDelay</code>，输入数值数据为 <code>30</code>，基数选择十进制</li><li>退出注册表编辑器，重启 Wnidows 操作系统，让新增的配置内容生效</li><li>若是分布式执行压测的话，控制机器和负载机器都需要这样操作</li></ul></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要记录如何使用 JMeter 进行压力测试，包括 JMeter 的基础使用、命令行压测、生成 HTML 压测报表等内容。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="软件测试" scheme="https://www.techgrow.cn/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 开发随笔</title>
    <link href="https://www.techgrow.cn/posts/26ba10c4.html"/>
    <id>https://www.techgrow.cn/posts/26ba10c4.html</id>
    <published>2022-12-20T13:12:35.000Z</published>
    <updated>2022-12-20T13:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="ElasticSearch-客户端选择"><a href="#ElasticSearch-客户端选择" class="headerlink" title="ElasticSearch 客户端选择"></a>ElasticSearch 客户端选择</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>基于 TCP 协议（ES 的 9300 端口，用于集群通信），依赖 <code>spring-data-elasticsearch:transport-api.jar</code>，此方式的缺点如下：</p><ul><li>SpringBoot 版本不同， 依赖的 <code>transport-api.jar</code> 版本也就不同，不能适配不同版本的 ES</li><li> 从 ES <code>7.x</code> 版本开始，官方已经不建议使用 9300 端口来操作，而且 ES <code>8.x</code> 以后就要移除该操作方式</li></ul><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>基于 HTTP 协议（ES 的 9200 端口，用于 RESTful API），可选的客户端如下：</p><ul><li>RestTemplate、HttpClient、OkHttp：直接发送 HTTP 请求，ES 的很多操作需要自己封装，使用起来比较麻烦</li><li> Elasticsearch-Rest-Client：官方的 Rest 客户端，分为 <code>Java Low Level REST Client</code> 和 <code>Java High Level REST Client</code>，API 层次分明，上手简单</li></ul><span id="more"></span><h3 id="客户端对比"><a href="#客户端对比" class="headerlink" title="客户端对比"></a>客户端对比</h3><table><thead><tr><th>客户端</th><th>优点</th><th>缺点</th><th>说明</th></tr></thead><tbody><tr><td> Java Low Level Rest Client</td><td> 与 ES 版本之间没有关系，适用于作为所有版本 ES 的客户端</td><td></td><td>可以看做是低级的 HTTP 客户端，没有封装过多的 ES 操作</td></tr><tr><td> Java High Level Rest Client</td><td> 使用最多</td><td>使用时必须与 ES 版本保持一致</td><td>基于 Low Level Rest Client，但在 ES <code>7.15.0</code> 版本之后被弃用</td></tr><tr><td> TransportClient</td><td> 使用 Transport 端口 (9300) 进行通信，能够使用 ES 集群中的一些特性，性能最好</td><td> JAR 包版本必须与 ES 集群版本一致，ES 集群升级，客户端也要跟着升级到相同版本</td><td>已过时，官方从 ES 7 版本开始不建议使用，ES 8 版本之后被移除</td></tr><tr><td> Elasticsearch Java API Client</td><td> 最新的 ES 客户端</td><td>文档较少</td><td></td></tr></tbody></table><div class="admonition note"><p class="admonition-title">提示</p><p>关于更多的 Elasticsearch 客户端说明，建议阅读 <a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">官方文档</a>。</p></div><h2 id="ElasticSearch-客户端使用案例"><a href="#ElasticSearch-客户端使用案例" class="headerlink" title="ElasticSearch 客户端使用案例"></a>ElasticSearch 客户端使用案例</h2><p>下面将简单介绍 SpringBoot 项目如何引入 <code>Java High Level Rest Client</code>，由于 SpringBoot Starter 默认依赖了某版本的 Elasticsearch，因此需要在 <code>pom.xml</code> 配置文件中使用 <code>&lt;elasticsearch.version&gt;</code> 来指定（覆盖） Elasticsearch 的实际版本号，否则会出现兼容性问题。</p><h3 id="引入-Maven-坐标"><a href="#引入-Maven-坐标" class="headerlink" title="引入 Maven 坐标"></a>引入 Maven 坐标</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${elasticsearch.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Java-配置类"><a href="#Java-配置类" class="headerlink" title="Java 配置类"></a>Java 配置类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="comment">// 基础配置信息</span></span><br><span class="line">        String token = <span class="string">""</span>;</span><br><span class="line">        RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();</span><br><span class="line">        <span class="comment">// builder.addHeader("Authorization", "Bearer " + token);</span></span><br><span class="line">        <span class="comment">// builder.setHttpAsyncResponseConsumerFactory(</span></span><br><span class="line">        <span class="comment">// new HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024));</span></span><br><span class="line">        COMMON_OPTIONS = builder.build();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义 ES 客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ES 客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 指定ES的连接地址</span></span><br><span class="line">        RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"127.0.0.1"</span>, <span class="number">9200</span>, <span class="string">"http"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Java-测试代码"><a href="#Java-测试代码" class="headerlink" title="Java 测试代码"></a>Java 测试代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSON;</span><br><span class="line"><span class="keyword">import</span> com.clay.gulimall.search.config.ElasticSearchConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregations;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.Terms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.metrics.Avg;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.metrics.AvgAggregationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchApiTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient esClient;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>).id(<span class="string">"1"</span>)</span><br><span class="line">                .source(<span class="string">"user"</span>, <span class="string">"Jim"</span>, <span class="string">"postDate"</span>, <span class="keyword">new</span> Date(), <span class="string">"message"</span>, <span class="string">"trying out ElasticSearch"</span>);</span><br><span class="line">        </span><br><span class="line">        IndexResponse indexResponse = esClient.index(request, ElasticSearchConfig.COMMON_OPTIONS);</span><br><span class="line">        log.info(JSON.toJSONString(indexResponse));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聚合查询</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 查询 address 中包含 mill 的所有人的年龄分布以及平均薪资</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">        <span class="comment">// 指定索引</span></span><br><span class="line">        searchRequest.indices(<span class="string">"bank"</span>);</span><br><span class="line">        <span class="comment">// 检索条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchQuery(<span class="string">"address"</span>, <span class="string">"mill"</span>));</span><br><span class="line">        <span class="comment">// 按照年龄的分布进行聚合</span></span><br><span class="line">        TermsAggregationBuilder ageAgg = AggregationBuilders.terms(<span class="string">"group_by_age"</span>).field(<span class="string">"age"</span>).size(<span class="number">100</span>);</span><br><span class="line">        searchSourceBuilder.aggregation(ageAgg);</span><br><span class="line">        <span class="comment">// 计算所有人的平均薪资</span></span><br><span class="line">        AvgAggregationBuilder avgBalance = AggregationBuilders.avg(<span class="string">"avgBalance"</span>).field(<span class="string">"balance"</span>);</span><br><span class="line">        searchSourceBuilder.aggregation(avgBalance);</span><br><span class="line">        <span class="comment">// 执行检索</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = esClient.search(searchRequest, ElasticSearchConfig.COMMON_OPTIONS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取搜索结果</span></span><br><span class="line">        SearchHits searchHits = searchResponse.getHits();</span><br><span class="line">        SearchHit[] hitArray = searchHits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hitArray) {</span><br><span class="line">            String recored = hit.getSourceAsString();</span><br><span class="line">            log.info(<span class="string">"id: {}, data: {}"</span>, hit.getId(), recored);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取聚合结果 - 年龄的分布</span></span><br><span class="line">        Aggregations aggregations = searchResponse.getAggregations();</span><br><span class="line">        Terms terms = aggregations.get(<span class="string">"group_by_age"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : terms.getBuckets()) {</span><br><span class="line">            log.info(<span class="string">"age: {}, total: {}"</span>, bucket.getKeyAsString(), bucket.getDocCount());</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取聚合结果 - 平均薪资</span></span><br><span class="line">        Avg avg = aggregations.get(<span class="string">"avgBalance"</span>);</span><br><span class="line">        log.info(<span class="string">"avg balance: {}"</span>, avg.getValue());</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">"search params: {}\n"</span>, searchSourceBuilder.toString());</span><br><span class="line">        log.info(<span class="string">"search result: {}\n"</span>, JSON.toJSONString(searchResponse));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述的聚合查询代码，最终发出 HTTP 请求体内容如下：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"query"</span>: {</span><br><span class="line">        <span class="attr">"match"</span>: {</span><br><span class="line">            <span class="attr">"address"</span>: <span class="string">"mill"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"aggs"</span>: {</span><br><span class="line">        <span class="attr">"group_by_age"</span>: {</span><br><span class="line">            <span class="attr">"terms"</span>: {</span><br><span class="line">                <span class="attr">"field"</span>: <span class="string">"age"</span>,</span><br><span class="line">                <span class="attr">"size"</span>: <span class="number">100</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"avgBalance"</span>: {</span><br><span class="line">            <span class="attr">"avg"</span>: {</span><br><span class="line">                <span class="attr">"field"</span>: <span class="string">"balance"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ElasticSearch-日志分析技术栈"><a href="#ElasticSearch-日志分析技术栈" class="headerlink" title="ElasticSearch 日志分析技术栈"></a>ElasticSearch 日志分析技术栈</h2><p>大型项目的日志分析一般有以下两种技术栈：</p><ul><li>ElasticSearch + Kafka + Kibana</li></ul><p><img data-src="../../../asset/2022/12/elasticsearch-log-stack-2.png"></p><ul><li>ElasticSearch + Logstash + Kibana</li></ul><p><img data-src="../../../asset/2022/12/elasticsearch-log-stack-1.png"></p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要记录 ElasticSearch 日常开发的笔记。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Java 的五种代理实现方式</title>
    <link href="https://www.techgrow.cn/posts/aa402c78.html"/>
    <id>https://www.techgrow.cn/posts/aa402c78.html</id>
    <published>2022-11-30T14:33:05.000Z</published>
    <updated>2022-11-30T14:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 Java 的五种代理实现方式，包括 Cglib、ASM、Javassist、Byte Buddy、JDK 代理，<a href="/downloads/2022/11/java-proxy-demo.zip">点击</a> 下载完整的案例代码。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先定义出一个接口和相应的实现类，方便后续使用代理类在方法中添加日志信息。</p><ul><li>接口 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserApi</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function">String <span class="title">queryUserInfo</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><ul><li>实现类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApi</span> <span class="keyword">implements</span> <span class="title">IUserApi</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryUserInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Proxy!"</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>反射调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        Class&lt;UserApi&gt; clazz = UserApi.class;</span><br><span class="line">        Method queryUserInfo = clazz.getMethod(<span class="string">"queryUserInfo"</span>);</span><br><span class="line">        Object invoke = queryUserInfo.invoke(clazz.newInstance());</span><br><span class="line">        System.out.println(invoke);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>有代理地方几乎就会有反射，它们是一套互相配合使用的功能类。在反射中可以调用方法、获取属性、拿到注解等相关内容。这些都可以与接下来的类代理组合使用，满足各种框架所面临的技术场景。</p></blockquote><ul><li>执行结果 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h2 id="JDK-代理"><a href="#JDK-代理" class="headerlink" title="JDK 代理"></a>JDK 代理</h2><p>JDK 代理用于对接口的动态代理，会动态产生一个实现指定接口的类。特别注意，JDK 动态代理有个约束：目标对象一定是要有接口的，没有接口就不能实现动态代理，只能为接口创建动态代理实例，而不能对类创建动态代理实例。值得一提的是，JDK 动态代理主要依赖 <code>java.lang.reflect</code> 包中的 <code>InvocationHandler</code>、<code>Proxy</code> 类来实现。</p><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>JDK 代理类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line">    </span><br><span class="line">    Object originalObj;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Object originalObj)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.originalObj = originalObj;</span><br><span class="line">        <span class="comment">// JDK 动态代理只能为接口创建代理实例</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(originalObj.getClass().getClassLoader(), originalObj.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(method.getName() + <span class="string">"() 被 JDKProxy 代理了"</span>);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(originalObj, args);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>JDK 代理类调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.jdk.JDKProxy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jdkProxy</span><span class="params">()</span> </span>{</span><br><span class="line">        IUserApi userApi = (IUserApi) <span class="keyword">new</span> JDKProxy().getProxy(<span class="keyword">new</span> UserApi());</span><br><span class="line">        String invoke = userApi.queryUserInfo();</span><br><span class="line">        System.out.println(<span class="string">"运行结果: "</span> + invoke);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryUserInfo() 被 JDKProxy 代理了</span><br><span class="line">运行结果: Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：中间件开发、设计模式中代理模式和装饰器模式的应用</li><li>使用点评：JDK 动态代理是非常常用的一种，也是非常简单的一种。基本会在一些中间件代码里看到，例如：数据库路由组件、Redis 组件等，同时也可以将这样的方式应用到设计模式中。</li></ul><h2 id="Cglib-代理"><a href="#Cglib-代理" class="headerlink" title="Cglib 代理"></a>Cglib 代理</h2><p><a href="https://github.com/cglib/cglib">Cglib</a> 是 <code>Code Generation Library</code> 的缩写，属于动态代理方式中的一种。Cglib 用于对类的代理，不强制要求被代理的对象具有接口，其原理是把被代理对象类的 Class 文件加载进来，修改其字节码生成一个继承了被代理类的子类。由于 Cglib 采用了类的继承方式，所以不能对 <code>final</code> 修饰的类进行代理。Cglib 相对于 JDK 动态代理生成了大量的字节码文件，这是一种空间换时间的策略，在生成字节码的时候效率低于 JDK 动态代理。相比于反射机制，CGLIB 用到了 FastClass 机制，通过索引取调用方法，调用效率要高于 JDK 动态代理。值得一提的是，由于修改了字节码，所以 Cglib 需要依赖 ASM（Java 字节码操作类库），使用 Cglib 可以弥补 JDK 动态代理的不足。</p><h3 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>Maven 坐标 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Cglib 代理类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(method.getName() + <span class="string">"() 被 CglibProxy 代理了"</span>);</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Cglib 代理类调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.cglib.CglibProxy;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cglibProxy</span><span class="params">()</span> </span>{</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 设置父类（这里指定的是类，而不是接口）</span></span><br><span class="line">        enhancer.setSuperclass(UserApi.class);</span><br><span class="line">        <span class="comment">// 设置拦截器</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> CglibProxy());</span><br><span class="line">        <span class="comment">// 生成动态代理类</span></span><br><span class="line">        IUserApi userApi = (UserApi) enhancer.create();</span><br><span class="line">        <span class="comment">// 调用类方法</span></span><br><span class="line">        System.out.println(<span class="string">"运行结果: "</span> + userApi.queryUserInfo());</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryUserInfo() 被 CglibProxy 代理了</span><br><span class="line">运行结果: Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结-1"><a href="#使用总结-1" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：Spring AOP 切面、鉴权服务、中间件开发、RPC 框架等</li><li>使用点评：Cglib 不同于 JDK 代理，它的底层使用 ASM 字节码框架在类中修改指令码来实现代理，所以这种代理方式也就不需要像 JDK 代理那样需要接口才能代理。同时得益于字节码框架的使用，所以这种代理方式也会比使用 JDK 代理的方式快 1.5~2.0 倍。</li></ul><h2 id="ASM-代理"><a href="#ASM-代理" class="headerlink" title="ASM 代理"></a>ASM 代理</h2><p><a href="https://asm.ow2.io/">ASM</a> 是一个 Java 字节码操作的类库。它能够以二进制形式修改已有类或者动态生成类。ASM 可以直接产生二进制 Class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。特别注意，ASM 在创建 Class 字节码的过程中，操纵的级别是底层 JVM 的汇编指令级别，这要求 ASM 使用者要对 Class 组织结构和 JVM 汇编指令有一定的了解。</p><h3 id="使用案例-2"><a href="#使用案例-2" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>Maven 坐标 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ow2.asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>类加载器 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsmClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] bytes) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] generateClassBytes() {</span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 定义对象头：版本号、修饰符、全类名、签名、父类、实现的接口</span></span><br><span class="line">        cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, <span class="string">"com/proxy/asm/HelloWorld"</span>, <span class="keyword">null</span>, <span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 添加方法：修饰符、方法名、描述符、签名、抛出的异常</span></span><br><span class="line">        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"main"</span>, <span class="string">"([Ljava/lang/String;)V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 执行指令：获取静态属性</span></span><br><span class="line">        mv.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"out"</span>, <span class="string">"Ljava/io/PrintStream;"</span>);</span><br><span class="line">        <span class="comment">// 加载常量</span></span><br><span class="line">        mv.visitLdcInsn(<span class="string">"Hello ASM!"</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, <span class="string">"java/io/PrintStream"</span>, <span class="string">"println"</span>, <span class="string">"(Ljava/lang/String;)V"</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 返回值</span></span><br><span class="line">        mv.visitInsn(Opcodes.RETURN);</span><br><span class="line">        <span class="comment">// 设置栈大小和局部变量表大小</span></span><br><span class="line">        mv.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 方法结束</span></span><br><span class="line">        mv.visitEnd();</span><br><span class="line">        <span class="comment">// 类定义完成</span></span><br><span class="line">        cw.visitEnd();</span><br><span class="line">        <span class="comment">// 生成字节数组</span></span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>类加载器调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.asm.AsmClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsmProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">amsProxyTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        AsmClassLoader classLoader = <span class="keyword">new</span> AsmClassLoader();</span><br><span class="line">        <span class="comment">// 生成二进制字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = classLoader.generateClassBytes();</span><br><span class="line">        <span class="comment">// 加载生成的 HelloWorld 类</span></span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.defineClass(<span class="string">"com.proxy.asm.HelloWorld"</span>, bytes);</span><br><span class="line">        <span class="comment">// 反射获取 main 方法</span></span><br><span class="line">        Method main = clazz.getMethod(<span class="string">"main"</span>, String[].class);</span><br><span class="line">        <span class="comment">// 调用 main 方法</span></span><br><span class="line">        main.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] {<span class="keyword">new</span> String[] {}});</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello ASM!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结-2"><a href="#使用总结-2" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：全链路监控、破解工具包、Cglib、Byte Buddy</li><li> 使用点评：ASM 代理使用了字节码编程的方式进行处理，它的实现方式相对复杂，而且需要了解 Java 虚拟机规范相关的知识。因为开发人员的每一步代理操作，都是在操作字节码指令，例如：<code>Opcodes.GETSTATIC</code>、<code>Opcodes.INVOKEVIRTUAL</code>，除了这些还有约 200 个常用的指令。但 ASM 这种最接近底层的方式，也是效率最快的方式，所以在一些使用字节码插装的全链路监控中，会非常常见。</li></ul><h2 id="Javassist-代理"><a href="#Javassist-代理" class="headerlink" title="Javassist 代理"></a>Javassist 代理</h2><p><a href="https://github.com/jboss-javassist/javassist">Javassist</a> 是一个开源的 Java 字节码操作类库。由东京工业大学的数学和计算机科学系的 Shigeru Chiba 创建。它已加入了开放源代码 JBoss 应用服务器项目，通过使用 Javassist 对字节码操作为 JBoss 实现动态 AOP 框架。其功能与 JDK 自带的反射功能类似，但比反射功能更强大，可以用来检查、动态修改以及创建 Java 类。</p><h3 id="使用案例-3"><a href="#使用案例-3" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>Maven 坐标 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.29.2-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Javassist 代理类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxy</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        <span class="comment">// 获取类</span></span><br><span class="line">        CtClass ctClass = pool.get(clazz.getName());</span><br><span class="line">        <span class="comment">// 获取方法</span></span><br><span class="line">        CtMethod ctMethod = ctClass.getDeclaredMethod(<span class="string">"queryUserInfo"</span>);</span><br><span class="line">        <span class="comment">// 方法前加强</span></span><br><span class="line">        ctMethod.insertBefore(<span class="string">"{System.out.println(\""</span> + ctMethod.getName() + <span class="string">"() 被 JavassistProxy 代理了\");}"</span>);</span><br><span class="line">        <span class="comment">// 获取字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">new</span> JavassistProxy().defineClass(clazz.getName(), bytes, <span class="number">0</span>, bytes.length).newInstance();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Javassist 代理类调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.javassist.JavassistProxy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">javassistProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        IUserApi userApi = JavassistProxy.getProxy(UserApi.class);</span><br><span class="line">        String invoke = userApi.queryUserInfo();</span><br><span class="line">        System.out.println(<span class="string">"运行结果: "</span> + invoke);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryUserInfo() 被 JavassistProxy 代理了</span><br><span class="line">运行结果: Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结-3"><a href="#使用总结-3" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：全链路监控、类代理、AOP</li><li> 使用点评：Javassist 是一个使用非常广的字节码插装框架，几乎一大部分非入侵式的全链路监控都是会选择使用这个框架。因为它不想像 ASM 那样操作字节码导致风险，同时它的功能也非常齐全。另外，这个框架即可使用它所提供的方式直接编写插装代码，也可以使用字节码指令进行控制生成代码，所以综合来看也是一个非常不错的字节码框架。</li></ul><h2 id="Byte-Buddy-代理"><a href="#Byte-Buddy-代理" class="headerlink" title="Byte Buddy 代理"></a>Byte Buddy 代理</h2><p><a href="https://github.com/raphw/byte-buddy">Byte Buddy</a> 是一个字节码生成和操作类库，用于在 Java 应用程序运行时创建和修改 Java 类，而无需编译器的帮助。除了 Java 类库附带的代码生成实用程序外，Byte Buddy 还允许创建任意类，并且不限于实现用于创建运行时代理的接口。此外，Byte Buddy 提供了一种方便的 API，可以使用 Java 代理或在构建过程中手动更改类；无需理解字节码指令，即可使用简单的 API 就能很容易操作字节码，控制类和方法。值得一提的是，Byte Buddy 跟 Cglib 一样，底层都是依赖 ASM 实现的。2015 年 10 月，Byte Buddy 被 Oracle 授予了 Duke’s Choice 大奖。该奖项对 Byte Buddy 的 “Java 技术方面的巨大创新” 表示赞赏。</p><h3 id="使用案例-4"><a href="#使用案例-4" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>Maven 坐标 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.bytebuddy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>byte-buddy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Byte Buddy 拦截器类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.AllArguments;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.Origin;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.RuntimeType;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.SuperCall;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvocationInterceptor</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RuntimeType</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">intercept</span><span class="params">(<span class="meta">@Origin</span> Method method, <span class="meta">@AllArguments</span> Object[] args, <span class="meta">@SuperCall</span> Callable&lt;?&gt; callable)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(method.getName() + <span class="string">"() 被 ByteBuddyProxy 代理了"</span>);</span><br><span class="line">        <span class="keyword">return</span> callable.call();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Byte Buddy 代理类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.bytebuddy.ByteBuddy;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.description.method.MethodDescription;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.dynamic.DynamicType;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.MethodDelegation;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.matcher.ElementMatchers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuddyProxy</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        DynamicType.Unloaded&lt;?&gt; dynamicType = <span class="keyword">new</span> ByteBuddy().subclass(clazz)</span><br><span class="line">                .method(ElementMatchers.&lt;MethodDescription&gt;any())</span><br><span class="line">                .intercept(MethodDelegation.to(InvocationInterceptor.class)).make();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (T) dynamicType.load(Thread.currentThread().getContextClassLoader()).getLoaded().newInstance();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Byte Buddy 代理类调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.buddy.ByteBuddyProxy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuddyProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">byteBuddyProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        IUserApi userApi = ByteBuddyProxy.getProxy(UserApi.class);</span><br><span class="line">        String invoke = userApi.queryUserInfo();</span><br><span class="line">        System.out.println(invoke);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryUserInfo() 被 ByteBuddyProxy 代理了</span><br><span class="line">Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结-4"><a href="#使用总结-4" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：AOP 切面、类代理、组件、监控、日志</li><li>使用点评：Byte Buddy 也是一个字节码操作的类库，但 Byte Buddy 的使用方式更加简单。比起 JDK 动态代理、Cglib、Javassist 的实现，Byte Buddy 在性能上具有一定的优势。</li></ul><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>代理的实际目的就是通过一些技术手段，替换掉原有的实现类或者给原有的实现类注入新的字节码指令；而这些技术往往会被应用到一些框架、中间件开发以及类似非入侵式的全链路监控中。几种代理方式相比较，在性能上 Javassist 高于反射，但低于 ASM，因为 Javassist 增加了一层抽象。在实现成本上 Javassist 和反射都很低，而 ASM 由于直接操作字节码，相比 Javassist 源码级别的 API 实现，ASM 的实现成本要高很多。</p><p><img data-src="../../../asset/2022/11/java-proxy.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://asm.ow2.io/">ASM 官方文档</a></li><li><a href="https://bytebuddy.net/">Byte Buddy 官方文档</a></li><li><a href="https://github.com/fuzhengwei/itstack-demo-bytecode">Java 字节码编程系列知识</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Java 的五种代理实现方式，包括 JDK、Cglib、ASM、Byte Buddy、Javassist。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何估算 Java 线程池的大小与队列数</title>
    <link href="https://www.techgrow.cn/posts/dc8f1477.html"/>
    <id>https://www.techgrow.cn/posts/dc8f1477.html</id>
    <published>2022-11-21T14:33:05.000Z</published>
    <updated>2022-11-21T14:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="估算算法"><a href="#估算算法" class="headerlink" title="估算算法"></a>估算算法</h2><h3 id="第一种估算算法"><a href="#第一种估算算法" class="headerlink" title="第一种估算算法"></a>第一种估算算法</h3><p>先来一个天真的估算算法：假设要求一个系统的 TPS（Transaction Per Second 或者 Task Per Second）至少为 20，然后假设每个 Transaction 由一个线程完成，继续假设平均每个线程处理一个 Transaction 的时间为 4s。那么问题可以转化为：如何设计线程池大小，使得可以在 1s 内处理完 20 个 Transaction？这里计算过程可以很简单，每个线程的处理能力为 0.25TPS，那么要达到 20TPS，显然需要 20/0.25=80 个线程。</p><blockquote><p>很显然这个估算算法很天真，因为它没有考虑到 CPU 数目。一般服务器的 CPU 核数为 16 或者 32，如果有 80 个线程，那么肯定会带来太多不必要的线程上下文切换开销。</p></blockquote><h3 id="第二种估算算法"><a href="#第二种估算算法" class="headerlink" title="第二种估算算法"></a>第二种估算算法</h3><p>第二种估算算法比较简单，但不知是否可行（N 为 CPU 总核数）：</p><ul><li>如果是 CPU 密集型应用，则线程池大小设置为 N+1</li><li> 如果是 IO 密集型应用，则线程池大小设置为 2N+1</li></ul><blockquote><p>如果一台服务器上只部署这一个应用并且只有一个线程池，那么这种估算或许合理，具体还需自行测试验证。</p></blockquote><span id="more"></span><h3 id="第三种估算算法"><a href="#第三种估算算法" class="headerlink" title="第三种估算算法"></a>第三种估算算法</h3><p>第三种方法是在服务器性能 IO 优化中发现的一个估算公式：</p><blockquote><p>最佳线程数目 = （（线程等待时间 + 线程 CPU 时间）/ 线程 CPU 时间 ）* CPU 数目</p></blockquote><p>比如平均每个线程 CPU 运行时间为 0.5s，而线程等待时间（非 CPU 运行时间，比如 IO）为 1.5s，CPU 核心数为 8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)*8=32。这个公式可以进一步转化为：</p><blockquote><p>最佳线程数目 = （线程等待时间与线程 CPU 时间之比 + 1）* CPU 数目</p></blockquote><p>这里可以得出一个结论（第二种估算算法也可以和这个结论相结合）：</p><ul><li>线程 CPU 时间所占比例越高，需要越少线程</li><li>线程等待时间所占比例越高，需要越多线程</li></ul><h3 id="估算算法总结"><a href="#估算算法总结" class="headerlink" title="估算算法总结"></a>估算算法总结</h3><p>一个系统最快的部分是 CPU，所以决定一个系统吞吐量上限的是 CPU。增强 CPU 处理能力，可以提高系统吞吐量上限。但根据短板效应，真实的系统吞吐量并不能单纯根据 CPU 来计算。那要提高系统吞吐量，就需要从 <code>系统短板</code>（比如网络延迟、磁盘 IO）着手：</p><ul><li>尽量提高短板操作的并行化比率，比如多线程下载技术</li><li>增强短板能力，比如用 NIO 替代 IO</li></ul><p>第一条可以联系到 Amdahl 定律，这条定律定义了串行系统并行化后的加速比计算公式（如下），加速比越大，表明系统并行化的优化效果越好：</p><blockquote><p>加速比 = 优化前系统耗时 / 优化后系统耗时</p></blockquote><p>Addahl 定律还给出了系统并行度、CPU 数目和加速比的关系（如下），加速比为 Speedup，系统串行化比率（指串行执行代码所占比率）为 F，CPU 数目为 N：</p><blockquote><p>Speedup &lt;= 1 / (F + (1-F)/N)</p></blockquote><p>当 N 足够大时，串行化比率 F 越小，加速比 Speedup 越大。</p><div class="admonition note"><p class="admonition-title">问答</p><p>使用线程池后，是不是就一定比使用单线程高效呢？</p></div><p>答案是否定的，比如 Redis 就是单线程的，但它却非常高效，基本操作都能达到十万量级 /s。从线程这个角度来看，部分原因在于多线程带来线程上下文切换开销，单线程就没有这种开销。当然 Redis 速度快的本质原因在于：Redis 基本都是内存操作，这种情况下单线程可以很高效地利用 CPU。而多线程适用场景一般是：存在相当比例的 IO 和网络操作。</p><blockquote><p>所以即使有上面的估算算法，也许看似合理，但实际上也未必合理，都需要结合系统真实情况（比如是 IO 密集型或者是 CPU 密集型或者是纯内存操作）和硬件环境（CPU、内存、硬盘读写速度、网络状况等）来不断尝试达到一个符合实际的合理估算值。</p></blockquote><h2 id="估算代码"><a href="#估算代码" class="headerlink" title="估算代码"></a>估算代码</h2><p>为了方便估算 Java 线程池的大小与队列数，可以使用下述的两个 Java 类进行多次测试，这样可以得出最终的估算结果。</p><h3 id="PoolSizeCalculator-类"><a href="#PoolSizeCalculator-类" class="headerlink" title="PoolSizeCalculator 类"></a>PoolSizeCalculator 类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class that calculates the optimal thread pool boundaries. It takes the</span></span><br><span class="line"><span class="comment"> * desired target utilization and the desired work queue memory consumption as</span></span><br><span class="line"><span class="comment"> * input and retuns thread count and work queue capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Niklas Schlimm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolSizeCalculator</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The sample queue size to calculate the size of a single {<span class="doctag">@link</span> Runnable}</span></span><br><span class="line"><span class="comment">     * element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SAMPLE_QUEUE_SIZE = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Accuracy of test run. It must finish within 20ms of the testTime</span></span><br><span class="line"><span class="comment">     * otherwise we retry the test. This could be configurable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EPSYLON = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Control variable for the CPU time investigation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> expired;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Time (millis) of the test run in the CPU time calculation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> elapsed = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Calculates the boundaries of a thread pool for a given {<span class="doctag">@link</span> Runnable}.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetUtilization the desired utilization of the CPUs (0 &lt;= targetUtilization &lt;= 1)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetQueueSizeBytes the desired maximum work queue size of the thread pool (bytes)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calculateBoundaries</span><span class="params">(BigDecimal targetUtilization, BigDecimal targetQueueSizeBytes)</span> </span>{</span><br><span class="line">        calculateOptimalCapacity(targetQueueSizeBytes);</span><br><span class="line">        Runnable task = createTask();</span><br><span class="line">        start(task);</span><br><span class="line">        start(task); <span class="comment">// warm up phase</span></span><br><span class="line">        <span class="keyword">long</span> cputime = getCurrentThreadCPUTime();</span><br><span class="line">        start(task); <span class="comment">// test interval</span></span><br><span class="line">        cputime = getCurrentThreadCPUTime() - cputime;</span><br><span class="line">        <span class="keyword">long</span> waitTime = (elapsed * <span class="number">1000000</span>) - cputime;</span><br><span class="line">        calculateOptimalThreadCount(cputime, waitTime, targetUtilization);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalCapacity</span><span class="params">(BigDecimal targetQueueSizeBytes)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> mem = calculateMemoryUsage();</span><br><span class="line">        BigDecimal queueCapacity = targetQueueSizeBytes.divide(<span class="keyword">new</span> BigDecimal(mem),</span><br><span class="line">                RoundingMode.HALF_UP);</span><br><span class="line">        System.out.println(<span class="string">"Target queue memory usage (bytes): "</span></span><br><span class="line">                + targetQueueSizeBytes);</span><br><span class="line">        System.out.println(<span class="string">"createTask() produced "</span> + createTask().getClass().getName() + <span class="string">" which took "</span> + mem + <span class="string">" bytes in a queue"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Formula: "</span> + targetQueueSizeBytes + <span class="string">" / "</span> + mem);</span><br><span class="line">        System.out.println(<span class="string">"* Recommended queue capacity (bytes): "</span> + queueCapacity);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Brian Goetz' optimal thread count formula, see 'Java Concurrency in</span></span><br><span class="line"><span class="comment">     * * Practice' (chapter 8.2)  *</span></span><br><span class="line"><span class="comment">     * * <span class="doctag">@param</span> cpu</span></span><br><span class="line"><span class="comment">     * *            cpu time consumed by considered task</span></span><br><span class="line"><span class="comment">     * * <span class="doctag">@param</span> wait</span></span><br><span class="line"><span class="comment">     * *            wait time of considered task</span></span><br><span class="line"><span class="comment">     * * <span class="doctag">@param</span> targetUtilization</span></span><br><span class="line"><span class="comment">     * *            target utilization of the system</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalThreadCount</span><span class="params">(<span class="keyword">long</span> cpu, <span class="keyword">long</span> wait,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             BigDecimal targetUtilization)</span> </span>{</span><br><span class="line">        BigDecimal computeTime = <span class="keyword">new</span> BigDecimal(cpu);</span><br><span class="line">        BigDecimal waitTime = <span class="keyword">new</span> BigDecimal(wait);</span><br><span class="line">        BigDecimal numberOfCPU = <span class="keyword">new</span> BigDecimal(Runtime.getRuntime()</span><br><span class="line">                .availableProcessors());</span><br><span class="line">        BigDecimal optimalthreadcount = numberOfCPU.multiply(targetUtilization)</span><br><span class="line">                .multiply(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>).add(waitTime.divide(computeTime,</span><br><span class="line">                        RoundingMode.HALF_UP)));</span><br><span class="line">        System.out.println(<span class="string">"Number of CPU: "</span> + numberOfCPU);</span><br><span class="line">        System.out.println(<span class="string">"Target utilization: "</span> + targetUtilization);</span><br><span class="line">        System.out.println(<span class="string">"Elapsed time (nanos): "</span> + (elapsed * <span class="number">1000000</span>));</span><br><span class="line">        System.out.println(<span class="string">"Compute time (nanos): "</span> + cpu);</span><br><span class="line">        System.out.println(<span class="string">"Wait time (nanos): "</span> + wait);</span><br><span class="line">        System.out.println(<span class="string">"Formula: "</span> + numberOfCPU + <span class="string">" * "</span></span><br><span class="line">                + targetUtilization + <span class="string">" * (1 + "</span> + waitTime + <span class="string">" / "</span></span><br><span class="line">                + computeTime + <span class="string">")"</span>);</span><br><span class="line">        System.out.println(<span class="string">"* Optimal thread count: "</span> + optimalthreadcount);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * * Runs the {<span class="doctag">@link</span> Runnable} over a period defined in {<span class="doctag">@link</span> #elapsed}.</span></span><br><span class="line"><span class="comment">     * * Based on Heinz Kabbutz' ideas</span></span><br><span class="line"><span class="comment">     * * (http://www.javaspecialists.eu/archive/Issue124.html).</span></span><br><span class="line"><span class="comment">     * *</span></span><br><span class="line"><span class="comment">     * * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     * *            the runnable under investigation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Runnable task)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> runs = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            <span class="keyword">if</span> (++runs &gt; <span class="number">10</span>) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Test not accurate"</span>);</span><br><span class="line">            }</span><br><span class="line">            expired = <span class="keyword">false</span>;</span><br><span class="line">            start = System.currentTimeMillis();</span><br><span class="line">            Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">            timer.schedule(<span class="keyword">new</span> TimerTask() {</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                    expired = <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }, elapsed);</span><br><span class="line">            <span class="keyword">while</span> (!expired) {</span><br><span class="line">                task.run();</span><br><span class="line">            }</span><br><span class="line">            start = System.currentTimeMillis() - start;</span><br><span class="line">            timer.cancel();</span><br><span class="line">        } <span class="keyword">while</span> (Math.abs(start - elapsed) &gt; EPSYLON);</span><br><span class="line">        collectGarbage(<span class="number">3</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collectGarbage</span><span class="params">(<span class="keyword">int</span> times)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) {</span><br><span class="line">            System.gc();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Calculates the memory usage of a single element in a work queue. Based on</span></span><br><span class="line"><span class="comment">     * Heinz Kabbutz' ideas</span></span><br><span class="line"><span class="comment">     * (http://www.javaspecialists.eu/archive/Issue029.html).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> memory usage of a single {<span class="doctag">@link</span> Runnable} element in the thread</span></span><br><span class="line"><span class="comment">     * pools work queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">calculateMemoryUsage</span><span class="params">()</span> </span>{</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; queue = createWorkQueue(SAMPLE_QUEUE_SIZE);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) {</span><br><span class="line">            queue.add(createTask());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">long</span> mem0 = Runtime.getRuntime().totalMemory() -</span><br><span class="line">                Runtime.getRuntime().freeMemory();</span><br><span class="line">        <span class="keyword">long</span> mem1 = Runtime.getRuntime().totalMemory() -</span><br><span class="line">                Runtime.getRuntime().freeMemory();</span><br><span class="line">        queue = <span class="keyword">null</span>;</span><br><span class="line">        collectGarbage(<span class="number">15</span>);</span><br><span class="line">        mem0 = Runtime.getRuntime().totalMemory()</span><br><span class="line">                - Runtime.getRuntime().freeMemory();</span><br><span class="line">        queue = createWorkQueue(SAMPLE_QUEUE_SIZE);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) {</span><br><span class="line">            queue.add(createTask());</span><br><span class="line">        }</span><br><span class="line">        collectGarbage(<span class="number">15</span>);</span><br><span class="line">        mem1 = Runtime.getRuntime().totalMemory()</span><br><span class="line">                - Runtime.getRuntime().freeMemory();</span><br><span class="line">        <span class="keyword">return</span> (mem1 - mem0) / SAMPLE_QUEUE_SIZE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create your runnable task here.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an instance of your runnable task under investigation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Runnable <span class="title">createTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return an instance of the queue used in the thread pool.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> queue instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> BlockingQueue&lt;Runnable&gt; <span class="title">createWorkQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Calculate current cpu time. Various frameworks may be used here,</span></span><br><span class="line"><span class="comment">     * depending on the operating system in use. (e.g.</span></span><br><span class="line"><span class="comment">     * http://www.hyperic.com/products/sigar). The more accurate the CPU time</span></span><br><span class="line"><span class="comment">     * measurement, the more accurate the results for thread count boundaries.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> current cpu time of current thread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getCurrentThreadCPUTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="SimplePoolSizeCaculator-类"><a href="#SimplePoolSizeCaculator-类" class="headerlink" title="SimplePoolSizeCaculator 类"></a>SimplePoolSizeCaculator 类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePoolSizeCaculator</span> <span class="keyword">extends</span> <span class="title">PoolSizeCalculator</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Runnable <span class="title">createTask</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncIOTask();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> BlockingQueue&lt;Runnable&gt; <span class="title">createWorkQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(capacity);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getCurrentThreadCPUTime</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//the total CPU time for the current thread in nanoseconds</span></span><br><span class="line">        <span class="keyword">return</span> ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        PoolSizeCalculator poolSizeCalculator = <span class="keyword">new</span> SimplePoolSizeCaculator();</span><br><span class="line">        poolSizeCalculator.calculateBoundaries(<span class="keyword">new</span> BigDecimal(<span class="number">1.0</span>), <span class="keyword">new</span> BigDecimal(<span class="number">100000</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的异步IO任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Will</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncIOTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"http://baidu.com"</span>);</span><br><span class="line"></span><br><span class="line">            connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            connection.connect();</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                    connection.getInputStream()));</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            StringBuilder stringBuilder;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">                stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                stringBuilder.append(line);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (IOException e) {</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span>(reader != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    reader.close();</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">catch</span>(Exception e) {</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>)</span><br><span class="line">            connection.disconnect();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h2><h3 id="PoolSizeCalculator-类-1"><a href="#PoolSizeCalculator-类-1" class="headerlink" title="PoolSizeCalculator 类"></a>PoolSizeCalculator 类</h3><ul><li><p><code>calculateBoundaries()</code>：计算线程池大小和队列数，接收两个方法参数，分别是 CPU 负载和队列总内存的大小（bytes）</p></li><li><p><code>calculateMemoryUsage()</code>：计算单个任务的内存大小，计算方法如下：</p></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 手动 GC</span><br><span class="line">2. 计算可用内存大小 m0</span><br><span class="line">3. 创建一个队列，并往里面放 1000 个任务</span><br><span class="line">4. 再次 GC</span><br><span class="line">5. 计算可用内存大小 m1</span><br><span class="line">6. (m1 - m0) / 1000 即每个任务的大小</span><br></pre></td></tr></tbody></table></figure><ul><li><code>calculateOptimalCapacity()</code>：计算队列数<ul><li>计算公式：队列总内存 / 单个任务的内存</li><li>接收一个参数，即队列总内存的大小</li></ul></li></ul><ul><li><p><code>calculateOptimalThreadCount()</code>：计算线程池大小</p><ul><li>计算公式：CPU 核数 *（1 + 线程等待时间 / 线程 CPU 时间）</li></ul></li><li><p><code>collectGarbage()</code>：循环手动执行 GC 操作</p></li><li><p><code>start()</code>：计算执行 3 秒的任务所消耗 CPU 的实际使用时间</p></li></ul><h3 id="SimplePoolSizeCaculator-类-1"><a href="#SimplePoolSizeCaculator-类-1" class="headerlink" title="SimplePoolSizeCaculator 类"></a>SimplePoolSizeCaculator 类</h3><ul><li><p><code>SimplePoolSizeCaculator 类</code>：<code>PoolSizeCalculator</code> 抽象类的一个实现，用于计算 CPU 负载 ，包括队列总内存的大小为 100k 左右的 IO 密集型的线程池大小和队列数</p></li><li><p><code>AsyncIOTask 类</code>：IO 密集型应用的一个简单例子</p></li></ul><h3 id="估算代码的运行结果"><a href="#估算代码的运行结果" class="headerlink" title="估算代码的运行结果"></a>估算代码的运行结果</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Target queue memory usage (bytes): 100000</span><br><span class="line">createTask () produced threadpool.AsyncIOTask which took 40 bytes in a queue</span><br><span class="line">Formula: 100000 / 40</span><br><span class="line">* Recommended queue capacity (bytes): 2500</span><br><span class="line">Number of CPU: 4</span><br><span class="line">Target utilization: 1</span><br><span class="line">Elapsed time (nanos): 3000000000</span><br><span class="line">Compute time (nanos): 125000000</span><br><span class="line">Wait time (nanos): 2875000000</span><br><span class="line">Formula: 4 * 1 * (1 + 2875000000 / 125000000)</span><br><span class="line">* Optimal thread count: 96</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果不修改队列内存大小和任务，队列数可能都是 2500</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/sunshanpeng/dark_magic">合理估算 Java 的线程池大小与队列数</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何估算 Java 线程池的大小与队列数。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在线下载 Google Play 的 APK 应用</title>
    <link href="https://www.techgrow.cn/posts/f5fd80cf.html"/>
    <id>https://www.techgrow.cn/posts/f5fd80cf.html</id>
    <published>2022-11-19T14:33:05.000Z</published>
    <updated>2022-11-19T14:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>请确保有科学上网的条件，否则本文的教程内容不适用。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>在 <a href="https://play.google.com/">Gooble Play 官网</a> 搜索希望下载的 APK 应用，然后记录下网页地址（URL），如下所示：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://play.google.com/store/apps/details?id=org.videolan.vlc&amp;hl=en</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>打开 <a href="https://apk.support/zh_cn/apk-downloader">apk.support</a> 网站，粘贴上面记录下的 APK 网页地址（URL），然后点击界面上 <code>分析</code> 按钮，选中 <code>Google Server</code>，接着点击 <code>APK 的下载连接</code> 开始下载应用。</li></ul><p><img data-src="../../../asset/2022/10/google-apk-downloader-1.png"></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li>为了校验下载到的 APK 应用是否安全（包含恶意代码），可以打开 <a href="https://www.virustotal.com/">Virustotal 官网</a>，粘贴上面记录下的 APK 网页地址（URL），然后开始分析 APK 应用文件。</li></ul><p><img data-src="../../../asset/2022/10/google-apk-downloader-2.png"></p><ul><li>若 Virustotal 显示所有安全检测指标都通过（绿色勾图标），则说明 APK 应用是安全的，可以放心安装使用。</li></ul><p><img data-src="../../../asset/2022/10/google-apk-downloader-3.png"></p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何在线下载 Google Play 的 APK 应用。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="开发工具" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java 代码规范检测与格式化（超详细）</title>
    <link href="https://www.techgrow.cn/posts/eb1b1f3.html"/>
    <id>https://www.techgrow.cn/posts/eb1b1f3.html</id>
    <published>2022-10-20T13:15:44.000Z</published>
    <updated>2022-10-20T13:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍如何检测 Java 代码规范与格式化 Java 代码，包括 IDEA 插件与 Maven 插件的使用。</p><h2 id="代码规范检测插件"><a href="#代码规范检测插件" class="headerlink" title="代码规范检测插件"></a>代码规范检测插件</h2><h3 id="IDEA-代码规范检测插件"><a href="#IDEA-代码规范检测插件" class="headerlink" title="IDEA 代码规范检测插件"></a>IDEA 代码规范检测插件</h3><p>IDEA 可以使用 <a href="https://github.com/jshiell/checkstyle-idea">CheckStyle-IDEA</a> 插件来检测 Java 代码的规范，它可以保证每位提交者的代码规范都保持一致。值得一提的是，<code>CheckStyle-IDEA</code> 插件只能检测代码的规范，并不能格式化代码。</p><h4 id="创建规则文件"><a href="#创建规则文件" class="headerlink" title="创建规则文件"></a>创建规则文件</h4><p>在项目中创建 <code>checkstyle.xml</code> 规则文件，例如路径为 <code>config/checkstyle/checkstyle.xml</code>。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li>1、CheckStyle 的版本与 <code>checkstyle.xml</code> 规则文件的内容必须互相匹配，否则会影响代码规范检测插件 <code>CheckStyle-IDEA</code> 的正常运行。<br></li><li>2、Alibaba Nacos 项目的 CheckStyle 规则文件可以从 <a href="https://github.com/alibaba/nacos/blob/develop/style/NacosCheckStyle.xml">GitHub</a> 获取，详细的使用说明请看 <a href="https://github.com/alibaba/nacos/blob/develop/style/codeStyle.md">官方文档</a>。<br></li><li>3、Google 的 CheckStyle 规则文件可以从 <a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml">GitHub</a> 获取。<br></li><li>4、Spring 的 CheckStyle 规则文件可以从 <a href="https://github.com/spring-io/spring-javaformat/blob/main/src/checkstyle/checkstyle.xml">GitHub</a> 获取。<br></li></ul></div><ul><li>Alibaba Nacos 的 CheckStyle 规则文件如下，要求 CheckStyle 的版本至少为 <code>8.30</code></li></ul><span id="more"></span><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  ~ Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  ~ you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  ~ You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  ~ distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  ~ See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  ~ limitations under the License.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">module</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"https://checkstyle.org/dtds/configuration_1_3.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"Checker"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"charset"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileExtensions"</span> <span class="attr">value</span>=<span class="string">"java, properties, xml"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"FileTabCharacter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"eachLine"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LineLength"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileExtensions"</span> <span class="attr">value</span>=<span class="string">"java"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"150"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignorePattern"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"^implements.*|^extends.*|^package.*|^import.*|a href|href|http://|https://|ftp://"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SuppressWarningsFilter"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TreeWalker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SuppressionCommentFilter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SuppressWarningsHolder"</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Name Checker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"OuterTypeFilename"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"PackageName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"^[a-z]+(\.[a-z][a-z0-9]*)*$"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"Package name ''{0}'' must match pattern ''{1}''."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TypeName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MemberName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ParameterName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LambdaParameterName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"CatchParameterName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LocalVariableName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ClassTypeParameterName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodTypeParameterName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"InterfaceTypeParameterName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ConstantName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"StaticVariableName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AbbreviationAsWordInName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreFinal"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowedAbbreviationLength"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowedAbbreviations"</span> <span class="attr">value</span>=<span class="string">"VO"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Import Checker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AvoidStarImport"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"UnusedImports"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RedundantImport"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Block Checker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EmptyBlock"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"TEXT"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EmptyCatchBlock"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionVariableName"</span> <span class="attr">value</span>=<span class="string">"expected|ignore(d)?"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LeftCurly"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RightCurly"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NeedBraces"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Javadoc Checker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocMethod"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"scope"</span> <span class="attr">value</span>=<span class="string">"public"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowMissingParamTags"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowMissingReturnTag"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowedAnnotations"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"Override, Test, Before, After, BeforeClass, AfterClass, Parameterized, Parameters, Bean"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MissingJavadocMethod"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"scope"</span> <span class="attr">value</span>=<span class="string">"public"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minLineCount"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowedAnnotations"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"Override, Test, Before, After, BeforeClass, AfterClass, Parameterized, Parameters, Bean"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreMethodNamesRegex"</span> <span class="attr">value</span>=<span class="string">"^set[A-Z].*|^get[A-Z].*|main"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"METHOD_DEF, ANNOTATION_FIELD_DEF"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SingleLineJavadoc"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreInlineTags"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"InvalidJavadocPosition"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SummaryJavadoc"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forbiddenSummaryFragments"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocParagraph"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NonEmptyAtclauseDescription"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Coding Checker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"IllegalTokenText"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"STRING_LITERAL, CHAR_LITERAL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"Consider using special escape sequence instead of octal value or Unicode escaped value."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"OneStatementPerLine"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MultipleVariableDeclarations"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MissingSwitchDefault"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"FallThrough"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NoFinalizer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"OverloadMethodsDeclarationOrder"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"VariableDeclarationUsageDistance"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AtclauseOrder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tagOrder"</span> <span class="attr">value</span>=<span class="string">"@param, @return, @throws, @deprecated"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Miscellaneous Checker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AvoidEscapedUnicodeCharacters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowEscapesForControlCharacters"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowByTailComment"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowNonPrintableEscapes"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"Indentation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrayInitIndent"</span> <span class="attr">value</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lineWrappingIndentation"</span> <span class="attr">value</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"CommentsIndentation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ArrayTypeStyle"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"UpperEll"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Design Checker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"OneTopLevelClass"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Whitespace --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NoLineWrap"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"WhitespaceAfter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"WhitespaceAround"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowEmptyConstructors"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EmptyLineSeparator"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowMultipleEmptyLines"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowMultipleEmptyLinesInsideClassMembers"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SeparatorWrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"SeparatorWrapDot"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"DOT"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"nl"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SeparatorWrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"SeparatorWrapComma"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"COMMA"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"EOL"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SeparatorWrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"SeparatorWrapEllipsis"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"ELLIPSIS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"EOL"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SeparatorWrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"SeparatorWrapArrayDeclarator"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"ARRAY_DECLARATOR"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"EOL"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SeparatorWrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"SeparatorWrapMethodRef"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"METHOD_REF"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"nl"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"GenericWhitespace"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.followed"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"GenericWhitespace ''{0}'' is followed by whitespace."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.preceded"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"GenericWhitespace ''{0}'' is preceded with whitespace."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.illegalFollow"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"GenericWhitespace ''{0}'' should followed by whitespace."</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"ws.notPreceded"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"GenericWhitespace ''{0}'' is not preceded with whitespace."</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodParamPad"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NoWhitespaceBefore"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ParenPad"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"OperatorWrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"NL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Modifier Checker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ModifierOrder"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Annotation Checker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AnnotationLocation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"AnnotationLocationMostCases"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AnnotationLocation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"AnnotationLocationVariables"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"VARIABLE_DEF"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowSamelineMultipleAnnotations"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><ul><li>1、打开 IDEA 插件市场的界面</li><li> 2、搜索 <code>CheckStyle-IDEA</code>，点击安装即可</li></ul><h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><h5 id="导入规则文件"><a href="#导入规则文件" class="headerlink" title="导入规则文件"></a>导入规则文件</h5><ul><li>1、打开 CheckStyle 的配置界面（File –&gt; Settings –&gt; Tools –&gt; Checkstyle）</li><li>2、选择 Checkstyle 的版本为 <code>8.39</code>，这里的版本号必须与 <code>checkstyle.xml</code> 规则文件的内容相互匹配</li><li> 3、选择 <code>Scan Scope</code> 扫描范围，若 <code>checkstyle.xml</code> 规则文件支持检测不同类型的文件（<code>.java</code>、<code>.xml</code> 等）的代码规范，则可以选择 <code>All sources (including tests)</code></li><li>4、在界面上点击配置文件的添加按钮，配置描述可随便填写（例如 <code>Custom Checks</code>），然后选中项目里的 <code>checkstyle.xml</code> 规则文件，点击下一步和完成</li><li> 5、在界面上勾选刚刚添加的配置文件</li></ul><p><img data-src="../../../asset/2022/10/idea-editor-checkstyle-2.png"></p><h5 id="配置编辑器的代码检测规范"><a href="#配置编辑器的代码检测规范" class="headerlink" title="配置编辑器的代码检测规范"></a>配置编辑器的代码检测规范</h5><ul><li>1、打开 IDEA 编辑器的配置界面（File –&gt; Settings –&gt; Editor –&gt; Code Style –&gt; Schema –&gt; Import Schema –&gt; CheckStyle Configuration）</li><li>2、导入项目中的 <code>checkstyle.xml</code> 规则文件，如下图所示：</li></ul><p><img data-src="../../../asset/2022/10/idea-editor-checkstyle-1.png"></p><h5 id="配置编辑器的代码实时检测"><a href="#配置编辑器的代码实时检测" class="headerlink" title="配置编辑器的代码实时检测"></a>配置编辑器的代码实时检测</h5><ul><li>1、打开 IDEA 编辑器的配置界面（File –&gt; Settings –&gt; Editor –&gt; Inspections）</li><li>2、勾选 <code>Checkstyle real-time scan</code> 选项，如下图所示：</li></ul><p><img data-src="../../../asset/2022/10/idea-editor-checkstyle-3.png"></p><h5 id="配置编辑器提示信息的颜色"><a href="#配置编辑器提示信息的颜色" class="headerlink" title="配置编辑器提示信息的颜色"></a>配置编辑器提示信息的颜色</h5><p>在 IDEA 的编辑器内，默认的 CheckStyle 提示样式跟 IDEA 默认的差不多，两者并不好区分。若希望更改 CheckStyle 提示信息的颜色，可以按照以下步骤操作：</p><ul><li>1、打开 CheckStyle 的颜色设置窗口（File –&gt; Settings –&gt; Editor –&gt; Inspections –&gt; CheckStyle –&gt; Severity –&gt; Edit severities）</li><li>2、更改不同类型的提示信息的颜色</li></ul><p><img data-src="../../../asset/2022/10/idea-editor-checkstyle-4.png"></p><h4 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h4><ul><li>1、在 IDEA 界面内打开任意一个 Java 源文件</li><li> 2、打开 IDEA 界面底部的 CheckStyle 操作面板，点击左侧的 <code>绿色三角形</code> 按钮，这样就可以检查单个 Java 源文件的代码规范</li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>CheckStyle 除了可以检测单个 Java 源文件的代码规范，还支持检测整个 Maven 模块（Check Module）或者整个项目（Check Project）的 Java 代码规范。</p></div><p><img data-src="../../../asset/2022/10/idea-checkstyle-guide-1.png"></p><h3 id="Maven-代码规范检测插件"><a href="#Maven-代码规范检测插件" class="headerlink" title="Maven 代码规范检测插件"></a>Maven 代码规范检测插件</h3><p>Maven Checkstyle Plugin  插件可用于检测 Java 代码规范，更详细的使用教程可看 <a href="https://maven.apache.org/plugins/maven-checkstyle-plugin/">官方文档</a>。</p><h4 id="创建规则文件-1"><a href="#创建规则文件-1" class="headerlink" title="创建规则文件"></a>创建规则文件</h4><p>在项目中创建 <code>checkstyle.xml</code> 规则文件，例如路径为 <code>config/checkstyle/checkstyle.xml</code>。Checkstyle <code>8.39</code> 版本可使用的规则文件请参考 <a href="/posts/eb1b1f3.html#%E5%88%9B%E5%BB%BA%E8%A7%84%E5%88%99%E6%96%87%E4%BB%B6">这里</a>。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li>1、Maven Checkstyle Plugin 与 Checkstyle 的版本对应关系请看 <a href="http://maven.apache.org/plugins/maven-checkstyle-plugin/history.html?spm=a2c6h.12873639.article-detail.13.34766df5bH3sqO">官方文档</a>。</li><li>2、若不指定 <code>checkstyle.xml</code> 规则文件的路径，Maven Checkstyle Plugin 默认会从项目的根目录下搜索规则文件。<br></li><li>3、当 Maven Checkstyle Plugin 找不到对应的 <code>checkstyle.xml</code> 规则文件时，默认会使用内置的 <a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml">sun_checks.xml</a> 或者 <a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml">google_checks.xml</a> 规则文件。</li></ul></div><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>Maven Checkstyle Plugin <code>3.2.0</code> 默认使用的 Checkstyle 版本是 <code>9.3</code>，由于 Checkstyle 的版本必须与 <code>checkstyle.xml</code> 规则文件的内容互相匹配，因此需要引入 <code>checkstyle</code> 来指定 Checkstyle 的版本号，这样就可以很方便地兼容不同的规则文件了。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定项目中自定义的 CheckStyle 规则文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">checkstyle.config.location</span>&gt;</span>config/checkstyle/checkstyle.xml<span class="tag">&lt;/<span class="name">checkstyle.config.location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 代码规范检测插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.puppycrawl.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle-validation<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">consoleOutput</span>&gt;</span>true<span class="tag">&lt;/<span class="name">consoleOutput</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">failsOnError</span>&gt;</span>true<span class="tag">&lt;/<span class="name">failsOnError</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includeTestSourceDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeTestSourceDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>现在切换到项目所在的目录下，就可以使用 <code>mvn checkstyle:check</code> 命令执行代码规范检测了，或者直接执行 <code>mvn compile</code> 命令。Maven Checkstyle Plugin 插件除了会在控制台打印代码规范的检测结果，还会将检测结果输出到项目的 <code>target/checkstyle-result.xml</code> 文件中。</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle-validation<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>上述的 <code>id</code> 可以随意填写，<code>phase</code> 表示将插件绑定到 Maven Lifecycle 的 <code>phase</code> 中的哪个命令上。指定 <code>phase</code> 为 <code>validate</code> 后，当执行 <code>mvn compile</code> 命令时会执行 Maven CheckStyle Plugin 插件。若指定 <code>phase</code> 为 <code>install</code>，则表示绑定到 <code>install</code> 命令上，即当执行 <code>maven install</code> 命令的时候才会执行插件。</p></blockquote><h4 id="生成报告"><a href="#生成报告" class="headerlink" title="生成报告"></a>生成报告</h4><p>若希望 Maven Checkstyle Plugin 将代码规范的检测结果生成 HTML 报告，可以参考以下写法，详情可参考 <a href="https://maven.apache.org/plugins/maven-checkstyle-plugin/usage.html">官方文档</a>。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定项目中自定义的 CheckStyle 规则文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">checkstyle.config.location</span>&gt;</span>config/checkstyle/checkstyle.xml<span class="tag">&lt;/<span class="name">checkstyle.config.location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 站点生成插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 代码规范检测插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.puppycrawl.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle-validation<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">consoleOutput</span>&gt;</span>true<span class="tag">&lt;/<span class="name">consoleOutput</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">failsOnError</span>&gt;</span>true<span class="tag">&lt;/<span class="name">failsOnError</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">includeTestSourceDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeTestSourceDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成的报告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>现在切换到项目所在的目录下，就可以使用 <code>mvn checkstyle:checkstyle</code> 命令生成代码规范检测结果的 HTML 报告了，或者使用 <code>mvn site</code> 命令（速度较慢，会生成多种类型的站点报告），默认会将检测报告输出到项目的 <code>target/site/checkstyle.html</code> 文件中。</p></blockquote><h4 id="错误级别"><a href="#错误级别" class="headerlink" title="错误级别"></a>错误级别</h4><p>在 <code>checkstyle.xml</code> 规则文件中，有以下的配置内容，表示当扫描到代码有不符合规范的地方时，指定错误级别为 <code>error</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Maven CheckStyle Plugin 有以下的配置内容，表示如果在扫描代码时遇到 <code>error</code> 级别的错误，就直接中断命令的执行；否则，只会生成检测结果文件，但不会中断命令的执行。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">failsOnError</span>&gt;</span>true<span class="tag">&lt;/<span class="name">failsOnError</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>CheckStyle 允许的错误级别有 <code>error</code>、<code>warning</code>、<code>info</code>，只有指定错误级别为 <code>error</code>，并配置了 <code>failsOnError</code> 才会中断命令的执行。命令中断执行后，会在对应的模块下生成 <code>target/checkstyle-result.xml</code> 检测结果文件。</p><h4 id="多模块配置"><a href="#多模块配置" class="headerlink" title="多模块配置"></a>多模块配置</h4><p>在企业开发中，一般会把项目的逻辑按照模块拆分出来，这样便于分离和解耦，项目脉络也更加清晰。在这种情况下，要为每个 Maven 模块创建 CheckStyle 任务，也就是需要放到 Parent 的 <code>pom.xml</code> 配置文件里。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定项目中自定义的 CheckStyle 规则文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">checkstyle.config.location</span>&gt;</span>config/checkstyle/checkstyle.xml<span class="tag">&lt;/<span class="name">checkstyle.config.location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 公共的 CheckStyle 插件标准配置，可以在子模块中覆盖，并修改自定义选项 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 站点生成 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 代码检测 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.puppycrawl.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle-validation<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">consoleOutput</span>&gt;</span>true<span class="tag">&lt;/<span class="name">consoleOutput</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">failsOnError</span>&gt;</span>true<span class="tag">&lt;/<span class="name">failsOnError</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">includeTestSourceDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeTestSourceDirectory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 所有子模块都要执行的插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 所有子模块都要生成的报告 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h4><h5 id="无法打印检测结果"><a href="#无法打印检测结果" class="headerlink" title="无法打印检测结果"></a>无法打印检测结果</h5><p>首先，执行 Maven 代码规范检测插件的常用命令有两种：</p><ul><li><code>mvn checkstyle:check</code></li><li><code>mvn checkstyle:checkstyle</code></li></ul><p>特别注意的是，上述两个命令的执行效果是不一样的：</p><ul><li>执行 <code>mvn checkstyle:check</code> 命令，控制台会显示 <code>BUILD FAILURE</code>，会打印详细的代码规范检测结果（警告或错误信息），会将检测结果记录在 <code>target/checkstyle-result.xml</code> 文件里，不会生成 HTML 检测报告</li><li>执行 <code>mvn checkstyle:checkstyle</code> 命令，控制台会显示 <code>BUILD SUCCESS</code>，不会打印详细的代码规范检测结果（警告或错误信息），会将检测结果记录在 <code>target/checkstyle-result.xml</code> 文件里，会生成 HTML 检测报告</li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>值得一提的是，<code>mvn checkstyle:check</code> 命令默认会绑定到 <code>validate</code> 阶段（<code>phase</code>），它将在编译代码之前检测代码的规范，详细说明请看 <a href="https://maven.apache.org/plugins/maven-checkstyle-plugin/usage.html#checking-for-violations-as-part-of-the-build">官方文档</a>。</p></div><h5 id="无法定位-XRef-资源"><a href="#无法定位-XRef-资源" class="headerlink" title="无法定位 XRef 资源"></a>无法定位 XRef 资源</h5><p>若执行 <code>mvn checkstyle:check</code> 命令后，Maven 打印 <code>Unable to locate Source XRef to link</code> 这样的警告信息，可以在 <code>pom.xml</code> 配置文件中加入以下内容来解决：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jxr-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="代码格式化插件"><a href="#代码格式化插件" class="headerlink" title="代码格式化插件"></a>代码格式化插件</h2><h3 id="Maven-代码格式化插件"><a href="#Maven-代码格式化插件" class="headerlink" title="Maven 代码格式化插件"></a>Maven 代码格式化插件</h3><p><a href="https://github.com/spring-io/spring-javaformat">Spring Java Format</a> 插件集提供了一款格式化 Java 代码的 Maven 插件，默认使用 Spring 的代码规范，插件的运行依赖于 JDK 11+。在项目里配置好代码格式化的 Maven 插件后，可直接运行命令格式化项目代码： <code>mvn spring-javaformat:apply</code> 或者 <code>./mvnw spring-javaformat:apply</code>。</p><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>在项目中的 <code>pom.xml</code> 配置文件中添加以下内容：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.javaformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-javaformat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>现在切换到项目所在的目录下，就可以使用 <code>mvn spring-javaformat:apply</code> 或者 <code>./mvnw spring-javaformat:apply</code> 命令批量格式化 Java 代码了。</p></blockquote><h4 id="强制格式化"><a href="#强制格式化" class="headerlink" title="强制格式化"></a>强制格式化</h4><p>若希望强制所有代码都符合所需的规范，可以使用以下的插件配置内容：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.javaformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-javaformat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>配置强制格式化代码后，如果 Maven 在编译项目时发现有代码的风格不符合 Spring 规范，会自动终止编译，直至所有代码的风格都符合 Spring 规范才会让项目正常编译。</p></div><h4 id="强制检测特定的代码规范"><a href="#强制检测特定的代码规范" class="headerlink" title="强制检测特定的代码规范"></a>强制检测特定的代码规范</h4><p>若希望在 Maven 编译之前，强制检测特定的代码规范，则可以在上述配置内容的基础上（如果只是想让 Maven 插件检测特定的代码规范，而不需要执行代码格式化，则可以不引入上述的配置内容），额外引入 <code>CheckStyle</code> 的 Maven 插件，并包含 <code>spring-javaformat-checkstyle</code> 依赖，然后指定 CheckStyle 的规则文件即可，具体的配置内容如下：</p><div class="admonition warning"><p class="admonition-title">特别注意</p><ul><li>1、配置了强制检测特定的代码规范之后，如果 Maven 在编译项目时发现有代码的风格不符合特定的代码规范，会自动终止编译，直至所有代码的风格都符合特定的代码规范才会让项目正常编译。<br></li><li>2、在下述的 Maven 配置内容中，<code>checkstyle</code> 依赖的版本必须与指定的 <code>checkstyle.xml</code> 规则文件的内容互相匹配，否则会影响 Maven 代码规范检测插件的运行。<br></li><li>3、下述的 Maven 配置内容，只是让 Maven 插件在编译代码之前强制检测特定的代码规范，而不是让 Maven 插件按照 CheckStyle 的规则文件来格式化代码，也就是说 Maven 插件最终还是会使用 Spring 的代码规范来进行格式化。<br></li></ul></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定项目中自定义的 CheckStyle 规则文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">checkstyle.config.location</span>&gt;</span>config/checkstyle/checkstyle.xml<span class="tag">&lt;/<span class="name">checkstyle.config.location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 代码格式化插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.javaformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-javaformat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 代码规范检测插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.puppycrawl.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.javaformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-javaformat-checkstyle<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle-validation<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">consoleOutput</span>&gt;</span>true<span class="tag">&lt;/<span class="name">consoleOutput</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">failsOnError</span>&gt;</span>true<span class="tag">&lt;/<span class="name">failsOnError</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includeTestSourceDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeTestSourceDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>现在切换到项目所在的目录下，就可以使用 <code>mvn checkstyle:check</code> 命令执行代码规范检测了，或者直接执行 <code>mvn compile</code> 命令。</p></blockquote><h4 id="配合-CheckStyle-IDEA-插件使用"><a href="#配合-CheckStyle-IDEA-插件使用" class="headerlink" title="配合 CheckStyle-IDEA 插件使用"></a>配合 CheckStyle-IDEA 插件使用</h4><p>在 IDEA 里配置 <code>CheckStyle-IDEA</code> 代码规范检测插件，让 CheckStyle 默认使用 Spring 的代码规范来检测。</p><h5 id="创建规则文件-2"><a href="#创建规则文件-2" class="headerlink" title="创建规则文件"></a>创建规则文件</h5><p>在项目中创建 <code>checkstyle.xml</code> 规则文件，并写入如下内容：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">module</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"https://checkstyle.org/dtds/configuration_1_3.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"com.puppycrawl.tools.checkstyle.Checker"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"io.spring.javaformat.checkstyle.SpringChecks"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="配置-CheckStyle-IDEA-插件"><a href="#配置-CheckStyle-IDEA-插件" class="headerlink" title="配置 CheckStyle-IDEA 插件"></a>配置 CheckStyle-IDEA 插件</h5><ul><li>1、打开 CheckStyle 的配置界面（File –&gt; Settings –&gt; Tools –&gt; Checkstyle）</li><li>2、选择 Checkstyle 的版本，例如 <code>8.39</code></li><li>3、在界面上点击配置文件的添加按钮，配置描述可随便填写（例如 <code>Custom Checks</code>），然后选中项目里的 <code>checkstyle.xml</code> 规则文件，点击下一步和完成</li><li> 4、在界面上勾选刚刚添加的配置文件</li><li> 5、下载 <code>spring-javaformat-checkstyle-0.0.35.jar</code> 与 <code>spring-javaformat-config-0.0.35.jar</code> 文件，并将它们添加到 <code>Third-Party Checks</code></li></ul><p><img data-src="../../../asset/2022/10/idea-checkstyle-guide-2.png"></p><h3 id="IDEA-代码格式化插件"><a href="#IDEA-代码格式化插件" class="headerlink" title="IDEA 代码格式化插件"></a>IDEA 代码格式化插件</h3><h4 id="IDEA-内置的格式化工具"><a href="#IDEA-内置的格式化工具" class="headerlink" title="IDEA 内置的格式化工具"></a>IDEA 内置的格式化工具</h4><p>IDEA 可以使用内置工具格式化 Java 代码，格式化代码的快捷键是 <code>CTRL + ALT + L</code>。</p><h5 id="代码风格配置"><a href="#代码风格配置" class="headerlink" title="代码风格配置"></a>代码风格配置</h5><p>若希望让 IDEA 默认使用特定的代码风格来格式化代码，可以参考以下配置步骤：</p><ul><li>1、从 <a href="https://github.com/alibaba/nacos/blob/develop/style/nacos-code-style-for-idea.xml">Nacos GitHub</a> 下载 IDEA 的代码风格 XML 文件，这里使用 Alibaba Nacos 的代码风格（<a href="https://github.com/alibaba/nacos/blob/develop/style/codeStyle.md">附上官方教程</a>），也可以选择 <a href="https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml">Google GitHub</a> 的代码风格</li><li> 2、打开 IDEA 编辑器的配置界面（File –&gt; Settings –&gt; Editor –&gt; Code Style –&gt; Schema –&gt; Import Schema –&gt; IntelliJ IDEA code style XML）</li><li>3、导入 IDEA 的代码风格 XML 文件</li></ul><p><img data-src="../../../asset/2022/10/idea-editor-checkstyle-5.png"></p><h5 id="单个格式化"><a href="#单个格式化" class="headerlink" title="单个格式化"></a>单个格式化</h5><p>打开任意一个 Java 源文件，使用快捷键 <code>CTRL + ALT + L</code> 即可按照特定的代码风格来格式化单个源文件了。</p><h5 id="批量格式化"><a href="#批量格式化" class="headerlink" title="批量格式化"></a>批量格式化</h5><p>IDEA 支持代码批量格式化的功能，这样就不用手动使用快捷键格式化每个 Java 源文件了，而且基于上面 IDEA 代码格式化风格的配置，可以让 IDEA 按照特定的代码风格批量格式化，具体的操作步骤如下：</p><ul><li>打开 IDEA 批量格式化代码的界面（右键项目 / 模块 –&gt; Reformat Code）</li><li>配置批量格式化的参数（如下图所示）</li><li>最后点击 <code>Run</code> 按钮</li></ul><p><img data-src="../../../asset/2022/10/idea-format-code-1.png"></p><h4 id="Spring-Java-Format-格式化插件"><a href="#Spring-Java-Format-格式化插件" class="headerlink" title="Spring Java Format 格式化插件"></a>Spring Java Format 格式化插件</h4><p><a href="https://github.com/spring-io/spring-javaformat">Spring Java Format</a> 提供了一款可以格式化 Java 代码的 IDEA 插件，可以从 <a href="https://repo1.maven.org/maven2/io/spring/javaformat/spring-javaformat-intellij-idea-plugin/">Maven Central</a> 下载，详细的使用教程请看<a href="https://github.com/spring-io/spring-javaformat#intellij-idea">官方文档</a>。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>在企业项目开发中，推荐使用以下的技术组合来约束项目的代码风格。</p><h3 id="推荐方案一"><a href="#推荐方案一" class="headerlink" title="推荐方案一"></a>推荐方案一</h3><ul><li><a href="/posts/eb1b1f3.html#IDEA-%E5%86%85%E7%BD%AE%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7">使用 IDEA 内置的代码格式化工具，基于 Google 或 Nacos 的 代码风格文件</a></li><li><a href="/posts/eb1b1f3.html#IDEA-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%B5%8B%E6%8F%92%E4%BB%B6">使用 IDEA 的代码规范检测插件，基于 Google 或 Nacos 的 CheckStyle 规则文件</a></li><li><a href="/posts/eb1b1f3.html#Maven-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%B5%8B%E6%8F%92%E4%BB%B6">使用 Maven 的代码规范检测插件，基于 Google 或 Nacos 的 CheckStyle 规则文件</a></li></ul><h3 id="推荐方案二"><a href="#推荐方案二" class="headerlink" title="推荐方案二"></a>推荐方案二</h3><ul><li><a href="/posts/eb1b1f3.html#Spring-Java-Format-%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6">Spring Java Format 的 IDEA 代码格式化插件</a></li><li><a href="/posts/eb1b1f3.html#Maven-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6">Spring Java Format 的 Maven 代码格式化插件</a></li><li><a href="/posts/eb1b1f3.html#IDEA-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%B5%8B%E6%8F%92%E4%BB%B6">使用 IDEA 的代码规范检测插件，基于 Spring 的 CheckStyle 规则文件</a></li><li><a href="/posts/eb1b1f3.html#Maven-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%B5%8B%E6%8F%92%E4%BB%B6">使用 Maven 的代码规范检测插件，基于 Spring 的 CheckStyle 规则文件</a></li></ul><h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><h3 id="CheckStyle-规则文件"><a href="#CheckStyle-规则文件" class="headerlink" title="CheckStyle 规则文件"></a>CheckStyle 规则文件</h3><ul><li><a href="https://github.com/alibaba/nacos/blob/develop/style/NacosCheckStyle.xml">Nacos CheckStyle</a></li><li><a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml">Google CheckStyle</a></li><li><a href="https://github.com/spring-io/spring-javaformat/blob/main/src/checkstyle/checkstyle.xml">Spring CheckStyle</a></li></ul><h3 id="IDEA-代码风格-XML-文件"><a href="#IDEA-代码风格-XML-文件" class="headerlink" title="IDEA 代码风格 XML 文件"></a>IDEA 代码风格 XML 文件</h3><ul><li><a href="https://github.com/alibaba/nacos/blob/develop/style/nacos-code-style-for-idea.xml">Nacos Java Code Style For IDEA</a></li><li><a href="https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml">Google Java Code Style For IDEA</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://google.github.io/styleguide/">Google All Style Guide</a></li><li><a href="https://google.github.io/styleguide/javaguide.html">Google Java Style Guide</a></li><li><a href="https://developer.aliyun.com/article/610718">使用 CheckStyle 来规范你的项目</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何检测 Java 代码规范与格式化 Java 代码，包括 IDEA 插件与 Maven 插件的使用。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="开发工具" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>VuePress 渲染 Mermaid 绘图</title>
    <link href="https://www.techgrow.cn/posts/bc19d204.html"/>
    <id>https://www.techgrow.cn/posts/bc19d204.html</id>
    <published>2022-10-06T13:55:33.000Z</published>
    <updated>2022-10-06T13:55:33.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍 VuePress 如何渲染 Mermaid 绘图，适用于 VuePress 1.x 与 VuePress 2.x。</p><h2 id="VuePress-1-x"><a href="#VuePress-1-x" class="headerlink" title="VuePress 1.x"></a>VuePress 1.x</h2><p>VuePress 1.x 可以直接安装第三方插件 <a href="https://github.com/eFrane/vuepress-plugin-mermaidjs">vuepress-plugin-mermaidjs</a> 来渲染 Mermaid 绘图，插件的详细文档可看 <a href="https://vuepress-plugin-mermaidjs.efrane.com/">这里</a>。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装插件时必须指定具体的版本号，否则默认会安装最新版本的插件，最新版本不兼容 VuePres 1.x。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install vuepress-plugin-mermaidjs@1.9.1 -D</span><br></pre></td></tr></tbody></table></figure><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>编辑 VuePress 1.x 的 <code>.vuepress/config.js</code> 配置文件，新增 <code>mermaidjs</code> 插件，如下所示：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="string">'vuepress-plugin-mermaidjs'</span></span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="Markdown-渲染"><a href="#Markdown-渲染" class="headerlink" title="Markdown 渲染"></a>Markdown 渲染</h3><h4 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h4><ul><li>第二种写法：使用代码块（推荐）</li></ul><p><img data-src="../../../asset/2022/10/vuepress1-mermaid-1.png"></p><ul><li>第二种写法：使用 <code>&lt;mermaid&gt;</code> 标签</li></ul><p><img data-src="../../../asset/2022/10/vuepress1-mermaid-2.png"></p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;mermaid&gt;</span><br><span class="line">sequenceDiagram</span><br><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br><span class="line">&lt;/mermaid&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="VuePress-2-x"><a href="#VuePress-2-x" class="headerlink" title="VuePress 2.x"></a>VuePress 2.x</h2><p>由于第三方插件 <a href="https://github.com/eFrane/vuepress-plugin-mermaidjs">vuepress-plugin-mermaidjs</a> 并没有适配最新版的 VuePress 2.x，因此需要手动配置 VuePress 2.x 来渲染 Mermaid 绘图。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ul><li>让 VuePress 2.x 支持 Mermaid</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mermaid -D</span><br></pre></td></tr></tbody></table></figure><ul><li>让 VuePress 2.x 支持自定义组件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @vuepress/plugin-register-components@next -D</span><br></pre></td></tr></tbody></table></figure><h3 id="配置-VuePress-2"><a href="#配置-VuePress-2" class="headerlink" title="配置 VuePress 2"></a>配置 VuePress 2</h3><p>编辑 VuePress 2.x 的 <code>.vuepress/config.ts</code> 配置文件，指定自定义组件所在的目录，该目录下的 Vue 文件会被自动注册为 Vue 组件，详细介绍可以看 <a href="https://v2.vuepress.vuejs.org/zh/reference/plugin/register-components.html">这里</a>。</p><ul><li>第一种配置方式 </li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { registerComponentsPlugin } <span class="keyword">from</span> <span class="string">'@vuepress/plugin-register-components'</span></span><br><span class="line"><span class="keyword">import</span> { getDirname, path } <span class="keyword">from</span> <span class="string">'@vuepress/utils'</span></span><br><span class="line"><span class="keyword">const</span> __dirname = getDirname(<span class="keyword">import</span>.meta.url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    registerComponentsPlugin({</span><br><span class="line">      <span class="attr">componentsDir</span>: path.resolve(__dirname, <span class="string">'./components'</span>),</span><br><span class="line">    })</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>第二种配置方式 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install app-root-path -D</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">import</span> appRoot <span class="keyword">from</span> <span class="string">'app-root-path'</span>;</span><br><span class="line"><span class="keyword">import</span> { registerComponentsPlugin } <span class="keyword">from</span> <span class="string">'@vuepress/plugin-register-components'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 ".vupress" 目录的绝对路径</span></span><br><span class="line"><span class="keyword">const</span> __dirname = appRoot.resolve(<span class="string">'./.vuepress/'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果文档项目存放在工程的子目录中，比如在 "/docs" 文件夹，则写法如下</span></span><br><span class="line"><span class="comment">// const __dirname = appRoot.resolve('./docs/.vuepress/');</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    registerComponentsPlugin({</span><br><span class="line">      <span class="attr">componentsDir</span>: path.resolve(__dirname, <span class="string">'./components'</span>),</span><br><span class="line">    })</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>上述的两种方式，都可以指定 VuePress 2.x 的自定义组件目录为 <code>./components</code>，该目录默认存放在 <code>.vuepress</code> 目录下，即完整的自定义组件目录的路径是 <code>.vuepress/components/</code>。</p></div><h3 id="自定义-Mermaid-组件"><a href="#自定义-Mermaid-组件" class="headerlink" title="自定义 Mermaid 组件"></a>自定义 Mermaid 组件</h3><p>在上面的自定义组件目录下，创建 <code>mermaid.vue</code> 源文件，例如源文件路径为 <code>.vuepress/components/mermaid.vue</code>，文件的内容如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mermaid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span>(<span class="string">"mermaid/dist/mermaid"</span>).then(<span class="function">(<span class="params">m</span>) =&gt;</span> {</span></span><br><span class="line"><span class="javascript">      m.initialize({</span></span><br><span class="line"><span class="javascript">        <span class="attr">startOnLoad</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      });</span></span><br><span class="line"><span class="javascript">      m.init();</span></span><br><span class="line"><span class="javascript">    });</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span>(<span class="string">"mermaid/dist/mermaid"</span>).then(<span class="function">(<span class="params">m</span>) =&gt;</span> {</span></span><br><span class="line"><span class="javascript">      m.initialize({</span></span><br><span class="line"><span class="javascript">        <span class="attr">startOnLoad</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      });</span></span><br><span class="line"><span class="javascript">      m.init();</span></span><br><span class="line"><span class="javascript">    });</span></span><br><span class="line"><span class="javascript">  }</span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Markdown-渲染-1"><a href="#Markdown-渲染-1" class="headerlink" title="Markdown 渲染"></a>Markdown 渲染</h3><h4 id="语法说明-1"><a href="#语法说明-1" class="headerlink" title="语法说明"></a>语法说明</h4><p>在 MarkDown 文件内添加 <code>&lt;mermaid&gt;</code> 标签，Mermaid 的内容需要使用 <code>{{</code> 包裹住，并写在 <code>&lt;mermaid&gt;</code> 标签内（如下所示）。<strong>特别注意，<code>&lt;mermaid&gt;</code> 标签内不允许存在空行。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mermaid&gt;</span><br><span class="line">{{`</span><br><span class="line">  ......（Mermaid 的内容）</span><br><span class="line">`}}</span><br><span class="line">&lt;/mermaid&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;mermaid&gt;</span><br><span class="line">{{`</span><br><span class="line">graph TB</span><br><span class="line">  id1(圆角矩形)--普通线--&gt;id2[矩形];</span><br><span class="line">  subgraph 子图</span><br><span class="line">   id2==粗线==&gt;id3{菱形}</span><br><span class="line">   id3-.虚线.-&gt;id4&gt;右向旗帜]</span><br><span class="line">   id3--无箭头---id5((圆形))</span><br><span class="line">  end</span><br><span class="line">`}}</span><br><span class="line">&lt;/mermaid&gt;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2022/10/vuepress2-mermaid-1.png"></p><h5 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;mermaid&gt;</span><br><span class="line">{{`</span><br><span class="line">sequenceDiagram</span><br><span class="line">Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">loop Healthcheck</span><br><span class="line">    John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">end</span><br><span class="line">Note right of John: Rational thoughts!</span><br><span class="line">     John--&gt;&gt;Alice: Great!</span><br><span class="line">     John-&gt;&gt;Bob   : How about you?</span><br><span class="line">     Bob--&gt;&gt;John  : Jolly good!</span><br><span class="line">`}}</span><br><span class="line">&lt;/mermaid&gt;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2022/10/vuepress2-mermaid-2.png"></p><h5 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;mermaid&gt;</span><br><span class="line">{{`</span><br><span class="line">pie</span><br><span class="line">  title Key elements in Product X</span><br><span class="line">  "Calcium" : 42.96</span><br><span class="line">  "Potassium" : 50.05</span><br><span class="line">  "Magnesium" : 10.01</span><br><span class="line">  "Iron" :  5</span><br><span class="line">`}}</span><br><span class="line">&lt;/mermaid&gt;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2022/10/vuepress2-mermaid-3.png"></p><h5 id="类别图"><a href="#类别图" class="headerlink" title="类别图"></a>类别图</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;mermaid&gt;</span><br><span class="line">{{`</span><br><span class="line">classDiagram</span><br><span class="line">     Animal &lt;|-- Duck</span><br><span class="line">     Animal &lt;|-- Fish</span><br><span class="line">     Animal &lt;|-- Zebra</span><br><span class="line">     Animal : +int age</span><br><span class="line">     Animal : +String gender</span><br><span class="line">     Animal: +isMammal()</span><br><span class="line">     Animal: +mate()</span><br><span class="line">     class Duck{</span><br><span class="line">         +String beakColor</span><br><span class="line">         +swim()</span><br><span class="line">         +quack()</span><br><span class="line">     }</span><br><span class="line">     class Fish{</span><br><span class="line">         -int sizeInFeet</span><br><span class="line">         -canEat()</span><br><span class="line">     }</span><br><span class="line">     class Zebra{</span><br><span class="line">         +bool is_wild</span><br><span class="line">         +run()</span><br><span class="line">     }</span><br><span class="line">`}}</span><br><span class="line">&lt;/mermaid&gt;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2022/10/vuepress2-mermaid-4.png"></p><h5 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;mermaid&gt;</span><br><span class="line">{{`</span><br><span class="line">gantt</span><br><span class="line">section Section</span><br><span class="line">          Completed: done,   des1,       2014-01-06, 2014-01-08</span><br><span class="line">          Active   : active, des2,       2014-01-07, 3d</span><br><span class="line">         Parallel 1        : des3,   after des1, 1d</span><br><span class="line">         Parallel 2        : des4,   after des1, 1d</span><br><span class="line">         Parallel 3        : des5,   after des3, 1d</span><br><span class="line">         Parallel 4        : des6,   after des4, 1d</span><br><span class="line">`}}</span><br><span class="line">&lt;/mermaid&gt;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2022/10/vuepress2-mermaid-5.png"></p><h5 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;mermaid&gt;</span><br><span class="line">{{`</span><br><span class="line">stateDiagram</span><br><span class="line">    [*]--&gt;Active</span><br><span class="line">    state Active {</span><br><span class="line">        [*]--&gt;NumLockOff</span><br><span class="line">        NumLockOff--&gt;NumLockOn : EvNumLockPressed</span><br><span class="line">        NumLockOn--&gt;NumLockOff : EvNumLockPressed</span><br><span class="line">        --</span><br><span class="line">        [*]--&gt;CapsLockOff</span><br><span class="line">        CapsLockOff--&gt;CapsLockOn : EvCapsLockPressed</span><br><span class="line">        CapsLockOn--&gt;CapsLockOff : EvCapsLockPressed</span><br><span class="line">        --</span><br><span class="line">        [*]--&gt;ScrollLockOff</span><br><span class="line">        ScrollLockOff--&gt;ScrollLockOn : EvCapsLockPressed</span><br><span class="line">        ScrollLockOn--&gt;ScrollLockOff : EvCapsLockPressed</span><br><span class="line">    }</span><br><span class="line">`}}</span><br><span class="line">&lt;/mermaid&gt;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2022/10/vuepress2-mermaid-7.png"></p><h5 id="实体关系图"><a href="#实体关系图" class="headerlink" title="实体关系图"></a>实体关系图</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mermaid&gt;</span><br><span class="line">{{`</span><br><span class="line">erDiagram</span><br><span class="line">    CUSTOMER ||--o{ ORDER : places</span><br><span class="line">    ORDER ||--|{ LINE-ITEM : contains</span><br><span class="line">    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</span><br><span class="line">`}}</span><br><span class="line">&lt;/mermaid&gt;</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2022/10/vuepress2-mermaid-6.png"></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul><li><a href="http://mermaid-js.github.io/mermaid/#/">Mermaid Docs</a></li><li><a href="https://github.com/eFrane/vuepress-plugin-mermaidjs/issues/64">Mermaid Support VuePress v2</a></li><li><a href="https://passe-de-mode.uedasoft.com/tips/software/frontend/vuepress/vuepress02.html">How to use mermaid on Vuepress</a></li><li><a href="https://github.com/vuejs/vuepress/issues/111">Has anyone gotten mermaid working ?</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 VuePress 如何渲染 Mermaid 绘图，适用于 VuePress 1.x 与 VuePress 2.x。</summary>
    
    
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Rust 编程之道</title>
    <link href="https://www.techgrow.cn/posts/35ea9077.html"/>
    <id>https://www.techgrow.cn/posts/35ea9077.html</id>
    <published>2022-09-24T15:12:41.000Z</published>
    <updated>2022-09-24T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><div class="row"><embed src="https://qiniu.techgrow.cn/uploads/pdf/2021/08/Rust编程之道.pdf" width="100%" height="1024px" isolation="isolate" type="application/pdf"></div></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Rust 编程之道。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="在线电子书" scheme="https://www.techgrow.cn/tags/%E5%9C%A8%E7%BA%BF%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant 快速创建 VirtualBox 虚拟机</title>
    <link href="https://www.techgrow.cn/posts/b9ff615e.html"/>
    <id>https://www.techgrow.cn/posts/b9ff615e.html</id>
    <published>2022-09-19T13:30:00.000Z</published>
    <updated>2022-09-19T13:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍如何使用 Vagrant 在 VirtualBox 中快速创建 Linux 虚拟机，请提前在 Linux/Windows 本地操作系统里安装好 VirtualBox 虚拟机软件。</p><h2 id="Vagrant-介绍"><a href="#Vagrant-介绍" class="headerlink" title="Vagrant 介绍"></a>Vagrant 介绍</h2><h3 id="Vagrant-简介"><a href="#Vagrant-简介" class="headerlink" title="Vagrant 简介"></a>Vagrant 简介</h3><p>Vagrant 是一个基于 <code>Ruby</code> 的开源工具，用于创建和部署虚拟化开发环境。Vagrant 可与 Hyper-V、VirtualBox、VMWare、Parallels 和 Libvirt 等虚拟化软件配合使用，致力于提供一种简易的方法来创建、配置和复制状态已知的虚拟机。它可以很方便地将预配置的虚拟机或设备从 Vagrant Cloud（镜像仓库）获取，并初始化后在系统上运行。<strong>简而言之，Vagrant 可以通过命令行快速创建 VirtualBox、VMWare 等虚拟机，主要用途类似 Docker（本质上的实现原理不一样）。</strong></p><span id="more"></span><h3 id="Vagrant-站点资源"><a href="#Vagrant-站点资源" class="headerlink" title="Vagrant 站点资源"></a>Vagrant 站点资源</h3><ul><li><a href="https://www.vagrantup.com/downloads">Vagrant 官网</a></li><li><a href="https://app.vagrantup.com/boxes/search">Vargrant 镜像仓库</a></li><li><a href="https://www.vagrantup.com/docs">Vargrant 官方文档</a></li><li><a href="https://www.github.com/hashicorp/vagrant">Vagrant GitHub 项目</a></li></ul><h2 id="Vagrant-安装"><a href="#Vagrant-安装" class="headerlink" title="Vagrant 安装"></a>Vagrant 安装</h2><h3 id="Linux-系统"><a href="#Linux-系统" class="headerlink" title="Linux 系统"></a>Linux 系统</h3><p>Linux 系统执行以下命令安装 Vagrant 后，在终端输入命令 <code>vagrant</code>，若出现相关命令提示，则说明 Vagrant 安装成功。</p><div class="admonition warning"><p class="admonition-title">特别注意</p><p>Linux 系统环境下，Vagrant 的虚拟机镜像下载目录是 <code>~/.vagrant.d</code>，为了方便日后有足够的磁盘空间安装更多的虚拟机镜像，建议通过软链接的方式更改镜像存放的默认目录，例如： <code>ln -sf /your_new_path ~/.vagrant.d</code></p></div><h4 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf install -y dnf-plugins-core</span><br><span class="line">$ sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo</span><br><span class="line">$ sudo dnf -y install vagrant</span><br></pre></td></tr></tbody></table></figure><h4 id="CentOS-RHEL"><a href="#CentOS-RHEL" class="headerlink" title="CentOS/RHEL"></a>CentOS/RHEL</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line">$ sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo</span><br><span class="line">$ sudo yum -y install vagrant</span><br></pre></td></tr></tbody></table></figure><h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com <span class="subst">$(lsb_release -cs)</span> main"</span> | sudo tee /etc/apt/sources.list.d/hashicorp.list</span><br><span class="line">$ sudo apt update &amp;&amp; sudo apt install vagrant</span><br></pre></td></tr></tbody></table></figure><h3 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h3><p><a href="https://www.vagrantup.com/downloads">Vagrant 官网</a> 下载 <code>EXE</code> 安装包，然后直接安装即可。Vagrant 安装完成后，打开 <code>CMD</code> 窗口，输入命令 <code>vagrant</code>，若出现相关命令提示，则说明安装成功。</p><p><img data-src="../../../asset/2022/09/vagrant-download.png"></p><h2 id="Vagrant-常用命令"><a href="#Vagrant-常用命令" class="headerlink" title="Vagrant 常用命令"></a>Vagrant 常用命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td> vagrant box add</td><td> 添加 box 的操作</td></tr><tr><td> vagrant box list</td><td> 查看本地的 box 列表</td></tr><tr><td> vagrant box remove</td><td> 删除本地的 box</td></tr><tr><td>vagrant init</td><td> 初始化 box 的操作，会生成 Vagrant 的配置文件 Vagrantfile</td></tr><tr><td>vagrant up</td><td> 启动本地虚拟机</td></tr><tr><td> vagrant ssh</td><td> 通过 SSH 登录本地虚拟机</td></tr><tr><td> vagrant suspend</td><td> 暂停本地虚拟机</td></tr><tr><td> vagrant resume</td><td> 恢复本地虚拟机</td></tr><tr><td> vagrant package</td><td> 将当前本地虚拟机打包成 box</td></tr><tr><td>vagrant status</td><td> 查看当前虚拟机的状态</td></tr><tr><td> vagrant global-status</td><td> 显示当前用户下 Vagrant 所有虚拟机的状态</td></tr><tr><td> vagrant reload</td><td> 更改了 Vagrantfile 后，使之生效（相当于先 halt，再 up）</td></tr></tbody></table><h2 id="Vagrant-创建虚拟机"><a href="#Vagrant-创建虚拟机" class="headerlink" title="Vagrant 创建虚拟机"></a>Vagrant 创建虚拟机</h2><h3 id="创建-VirtualBox-虚拟机"><a href="#创建-VirtualBox-虚拟机" class="headerlink" title="创建 VirtualBox 虚拟机"></a>创建 VirtualBox 虚拟机</h3><p>执行以下 <code>init</code> 命令，即可快速初始化一个 VirtualBox 虚拟机。值得一提的是，虚拟机初始化完成后，Vagrant 会在执行命令的当前目录下创建一个 <code>Vagrantfile</code> 文件。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant init centos/7</span><br></pre></td></tr></tbody></table></figure><p>命令行中的 <code>centos/7</code> 代表需要初始化 CentOS 7 的虚拟机，如果需要初始化其他虚拟机直接替换它就可以，注意 <code>/</code> 符不能省略掉，例如初始化 Ubuntu 虚拟机的命令如下：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant init ubuntu/trusty64</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>Vagrant 支持的虚拟机列表可以在右边这个网站查找到：<a href="https://app.vagrantup.com/boxes/search">https://app.vagrantup.com/boxes/search</a></p></div><h3 id="启动-VirtualBox-虚拟机"><a href="#启动-VirtualBox-虚拟机" class="headerlink" title="启动 VirtualBox 虚拟机"></a>启动 VirtualBox 虚拟机</h3><p>执行以下 <code>up</code> 命令，即可快速启动上面初始化好的 VirtualBox 虚拟机</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></tbody></table></figure><p>Vagrant 首次启动 VirtualBox 虚拟机时，会从 Vagrant Cloud（镜像仓库）下载对应的镜像，CentOS 7 虚拟机完整的启动日志信息如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Bringing machine 'default' up with 'virtualbox' provider...</span><br><span class="line">==&gt; default: Box 'centos/7' could not be found. Attempting to find and install...</span><br><span class="line">    default: Box Provider: virtualbox</span><br><span class="line">    default: Box Version: &gt;= 0</span><br><span class="line">==&gt; default: Loading metadata for box 'centos/7'</span><br><span class="line">    default: URL: https://vagrantcloud.com/centos/7</span><br><span class="line">==&gt; default: Adding box 'centos/7' (v2004.01) for provider: virtualbox</span><br><span class="line">    default: Downloading: https://vagrantcloud.com/centos/boxes/7/versions/2004.01/providers/virtualbox.box</span><br><span class="line">Download redirected to host: cloud.centos.org</span><br><span class="line">    default: Calculating and comparing box checksum...</span><br><span class="line">==&gt; default: Successfully added box 'centos/7' (v2004.01) for 'virtualbox'!</span><br><span class="line">==&gt; default: Importing base box 'centos/7'...</span><br><span class="line">==&gt; default: Matching MAC address for NAT networking...</span><br><span class="line">==&gt; default: Checking if box 'centos/7' version '2004.01' is up to date...</span><br><span class="line">==&gt; default: Setting the name of the VM: Vagrant_default_1663582821802_96925</span><br><span class="line">==&gt; default: Clearing any previously set network interfaces...</span><br><span class="line">==&gt; default: Preparing network interfaces based on configuration...</span><br><span class="line">    default: Adapter 1: nat</span><br><span class="line">==&gt; default: Forwarding ports...</span><br><span class="line">    default: 22 (guest) =&gt; 2222 (host) (adapter 1)</span><br><span class="line">==&gt; default: Booting VM...</span><br><span class="line">==&gt; default: Waiting for machine to boot. This may take a few minutes...</span><br><span class="line">    default: SSH address: 127.0.0.1:2222</span><br><span class="line">    default: SSH username: vagrant</span><br><span class="line">    default: SSH auth method: private key</span><br><span class="line">    default: </span><br><span class="line">    default: Vagrant insecure key detected. Vagrant will automatically replace</span><br><span class="line">    default: this with a newly generated keypair for better security.</span><br><span class="line">    default: </span><br><span class="line">    default: Inserting generated public key within guest...</span><br><span class="line">    default: Removing insecure key from the guest if it's present...</span><br><span class="line">    default: Key inserted! Disconnecting and reconnecting using new SSH key...</span><br><span class="line">==&gt; default: Machine booted and ready!</span><br><span class="line">==&gt; default: Checking for guest additions in VM...</span><br><span class="line">    default: No guest additions were detected on the base box for this VM! Guest</span><br><span class="line">    default: additions are required for forwarded ports, shared folders, host only</span><br><span class="line">    default: networking, and more. If SSH fails on this machine, please install</span><br><span class="line">    default: the guest additions and repackage the box to continue.</span><br><span class="line">    default: </span><br><span class="line">    default: This is not an error message; everything may continue to work properly,</span><br><span class="line">    default: in which case you may ignore this message.</span><br><span class="line">==&gt; default: Rsyncing folder: /home/centos/vagrant/ =&gt; /vagrant</span><br></pre></td></tr></tbody></table></figure><h3 id="SSH-连接-VirtualBox-虚拟机"><a href="#SSH-连接-VirtualBox-虚拟机" class="headerlink" title="SSH 连接 VirtualBox 虚拟机"></a>SSH 连接 VirtualBox 虚拟机</h3><p>VirtualBox 虚拟机系统启动后，Vagrant 会为我们自动创建 SSH 连接，因此我们不仅可以直接通过 VirtualBox 操作虚拟机系统，也可以通过 SSH 连接来操作。Vagrant 默认的 SSH 账号名称是 <code>vagrant</code>，登录密码是 <code>vagrant</code>，所以可以通过这种连接方式以 Vagrant 的账号连接虚拟机系统，命令如下：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></tbody></table></figure><p>使用 SSH 连接到 VirtualBox 虚拟机系统后，若希望切换到 <code>root</code> 用户，可以在终端输入下命令，<code>root</code> 用户的默认密码是 <code>vagrant</code></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su root</span><br></pre></td></tr></tbody></table></figure><h3 id="VirtualBox-虚拟机网络配置"><a href="#VirtualBox-虚拟机网络配置" class="headerlink" title="VirtualBox 虚拟机网络配置"></a>VirtualBox 虚拟机网络配置</h3><p>默认情况下，Vagrant 创建虚拟机后，使用的是网络地址转换和端口转发的方式来解决本地系统和虚拟机网络地址映射的问题，如下图所示。在实际使用过程中，网络地址转换和端口转发的方式可能不太方便。举个例子，在虚拟机中装了很多软件服务，比如 MySQL 数据库，Redis 等等，在虚拟机内部使用是没有问题的。MySQL 数据库的端口默认是 <code>3306</code>，但在本地系统中，虚拟机给我们映射出来的端口可能就不是 <code>3306</code> 了，这对于在本地系统上进行测试是及其不方便的。因此，若不希望使用这种默认的方式，可以设置一个私有的 IP 实现本地系统和虚拟机系统之间的互通。</p><p><img data-src="../../../asset/2022/09/vagrant-network.png"></p><p>在本地系统（宿主机）内执行以下命令，找到 VirtualBox 的虚拟网卡地址，例如 <code>192.168.56.2</code></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr</span><br></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig -a</span><br></pre></td></tr></tbody></table></figure><p>编辑 <code>Vagrantfile</code> 文件，找到如下的一行内容，去掉注释并更改 IP 地址，例如 <code>192.168.56.10</code>。特别注意，其中的网段 <code>192.168.56</code> 是固定的，而 <code>10</code> 可以换成其他的，最大不要超过 <code>255</code> 就可以</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"192.168.56.10"</span></span><br></pre></td></tr></tbody></table></figure><p>重新加载 <code>Vagrantfile</code> 配置文件，Vagrant 会自动重启虚拟机系统</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant reload</span><br></pre></td></tr></tbody></table></figure><p>虚拟机系统重启完成后，在本地系统和虚拟机之间互相执行 <code>Ping</code> 操作，如果互相能 <code>Ping</code> 得通，说明网络配置成功，操作步骤如下：</p><ul><li>在虚拟机中 Ping 本地系统的 IP 地址 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.56.2</span><br></pre></td></tr></tbody></table></figure><ul><li>在本地系统中 Ping 虚拟机的 IP</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.56.10</span><br></pre></td></tr></tbody></table></figure><h3 id="VirtualBox-虚拟机硬件资源配置"><a href="#VirtualBox-虚拟机硬件资源配置" class="headerlink" title="VirtualBox 虚拟机硬件资源配置"></a>VirtualBox 虚拟机硬件资源配置</h3><p>由于 Vagrant 创建 VirtualBox 虚拟机时，默认只会分配较少的处理器（CPU）和内存资源，因此需要在 VirtualBox 的用户界面里手动更改虚拟机的硬件资源配置，如下图所示：</p><p><img data-src="../../../asset/2022/09/vagrant-hard-resources.png"></p><h3 id="VirtualBox-虚拟机启用账号密码登录"><a href="#VirtualBox-虚拟机启用账号密码登录" class="headerlink" title="VirtualBox 虚拟机启用账号密码登录"></a>VirtualBox 虚拟机启用账号密码登录</h3><p>Vagrant 创建的 VirtualBox 虚拟机默认只支持 SSH 登录方式，为了后续操作方便，比如上传文件或者 SSH 远程连接，可以配置允许使用账号密码登录，步骤如下：</p><ul><li>编辑 <code>sshd</code> 服务的配置文件 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure><ul><li>将 <code>PasswordAuthentication</code> 改为 <code>yes</code></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></tbody></table></figure><ul><li>重启 <code>sshd</code> 服务 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service sshd restart</span><br></pre></td></tr></tbody></table></figure><h2 id="Vagrant-打包-Box"><a href="#Vagrant-打包-Box" class="headerlink" title="Vagrant 打包 Box"></a>Vagrant 打包 Box</h2><p>为了方便将本地的虚拟机备份或者分发到互联网上，可以将让 Vagrant 将虚拟机打包成 Box 文件。</p><h3 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h3><ul><li>命令格式：<code>vagrant package --base {packagename} --output {/path/packagename.box}</code></li><li>命令参数：<code>--base</code>：当前本地要打包的虚拟机，<code>--output</code>：打包导出的文件的路径，<code>{packagename}</code>：Box 的包名（唯一标识）</li></ul><h3 id="打包示例"><a href="#打包示例" class="headerlink" title="打包示例"></a>打包示例</h3><ul><li>查看虚拟机列表 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vboxmanage list vms</span><br></pre></td></tr></tbody></table></figure><ul><li>虚拟机列表如下 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"php-centos7" {4b663e7c-ba60-4026-9330-64c2e6d6d1c4}</span><br><span class="line">"java-centos7" {7b1cf3a0-72e0-4d47-9a93-6aae4c701390}</span><br></pre></td></tr></tbody></table></figure><ul><li>打包虚拟机 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant package<span class="params"> --base</span> php-centos7<span class="params"> --output</span> ./php-centos7.box</span><br></pre></td></tr></tbody></table></figure><h2 id="Vagrant-添加-Box"><a href="#Vagrant-添加-Box" class="headerlink" title="Vagrant 添加 Box"></a>Vagrant 添加 Box</h2><p>从互联网上下载或者本地虚拟机打包得到的 Box 文件，可以通过 Vagrant 命令将 Box 添加到本地，然后就可以创建并启动对应的虚拟机，这类似 <code>备份 --&gt; 恢复</code>。</p><h3 id="添加命令"><a href="#添加命令" class="headerlink" title="添加命令"></a>添加命令</h3><ul><li>命令格式：<code>vagrant box add {packagename} {/path/packagename.box}</code></li><li>命令参数：<code>{packagename}</code>：Box 的包名（唯一标识），<code>{/path/packagename.box}</code>：Box 文件的本地路径</li></ul><h3 id="添加示例"><a href="#添加示例" class="headerlink" title="添加示例"></a>添加示例</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加本地的 Box</span></span><br><span class="line">vagrant box add php-server-centos7 ./php-centos7.box</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟机</span></span><br><span class="line">vagrant init php-server-centos7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动虚拟机</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>1、<code>vagrant box add</code> 命令除了可以指定 Box 文件的本地路径之外，还可以指定 Box 文件的网络地址（镜像源 URL），借此就可以加快镜像的下载速度<br>2、若是 Vagrant 添加的是本地虚拟机导出的 Box 文件，那么创建虚拟机后，一般还需要在 VirtualBox 的界面上手动更改虚拟机的 Mac 地址，否则虚拟机启动后会存在 Mac 地址冲突的问题<br></p></div><h2 id="Vagrant-设置第三方镜像源"><a href="#Vagrant-设置第三方镜像源" class="headerlink" title="Vagrant 设置第三方镜像源"></a>Vagrant 设置第三方镜像源</h2><p>为了提高 Vagrant 镜像的下载速度，可以在 <a href="http://www.vagrantbox.es/">这里</a> 找到自己想要的镜像源（URL），然后使用指定的镜像源来添加 Box，最后再创建并启动虚拟机。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用指定的镜像源（URL）来添加 Box</span></span><br><span class="line">vagrant box add {packagename} {url}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟机</span></span><br><span class="line">vagrant init {packagename}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动虚拟机</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></tbody></table></figure><h2 id="CentOS-7-虚拟机系统配置"><a href="#CentOS-7-虚拟机系统配置" class="headerlink" title="CentOS 7 虚拟机系统配置"></a>CentOS 7 虚拟机系统配置</h2><p>若安装的是 CentOS 7 虚拟机，可以执行以下操作来配置虚拟机操作系统（可选操作）。值得一提的是，以下操作都需要以 <code>root</code> 用户身份执行。</p><h3 id="更换-YUM-源"><a href="#更换-YUM-源" class="headerlink" title="更换 YUM 源"></a>更换 YUM 源</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份原YUM源</span></span><br><span class="line"><span class="keyword"># mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里云的YUM源</span></span><br><span class="line"><span class="keyword"># curl</span><span class="params"> -o</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理数据</span></span><br><span class="line"><span class="keyword"># yum</span> clean all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line"><span class="keyword"># yum</span> makecache</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-EPEL-源"><a href="#安装-EPEL-源" class="headerlink" title="安装 EPEL 源"></a>安装 EPEL 源</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y epel-release</span></span><br></pre></td></tr></tbody></table></figure><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y vim tree htop tmux net-tools telnet wget curl</span></span><br></pre></td></tr></tbody></table></figure><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于Centos7默认使用chronyd来同步时间，如果需要安装其他时间同步服务（ntpd），则需要禁用chronyd</span></span><br><span class="line"><span class="comment"># systemctl disable chronyd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ntp服务</span></span><br><span class="line"><span class="comment"># yum install -y ntp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动ntp服务</span></span><br><span class="line"><span class="comment"># systemctl enable ntpd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动ntp服务</span></span><br><span class="line"><span class="comment"># systemctl start ntpd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ntp服务的运行状态</span></span><br><span class="line"><span class="comment"># systemctl status ntpd</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用ntp手动同步时间</span></span><br><span class="line"><span class="comment"># ntpdate pool.ntp.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置亚洲时区</span></span><br><span class="line"><span class="comment"># timedatectl set-timezone Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用ntp同步</span></span><br><span class="line"><span class="comment"># timedatectl set-ntp yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前系统时间、时间同步状态</span></span><br><span class="line"><span class="comment"># timedatectl status</span></span><br></pre></td></tr></tbody></table></figure><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><ul><li>Docker 安装 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧版本的Docker</span></span><br><span class="line"><span class="comment"># yum remove docker \</span></span><br><span class="line">             docker-client \</span><br><span class="line">             docker-client-latest \</span><br><span class="line">             docker-common \</span><br><span class="line">             docker-latest \</span><br><span class="line">             docker-latest-logrotate \</span><br><span class="line">             docker-logrotate \</span><br><span class="line">             docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加YUM仓库</span></span><br><span class="line"><span class="comment"># yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Docker</span></span><br><span class="line"><span class="comment"># yum install -y docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line"><span class="comment"># systemctl start docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动Docker</span></span><br><span class="line"><span class="comment"># systemctl enable docker</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Docker 镜像加速</li></ul><p>针对 Docker 客户端版本大于 <code>1.10.0</code> 的用户，可以通过修改 <code>daemon</code> 的配置文件 <code>/etc/docker/daemon.json</code> 来使用阿里云的镜像加速。值得一提的是，使用镜像加速之前，需要在阿里云平台注册账号，并开通容器镜像服务。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件的目录</span></span><br><span class="line"><span class="comment"># mkdir -p /etc/docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件，并写入以下JSON内容</span></span><br><span class="line"><span class="comment"># vi /etc/docker/daemon.json</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://82m9ar63.mirror.aliyuncs.com"</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重载配置文件</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul><li><a href="https://bbs.huaweicloud.com/blogs/292356">超详细的 Vagrant 上手指南</a></li><li><a href="https://blog.csdn.net/qq_40752902/article/details/117822130">Linux VirtualBox Vagrant 安装使用教程</a></li><li><a href="https://cloud.tencent.com/developer/article/1610683">VirtualBox + Vagrant 安装 VirtualBox 虚拟机</a></li><li><a href="https://www.cnblogs.com/xfyuao/p/14816732.html">VirtualBox + Vagrant + Centos7，安装 Docker</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何使用 Vagrant 快速创建 VirtualBox 虚拟机，例如 CentOS 7 虚拟机。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="开发工具" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 Oracle 11g 数据库</title>
    <link href="https://www.techgrow.cn/posts/e33a339c.html"/>
    <id>https://www.techgrow.cn/posts/e33a339c.html</id>
    <published>2022-09-15T13:30:00.000Z</published>
    <updated>2022-09-15T13:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h3><p>本文直接使用 DockerHub 平台上的 <a href="https://hub.docker.com/r/oracleinanutshell/oracle-xe-11g">Oracle 11g 镜像</a>，基于 Ubuntu 18.04 LTS 系统，数据库版本是 Oracle Express Edition 11g Release 2（<code>11.2.0.2.0</code>）。</p><h3 id="Oracle-版本列表"><a href="#Oracle-版本列表" class="headerlink" title="Oracle 版本列表"></a>Oracle 版本列表</h3><p>在 Oracle 数据库的发展中，数据库一直处于不断升级状态，一共有以下几个版本：</p><ul><li><code>Oracle 8i</code>：Oracle 8i 表示 Oracle 正式向 Internet 上发展，其中 i 表示就是 internet。</li><li><code>Oracle 9i</code>：Oracle 8i 是一个过渡版本，Oracle 9i 是一个更加完善的数据库版本。</li><li><code>Oracle 10g</code>：g 表示 grid，代表网格的意思，即这种数据库采用网格计算的方式进行操作。</li><li><code>Oracle 11g</code>：是 Oracle 10g 的稳定版本，Oracle 11g 是目前使用最广泛的版本。</li><li><code>Oracle 12c</code>：是 Oracle 2013 年推出的数据库版本，c 代表 Cloud，代表云计算的意思，同时 Oracle 12c 支持大数据的处理能力。</li><li><code>Oracle 18c、Oracle 19c</code> 是对 12c 版本的完善和发展。</li></ul><span id="more"></span><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker pull quay.io/maksymbilenko/oracle-12c</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><ul><li>启动容器 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 1521:1521 --name oracle-11g oracleinanutshell/oracle-xe-11g</span></span><br></pre></td></tr></tbody></table></figure><ul><li>允许远程连接 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 1521:1521 --name oracle-11g -e ORACLE_ALLOW_REMOTE=true oracleinanutshell/oracle-xe-11g</span></span><br></pre></td></tr></tbody></table></figure><ul><li>出于性能考虑，启动容器时可能需要禁用磁盘异步 IO</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 1521:1521 --name oracle-11g -e ORACLE_DISABLE_ASYNCH_IO=true oracleinanutshell/oracle-xe-11g</span></span><br></pre></td></tr></tbody></table></figure><ul><li>使用默认密码启用 XDB 用户（<code>xdb</code>）</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 1521:1521 --name oracle-11g -e ORACLE_ENABLE_XDB=true oracleinanutshell/oracle-xe-11g</span></span><br></pre></td></tr></tbody></table></figure><ul><li>启动 APEX 用户 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 1521:1521 --name oracle-11g -p 8080:8080 oracleinanutshell/oracle-xe-11g</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 登录 http://localhost:8080/apex/apex_admin 并使用以下账号</span><br><span class="line">username: ADMIN</span><br><span class="line">password: admin</span><br></pre></td></tr></tbody></table></figure><p>对于最新的 APEX（18.1）用户，请先拉取 <code>oracleinanutshell/oracle-xe-11g:18.04-apex</code> 镜像</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 1521:1521 --name oracle-11g -p 8080:8080 oracleinanutshell/oracle-xe-11g:18.04-apex</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 登录 http://localhost:8080/apex/apex_admin 并使用以下账号</span><br><span class="line">username: ADMIN</span><br><span class="line">password: Oracle_11g</span><br></pre></td></tr></tbody></table></figure><h2 id="Oracle-连接密码"><a href="#Oracle-连接密码" class="headerlink" title="Oracle 连接密码"></a>Oracle 连接密码</h2><p>默认情况下，密码验证是禁用的（密码永不过期），可以使用以下配置信息连接 Oracle 数据库</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hostname: localhost</span><br><span class="line">port: 1521</span><br><span class="line">sid: xe</span><br><span class="line">username: system</span><br><span class="line">password: oracle</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p><code>SYS</code> 和 <code>SYSTEM</code> 用户的默认密码都是 <code>oracle</code>。</p></div><h2 id="Oracle-连接测试"><a href="#Oracle-连接测试" class="headerlink" title="Oracle 连接测试"></a>Oracle 连接测试</h2><ul><li>连接 Docker 容器 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker exec -it oracle-11g /bin/bash</span></span><br></pre></td></tr></tbody></table></figure><ul><li>切换到 <code>sqlplus</code> 操作 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sqlplus /nolog</span></span><br></pre></td></tr></tbody></table></figure><ul><li>连接 Oracle 11g 数据库 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接Oracle数据库</span></span><br><span class="line">SQL&gt; conn system/oracle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Oracle的版本信息</span></span><br><span class="line">SQL&gt; SELECT BANNER FROM V<span class="variable">$VERSION</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="Docker-Compose-使用"><a href="#Docker-Compose-使用" class="headerlink" title="Docker-Compose 使用"></a>Docker-Compose 使用</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: '3'</span><br><span class="line"></span><br><span class="line">services: </span><br><span class="line">  oracle-db:</span><br><span class="line">    image: oracleinanutshell/oracle-xe-11g:latest</span><br><span class="line">    ports:</span><br><span class="line">      - 1521:1521</span><br><span class="line">      - 8080:8080</span><br></pre></td></tr></tbody></table></figure><h2 id="Java-连接-Oracel-数据库"><a href="#Java-连接-Oracel-数据库" class="headerlink" title="Java 连接 Oracel 数据库"></a>Java 连接 Oracel 数据库</h2><h3 id="下载-Oracle-驱动包"><a href="#下载-Oracle-驱动包" class="headerlink" title="下载 Oracle 驱动包"></a>下载 Oracle 驱动包</h3><p>由于 Oracle 授权的问题，无法从 Maven 中央仓库下载 Oracle 的数据库驱动包，Oracle 11g 的数据库驱动包可以 <a href="/downloads/2022/09/ojdbc6.jar">点击这里</a> 下载得到。</p><h3 id="Maven-引入-Oracle-驱动包"><a href="#Maven-引入-Oracle-驱动包" class="headerlink" title="Maven 引入 Oracle 驱动包"></a>Maven 引入 Oracle 驱动包</h3><p>将 Oralce 数据库驱动包存放到项目中的 <code>lib</code> 目录下，然后使用以下方式让 Maven 引入驱动包依赖。当然也可以使用其他方式引入，例如直接使用 Maven 命令 <code>mvn install</code> 将驱动包安装到本地仓库，接着按照平时的方式直接引入驱动包依赖即可，这里不再累述。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>11.2.0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>${project.basedir}/lib/ojdbc6.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置-Oracle-的-JDBC-连接信息"><a href="#配置-Oracle-的-JDBC-连接信息" class="headerlink" title="配置 Oracle 的 JDBC 连接信息"></a>配置 Oracle 的 JDBC 连接信息</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">driver-class-name</span>=<span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:oracle:thin:@localhost:1521:xe</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">system</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">oracle</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>更多关于 Java 连接 Oracle 数据库的教程内容，可以查看教程 <a href="/posts/c5f15a9c.html#MyBatis-Plus-%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5">《MyBatis-Plus 中 如何生成 Oralce 的主键》</a>。</p></div></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Docker 如何安装 Oracle 11g 数据库。</summary>
    
    
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 入门教程之二</title>
    <link href="https://www.techgrow.cn/posts/60ddcede.html"/>
    <id>https://www.techgrow.cn/posts/60ddcede.html</id>
    <published>2022-08-17T14:13:45.000Z</published>
    <updated>2022-08-17T14:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="Kafka-生产者"><a href="#Kafka-生产者" class="headerlink" title="Kafka 生产者"></a>Kafka 生产者</h2><h3 id="生产者消息发送流程"><a href="#生产者消息发送流程" class="headerlink" title="生产者消息发送流程"></a>生产者消息发送流程</h3><h4 id="生产者消息发送原理"><a href="#生产者消息发送原理" class="headerlink" title="生产者消息发送原理"></a>生产者消息发送原理</h4><p>Kafka 的 Producer 发送消息采用的是异步发送的方式。在消息发送的过程中，涉及到了两个线程 — <code>main</code> 线程和 <code>Sender</code> 线程。在 <code>main</code> 线程中，会创建一个双端队列 <code>RecordAccumulator</code>。值得一提的是，<code>main</code> 线程将消息发送给 <code>RecordAccumulator</code> 时，<code>Sender</code> 线程会不断从 <code>RecordAccumulator</code> 中拉取消息并发送到 Kafka Broker。</p><p><img data-src="../../../asset/2022/08/kafka-producer-1.png"></p><span id="more"></span><h4 id="生产者重要参数列表"><a href="#生产者重要参数列表" class="headerlink" title="生产者重要参数列表"></a>生产者重要参数列表</h4><p><img data-src="../../../asset/2022/08/kafka-producer-2.png"></p><h3 id="生产者异步发送-API"><a href="#生产者异步发送-API" class="headerlink" title="生产者异步发送 API"></a>生产者异步发送 API</h3><h4 id="普通的异步发送"><a href="#普通的异步发送" class="headerlink" title="普通的异步发送"></a>普通的异步发送</h4><div class="admonition note"><p class="admonition-title">提示</p><p>本节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/kafka-study">GitHub</a> 下载对应章节 <code>kafka-lesson-01</code>。</p></div><ul><li>Maven 依赖 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Java 代码 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerProducer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 指定Kafka集群的连接信息</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"127.0.0.1:9092,127.0.0.1:9093"</span>);</span><br><span class="line">        <span class="comment">// 指定序列化器（必需）</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建生产者对象</span></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="comment">// 异步发送消息</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"hello kafka "</span> + i));</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        producer.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>测试代码</li></ul><p>第一步：启动 Kafka 的控制台消费者：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test</span></span><br></pre></td></tr></tbody></table></figure><p>第二步：在 IDE 工具中执行代码，观察控制台消费者中是否接收到消息，如下所示：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello kafka 0</span><br><span class="line">hello kafka 1</span><br><span class="line">hello kafka 2</span><br><span class="line">hello kafka 3</span><br><span class="line">hello kafka 4</span><br></pre></td></tr></tbody></table></figure><h4 id="带回调函数的异步发送"><a href="#带回调函数的异步发送" class="headerlink" title="带回调函数的异步发送"></a>带回调函数的异步发送</h4><p>回调方法会在 Producer 收到 <code>ack</code> 时调用，且为异步调用；该方法有两个参数，分别是元数据信息（RecordMetadata）和异常信息（Exception）。如果 <code>Exception</code> 为 <code>null</code>，则说明消息发送成功，如果 <code>Exception</code> 不为 <code>null</code>，则说明消息发送失败。值得一提的是，<strong>消息发送失败会自动重试发送，不需要在回调函数中手动重试发送。</strong></p><ul><li>Java 代码 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerProducer2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 指定Kafka集群的连接信息</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"127.0.0.1:9092,127.0.0.1:9093"</span>);</span><br><span class="line">        <span class="comment">// 指定序列化器（必需）</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建生产者对象</span></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="comment">// 异步发送消息（带回调函数）</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"hello kafka "</span> + i), <span class="keyword">new</span> Callback() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata recordMetadata, Exception exception)</span> </span>{</span><br><span class="line">                    <span class="keyword">if</span> (exception == <span class="keyword">null</span>) {</span><br><span class="line">                        System.out.println(<span class="string">"topic: "</span> + recordMetadata.topic() + <span class="string">", partition: "</span> + recordMetadata.partition());</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        producer.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>测试代码</li></ul><p>除了在 Kafka 的控制台消费者中接收到消息之外，还可以在 IDE 的控制台看到如下的输出信息：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">topic: test, partition: 0</span><br><span class="line">topic: test, partition: 0</span><br><span class="line">topic: test, partition: 0</span><br><span class="line">topic: test, partition: 0</span><br><span class="line">topic: test, partition: 0</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者同步发送-API"><a href="#生产者同步发送-API" class="headerlink" title="生产者同步发送 API"></a>生产者同步发送 API</h3><div class="admonition note"><p class="admonition-title">提示</p><p>本节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/kafka-study">GitHub</a> 下载对应章节 <code>kafka-lesson-02</code>。</p></div><h4 id="普通的同步发送"><a href="#普通的同步发送" class="headerlink" title="普通的同步发送"></a>普通的同步发送</h4><p>同步发送的意思就是，当一条消息发送之后，会阻塞当前线程，直至收到 <code>ack</code> 应答。由于 <code>send()</code> 方法返回的是一个 <code>Future</code> 对象，根据 <code>Futrue</code> 对象的特点，只需调用 <code>Future</code> 对象的 <code>get()</code> 方法即可实现同步发送。</p><ul><li>Maven 依赖 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Java 代码 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerProducer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 指定Kafka集群的连接信息</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"127.0.0.1:9092,127.0.0.1:9093"</span>);</span><br><span class="line">        <span class="comment">// 指定序列化器（必需）</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建生产者对象</span></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="comment">// 同步发送消息</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"hello kafka "</span> + i)).get();</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        producer.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>测试代码</li></ul><p>第一步：启动 Kafka 的控制台消费者：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test</span></span><br></pre></td></tr></tbody></table></figure><p>第二步：在 IDE 工具中执行代码，观察控制台消费者中是否接收到消息，如下所示：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello kafka 0</span><br><span class="line">hello kafka 1</span><br><span class="line">hello kafka 2</span><br><span class="line">hello kafka 3</span><br><span class="line">hello kafka 4</span><br></pre></td></tr></tbody></table></figure><h4 id="带回调函数的同步发送"><a href="#带回调函数的同步发送" class="headerlink" title="带回调函数的同步发送"></a>带回调函数的同步发送</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerProducer2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 指定Kafka集群的连接信息</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"127.0.0.1:9092,127.0.0.1:9093"</span>);</span><br><span class="line">        <span class="comment">// 指定序列化器（必需）</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建生产者对象</span></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="comment">// 同步发送消息（带回调函数）</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"hello kafka "</span> + i), <span class="keyword">new</span> Callback() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata recordMetadata, Exception exception)</span> </span>{</span><br><span class="line">                        <span class="keyword">if</span> (exception == <span class="keyword">null</span>) {</span><br><span class="line">                            System.out.println(<span class="string">"topic: "</span> + recordMetadata.topic() + <span class="string">", partition: "</span> + recordMetadata.partition());</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }).get();</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        producer.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>测试代码</li></ul><p>除了在 Kafka 的控制台消费者中接收到消息之外，还可以在 IDE 的控制台看到如下的输出信息：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">topic: test, partition: 0</span><br><span class="line">topic: test, partition: 2</span><br><span class="line">topic: test, partition: 0</span><br><span class="line">topic: test, partition: 1</span><br><span class="line">topic: test, partition: 2</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者分区"><a href="#生产者分区" class="headerlink" title="生产者分区"></a>生产者分区</h3><h4 id="生产者分区分区的优点"><a href="#生产者分区分区的优点" class="headerlink" title="生产者分区分区的优点"></a>生产者分区分区的优点</h4><ul><li>提高并行度，生产者可以以分区为单位发送数据，消费者可以以分区为单位消费数据</li><li>便于合理使用存储资源，每个 Partition 在一个 Broker 上存储，可以把海量的数据按照分区切割成一块一块的数据并存储在多台 Broker 上。合理控制分区的任务，可以实现负载均衡的效果</li></ul><p><img data-src="../../../asset/2022/10/kafka-partitions.png"></p><h4 id="生产者发送消息的分区策略"><a href="#生产者发送消息的分区策略" class="headerlink" title="生产者发送消息的分区策略"></a>生产者发送消息的分区策略</h4><p>默认的分区器类是 <code>DefaultPartitioner</code>，部分源码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default partitioning strategy:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If a partition is specified in the record, use it</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If no partition is specified but a key is present choose a partition based on a hash of the key</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If no partition or key is present choose the sticky partition that changes when the batch is full.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * See KIP-480 for details about sticky partitioning.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>{</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过 <code>KafkaProducer</code> 类的 <code>send()</code> 方法发送消息时，需要指定 <code>ProducerRecord</code> 对象作为参数，<code>ProducerRecord</code> 类的构造方法如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerRecord</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span><span class="params">(String topic, Integer partition, Long timestamp, K key, V value, Iterable&lt;Header&gt; headers)</span> </span>{</span><br><span class="line">       ......</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span><span class="params">(String topic, Integer partition, Long timestamp, K key, V value)</span> </span>{</span><br><span class="line">        ......</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span><span class="params">(String topic, Integer partition, K key, V value, Iterable&lt;Header&gt; headers)</span> </span>{</span><br><span class="line">        ......</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span><span class="params">(String topic, Integer partition, K key, V value)</span> </span>{</span><br><span class="line">        ......</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span><span class="params">(String topic, K key, V value)</span> </span>{</span><br><span class="line">        ......</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span><span class="params">(String topic, V value)</span> </span>{</span><br><span class="line">        ......</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>调用 <code>ProducerRecord</code> 类不同的构造方法时，有以下几种分区策略：</p><ul><li><p>在指明 <code>partition</code> 的情况下，直接将指明的值作为 <code>partition</code> 值。例如：<code>partition=0</code>，那么数据会被写入分区 0。</p></li><li><p>在没有指明 <code>partition</code> 值，但有指定 <code>key</code> 的情况下，将 <code>key</code> 的 Hash 值与 <code>topic</code> 的 <code>partition</code> 数进行取余来得到 <code>partition</code> 值。例如：<code>key</code> 的 Hash 值是 5，<code>topic</code> 的 <code>partition</code> 数是 2，那么 <code>key</code> 对应的 <code>value</code> 会被写入 1 号分区。</p></li><li><p>在既没有指明 <code>partition</code> 值，又没有指定 <code>key</code> 的情况下，Kafka 会采用 <code>Sticky Partition</code> 黏性分区器，也就是会随机选择一个分区，并尽可能一直使用该分区，等该分区的 <code>batch</code> 已满或者已完成，Kafka 再随机一个分区进行使用（和上一次选的分区不同）。例如：第一次随机选择 0 号分区，等 0 号分区当前批次满了（默认 16K 大小）或者 <code>linger.ms</code> 设置的时间到了，Kafka 会再随机选择一个分区进行使用（如果还是 0 分区会继续随机选择一个分区）。</p></li></ul><h4 id="自定义生产者的分区器"><a href="#自定义生产者的分区器" class="headerlink" title="自定义生产者的分区器"></a>自定义生产者的分区器</h4><p>开发人员可以根据业务需求自定义分区器，只需要实现 <code>Partitioner</code> 接口即可。</p><div class="admonition note"><p class="admonition-title">提示</p><p>本节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/kafka-study">GitHub</a> 下载对应章节 <code>kafka-lesson-03</code>。</p></div><ul><li>自定义分区器类，实现 <code>Partitioner</code> 接口，并重写 <code>partition()</code> 方法 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义分区器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息对应的分区</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic      主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key        消息的 key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyBytes   消息的 key 序列化后的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value      消息的 value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valueBytes 消息的 value 序列化后的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cluster    集群元数据可以查看分区信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>{</span><br><span class="line">        <span class="comment">// 获取消息内容</span></span><br><span class="line">        String msgValue = value.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义分区号</span></span><br><span class="line">        <span class="keyword">int</span> partition;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (msgValue.contains(<span class="string">"order"</span>)) {</span><br><span class="line">            partition = <span class="number">0</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            partition = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 返回分区号</span></span><br><span class="line">        <span class="keyword">return</span> partition;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>在生产者的配置中添加分区器参数，以此来指定自定义分区器 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步发送</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerProducer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 指定Kafka集群的连接信息</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"127.0.0.1:9092,127.0.0.1:9093"</span>);</span><br><span class="line">        <span class="comment">// 指定序列化器（必需）</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        <span class="comment">// 指定自定义分区器</span></span><br><span class="line">        properties.setProperty(ProducerConfig.PARTITIONER_CLASS_CONFIG, CustomPartitioner.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建生产者对象</span></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="comment">// 异步发送消息</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"hello kafka "</span> + i), <span class="keyword">new</span> Callback() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>{</span><br><span class="line">                    System.out.println(<span class="string">"Partition : "</span> + metadata.partition());</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        producer.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者最佳实践"><a href="#生产者最佳实践" class="headerlink" title="生产者最佳实践"></a>生产者最佳实践</h3><h4 id="生产者如何提高吞吐量"><a href="#生产者如何提高吞吐量" class="headerlink" title="生产者如何提高吞吐量"></a>生产者如何提高吞吐量</h4><h5 id="参数优化"><a href="#参数优化" class="headerlink" title="参数优化"></a>参数优化</h5><p>为了让生产者提高吞吐量（发送消息的效率），可以优化以下几个参数：</p><ul><li><code>batch.size</code>：批次大小，默认 <code>16k</code></li><li><code>linger.ms</code>：等待时间，默认 <code>0ms</code>，修改为 <code>5-100ms</code></li><li><code>compression.type</code>：压缩方式，默认是 <code>none</code>，修改过为 <code>snappy</code></li><li><code>RecordAccumulator</code>：缓冲区（双端队列）大小，默认是 <code>32m</code>，修改为 <code>64m</code></li></ul><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><p><img data-src="../../../asset/2022/10/kafka-increase-1.png"></p><p><img data-src="../../../asset/2022/10/kafka-increase-2.png"></p><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><div class="admonition note"><p class="admonition-title">提示</p><p>本节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/kafka-study">GitHub</a> 下载对应章节 <code>kafka-lesson-04</code>。</p></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerProducer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 指定Kafka集群的连接信息</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"127.0.0.1:9092,127.0.0.1:9093"</span>);</span><br><span class="line">        <span class="comment">// 指定序列化器（必需）</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待时间（默认0ms）</span></span><br><span class="line">        properties.put(ProducerConfig.LINGER_MS_CONFIG, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 批次大小（默认16K）</span></span><br><span class="line">        properties.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="number">16</span> * <span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 压缩方式（默认none）</span></span><br><span class="line">        properties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, <span class="string">"snappy"</span>);</span><br><span class="line">        <span class="comment">// 缓冲区大小（默认32M）</span></span><br><span class="line">        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="number">64</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建生产者对象</span></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="comment">// 异步发送消息</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"test"</span>, <span class="string">"hello kafka "</span> + i));</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        producer.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Kafka 的使用教程。</summary>
    
    
    
    
    <category term="分布式" scheme="https://www.techgrow.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 入门教程之一</title>
    <link href="https://www.techgrow.cn/posts/b6be8183.html"/>
    <id>https://www.techgrow.cn/posts/b6be8183.html</id>
    <published>2022-08-15T14:13:45.000Z</published>
    <updated>2022-08-15T14:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>目前企业中比较常见的消息队列产品主要有 Kafka、ActiveMQ、RabbitMQ、RocketMQ 等。在大数据场景主要采用 Kafka 作为消息队列，而在 JavaEE 开发中主要采用 ActiveMQ、RabbitMQ、RocketMQ。</p><h3 id="消息队列的优势"><a href="#消息队列的优势" class="headerlink" title="消息队列的优势"></a>消息队列的优势</h3><ul><li><code>解耦</code> - 允许独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束</li></ul><p><img data-src="../../../asset/2022/08/kafka-1.png"></p><span id="more"></span><ul><li><code>缓冲</code> - 有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况</li><li><code>消峰</code> - 在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源并随时待命，这无疑是巨大的浪费。使用消息队列<br>能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃</li></ul><p><img data-src="../../../asset/2022/08/kafka-2.png"></p><ul><li><code>异步通信</code> - 很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要<br>的时候再去处理它们</li></ul><p><img data-src="../../../asset/2022/08/kafka-3.png"></p><ul><li><code>可恢复性</code> - 系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理</li></ul><h3 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h3><h4 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h4><p><code>点对点模式</code> 就是一对一，消费者<strong>主动拉取</strong>数据，消息收到后消息会被清除。消息生产者将消息发送到 Queue 中，然后消息消费者从 Queue 中取出并消费消息。消息被消费以后，Queue 中不再存储它，所以消息消费者不可能消费到已经被消费的消息。Queue 支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p><img data-src="../../../asset/2022/08/kafka-4.png"></p><h4 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布 / 订阅模式</h4><p><code>发布/订阅模式</code> 就是一对多，消息产生后<strong>主动推送</strong>给订阅者，消费者消费消息之后不会清除消息。消息生产者（发布）将消息发布到 <code>topic</code> 主题（如浏览、点赞、收藏、评论等）中，同时有多个消息消费者（订阅）消费该消息。这和点对点模式不同，每个消费者互相独立，发布到 <code>topic</code> 的消息会被所有订阅者消费。</p><p><img data-src="../../../asset/2022/08/kafka-5.png"></p><h2 id="Kafka-详细介绍"><a href="#Kafka-详细介绍" class="headerlink" title="Kafka 详细介绍"></a>Kafka 详细介绍</h2><p>在流式计算中，Kafka 一般用于缓存数据，Storm 通过消费 Kafka 的数据来进行计算。</p><ul><li>Apache Kafka 是一个开源的分布式消息队列系统，由 Scala 语言编写。</li><li>Kafka 最初由 LinkedIn 公司开发，并于 2011 年初开源。2012 年 10 月从 Apache Incubator 毕业，该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。</li><li>Kafka 集群由多个 Kafka 实例（<code>broker</code>）组成，无论是 Kafka 集群，还是 Consumer 都依赖于 Zookeeper 集群保存一些 <code>meta</code> 信息，以此来保证系统的高可用性。</li></ul><h3 id="Kafka-概述"><a href="#Kafka-概述" class="headerlink" title="Kafka 概述"></a>Kafka 概述</h3><ul><li>传统定义：Kafka 是一个分布式的基于发布 / 订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。</li><li>最新定义：Kafka 是一个开源的分布式事件流平台（EventStreaming Platform），被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。</li></ul><h3 id="Kafka-学习路线"><a href="#Kafka-学习路线" class="headerlink" title="Kafka 学习路线"></a>Kafka 学习路线</h3><ul><li><a href="/posts/ac64f898.html">Kafka 学习路线</a></li></ul><h3 id="Kafka-基础架构"><a href="#Kafka-基础架构" class="headerlink" title="Kafka 基础架构"></a>Kafka 基础架构</h3><p><img data-src="../../../asset/2022/08/kafka-6.png"></p><ul><li><code>Producer</code>：消息生产者，就是向 Kafka Broker 发消息的客户端。</li><li><code>Consumer</code>：消息消费者，就是向 Kafka Broker 取消息的客户端。</li><li><code>Consumer Group (CG)</code>：消费者组，由多个 <code>consumer</code> 组成。<strong>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</strong></li><li><code>Broker</code>：一台 Kafka 服务器就是一个 <code>broker</code>。一个 Kafka 集群由多个 <code>broker</code> 组成。一个 <code>broker</code> 可以容纳多个 <code>topic</code>。</li><li><code>Topic</code>：主题，可以理解为一个队列，<strong>生产者和消费者面向的都是一个 <code>topic</code>。</strong></li><li><code>Partition</code>：分区，为了实现扩展性，一个非常大的 <code>topic</code> 可以分布到多个 <code>broker</code>（即 Kafka 服务器）上，<strong>一个 <code>topic</code> 可以分为多个 <code>partition</code>，每个 <code>partition</code> 是一个有序的队列。</strong></li><li><code>Replica</code>：副本，为保证集群中的某个节点发生故障时，该节点上的 <code>partition</code> 数据不丢失，且让 Kafka 仍然能够继续工作，Kafka 为此提供了副本机制。一个 <code>topic</code> 的每个分区都有若干个副本，包括一个 <code>leader</code> 和若干个 <code>follower</code>。</li><li><code>Leader</code>：每个分区多个副本的 <code>主</code>，生产者发送数据的对象，以及消费者消费数据的对象都是 <code>leader</code>。</li><li><code>Follower</code>：每个分区多个副本的 <code>从</code>，实时从 <code>leader</code> 中同步数据，保持和 <code>leader</code> 数据的同步。<code>leader</code> 发生故障时，某个 <code>follower</code> 会成为新的 <code>leader</code>。</li></ul><h3 id="Kafka-企业案例"><a href="#Kafka-企业案例" class="headerlink" title="Kafka 企业案例"></a>Kafka 企业案例</h3><p><img data-src="../../../asset/2022/08/kafka-7.png"></p><h2 id="Kafka-集群搭建"><a href="#Kafka-集群搭建" class="headerlink" title="Kafka 集群搭建"></a>Kafka 集群搭建</h2><h3 id="单机搭建-Kafka-集群"><a href="#单机搭建-Kafka-集群" class="headerlink" title="单机搭建 Kafka 集群"></a>单机搭建 Kafka 集群</h3><ul><li><a href="/posts/124a5015.html">Linux 单机搭建 Kafka 集群</a></li></ul><h3 id="生产环境搭建-Kafka-集群"><a href="#生产环境搭建-Kafka-集群" class="headerlink" title="生产环境搭建 Kafka 集群"></a>生产环境搭建 Kafka 集群</h3><ul><li><a href="/posts/6dceb9c9.html">Linux 生产环境搭建 Kafka 集群</a></li></ul><h2 id="Kafka-常用命令"><a href="#Kafka-常用命令" class="headerlink" title="Kafka 常用命令"></a>Kafka 常用命令</h2><h3 id="Topic-命令"><a href="#Topic-命令" class="headerlink" title="Topic 命令"></a>Topic 命令</h3><h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><p><img data-src="../../../asset/2022/08/kafka-topic-params.png"></p><!-- more --><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><ul><li>创建主题：创建名称为 <code>test</code>、分区数量为 <code>1</code> 和 分区副本数量为 <code>3</code> 的主题 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-topics.sh --create --bootstrap-server 127.0.0.1:9092 --topic test --partitions 1 --replication-factor 3</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看主题列表 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-topics.sh --list --bootstrap-server 127.0.0.1:9092</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看主题详情：查看 <code>test</code> 主题的详细信息（例如分区数量、分区副本数量等）</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-topics.sh --describe --bootstrap-server 127.0.0.1:9092 --topic test</span></span><br></pre></td></tr></tbody></table></figure><ul><li>更改主题的分区数量：更改 <code>test</code> 主题的分区数量为 <code>3</code></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-topics.sh --alter --bootstrap-server 127.0.0.1:9092 --topic test --partitions 3</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">特别注意</p><ol><li>Kafka 不支持更改主题的分区副本数量</li><li>更改主题的分区数量时，只能增加，不能减少</li></ol></div><ul><li>删除主题：删除 <code>test</code> 主题 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-topics.sh --delete --bootstrap-server 127.0.0.1:9092 --topic test</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Consumer-命令"><a href="#Consumer-命令" class="headerlink" title="Consumer 命令"></a>Consumer 命令</h3><h4 id="命令参数-1"><a href="#命令参数-1" class="headerlink" title="命令参数"></a>命令参数</h4><p><img data-src="../../../asset/2022/08/kafka-consumer-params.png"></p><h4 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h4><ul><li>消费 <code>test</code> 主题中的数据（增量消费）</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test</span></span><br></pre></td></tr></tbody></table></figure><ul><li>消费 <code>test</code> 主题中的所有数据（包括历史数据）</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test --from-beginning</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Producer-命令"><a href="#Producer-命令" class="headerlink" title="Producer 命令"></a>Producer 命令</h3><h4 id="命令参数-2"><a href="#命令参数-2" class="headerlink" title="命令参数"></a>命令参数</h4><p><img data-src="../../../asset/2022/08/kafka-consumer-params.png"></p><h4 id="使用案例-2"><a href="#使用案例-2" class="headerlink" title="使用案例"></a>使用案例</h4><ul><li>生产消息：往 <code>test</code> 主题发送消息 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test</span></span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Kafka 的使用教程，包括 Kafka 的概述、集群搭建、常用命令等内容。</summary>
    
    
    
    
    <category term="分布式" scheme="https://www.techgrow.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux 生产环境搭建 Kafka 集群</title>
    <link href="https://www.techgrow.cn/posts/6dceb9c9.html"/>
    <id>https://www.techgrow.cn/posts/6dceb9c9.html</id>
    <published>2022-08-12T14:13:45.000Z</published>
    <updated>2022-08-12T14:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文适用于在 Centos/Debian/Ubuntu 等 Linux 发行版系统上，使用多台物理机器（至少三台）搭建 Kafka 集群。</p><h2 id="Zookeeper-集群搭建"><a href="#Zookeeper-集群搭建" class="headerlink" title="Zookeeper 集群搭建"></a>Zookeeper 集群搭建</h2><p>本文的 Kafka 集群搭建依赖于 Zookeeper，因此生产环境需要将 Zookeeper 集群提前搭建起来。值得一提的是，从 Kafka <code>2.8.0</code> 版本开始，Kafka 自身实现了 <code>Raft</code> 分布式一致性机制，这意味着 Kafka 是可以脱离 ZooKeeper 独立运行的。</p><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><table><thead><tr><th>节点</th><th> IP 地址</th><th>端口</th><th>版本号</th></tr></thead><tbody><tr><td> Zookeeper 节点 1</td><td>192.168.1.1</td><td>2181</td><td>3.4.10</td></tr><tr><td>Zookeeper 节点 2</td><td>192.168.1.2</td><td>2181</td><td>3.4.10</td></tr><tr><td>Zookeeper 节点 3</td><td>192.168.1.3</td><td>2181</td><td>3.4.10</td></tr></tbody></table><span id="more"></span><h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><p>由于篇幅有限，Linux 生产环境搭建 Zookeeper 集群的内容这里不再累述，详细教程可看 <a href="/posts/8ed765da.html">这里</a>。</p><h2 id="Kafka-集群搭建"><a href="#Kafka-集群搭建" class="headerlink" title="Kafka 集群搭建"></a>Kafka 集群搭建</h2><h3 id="集群规划-1"><a href="#集群规划-1" class="headerlink" title="集群规划"></a>集群规划</h3><table><thead><tr><th>节点</th><th> IP 地址</th><th>端口</th><th>版本号</th></tr></thead><tbody><tr><td> Kafka 节点 1</td><td>192.168.1.1</td><td>9092</td><td>2.13-3.2.1</td></tr><tr><td>Kafka 节点 2</td><td>192.168.1.2</td><td>9092</td><td>2.13-3.2.1</td></tr><tr><td>Kafka 节点 3</td><td>192.168.1.3</td><td>9092</td><td>2.13-3.2.1</td></tr></tbody></table><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><ul><li>Kafka 下载</li></ul><blockquote><ol><li> Kafka 的安装包可以从 <a href="https://kafka.apache.org/downloads.html">官网</a> 下载。</li><li>以下载得到的压缩文件 <code>kafka_2.13-3.2.1.tgz</code> 为例，<code>2.11</code> 是 Scala 的版本号，<code>3.2.1</code> 是 Kafka 的版本号。</li></ol></blockquote><ul><li>Kafka 安装 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建安装目录</span></span><br><span class="line"><span class="comment"># mkdir -p /usr/local/kafka-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入安装目录</span></span><br><span class="line"><span class="comment"># cd /usr/local/kafka-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="comment"># wget https://downloads.apache.org/kafka/3.2.1/kafka_2.13-3.2.1.tgz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line"><span class="comment"># tar -xvf kafka_2.13-3.2.1.tgz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名目录</span></span><br><span class="line"><span class="comment"># mv kafka_2.13-3.2.1 kafka-node1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="comment"># rm -rf kafka_2.13-3.2.1.tgz</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Kafka 基础配置 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入安装目录</span></span><br><span class="line"><span class="comment"># cd /usr/local/kafka-cluster/kafka-node1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志目录（数据存储目录）</span></span><br><span class="line"><span class="comment"># mkdir logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件（指定以下内容即可）</span></span><br><span class="line"><span class="comment"># vim config/server.properties</span></span><br></pre></td></tr></tbody></table></figure><p>最关键的配置内容是 <code>broker.id</code>、<code>log.dirs</code>、<code>zookeeper.connect</code>，其中的 <code>zookeeper.connect</code> 是 Zookeeper 连接地址，建议使用 <code>/kafka</code> 作为后缀，这样方便日后在 Zookeeper 里统一管理 Kafka 的数据。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># broker 的全局唯一编号,不能重复</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 处理网络请求的线程数量</span></span><br><span class="line"><span class="meta">num.network.threads</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># 用来处理磁盘 IO 的现成数量</span></span><br><span class="line"><span class="meta">num.io.threads</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 发送套接字的缓冲区大小</span></span><br><span class="line"><span class="meta">socket.send.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment"># 接收套接字的缓冲区大小</span></span><br><span class="line"><span class="meta">socket.receive.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment"># 请求套接字的缓冲区大小</span></span><br><span class="line"><span class="meta">socket.request.max.bytes</span>=<span class="string">104857600</span></span><br><span class="line"><span class="comment"># 运行日志存放的路径</span></span><br><span class="line"><span class="meta">log.dirs</span>=<span class="string">/usr/local/kafka-cluster/kafka-node1/logs</span></span><br><span class="line"><span class="comment"># topic 在当前 broker 上的分区个数</span></span><br><span class="line"><span class="meta">num.partitions</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 用来恢复和清理 data 下数据的线程数量</span></span><br><span class="line"><span class="meta">num.recovery.threads.per.data.dir</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 每个 topic 创建时的副本数,默认时 1 个副本</span></span><br><span class="line"><span class="meta">offsets.topic.replication.factor</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 每个 segment 文件保留的最长时间,超时将被删除</span></span><br><span class="line"><span class="meta">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"><span class="comment"># 每个 segment 文件的大小,默认最大 1G</span></span><br><span class="line"><span class="meta">log.segment.bytes</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment"># 检查过期数据的时间,默认 5 分钟检查一次是否数据过期</span></span><br><span class="line"><span class="meta">log.retention.check.interval.ms</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment"># 配置连接 Zookeeper 集群地址</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">192.168.1.1:2181,192.168.1.2:2181,192.168.1.3:2181/kafka</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Kafka 创建多个节点</li></ul><p>复制两份上面已经配置好的 Kafka 安装目录到其他服务器节点上，以此作为集群中另外两个节点的安装文件，例如 <code>kafka-node2</code>、<code>kafka-node3</code>。安装目录复制完成后，还需要更改每个新节点里的 <code>server.properties</code> 配置文件的 <code>broker.id</code>、<code>log.dirs</code>。节点二和节点三的最终配置如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 节点二的配置</span><br><span class="line">broker.id=2</span><br><span class="line">log.dirs=/usr/local/kafka-cluster/kafka-node2/logs</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 节点三的配置</span><br><span class="line">broker.id=3</span><br><span class="line">log.dirs=/usr/local/kafka-cluster/kafka-node3/logs</span><br></pre></td></tr></tbody></table></figure><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><ul><li>集群启动</li></ul><div class="admonition warning"><p class="admonition-title">注意</p><p>启动 Kafka 集群之前，必须确保 Zookeeper 集群已经启动成功，这是因为本文搭建的 Kafka 集群依赖于 Zookeeper 集群。</p></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node1/bin/kafka-server-start.sh -daemon /usr/local/kafka-cluster/kafka-node1/config/server.properties</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node2/bin/kafka-server-start.sh -daemon /usr/local/kafka-cluster/kafka-node2/config/server.properties</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node3/bin/kafka-server-start.sh -daemon /usr/local/kafka-cluster/kafka-node3/config/server.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者前台启动（可直接查看启动时输出的日志信息）</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node1/bin/kafka-server-start.sh /usr/local/kafka-cluster/kafka-node1/config/server.properties</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node2/bin/kafka-server-start.sh /usr/local/kafka-cluster/kafka-node2/config/server.properties</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node3/bin/kafka-server-start.sh /usr/local/kafka-cluster/kafka-node3/config/server.properties</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看状态</li></ul><p>集群启动后，可以使用以下命令查看集群的运行状态。如果发现集群启动失败，则可以使用前台的方式再次启动集群，然后根据终端输出的错误日志信息来定位问题。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看端口占用情况</span></span><br><span class="line"><span class="comment"># netstat -nplt | grep 9092</span></span><br><span class="line"><span class="comment"># netstat -nplt | grep 9093</span></span><br><span class="line"><span class="comment"># netstat -nplt | grep 9094</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Kafka进程</span></span><br><span class="line"><span class="comment"># ps -aux | grep kafka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Java进程</span></span><br><span class="line"><span class="comment"># jps -l</span></span><br></pre></td></tr></tbody></table></figure><ul><li>集群关闭</li></ul><div class="admonition warning"><p class="admonition-title">注意</p><p>关闭 Kafka 集群时，一定要等 Kafka 所有节点进程全部关闭后再关闭 Zookeeper 集群。因为 Zookeeper 集群当中记录着 Kafka 集群的相关信息，Zookeeper 集群一旦先关闭，Kafka 集群就没有办法再获取关闭进程的信息，此时只能手动强制杀死 Kafka 进程。</p></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node1/bin/kafka-server-stop.sh stop</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node2/bin/kafka-server-stop.sh stop</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node3/bin/kafka-server-stop.sh stop</span></span><br></pre></td></tr></tbody></table></figure><ul><li>清空数据</li></ul><p>若希望清空 Kafka 集群的数据，则可以按照以下步骤操作。<strong>清空数据的操作不可恢复，生产环境下慎用。</strong></p><blockquote><p>第一步：关闭 Kafka 集群<br>第二步：连接 Zookeeper 集群，然后删除 <code>/kafka</code> 目录<br>第三步：删除 Kafka 各个集群节点的安装目录下的 <code>logs</code> 目录（文件夹）<br>第四步：重启 Kafka 集群</p></blockquote><h3 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h3><ul><li>进入任意节点的安装目录下的 <code>bin</code> 目录 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入安装目录</span></span><br><span class="line"><span class="comment"># cd /usr/local/kafka-cluster/kafka-node1/bin</span></span><br></pre></td></tr></tbody></table></figure><ul><li>创建主题 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建主题</span></span><br><span class="line"><span class="comment"># ./kafka-topics.sh --create --bootstrap-server 192.168.1.1:9092 --replication-factor 3 --partitions 1 --topic test</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看主题列表 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看主题列表</span></span><br><span class="line"><span class="comment"># ./kafka-topics.sh --list --bootstrap-server 192.168.1.1:9092</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看主题详细信息 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看主题详细信息</span></span><br><span class="line"><span class="comment"># ./kafka-topics.sh --bootstrap-server 192.168.1.1:9092 --topic test --describe</span></span><br></pre></td></tr></tbody></table></figure><ul><li>启动控制台消费者 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动消费者</span></span><br><span class="line"><span class="comment"># ./kafka-console-consumer.sh --bootstrap-server 192.168.1.1:9092 --topic test --from-beginning</span></span><br></pre></td></tr></tbody></table></figure><ul><li>启动控制台生产者 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动生产者</span></span><br><span class="line"><span class="comment"># ./kafka-console-producer.sh --broker-list 192.168.1.1:9092 --topic test</span></span><br></pre></td></tr></tbody></table></figure><p>生产者正常启动后，在生产者的控制台手动输入 <code>hello kafka</code>，消费者的控制台就可以消费到生产者的消息，并输出 <code>hello kafka</code>，这表示消费者成功消费了生产者发送的消息！</p><h2 id="Kafka-更改端口（可选）"><a href="#Kafka-更改端口（可选）" class="headerlink" title="Kafka 更改端口（可选）"></a>Kafka 更改端口（可选）</h2><p>若希望更改 Kafka 的默认端口（9092），可以按照以下步骤更改 Kafka 安装目录下 <code>config</code> 子目录里的各个配置文件。例如可以将 Kafka 的默认端口更改为 <code>9090</code>，如下所示：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/server.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认端口号</span></span><br><span class="line">listeners=PLAINTEXT://:9090</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/connect-standalone.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单机环境的端口号</span></span><br><span class="line">bootstrap.servers=localhost:9090</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/connect-distributed.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群环境的端口号</span></span><br><span class="line">bootstrap.servers=localhost:9090</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/producer.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布端的端口号</span></span><br><span class="line">bootstrap.servers=localhost:9090</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/consumer.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费端的端口号</span></span><br><span class="line">bootstrap.servers=localhost:9090</span><br></pre></td></tr></tbody></table></figure><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul><li><a href="https://blog.csdn.net/u011109589/article/details/124920047">Kafka 集群搭建超详细教程</a></li><li><a href="/posts/124a5015.html">Linux 单机搭建 Kafka 集群</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何在 Linux 生产环境上搭建 Kafka 集群，适用于使用多台物理机器搭建集群。</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.techgrow.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 单机搭建 Kafka 集群</title>
    <link href="https://www.techgrow.cn/posts/124a5015.html"/>
    <id>https://www.techgrow.cn/posts/124a5015.html</id>
    <published>2022-08-09T14:13:45.000Z</published>
    <updated>2022-08-09T14:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文适用于在 Centos/Debian/Ubuntu 等 Linux 发行版系统上，使用单机搭建 Kafka 集群。</p><h2 id="Zookeeper-集群搭建"><a href="#Zookeeper-集群搭建" class="headerlink" title="Zookeeper 集群搭建"></a>Zookeeper 集群搭建</h2><p>本文的 Kafka 集群搭建依赖于 Zookeeper，因此需要将 Zookeeper 单机集群提前搭建起来。值得一提的是，从 Kafka <code>2.8.0</code> 版本开始，Kafka 自身实现了 <code>Raft</code> 分布式一致性机制，这意味着 Kafka 是可以脱离 ZooKeeper 独立运行的。</p><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><table><thead><tr><th>节点</th><th> IP 地址</th><th>端口</th><th>版本号</th></tr></thead><tbody><tr><td> Zookeeper 节点 1</td><td>127.0.0.1</td><td>2181</td><td>3.4.10</td></tr><tr><td>Zookeeper 节点 2</td><td>127.0.0.1</td><td>2182</td><td>3.4.10</td></tr><tr><td>Zookeeper 节点 3</td><td>127.0.0.1</td><td>2183</td><td>3.4.10</td></tr></tbody></table><span id="more"></span><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p>由于篇幅有限，Linux 单机搭建 Zookeeper 集群的内容这里不再累述，详细教程可看 <a href="/posts/98827cf0.html">这里</a>。</p><h2 id="Kafka-集群搭建"><a href="#Kafka-集群搭建" class="headerlink" title="Kafka 集群搭建"></a>Kafka 集群搭建</h2><h3 id="集群规划-1"><a href="#集群规划-1" class="headerlink" title="集群规划"></a>集群规划</h3><table><thead><tr><th>节点</th><th> IP 地址</th><th>端口</th><th>版本号</th></tr></thead><tbody><tr><td> Kafka 节点 1</td><td>127.0.0.1</td><td>9092</td><td>2.13-3.2.1</td></tr><tr><td>Kafka 节点 2</td><td>127.0.0.1</td><td>9093</td><td>2.13-3.2.1</td></tr><tr><td>Kafka 节点 3</td><td>127.0.0.1</td><td>9094</td><td>2.13-3.2.1</td></tr></tbody></table><h3 id="集群搭建-1"><a href="#集群搭建-1" class="headerlink" title="集群搭建"></a>集群搭建</h3><ul><li>Kafka 下载</li></ul><blockquote><ol><li> Kafka 的安装包可以从 <a href="https://kafka.apache.org/downloads.html">官网</a> 下载。</li><li>以下载得到的压缩文件 <code>kafka_2.13-3.2.1.tgz</code> 为例，<code>2.11</code> 是 Scala 的版本号，<code>3.2.1</code> 是 Kafka 的版本号。</li></ol></blockquote><ul><li>Kafka 安装 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建安装目录</span></span><br><span class="line"><span class="comment"># mkdir -p /usr/local/kafka-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入安装目录</span></span><br><span class="line"><span class="comment"># cd /usr/local/kafka-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="comment"># wget https://downloads.apache.org/kafka/3.2.1/kafka_2.13-3.2.1.tgz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line"><span class="comment"># tar -xvf kafka_2.13-3.2.1.tgz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名目录</span></span><br><span class="line"><span class="comment"># mv kafka_2.13-3.2.1 kafka-node1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="comment"># rm -rf kafka_2.13-3.2.1.tgz</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Kafka 基础配置 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入安装目录</span></span><br><span class="line"><span class="comment"># cd /usr/local/kafka-cluster/kafka-node1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志目录（数据存储目录）</span></span><br><span class="line"><span class="comment"># mkdir logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件（指定以下内容即可）</span></span><br><span class="line"><span class="comment"># vim config/server.properties</span></span><br></pre></td></tr></tbody></table></figure><p>最关键的配置内容是 <code>broker.id</code>、<code>log.dirs</code>、<code>zookeeper.connect</code>，其中的 <code>zookeeper.connect</code> 是 Zookeeper 连接地址，建议使用 <code>/kafka</code> 作为后缀，这样方便日后在 Zookeeper 里统一管理 Kafka 的数据。在项目的开发测试阶段，其他配置内容暂时可以使用默认值。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># broker 的全局唯一编号,不能重复</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 处理网络请求的线程数量</span></span><br><span class="line"><span class="meta">num.network.threads</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># 用来处理磁盘 IO 的现成数量</span></span><br><span class="line"><span class="meta">num.io.threads</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 发送套接字的缓冲区大小</span></span><br><span class="line"><span class="meta">socket.send.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment"># 接收套接字的缓冲区大小</span></span><br><span class="line"><span class="meta">socket.receive.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment"># 请求套接字的缓冲区大小</span></span><br><span class="line"><span class="meta">socket.request.max.bytes</span>=<span class="string">104857600</span></span><br><span class="line"><span class="comment"># 运行日志存放的路径</span></span><br><span class="line"><span class="meta">log.dirs</span>=<span class="string">/usr/local/kafka-cluster/kafka-node1/logs</span></span><br><span class="line"><span class="comment"># topic 在当前 broker 上的分区个数</span></span><br><span class="line"><span class="meta">num.partitions</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 用来恢复和清理 data 下数据的线程数量</span></span><br><span class="line"><span class="meta">num.recovery.threads.per.data.dir</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 每个 topic 创建时的副本数,默认时 1 个副本</span></span><br><span class="line"><span class="meta">offsets.topic.replication.factor</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 每个 segment 文件保留的最长时间,超时将被删除</span></span><br><span class="line"><span class="meta">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"><span class="comment"># 每个 segment 文件的大小,默认最大 1G</span></span><br><span class="line"><span class="meta">log.segment.bytes</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment"># 检查过期数据的时间,默认 5 分钟检查一次是否数据过期</span></span><br><span class="line"><span class="meta">log.retention.check.interval.ms</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment"># 配置连接 Zookeeper 集群地址</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183/kafka</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Kafka 端口配置</li></ul><p>单机搭建 Kafka 集群时，为了解决端口冲突的问题，还需要指定 Kafka 监听的端口，必须将下述各个配置文件里的端口都更改掉。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/server.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认端口号</span></span><br><span class="line">listeners=PLAINTEXT://:9092</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/connect-standalone.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单机环境的端口号</span></span><br><span class="line">bootstrap.servers=localhost:9092</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/connect-distributed.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群环境的端口号</span></span><br><span class="line">bootstrap.servers=localhost:9092</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/producer.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布端的端口号</span></span><br><span class="line">bootstrap.servers=localhost:9092</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim config/consumer.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费端的端口号</span></span><br><span class="line">bootstrap.servers=localhost:9092</span><br></pre></td></tr></tbody></table></figure><ul><li>Kafka 创建多个节点</li></ul><p>复制两份上面已经配置好的 Kafka 安装目录，以此作为集群中另外两个节点的安装文件，例如 <code>kafka-node2</code>、<code>kafka-node3</code>。安装目录复制完成后，还需要为每个新节点按照以下步骤更改对应的内容：</p><blockquote><p>第一步：更改 <code>server.properties</code> 配置文件里的 <code>broker.id</code>、<code>log.dirs</code><br>第二步：更改 Kafka 监听的端口，包括更改上述的 <code>server.properties</code>、<code>connect-standalone.properties</code>、<code>connect-distributed.properties</code>、<code>producer.properties</code>、<code>consumer.properties</code> 配置文件</p></blockquote><p>上述两个步骤完成后，节点二和节点三的最终配置如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 节点二的配置</span><br><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://:9093</span><br><span class="line">log.dirs=/usr/local/kafka-cluster/kafka-node2/logs</span><br><span class="line"></span><br><span class="line">bootstrap.servers=localhost:9093</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 节点三的配置</span><br><span class="line">broker.id=3</span><br><span class="line">listeners=PLAINTEXT://:9094</span><br><span class="line">log.dirs=/usr/local/kafka-cluster/kafka-node3/logs</span><br><span class="line"></span><br><span class="line">bootstrap.servers=localhost:9094</span><br></pre></td></tr></tbody></table></figure><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><ul><li>集群启动</li></ul><div class="admonition warning"><p class="admonition-title">注意</p><p>启动 Kafka 集群之前，必须确保 Zookeeper 集群已经启动成功，这是因为本文搭建的 Kafka 集群依赖于 Zookeeper 集群。</p></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node1/bin/kafka-server-start.sh -daemon /usr/local/kafka-cluster/kafka-node1/config/server.properties</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node2/bin/kafka-server-start.sh -daemon /usr/local/kafka-cluster/kafka-node2/config/server.properties</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node3/bin/kafka-server-start.sh -daemon /usr/local/kafka-cluster/kafka-node3/config/server.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者前台启动（可直接查看启动时输出的日志信息）</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node1/bin/kafka-server-start.sh /usr/local/kafka-cluster/kafka-node1/config/server.properties</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node2/bin/kafka-server-start.sh /usr/local/kafka-cluster/kafka-node2/config/server.properties</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node3/bin/kafka-server-start.sh /usr/local/kafka-cluster/kafka-node3/config/server.properties</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看状态</li></ul><p>集群启动后，可以使用以下命令查看集群的运行状态。如果发现集群启动失败，则可以使用前台的方式再次启动集群，然后根据终端输出的错误日志信息来定位问题。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看端口占用情况</span></span><br><span class="line"><span class="comment"># netstat -nplt | grep 9092</span></span><br><span class="line"><span class="comment"># netstat -nplt | grep 9093</span></span><br><span class="line"><span class="comment"># netstat -nplt | grep 9094</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Kafka进程</span></span><br><span class="line"><span class="comment"># ps -aux | grep kafka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Java进程</span></span><br><span class="line"><span class="comment"># jps -l</span></span><br></pre></td></tr></tbody></table></figure><ul><li>集群关闭</li></ul><div class="admonition warning"><p class="admonition-title">注意</p><p>关闭 Kafka 集群时，一定要等 Kafka 所有节点进程全部关闭后再关闭 Zookeeper 集群。因为 Zookeeper 集群当中记录着 Kafka 集群的相关信息，Zookeeper 集群一旦先关闭，Kafka 集群就没有办法再获取关闭进程的信息，此时只能手动强制杀死 Kafka 进程。</p></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node1/bin/kafka-server-stop.sh stop</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node2/bin/kafka-server-stop.sh stop</span></span><br><span class="line"><span class="comment"># /usr/local/kafka-cluster/kafka-node3/bin/kafka-server-stop.sh stop</span></span><br></pre></td></tr></tbody></table></figure><ul><li>清空数据</li></ul><p>若希望清空 Kafka 集群的数据，则可以按照以下步骤操作。<strong>清空数据的操作不可恢复，生产环境下慎用。</strong></p><blockquote><p>第一步：关闭 Kafka 集群<br>第二步：连接 Zookeeper 集群，然后删除 <code>/kafka</code> 目录<br>第三步：删除 Kafka 各个集群节点的安装目录下的 <code>logs</code> 目录（文件夹）<br>第四步：重启 Kafka 集群</p></blockquote><h3 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h3><ul><li>进入任意节点的安装目录下的 <code>bin</code> 目录 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入安装目录</span></span><br><span class="line"><span class="comment"># cd /usr/local/kafka-cluster/kafka-node1/bin</span></span><br></pre></td></tr></tbody></table></figure><ul><li>创建主题 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建主题</span></span><br><span class="line"><span class="comment"># ./kafka-topics.sh --create --bootstrap-server 127.0.0.1:9092 --replication-factor 3 --partitions 1 --topic test</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看主题列表 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看主题列表</span></span><br><span class="line"><span class="comment"># ./kafka-topics.sh --list --bootstrap-server 127.0.0.1:9092</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看主题详细信息 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看主题详细信息</span></span><br><span class="line"><span class="comment"># ./kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic test --describe</span></span><br></pre></td></tr></tbody></table></figure><ul><li>启动控制台消费者 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动消费者</span></span><br><span class="line"><span class="comment"># ./kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test --from-beginning</span></span><br></pre></td></tr></tbody></table></figure><ul><li>启动控制台生产者 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动生产者</span></span><br><span class="line"><span class="comment"># ./kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test</span></span><br></pre></td></tr></tbody></table></figure><p>生产者正常启动后，在生产者的控制台手动输入 <code>hello kafka</code>，消费者的控制台就可以消费到生产者的消息，并输出 <code>hello kafka</code>，这表示消费者成功消费了生产者发送的消息！</p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul><li><a href="https://blog.csdn.net/u011109589/article/details/124920047">Kafka 集群搭建超详细教程</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何在 Linux 系统上搭建 Kafka 集群，适用于单机搭建集群。</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.techgrow.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java 微信支付开发入门教程</title>
    <link href="https://www.techgrow.cn/posts/ba04f364.html"/>
    <id>https://www.techgrow.cn/posts/ba04f364.html</id>
    <published>2022-08-06T15:12:41.000Z</published>
    <updated>2022-08-06T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://pay.weixin.qq.com/">微信支付 - 官网</a></li><li><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pages/index.shtml">微信支付 - 官方开发文档</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Java 如何接入微信支付的 API，包括入门教程、开发案例等。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="在线支付" scheme="https://www.techgrow.cn/tags/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Java 自动生成数据库文档</title>
    <link href="https://www.techgrow.cn/posts/28df7196.html"/>
    <id>https://www.techgrow.cn/posts/28df7196.html</id>
    <published>2022-07-30T14:18:22.000Z</published>
    <updated>2022-07-30T14:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在企业级开发中，我们经常会有编写数据库文档的时间付出，关于数据库文档的状态：要么没有、要么有但都是手写、后期运维开发都需要手动对文档进行维护，很是繁琐。如果忘记一次维护就会给以后的工作造成很多困扰，这无形中留了很多坑给自己和后人。<a href="https://github.com/pingfangushi/screw/">screw</a> 是一款简洁好用的数据库文档生成工具，专为解决这一开发痛点而生。</p><h2 id="screw-介绍"><a href="#screw-介绍" class="headerlink" title="screw 介绍"></a>screw 介绍</h2><h3 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h3><ul><li>灵活扩展</li><li>支持自定义模板</li><li>支持多种数据库</li><li>支持多种格式的文档</li><li>简洁、轻量、设计良好</li></ul><span id="more"></span><h3 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h3><ul><li><input checked="" disabled="" type="checkbox"> MySQL </li><li><input checked="" disabled="" type="checkbox"> MariaDB </li><li><input checked="" disabled="" type="checkbox"> TIDB </li><li><input checked="" disabled="" type="checkbox"> Oracle </li><li><input checked="" disabled="" type="checkbox"> SqlServer </li><li><input checked="" disabled="" type="checkbox"> PostgreSQL</li><li><input checked="" disabled="" type="checkbox"> Cache DB（2016）</li></ul><h3 id="文档类型支持"><a href="#文档类型支持" class="headerlink" title="文档类型支持"></a>文档类型支持</h3><ul><li><input checked="" disabled="" type="checkbox"> Html</li><li><input checked="" disabled="" type="checkbox"> Word</li><li><input checked="" disabled="" type="checkbox"> Markdown</li></ul><h2 id="screw-使用"><a href="#screw-使用" class="headerlink" title="screw 使用"></a>screw 使用</h2><h3 id="基于-Java-代码"><a href="#基于-Java-代码" class="headerlink" title="基于 Java 代码"></a>基于 Java 代码</h3><p>第一种使用方式是基于 Java 代码，自动生成数据库文档。</p><h4 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Java-代码"><a href="#Java-代码" class="headerlink" title="Java 代码"></a>Java 代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.Configuration;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.engine.EngineConfig;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.engine.EngineFileType;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.engine.EngineTemplateType;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.execute.DocumentationExecute;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.process.ProcessConfig;</span><br><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariConfig;</span><br><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成数据库文档</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrewTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String fileOutputDir = <span class="string">"D:/database/docs"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        documentGeneration();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文档生成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">documentGeneration</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//数据源</span></span><br><span class="line">        HikariConfig hikariConfig = <span class="keyword">new</span> HikariConfig();</span><br><span class="line">        hikariConfig.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        hikariConfig.setJdbcUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/database"</span>);</span><br><span class="line">        hikariConfig.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        hikariConfig.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//设置可以获取tables remarks信息</span></span><br><span class="line">        hikariConfig.addDataSourceProperty(<span class="string">"useInformationSchema"</span>, <span class="string">"true"</span>);</span><br><span class="line">        hikariConfig.setMinimumIdle(<span class="number">2</span>);</span><br><span class="line">        hikariConfig.setMaximumPoolSize(<span class="number">5</span>);</span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> HikariDataSource(hikariConfig);</span><br><span class="line">        <span class="comment">//生成配置</span></span><br><span class="line">        EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">                <span class="comment">//生成文件路径</span></span><br><span class="line">                .fileOutputDir(fileOutputDir)</span><br><span class="line">                <span class="comment">//打开目录</span></span><br><span class="line">                .openOutputDir(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//文件类型</span></span><br><span class="line">                .fileType(EngineFileType.HTML)</span><br><span class="line">                <span class="comment">//生成模板实现</span></span><br><span class="line">                .produceType(EngineTemplateType.freemarker)</span><br><span class="line">                <span class="comment">//自定义文件名称</span></span><br><span class="line">                .fileName(<span class="string">"自定义文件名称"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//忽略表</span></span><br><span class="line">        ArrayList&lt;String&gt; ignoreTableName = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//忽略表前缀</span></span><br><span class="line">        ArrayList&lt;String&gt; ignorePrefix = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//忽略表后缀</span></span><br><span class="line">        ArrayList&lt;String&gt; ignoreSuffix = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ProcessConfig processConfig = ProcessConfig.builder()</span><br><span class="line">                <span class="comment">//指定生成逻辑、当存在指定表、指定表前缀、指定表后缀时，将生成指定表，其余表不生成、并跳过忽略表配置</span></span><br><span class="line">                <span class="comment">//根据名称指定表生成</span></span><br><span class="line">                .designatedTableName(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">                <span class="comment">//根据表前缀生成</span></span><br><span class="line">                .designatedTablePrefix(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">                <span class="comment">//根据表后缀生成</span></span><br><span class="line">                .designatedTableSuffix(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">                <span class="comment">//忽略表名</span></span><br><span class="line">                .ignoreTableName(ignoreTableName)</span><br><span class="line">                <span class="comment">//忽略表前缀</span></span><br><span class="line">                .ignoreTablePrefix(ignorePrefix)</span><br><span class="line">                <span class="comment">//忽略表后缀</span></span><br><span class="line">                .ignoreTableSuffix(ignoreSuffix).build();</span><br><span class="line">        <span class="comment">//配置</span></span><br><span class="line">        Configuration config = Configuration.builder()</span><br><span class="line">                <span class="comment">//版本</span></span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                <span class="comment">//描述</span></span><br><span class="line">                .description(<span class="string">"数据库设计文档生成"</span>)</span><br><span class="line">                <span class="comment">//数据源</span></span><br><span class="line">                .dataSource(dataSource)</span><br><span class="line">                <span class="comment">//生成配置</span></span><br><span class="line">                .engineConfig(engineConfig)</span><br><span class="line">                <span class="comment">//生成配置</span></span><br><span class="line">                .produceConfig(processConfig)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//执行生成</span></span><br><span class="line">        <span class="keyword">new</span> DocumentationExecute(config).execute();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="基于-Maven-插件"><a href="#基于-Maven-插件" class="headerlink" title="基于 Maven 插件"></a>基于 Maven 插件</h3><p>第二种使用方式是基于 Maven 插件，自动生成数据库文档。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${lastVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- HikariCP --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mysql driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--username--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--password--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jdbc url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdbcUrl</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/database<span class="tag">&lt;/<span class="name">jdbcUrl</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成文件类型--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileType</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">fileType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--打开文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">openOutputDir</span>&gt;</span>false<span class="tag">&lt;/<span class="name">openOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成模板--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">produceType</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">produceType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--文档名称 为空时:将采用[数据库名称-描述-版本号]作为文档名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileName</span>&gt;</span>测试文档名称<span class="tag">&lt;/<span class="name">fileName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>数据库文档生成<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${project.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据库文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="扩展模块"><a href="#扩展模块" class="headerlink" title="扩展模块"></a>扩展模块</h2><p>在日常的开发中，经过需求分析、建模之后，往往会先在数据库中建表，其次再进行代码的开发。使用 POJO 生成功能可以直接根据数据库表生成对应的 Java POJO 对象，这可以帮助开发人员节省一些重复劳动。screw 支持 POJO 生成功能，目前处于初步开发的状态，且仅支持 MySQL 数据库。</p><h3 id="POJO-生成模块"><a href="#POJO-生成模块" class="headerlink" title="POJO 生成模块"></a>POJO 生成模块</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${lastVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * POJO 生成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pojoGeneration</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//数据源</span></span><br><span class="line">    HikariConfig hikariConfig = <span class="keyword">new</span> HikariConfig();</span><br><span class="line">    hikariConfig.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">    hikariConfig.setJdbcUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/database"</span>);</span><br><span class="line">    hikariConfig.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    hikariConfig.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">//设置可以获取tables remarks信息</span></span><br><span class="line">    hikariConfig.addDataSourceProperty(<span class="string">"useInformationSchema"</span>, <span class="string">"true"</span>);</span><br><span class="line">    hikariConfig.setMinimumIdle(<span class="number">2</span>);</span><br><span class="line">    hikariConfig.setMaximumPoolSize(<span class="number">5</span>);</span><br><span class="line">    DataSource dataSource = <span class="keyword">new</span> HikariDataSource(hikariConfig);</span><br><span class="line"></span><br><span class="line">    ProcessConfig processConfig = ProcessConfig.builder()</span><br><span class="line">        <span class="comment">//指定生成逻辑、当存在指定表、指定表前缀、指定表后缀时，将生成指定表，其余表不生成、并跳过忽略表配置</span></span><br><span class="line">        <span class="comment">//根据名称指定表生成</span></span><br><span class="line">        .designatedTableName(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">        <span class="comment">//根据表前缀生成</span></span><br><span class="line">        .designatedTablePrefix(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">        <span class="comment">//根据表后缀生成</span></span><br><span class="line">        .designatedTableSuffix(<span class="keyword">new</span> ArrayList&lt;&gt;()).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置生成pojo相关配置</span></span><br><span class="line">    PojoConfiguration config = <span class="keyword">new</span> PojoConfiguration();</span><br><span class="line">    <span class="comment">//设置文件存放路径</span></span><br><span class="line">    config.setPath(<span class="string">"/cn/smallbun/screw/"</span>);</span><br><span class="line">    <span class="comment">//设置包名</span></span><br><span class="line">    config.setPackageName(<span class="string">"cn.smallbun.screw"</span>);</span><br><span class="line">    <span class="comment">//设置是否使用lombok</span></span><br><span class="line">    config.setUseLombok(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//设置数据源</span></span><br><span class="line">    config.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">//设置命名策略</span></span><br><span class="line">    config.setNameStrategy(<span class="keyword">new</span> HumpNameStrategy());</span><br><span class="line">    <span class="comment">//设置表过滤逻辑</span></span><br><span class="line">    config.setProcessConfig(processConfig);</span><br><span class="line">    <span class="comment">//执行生成</span></span><br><span class="line">    <span class="keyword">new</span> PojoExecute(config).execute();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><div class="admonition note"><p class="admonition-title">问题一</p><p>生成的数据库文档出现乱码？</p></div><p>在连接 MySQL 的 URL 中加入 <code>characterEncoding=UTF-8</code> 即可</p><div class="admonition note"><p class="admonition-title">问题二</p><p>MySQL 数据库表和列字段有注释，但生成的数据库文档却没有注释？</p></div><p>在连接 MySQL 的 URL 中加入 <code>useInformationSchema=true</code> 即可</p><div class="admonition note"><p class="admonition-title">问题三</p><p>运行抛出异常： <code>Caused by: java.lang.NoSuchFieldError: VERSION_2_3_30</code></p></div><p>检查项目中 <code>freemarker</code> 的依赖版本，这是由于版本过低造成的，升级版本为 <code>2.3.30</code> 即可</p><div class="admonition note"><p class="admonition-title">问题四</p><p>运行抛出异常： <code>java.lang.AbstractMethodError: com.mysql.jdbc.JDBC4Connection.getSchema()Ljava/lang/String;</code></p></div><p>这是因为 MySQL 驱动的版本过低造成的，升级 MySQL 驱动的版本为最新即可</p><div class="admonition note"><p class="admonition-title">问题五</p><p>运行抛出异常： <code>java.lang.AbstractMethodError: oracle.jdbc.driver.T4CConnection.getSchema()Ljava/lang/String;</code></p></div><p>这是因为 Oracle 驱动版本过低造成的，删除或屏蔽当前的驱动版本，并将驱动升级为以下版本：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle.ojdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.easyproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orai18n<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.1.0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文档生成截图"><a href="#文档生成截图" class="headerlink" title="文档生成截图"></a>文档生成截图</h2><p><img data-src="../../../asset/2022/07/screw-docs-1.png"></p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要记录如何通过 Java 自动生成数据库文档，包括 screw 工具的使用。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Golang 入门教程之一</title>
    <link href="https://www.techgrow.cn/posts/42f8c3d7.html"/>
    <id>https://www.techgrow.cn/posts/42f8c3d7.html</id>
    <published>2022-07-19T12:23:35.000Z</published>
    <updated>2022-07-19T12:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->]]></content>
    
    
    <summary type="html">本文主要介绍 Golang 的入门教程。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Golang" scheme="https://www.techgrow.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>C++ 进阶基础之八</title>
    <link href="https://www.techgrow.cn/posts/8b87f2be.html"/>
    <id>https://www.techgrow.cn/posts/8b87f2be.html</id>
    <published>2022-07-12T14:55:34.000Z</published>
    <updated>2022-07-12T14:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/dbff2af9.html">C++ 进阶基础之一</a>、<a href="/posts/779107de.html">C++ 进阶基础之二</a>、<a href="/posts/35cd91d3.html">C++ 进阶基础之三</a></li><li><a href="/posts/791ffdcd.html">C++ 进阶基础之四</a>、<a href="/posts/64fd9f88.html">C++ 进阶基础之五</a>、<a href="/posts/62e4578b.html">C++ 进阶基础之六</a></li><li><a href="/posts/9e89901e.html">C++ 进阶基础之七</a>、<a href="/posts/8b87f2be.html">C++ 进阶基础之八</a></li></ul><h2 id="stack-容器"><a href="#stack-容器" class="headerlink" title="stack 容器"></a>stack 容器</h2><h3 id="stack-容器的概念"><a href="#stack-容器的概念" class="headerlink" title="stack 容器的概念"></a>stack 容器的概念</h3><p><strong>stack 是一种先进后出（First In Last Out，FILO）的数据结构，它只有一个出口。</strong>stack 容器允许新增元素、移除元素、取得栈顶元素，但是除了最顶端的元素外，没有任何其他方法可以存取 stack 中的其他元素。stack 没有迭代器，容器中所有元素的进出都必须符合 “先进后出” 的规则，只有 stack 最顶端的元素，才有机会被外界取用。换言之，<strong>stack 不提供遍历功能，也不提供迭代器。</strong>deque 是双向开口的数据结构，若以 deque 为底部结构并封闭其头端开口，便轻而易举地形成一个 stack。因此，SGI STL 便以 deque 作为缺省情况下的 stack 底部结构。由于 stack 以底部容器完成其所有工作，而具有这种 “修改某物接口，形成另一种风貌” 的性质者，称为 <code>adapter（配接器）</code>，因此，STL stack 往往不被归类为 <code>container（容器）</code>，而被归类为 <code>container adapter（容器配接器）</code>。</p><p><img data-src="../../../asset/2022/07/cplusplus-stack-1.png"></p><span id="more"></span><h3 id="stack-容器的使用"><a href="#stack-容器的使用" class="headerlink" title="stack 容器的使用"></a>stack 容器的使用</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStack</span><span class="params">(stack&lt;<span class="keyword">int</span>&gt; &amp;s)</span> </span>{</span><br><span class="line">    <span class="comment">// 判断容器是否为空</span></span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="comment">// 获取栈顶元素</span></span><br><span class="line">        cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="comment">// 弹出栈顶元素（弹栈）</span></span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向栈顶添加元素（压栈）</span></span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">12</span>);</span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">24</span>);</span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">35</span>);</span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">46</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printStack</span>(s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s2 = s1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">46 35 24 12 5 </span><br></pre></td></tr></tbody></table></figure><h2 id="queue-容器"><a href="#queue-容器" class="headerlink" title="queue 容器"></a>queue 容器</h2><h3 id="queue-容器的概念"><a href="#queue-容器的概念" class="headerlink" title="queue 容器的概念"></a>queue 容器的概念</h3><p><strong>queue 是一种先进先出（First In First Out，FIFO）的数据结构，它有两个出口。</strong>queue 容器允许从一端新增元素，从另一端移除元素。queue 所有元素的进出都必须符合 ” 先进先出” 的规则，只有 queue 的顶端元素，才有机会被外界取用。<strong>queue 不提供遍历功能，也不提供迭代器。</strong>由于 queue 以底部容器完成其所有工作，因此，STL queue 往往也不被归类为 <code>container（容器）</code>，而被归类为 <code>container adapter（容器配接器）</code>。</p><p><img data-src="../../../asset/2022/07/cplusplus-queue-1.png"></p><h3 id="queue-容器的使用"><a href="#queue-容器的使用" class="headerlink" title="queue 容器的使用"></a>queue 容器的使用</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">(queue&lt;<span class="keyword">int</span>&gt; &amp;q)</span> </span>{</span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"大小: "</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">"队头: "</span> &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">"队尾: "</span> &lt;&lt; q.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 弹出（删除）队头元素</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往队尾添加元素</span></span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回队列的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"size = "</span> &lt;&lt; q1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回第一个元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"first = "</span> &lt;&lt; q1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最后一个元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"last = "</span> &lt;&lt; q1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printQueue</span>(q1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q2 = q1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">size = 5</span><br><span class="line">first = 1</span><br><span class="line">last = 9</span><br><span class="line">大小: 5</span><br><span class="line">队头: 1</span><br><span class="line">队尾: 9</span><br><span class="line">大小: 4</span><br><span class="line">队头: 3</span><br><span class="line">队尾: 9</span><br><span class="line">大小: 3</span><br><span class="line">队头: 5</span><br><span class="line">队尾: 9</span><br><span class="line">大小: 2</span><br><span class="line">队头: 7</span><br><span class="line">队尾: 9</span><br><span class="line">大小: 1</span><br><span class="line">队头: 9</span><br><span class="line">队尾: 9</span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 C++ 的进阶基础教程，包括 STL 几大容器的使用等。</summary>
    
    
    
    
    <category term="C++" scheme="https://www.techgrow.cn/tags/C/"/>
    
  </entry>
  
</feed>
