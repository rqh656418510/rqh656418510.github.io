<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clay 的技术博客</title>
  
  <subtitle>用进废退 | 艺不压身</subtitle>
  <link href="https://www.techgrow.cn/atom.xml" rel="self"/>
  
  <link href="https://www.techgrow.cn/"/>
  <updated>2023-05-13T12:12:41.000Z</updated>
  <id>https://www.techgrow.cn/</id>
  
  <author>
    <name>Clay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>推送镜像到 DockerHub</title>
    <link href="https://www.techgrow.cn/posts/2ba32056.html"/>
    <id>https://www.techgrow.cn/posts/2ba32056.html</id>
    <published>2023-05-13T12:12:41.000Z</published>
    <updated>2023-05-13T12:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>在 <a href="https://hub.docker.com/">DockerHub</a> 官网注册账号，该账号是免费注册的。</p><h2 id="创建个人仓库"><a href="#创建个人仓库" class="headerlink" title="创建个人仓库"></a>创建个人仓库</h2><p>登录 DockerHub 的官网，创建新的镜像仓库。</p><span id="more"></span><p><img data-src="../../../asset/2023/05/docker-hub-1.png"></p><h2 id="手动推送镜像"><a href="#手动推送镜像" class="headerlink" title="手动推送镜像"></a>手动推送镜像</h2><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>在本地使用 Dockerfile 的方式构建镜像。通过 <code>docker build</code> 命令构建新的镜像，<code>-t</code> 参数可以指定新镜像的名称，<code>.</code> 表示在当前目录下。</p><ul><li>构建本地镜像 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t clay/dingtalk-webhook .</span><br></pre></td></tr></tbody></table></figure><ul><li>查看本地镜像 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure><ul><li>给镜像打标签，更改标签的语法： <code>docker tag IMAGEID REPOSITORY:TAG</code></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定版本号</span></span><br><span class="line">docker tag 2657f9dbbd15 clay/dingtalk-webhook:1.0.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不指定版本号（默认为 latest）</span></span><br><span class="line">docker tag 2657f9dbbd15 clay/dingtalk-webhook</span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">特别注意</p><p>每次都要 Push 不带版本号的镜像，否则镜像将没有 <code>latest</code> 版本，导致其他人拉取镜像的时候必须要指定 <code>tag</code>，这样会非常不方便。</p></div><h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录 DockerHub</span></span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送指定版本号的镜像</span></span><br><span class="line">docker push clay/dingtalk-webhook:1.0.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送不带版本号的镜像（默认为 latest）</span></span><br><span class="line">docker push clay/dingtalk-webhook</span><br></pre></td></tr></tbody></table></figure><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>镜像推送成功后，可以在 DockerHub 仓库中观察是否可以搜索到，若能搜索到则说明镜像推送成功。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search dingtalk-webhook</span><br></pre></td></tr></tbody></table></figure><h3 id="推送加速"><a href="#推送加速" class="headerlink" title="推送加速"></a>推送加速</h3><p>推送镜像到 DockerHub 时，往往会因网络延迟而超时。这种情况下，可以配置 Docker Push 使用代理，加快镜像推送的速度。</p><div class="admonition note"><p class="admonition-title">提示</p><p>由于不可描述的原因，Docker 的 Pull 或 Push 都很慢。Docker Pull 镜像时，可以更改 <code>/etc/docker/daemon.json</code> 配置文件，加入国内镜像源的方式来加速。但 Docker Push 不支持这种方式，传统的 <code>export http_proxy=xxxx</code> 设置 HTTP 代理变量的方式对 Docker 也无效，因此需要采用下面的方式设置 HTTP 代理来解决。</p></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置目录</span></span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入配置文件(指定代理服务的地址)</span></span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">"HTTP_PROXY=http://127.0.0.1:1080/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新更改</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否生效</span></span><br><span class="line">systemctl show --property=Environment docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新Push镜像</span></span><br><span class="line">docker push clay/dingtalk-webhook</span><br></pre></td></tr></tbody></table></figure><h2 id="自动推送镜像"><a href="#自动推送镜像" class="headerlink" title="自动推送镜像"></a>自动推送镜像</h2><p>这里将介绍如何利用 GitHub Actions 自动构建并推送 Docker 镜像到 DockerHub。</p><h3 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 GitHub 仓库</h3><p>登录 <a href="https://github.com/">GitHub 官网</a>，首先手动创建代码仓库，然后将本地的代码 Push 到代码仓库。</p><h3 id="配置-DockerHub-账号"><a href="#配置-DockerHub-账号" class="headerlink" title="配置 DockerHub 账号"></a>配置 DockerHub 账号</h3><p>由于希望通过 GitHub Actions 自动推送镜像到 DockerHub，因此必须要有 DockerHub 的认证配置，即需要在 GitHub 仓库中添加 DockerHub 登录的用户名和密码（AcessToken）。</p><p><img data-src="../../../asset/2023/05/docker-hub-github-1.png"></p><p><img data-src="../../../asset/2023/05/docker-hub-github-2.png"></p><h3 id="选择-Action-工作流模板"><a href="#选择-Action-工作流模板" class="headerlink" title="选择 Action 工作流模板"></a>选择 Action 工作流模板</h3><p>选择 GitHub Actions 的工作流模板，这里可以任意选择一个，后续可以手动更改模板文件的内容。值得一提的是，模板文件创建成功后，默认会保存在 GitHub 仓库的 <code>.github/workflows/</code> 目录下。</p><p><img data-src="../../../asset/2023/05/docker-hub-github-3.png"></p><h3 id="更改-Workflow-配置文件"><a href="#更改-Workflow-配置文件" class="headerlink" title="更改 Workflow 配置文件"></a>更改 Workflow 配置文件</h3><p>编辑 GitHub 仓库 <code>.github/workflows/</code> 目录下的 Workflow 配置文件，覆盖并添加下述内容。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li><ol><li><a href="https://docs.github.com/zh/actions">GitHub Actions 的中文文档</a></li></ol></li><li><ol start="2"><li> GitHub 从 Git 引用和 GitHub 事件中提取元数据（tags、labels）的配置方法，详细教程可以参考 <a href="https://github.com/docker/metadata-action">这里</a>。</li></ol></li><li><ol start="3"><li>Action 本质就是由一系列的 <code>step</code> 组成，GitHub Actions 官方所有可用的 Action 可以从 <a href="https://github.com/marketplace?type=actions">这里</a> 查找到。</li></ol></li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This workflow will build a package using Maven and then publish it to GitHub packages when a release is created</span></span><br><span class="line"><span class="comment"># For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">DockerHub</span> <span class="string">Image</span> <span class="string">Publish</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'main'</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'*'</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'main'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">techgrow/techgrow-openapi-java</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">the</span> <span class="string">repo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">11</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">java-version:</span> <span class="string">'11'</span></span><br><span class="line">        <span class="attr">distribution:</span> <span class="string">'temurin'</span></span><br><span class="line">        <span class="attr">cache:</span> <span class="string">maven</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Maven</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">package</span> <span class="string">--file</span> <span class="string">pom.xml</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">the</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">.</span> <span class="string">--file</span> <span class="string">Dockerfile</span> <span class="string">--tag</span> <span class="string">${{</span> <span class="string">env.IMAGE_NAME</span> <span class="string">}}</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">DockerHub</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">github.event_name</span> <span class="type">!=</span> <span class="string">'pull_request'</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">${{</span> <span class="string">secrets.DOCKERHUB_USERNAME</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">${{</span> <span class="string">secrets.DOCKERHUB_TOKEN</span> <span class="string">}}</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Extract</span> <span class="string">Docker</span> <span class="string">metadata</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">meta</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">docker/metadata-action@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">images:</span> <span class="string">${{</span> <span class="string">env.IMAGE_NAME</span> <span class="string">}}</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">docker/build-push-action@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">push:</span> <span class="string">${{</span> <span class="string">github.event_name</span> <span class="type">!=</span> <span class="string">'pull_request'</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">tags:</span> <span class="string">${{</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">labels:</span> <span class="string">${{</span> <span class="string">steps.meta.outputs.labels</span> <span class="string">}}</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>步骤的名称</th><th>步骤的描述</th></tr></thead><tbody><tr><td> Checkout the repo</td><td> 检出仓库代码</td></tr><tr><td> Set up JDK 11</td><td> 安装 JDK 11</td></tr><tr><td>Build with Maven</td><td>Maven 编译代码</td></tr><tr><td> Build the Docker image</td><td> 构建 Docker 镜像</td></tr><tr><td> Login to DockerHub</td><td> 登录 DockerHub</td></tr><tr><td>Extract Docker metadata</td><td> 提取 Docker 的元数据</td></tr><tr><td> Build and push Docker image</td><td> 推送 Docker 镜像</td></tr></tbody></table><h3 id="自动推送镜像到-DockerHub"><a href="#自动推送镜像到-DockerHub" class="headerlink" title="自动推送镜像到 DockerHub"></a>自动推送镜像到 DockerHub</h3><p>Workflow 文件配置完成之后，将所有内容更改推送至 Github 仓库。按照本例中的配置，只要 <code>main</code> 分支有新的 Push 事件或者 <code>tag</code> 有更新，就会触发 Github Actions 自动构建镜像并推送至 DockerHub。上述配置的 <code>Extract Docker metadata</code> 步骤，目的是更改镜像的名称，镜像的 <code>tag</code> 会自动抽取（规则如下表所示）。默认情况下，如果是分支的 Push 事件，那么镜像的 <code>tag</code> 则为分支的名称，如果是 <code>tag</code> 的 Push 事件，则会推送 <code>tag</code> 和 <code>latest</code> 这两个版本的镜像到 DockerHub，具体配置规则参见 <a href="https://github.com/docker/metadata-action">这里</a> 。</p><table><thead><tr><th>Eent</th><th>Ref</th><th>Docker Tags</th></tr></thead><tbody><tr><td><code>pull_request</code></td><td><code>refs/pull/2/merge</code></td><td><code>pr-2</code></td></tr><tr><td><code>push</code></td><td><code>refs/heads/main</code></td><td><code>main</code></td></tr><tr><td><code>push</code></td><td><code>refs/heads/releases/1</code></td><td><code>releases-1</code></td></tr><tr><td><code>push tag</code></td><td><code>refs/tags/1.2.3</code></td><td><code>1.2.3</code>, <code>latest</code></td></tr><tr><td><code>push tag</code></td><td><code>refs/tags/2.0.8-beta.67</code></td><td><code>2.0.8-beta.67</code>, <code>latest</code></td></tr><tr><td><code>workflow_dispatch</code></td><td><code>refs/heads/main</code></td><td><code>main</code></td></tr></tbody></table><ul><li>Git 创建并推送 <code>tag</code> 的命令 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">git tag 1.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送标签</span></span><br><span class="line">git push origin 1.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有标签列表</span></span><br><span class="line">git tag --list</span><br></pre></td></tr></tbody></table></figure><ul><li>当 Push 新的 <code>tag</code> 到 GitHub 仓库后，等待 GitHub Actions 的自动构建操作完成，最后登录 DockerHub 的官网，可以看到已经有相应的 Docker 镜像被创建。</li></ul><p><img data-src="../../../asset/2023/05/docker-hub-github-6.png"></p><h3 id="查看自动构建的结果"><a href="#查看自动构建的结果" class="headerlink" title="查看自动构建的结果"></a>查看自动构建的结果</h3><p><img data-src="../../../asset/2023/05/docker-hub-github-4.png"></p><p><img data-src="../../../asset/2023/05/docker-hub-github-5.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/wangzhongshun/article/details/127435524">Git 之 Tag 标签的使用</a></li><li><a href="https://www.cnblogs.com/jhao/p/15753390.html">使用 GitHub Actions 自动构建 DockerHub 镜像</a></li><li><a href="https://blog.csdn.net/agonie201218/article/details/128287804">巧用 Github Actions 自动推送 DockerHub 镜像</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍如何推送镜像到 DockerHub，包括手动推送镜像、推送镜像加速、GitHub Actions 自动推送镜像等。</summary>
    
    
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 整合 MyBatis-Plus 与 H2 教程</title>
    <link href="https://www.techgrow.cn/posts/afd4ab85.html"/>
    <id>https://www.techgrow.cn/posts/afd4ab85.html</id>
    <published>2023-05-05T15:12:41.000Z</published>
    <updated>2023-05-05T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/dfc4cb86.html">H2 数据库基础使用教程</a></li><li><a href="/posts/afd4ab85.html">SpringBoot 整合 MyBatis-Plus 与 H2 教程</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://h2database.com/">H2 官方文档</a></li><li><a href="https://github.com/h2database/h2database">H2 GitHub 项目</a></li></ul><span id="more"></span><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><table><thead><tr><th>框架</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td> Spring Boot</td><td>2.7.11</td><td></td></tr><tr><td>MyBatis-Plus</td><td>3.5.3.1</td><td></td></tr><tr><td>H2</td><td>2.1.214</td><td></td></tr></tbody></table><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img data-src="../../../asset/2023/05/h2database-3.png"></p><h3 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h3><p>本文所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/h2/h2-study">GitHub</a> 下载对应章节 <code>h2-springboot-mybatis-plus</code>。</p><h2 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h2><h3 id="Maven-配置文件"><a href="#Maven-配置文件" class="headerlink" title="Maven 配置文件"></a>Maven 配置文件</h3><ul><li><code>pom.xml</code> 的核心配置内容如下 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.7.11<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2.version</span>&gt;</span>2.1.214<span class="tag">&lt;/<span class="name">h2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mybatis-plus.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- h2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${h2.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-boot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring-boot.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="SQL-映射文件"><a href="#SQL-映射文件" class="headerlink" title="SQL 映射文件"></a>SQL 映射文件</h3><ul><li><code>UserMapper.xml</code>，MyBatis 的 SQL 映射文件 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.clay.h2.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"clear"</span>&gt;</span></span><br><span class="line">        truncate table `t_user`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="SQL-初始化脚本文件"><a href="#SQL-初始化脚本文件" class="headerlink" title="SQL 初始化脚本文件"></a>SQL 初始化脚本文件</h3><ul><li><code>schema.sql</code>，用于初始化数据库的表结构 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `t_user` (</span><br><span class="line">`id`       <span class="type">int</span> <span class="keyword">primary</span> key auto_increment <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`username` <span class="type">char</span> (<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`pwd`      <span class="type">char</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`create_time` datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`update_time` datetime</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ul><li><code>data.sql</code>，用于初始化数据库的表数据 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id, username, pwd, create_time, update_time) <span class="keyword">values</span> (<span class="number">0</span>, <span class="string">'zhhangsan'</span>, <span class="string">'1222'</span>, {ts <span class="string">'2022-07-27 18:47:52.69'</span>}, {ts <span class="string">'2022-07-27 18:47:52.69'</span>});</span><br></pre></td></tr></tbody></table></figure><h3 id="SpringBoot-配置文件"><a href="#SpringBoot-配置文件" class="headerlink" title="SpringBoot 配置文件"></a>SpringBoot 配置文件</h3><div class="admonition note"><p class="admonition-title">提示</p><ul><li>H2 数据库支持多种连接方式和连接设置，连接数据库的 JDBC URL 对大小写不敏感。</li><li>关于 H2 的更多 JDBC URL 格式和使用示例，请看 <a href="/posts/dfc4cb86.html#%E9%99%84%E5%BD%95">这里</a> 的详细介绍。</li></ul></div><h4 id="配置完整案例"><a href="#配置完整案例" class="headerlink" title="配置完整案例"></a>配置完整案例</h4><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">h2-springboot-mybatis-plus</span></span><br><span class="line">  <span class="comment"># 数据源配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment"># mem 表示 H2 使用内存数据库（应用重启会丢失数据）</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:mem:shopDb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="comment"># 数据库初始化</span></span><br><span class="line">  <span class="attr">sql:</span></span><br><span class="line">    <span class="attr">init:</span></span><br><span class="line">      <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">      <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">h2</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">continue-on-error:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">schema-locations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">classpath:db/schema.sql</span></span><br><span class="line">      <span class="attr">data-locations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">classpath:db/data.sql</span></span><br><span class="line">  <span class="comment"># H2 的 Web 控制台</span></span><br><span class="line">  <span class="attr">h2:</span></span><br><span class="line">    <span class="attr">console:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">settings:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/h2-console</span></span><br><span class="line">        <span class="attr">trace:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">web-allow-others:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mybatis-Plus</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.clay.*.entity</span></span><br><span class="line">  <span class="comment"># MyBatis-Plus 配置</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">AUTO</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># MyBatis 原生配置</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">call-setters-on-nulls:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">jdbc-type-for-null:</span> <span class="string">'null'</span></span><br><span class="line">    <span class="comment"># 打印 SQL 语句</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">H2 内存数据库</p><ul><li>若希望 H2 将数据库表的数据存储在内存中（应用重启后会丢失数据），可以使用以下的数据源配置信息。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:mem:shopDb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">H2 持久化数据</p><ul><li>若希望 H2 持久化数据，可以使用以下的数据源配置信息（必须指定数据库的文件路径）。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:file:/var/database/h2/shopDb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">H2 兼容 MySQL</p><ul><li>若希望 H2 兼容 MySQL，可以使用连接参数 <code>MODE</code> 来实现。</li><li>H2 兼容多种数据库，<code>MODE</code> 参数的值可以为：DB2、Derby、HSQLDB、MSSQLServer、MySQL、Oracle、PostgreSQL。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:file:/var/database/h2/shopDb;MODE=MYSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">H2 使用混合模式</p><ul><li>若希望 H2 使用混合模式，可以使用以下的数据源配置信息（必须指定数据库的文件路径）。</li><li>值得一提的是，在默认情况下，H2 数据库同一时刻只允许一个客户端访问；设置 <code>AUTO_SERVER=TRUE</code> 表示启用混合模式，允许多个客户端同时连接同一个 H2 数据库，该参数不支持在内存中运行的 H2 数据库。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:/var/database/h2/shopDb;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">SpringBoot 不同版本之间的配置差异</p><ul><li>使用 SpringBoot 低版本时（如 <code>2.3.5</code> 版本），若希望应用在启动的时候初始化数据库，则需要使用以下的配置信息。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">continue-on-error:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 初始化模式</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># 初始化表</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:db/schema.sql</span></span><br><span class="line">    <span class="comment"># 初始化数据</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:db/data.sql</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>数据库初始化参数</th><th>说明</th></tr></thead><tbody><tr><td><code>spring.datasource.schema</code></td><td>DDL 表初始化语句，用于在应用程序启动时创建数据库表结构，默认加载 <code>schema.sql</code> 文件</td></tr><tr><td><code>spring.datasource.data</code></td><td>DML 数据插入语句，它用于在应用程序启动时向数据库表中插入一些初始化数据，默认加载 <code>data.sql</code> 文件</td></tr><tr><td><code>spring.datasource.continue-on-error</code></td><td>指定在初始化数据库时，是否遇到错误后继续执行初始化操作。默认情况下，该属性值为 <code>false</code>，即遇到错误时会停止初始化操作。特别注意，如果遇到错误后继续执行，可能会导致数据库结构不完整或数据不一致，因此请谨慎使用此属性。</td></tr><tr><td><code>spring.datasource.initialization-mode</code></td><td>数据库的初始化模式，<code>never</code> 表示从不初始化，<code>embedded</code> 表示仅初始化嵌入式的数据库，<code>always</code> 表示始终初始化数据库，默认值是 <code>embedded</code>。特别注意，如果数据库已经存在相应的表，<code>always</code> 模式下也会重新执行 SQL 初始化脚本，请谨慎使用此模式，否则可能会丢失数据。</td></tr></tbody></table><h4 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h4><table><thead><tr><th>数据源配置参数</th><th>说明</th></tr></thead><tbody><tr><td><code>spring.datasource.url</code></td><td>连接数据库的 URL</td></tr><tr><td><code>spring.datasource.username</code></td><td>数据库的用户名</td></tr><tr><td><code>spring.datasource.password</code></td><td>数据库的密码</td></tr><tr><td><code>spring.datasource.driver-class-name</code></td><td>驱动类的全限定名</td></tr><tr><td><code>spring.datasource.type</code></td><td>数据源类型（连接池）的全限定名</td></tr></tbody></table><hr><table><thead><tr><th>数据库初始化参数</th><th>说明</th></tr></thead><tbody><tr><td><code>spring.sql.init.separator</code></td><td>指定 SQL 语句的断句分隔符，默认为分号 <code>;</code>。如果 SQL 语句中包含存储过程或游标等语句，则需要将该属性更改为适当的分隔符，例如 <code>$$</code></td></tr><tr><td><code>spring.sql.init.encoding</code></td><td>指定 SQL 文件的编码方式，默认为 <code>UTF-8</code></td></tr><tr><td><code>spring.sql.init.platform</code></td><td>指定 SQL 方言，默认为所有方言通用</td></tr><tr><td><code>spring.sql.init.mode</code></td><td>数据库的初始化模式，<code>never</code> 表示从不初始化，<code>embedded</code> 表示仅初始化嵌入式的数据库，<code>always</code> 表示始终初始化数据库，默认值是 <code>embedded</code>。特别注意，如果数据库已经存在相应的表，<code>always</code> 模式下也会重新执行 SQL 初始化脚本，请谨慎使用此模式，否则可能会丢失数据。</td></tr><tr><td><code>spring.sql.init.schema-locations</code></td><td>DDL 表初始化语句，用于在应用程序启动时创建数据库表结构，默认加载 <code>schema.sql</code> 文件</td></tr><tr><td><code>spring.sql.init.data-locations</code></td><td>DML 数据插入语句，它用于在应用程序启动时向数据库表中插入一些初始化数据，默认加载 <code>data.sql</code> 文件</td></tr><tr><td><code>spring.sql.init.continue-on-error</code></td><td>指定在初始化数据库时，是否遇到错误后继续执行初始化操作。默认情况下，该属性值为 <code>false</code>，即遇到错误时会停止初始化操作。特别注意，如果遇到错误后继续执行，可能会导致数据库结构不完整或数据不一致，因此请谨慎使用此属性。</td></tr></tbody></table><hr><table><thead><tr><th>H2 数据库连接参数</th><th>说明</th></tr></thead><tbody><tr><td><code>AUTO_SERVER=TRUE</code></td><td>启用混合模式，允许多个客户端同时连接同一个 H2 数据库，该参数不支持在内存中运行的 H2 数据库</td></tr><tr><td><code>MODE=MYSQL</code></td><td>兼容 MySQL 数据库，该参数值可以为：DB2、Derby、HSQLDB、MSSQLServer、MySQL、Oracle、PostgreSQL</td></tr><tr><td><code>DB_CLOSE_ON_EXIT=FALSE</code></td><td>当虚拟机退出时，并不关闭数据库</td></tr><tr><td><code>DB_CLOSE_DELAY=-1</code></td><td>默认情况下，当最后一个连接关闭后，H2 数据库会自动关闭。为了提高数据库的性能，可以控制延迟一定的秒数后再关闭数据库。当值设置为 10，表示延迟 10 秒 再关闭数据库，当设置为 -1，表示禁用数据库自动关闭的功能。</td></tr><tr><td><code>AUTO_RECONNECT=TRUE</code></td><td>连接丢失后自动重新连接</td></tr><tr><td><code>TRACE_LEVEL_SYSTEM_OUT=1</code></td><td>输出跟踪日志到控制台的日志级别，取值 0 为 OFF，1 为 ERROR（默认值），2 为 INFO，3 为 DEBUG</td></tr><tr><td><code>TRACE_LEVEL_FILE=1</code></td><td>输出跟踪日志到文件的日志级别，取值 0 为 OFF，1 为 ERROR（默认值），2 为 INFO，3 为 DEBUG</td></tr></tbody></table><hr><table><thead><tr><th>H2 的 Web 控制台参数</th><th>说明</th></tr></thead><tbody><tr><td><code>spring.h2.console.enabled</code></td><td>启用 H2 的 Web 控制台</td></tr><tr><td><code>spring.h2.console.settings.path</code></td><td>指定 H2 的 Web 控制台的访问路径</td></tr><tr><td><code>spring.h2.console.settings.trace</code></td><td>开启 H2 的 Web 控制台的日志跟踪，方便开发调试</td></tr><tr><td><code>spring.h2.console.settings.web-allow-others</code></td><td>允许 H2 的 Web 控制台的远程访问</td></tr></tbody></table><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><h3 id="Util-类代码"><a href="#Util-类代码" class="headerlink" title="Util 类代码"></a>Util 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer code = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(T data)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Entity-类代码"><a href="#Entity-类代码" class="headerlink" title="Entity 类代码"></a>Entity 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@TableName("t_user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户主键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableId(value = "id", type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField("username")</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Mapper-类代码"><a href="#Mapper-类代码" class="headerlink" title="Mapper 类代码"></a>Mapper 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Service-类代码"><a href="#Service-类代码" class="headerlink" title="Service 类代码"></a>Service 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Result <span class="title">getByPage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Result <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Result <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">getByPage</span><span class="params">()</span> </span>{</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">"username"</span>, <span class="string">"zhhangsan"</span>);</span><br><span class="line">        <span class="keyword">this</span>.page(page, wrapper);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(page.getRecords());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">this</span>.save(user));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.baseMapper.clear();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Controller-类代码"><a href="#Controller-类代码" class="headerlink" title="Controller 类代码"></a>Controller 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping("/page")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getByPage</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> userService.getByPage();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping("/add")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> userService.add(user);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping("/clear")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> userService.clear();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="MyBatis-Plus-配置类代码"><a href="#MyBatis-Plus-配置类代码" class="headerlink" title="MyBatis-Plus 配置类代码"></a>MyBatis-Plus 配置类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan("com.clay.h2.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h2><h3 id="访问-H2-的-Web-控制台"><a href="#访问-H2-的-Web-控制台" class="headerlink" title="访问 H2 的 Web 控制台"></a>访问 H2 的 Web 控制台</h3><p>启动 SpringBoot 项目后，打开浏览器访问 <code>http://127.0.0.1:8080/h2-console</code>，若 H2 的 Web 控制台能正常访问，且连接 H2 数据库后能看到已创建的数据库表（如下图），则说明内嵌的 H2 数据库启动成功。</p><div class="admonition note"><p class="admonition-title">H2 数据库连接</p><ul><li>在浏览器页面连接 H2 数据库时，使用的账号、密码与 <code>JDBC URL</code> 都是在 SpringBoot 的配置文件 <code>application.yml</code> 中指定的。</li></ul></div><p><img data-src="../../../asset/2023/05/h2database-4.png"></p><p><img data-src="../../../asset/2023/05/h2database-1.png"></p><p><img data-src="../../../asset/2023/05/h2database-2.png"></p><h3 id="API-接口调用"><a href="#API-接口调用" class="headerlink" title="API 接口调用"></a>API 接口调用</h3><p>启动 SpringBoot 项目后，使用 PostMan 等工具测试以下接口，若能得到正常的响应结果，则说明 MyBatis-Plus 成功连接并操作 H2 数据库。</p><table><thead><tr><th>API 名称</th><th> API 地址</th><th>请求方法</th></tr></thead><tbody><tr><td>新增用户 </td><td><a href="http://127.0.0.1:8080/user/add/">http://127.0.0.1:8080/user/add/</a></td><td>POST</td></tr><tr><td> 分页查询用户 </td><td><a href="http://127.0.0.1:8080/user/page/">http://127.0.0.1:8080/user/page/</a></td><td>GET</td></tr><tr><td> 删除所有用户 </td><td><a href="http://127.0.0.1:8080/user/clear/">http://127.0.0.1:8080/user/clear/</a></td><td>DELETE</td></tr></tbody></table><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="版本兼容问题"><a href="#版本兼容问题" class="headerlink" title="版本兼容问题"></a>版本兼容问题</h3><p>当访问一个别人创建好的本地 H2 数据库文件，此时很有可能默认的 H2 版本不兼容导致 SpringBoot 应用启动报错（如下）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: Unable to read the page at position 70368748811782 [1.4.200/6]" [50000-200]</span><br></pre></td></tr></tbody></table></figure><p>解决方法是弄清楚对方本地的数据库文件是 H2 哪个版本创建的，然后手动指定 Maven 配置文件中的 H2 版本号即可（如下）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.214<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/kanpiaoxue/article/details/84925846">H2 兼容 MySQL</a></li><li><a href="https://www.cnblogs.com/GarfieldEr007/p/10198030.html">内存数据库－H2 简介与实践</a></li><li><a href="https://blog.csdn.net/qq_35760825/article/details/130421129">SpringBoot 启动时自动创建数据库表</a></li><li><a href="https://blog.csdn.net/u011047968/article/details/125999917">SpringBoot 集成 MybatisPlus、H2 纯内存数据库实战</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 SpringBoot 如何整合 MyBatis-Plus 与 H2 数据库。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>H2 数据库基础使用教程</title>
    <link href="https://www.techgrow.cn/posts/dfc4cb86.html"/>
    <id>https://www.techgrow.cn/posts/dfc4cb86.html</id>
    <published>2023-05-02T15:12:41.000Z</published>
    <updated>2023-05-02T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/dfc4cb86.html">H2 数据库基础使用教程</a></li><li><a href="/posts/afd4ab85.html">SpringBoot 整合 MyBatis-Plus 与 H2 教程</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发或学习时，有时候想编写一个数据库操作的小 Demo，但又不想利用 MySQL、Oracle 等数据库进行建库建表操作，因为只想写个小案例，感觉没必要弄个很大很麻烦的数据库。而且这个案例中的数据用完之后就不再需要了，所以也不需要进行数据的持久化操作。那有没有什么方案可以满足这个需求呢？答案是肯定的，H2 是一款内存数据库，适合在学习阶段、开发阶段调试代码使用，并不适用于生产阶段，可以满足学习与调试代码的需求。</p><span id="more"></span><h2 id="H2-基础使用"><a href="#H2-基础使用" class="headerlink" title="H2 基础使用"></a>H2 基础使用</h2><h3 id="H2-的介绍"><a href="#H2-的介绍" class="headerlink" title="H2 的介绍"></a>H2 的介绍</h3><h4 id="H2-简介"><a href="#H2-简介" class="headerlink" title="H2 简介"></a>H2 简介</h4><p><a href="https://h2database.com/">H2</a> 数据库是一个用 Java 开发的内嵌式 (内存级别) 关系型数据库，它本身只是一个类库，也就是只有一个 Jar 文件，可以直接嵌入到 Java 项目中。H2 数据库又被称为内存数据库，因为它支持在内存中创建数据库和表。所以如果使用 H2 数据库的内存模式，那么创建的数据库和表都只是保存在内存中，一旦服务器重启，那么内存中的数据库和表将不存在了。</p><h4 id="H2-优点"><a href="#H2-优点" class="headerlink" title="H2 优点"></a>H2 优点</h4><ul><li>纯 Java 编写，不受平台的限制；</li><li>只有一个 Jar 文件，适合作为嵌入式数据库使用；</li><li>H2 提供了一个十分方便的 Web 控制台用于操作和管理数据库；</li><li>功能完整，支持标准 SQL 和 JDBC，麻雀虽小五脏俱全；</li><li>支持内嵌模式、服务器模式和集群；</li></ul><h4 id="H2-用途"><a href="#H2-用途" class="headerlink" title="H2 用途"></a>H2 用途</h4><p>H2 主要有如下三个用途：</p><ul><li>最常使用的用途就在于可以同应用程序一起打包发布，可以非常方便地存储少量的结构化数据；</li><li>可以用于单元测试，H2 启动速度快，而且可以关闭持久化功能，每一个用例执行完随即还原到初始状态；</li><li>可以作为缓存，即当内存数据库使用，作为 NoSQL 的一个补充。当某些场景下数据模型必须为关系型，可以拿它充当 Memcached 使用，作为后端 MySQL/Oracle 的一个缓冲层，缓存一些不经常变化但需要频繁访问的数据，比如字典表、权限表等。</li></ul><h4 id="H2-与其他数据库对比"><a href="#H2-与其他数据库对比" class="headerlink" title="H2 与其他数据库对比"></a>H2 与其他数据库对比</h4><div class="admonition note"><p class="admonition-title">提示</p><p>完整的数据库对比图表请点击 <a href="../../../asset/2023/05/h2-study-5.jpg">这里</a> 查看。</p></div><p><img data-src="../../../asset/2023/05/h2-study-4.png"></p><h3 id="H2-的-3-种运行模式"><a href="#H2-的-3-种运行模式" class="headerlink" title="H2 的 3 种运行模式"></a>H2 的 3 种运行模式</h3><h4 id="内嵌模式-Embedded-Mode"><a href="#内嵌模式-Embedded-Mode" class="headerlink" title="内嵌模式 (Embedded Mode)"></a>内嵌模式 (Embedded Mode)</h4><p>使用 JDBC 的本地连接。在内嵌模式下，应用程序和 H2 数据库处在同一个 JVM 中，应用程序通过 JDBC 连接数据库。内嵌模式可以实现持久化，但同一时刻只能有一个客户端连接数据库。内嵌模式是最快也是最容易的连接方式，性能也比较好。缺点是数据库无论什么时候，都只能在一个虚拟机（和类加载器）中打开。内嵌模式与所有模式一样，支持持久化和内存数据库。对并发打开数据库的数量或者打开连接的数量没有限制。</p><p><img data-src="../../../asset/2023/05/h2-study-1.png"></p><h4 id="服务器模式-Server-Mode"><a href="#服务器模式-Server-Mode" class="headerlink" title="服务器模式 (Server Mode)"></a>服务器模式 (Server Mode)</h4><p>使用 JDBC 或 ODBC 在 TCP/IP 基础上的远程连接。使用服务器模式和内嵌模式一样，只不过它可以跑在另一个进程里。服务器模式比内嵌模式慢，因为所有数据都通过 TCP/IP 协议传输。与所有模式一样，支持持久化和内存数据库。对每个数据库服务器并发打开的数据库数量或者打开连接的数量没有限制。</p><p><img data-src="../../../asset/2023/05/h2-study-2.png"></p><h4 id="混合模式-Mixed-Mode"><a href="#混合模式-Mixed-Mode" class="headerlink" title="混合模式 (Mixed Mode)"></a>混合模式 (Mixed Mode)</h4><p>混合模式是内嵌模式和服务器模式的组合。混合模式集合了内嵌模式和服务模式的优点，使得数据库的性能和内嵌模式一样高，同时又支持多个应用同时连接同一个数据库。第一个应用通过内嵌模式与数据库建立连接，同时也作为一个独立的服务器启动，而其他的应用 (运行在不同的进程或是虚拟机上) 可以同时访问同样的数据库。第一个应用程序的本地连接与内嵌模式的连接性能一样快，而其它应用的连接性能理论上会差一点。H2 服务器可以从应用程序内（使用 H2 服务器的 API）启动或停止，或自动（自动混合模式）。当使用自动混合模式时，所有想要连接到数据库的客户端（无论是本地连接还是远程连接）都可以使用完全相同的数据库 URL 来实现连接。<strong>值得注意的是，H2 在混合模式下不支持内存数据库，即数据库必须持久化。</strong></p><p><img data-src="../../../asset/2023/05/h2-study-3.png"></p><h3 id="H2-的-3-种连接方式"><a href="#H2-的-3-种连接方式" class="headerlink" title="H2 的 3 种连接方式"></a>H2 的 3 种连接方式</h3><ul><li>第一种连接方式，以内嵌模式 (内存) 连接 H2 数据库。H2 支持在内存中创建数据库和表。特别注意，如果使用 H2 数据库的内存模式，那么创建的数据库和表都只是保存在内存中，一旦服务器重启，那么内存中的数据库和表就不存在了。</li></ul><table><thead><tr><th>连接语法</th><th>连接示例</th><th>说明</th></tr></thead><tbody><tr><td><code>jdbc:h2:mem:&lt;databaseName&gt;</code></td><td><code>jdbc:h2:mem:testDb </code></td><td>数据库的数据只存在内存中</td></tr></tbody></table><ul><li>第二种连接方式，以内嵌模式 (本地文件) 连接 H2 数据库。这种连接方式在默认情况下，同一时刻只允许有一个客户端连接到 H2 数据库。当有客户端连接到 H2 数据库之后，此时数据库文件就会被锁定，那么其他客户端就无法再建立连接。</li></ul><table><thead><tr><th>连接语法</th><th>连接示例</th><th>说明</th></tr></thead><tbody><tr><td><code>jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;</code></td><td><code>jdbc:h2:~/testDb</code>，连接位于当前用户目录下的 <code>testDb</code> 数据库 <br> <code>jdbc:h2:file:./testDb</code>，连接位于当前程序所在目录下的 <code>testDb</code> 数据库 <br> <code>jdbc:h2:file:/h2/data/testDb</code>，适用于 Linux 系统 <br> <code>jdbc:h2:file:E:/h2/data/testDb</code>，适用于 Windows 系统</td><td>会将数据库的数据持久化到文件中</td></tr><tr><td><code>jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;;AUTO_SERVER=TRUE</code></td><td><code>jdbc:h2:~/testDb;AUTO_SERVER=TRUE</code> <br> <code>jdbc:h2:file:./testDb;AUTO_SERVER=TRUE</code> <br> <code>jdbc:h2:file:/h2/data/testDb;AUTO_SERVER=TRUE</code> <br> <code>jdbc:h2:file:E:/h2/data/testDb;AUTO_SERVER=TRUE</code></td><td>启用混合模式，允许多个客户端同时连接同一个 H2 数据库，该参数不支持在内存中运行的 H2 数据库</td></tr></tbody></table><ul><li>第三种连接方式，使用支持 TCP/IP 的服务器模式 (远程连接) 连接 H2 数据库。这种连接方式和其他数据库的连接方式类似，是基于 Service 的形式进行连接的，因此允许多个客户端同时连接到 H2 数据库。</li></ul><table><thead><tr><th>连接语法</th><th>连接示例</th><th>说明</th></tr></thead><tbody><tr><td><code>jdbc:h2:tcp://&lt;server&gt;[:&lt;port&gt;]/[&lt;path&gt;]&lt;databaseName&gt;</code></td><td><code>jdbc:h2:tcp://localhost/~/testDb</code></td><td></td></tr><tr><td><code>jdbc:h2:ssl://&lt;server&gt;[:&lt;port&gt;]/[&lt;path&gt;]&lt;databaseName&gt;</code></td><td><code>jdbc:h2:ssl://localhost/~/testDb</code></td><td>支持 SSL 连接</td></tr></tbody></table><h2 id="安装-H2-的-Web-控制台"><a href="#安装-H2-的-Web-控制台" class="headerlink" title="安装 H2 的 Web 控制台"></a>安装 H2 的 Web 控制台</h2><p>H2 的 Web 控制台是一个基于浏览器的 GUI 数据库管理工具，可以很方便地管理 H2 数据库。它的作用就相当于 PhpMyAdmin，一般情况下可以在开发环境启动 H2 的 Web 控制台。</p><h3 id="H2-数据库下载地址"><a href="#H2-数据库下载地址" class="headerlink" title="H2 数据库下载地址"></a>H2 数据库下载地址</h3><p>可以在官网上选择一个版本进行下载，可以下载安装器或者直接下载软件包。这里建议选择 <code>All Platforms</code> 版本，因为解压文件后，既可用于 Windows 平台，也可用于 Linux 平台 (如下图所示)。</p><div class="admonition note"><p class="admonition-title">下载地址</p><ul><li><a href="http://www.h2database.com/html/main.html">http://www.h2database.com/html/main.html</a></li><li><a href="http://www.h2database.com/html/download.html">http://www.h2database.com/html/download.html</a></li><li><a href="http://www.h2database.com/html/download-archive.html">http://www.h2database.com/html/download-archive.html</a></li></ul></div><p><img data-src="../../../asset/2023/05/h2-study-6.png"></p><h3 id="H2-软件包目录结构"><a href="#H2-软件包目录结构" class="headerlink" title="H2 软件包目录结构"></a>H2 软件包目录结构</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">h2</span><br><span class="line">　|---bin</span><br><span class="line">　| |---h2-2.1.214.jar　 //H2数据库的Jar包（驱动也在里面）</span><br><span class="line">　| |---h2.bat　　 //Windows控制台启动脚本</span><br><span class="line">　| |---h2.sh　　 //Linux控制台启动脚本</span><br><span class="line">　| |---h2w.bat　　//Windows控制台启动脚本（不带黑屏窗口）</span><br><span class="line">　|---docs　　 //H2数据库的帮助文档（内有H2数据库的使用手册）</span><br><span class="line">　|---service　　 //通过Wrapper包装成服务</span><br><span class="line">　|---src　　 //H2数据库的源代码</span><br><span class="line">　|---build.bat　 //Windows构建脚本</span><br><span class="line">　|---build.sh　　//Linux构建脚本</span><br></pre></td></tr></tbody></table></figure><h3 id="启动-H2-的-Web-控制台"><a href="#启动-H2-的-Web-控制台" class="headerlink" title="启动 H2 的 Web 控制台"></a>启动 H2 的 Web 控制台</h3><h4 id="Linux-平台启动"><a href="#Linux-平台启动" class="headerlink" title="Linux 平台启动"></a>Linux 平台启动</h4><p>在 Linux 环境下，首先用 <code>unzip</code> 命令解压下载到的文件，然后在 <code>bin</code> 目录下，执行 <code>h2.sh</code> 来启动 H2 的 Web 控制台。值得一提的是，一般不建议这样直接启动，因为最好是带一些命令参数来启动 Web 控制台。</p><table><thead><tr><th>命令参数</th><th>说明</th></tr></thead><tbody><tr><td> org.h2.tools.Shell</td><td> 以终端方式启动 H2 的 Web 控制台，需要根据提示输入 DRIVER CLASS、URL、USER NAME、PASSWORD 等连接信息。以终端方式启动后，可以执行数据库的备份、还原、SQL 导出，SQL 导入等操作，详细教程请看 <a href="https://segmentfault.com/a/1190000007001959">这里</a></td></tr><tr><td> org.h2.tools.Console</td><td> 启动 H2 的 Web 控制台</td></tr><tr><td> org.h2.tools.Server</td><td> 以服务器模式启动 H2 的 Web 控制台</td></tr><tr><td><code>-tcpAllowOthers</code></td><td>允许远程机器通过 TCP 方式访问数据库</td></tr><tr><td><code>-webAllowOthers</code></td><td>允许远程机器访问 H2 的 Web 控制台</td></tr><tr><td><code>-webPort 8082</code></td><td>指定 Web 控制台的访问端口，默认是 <code>8082</code></td></tr><tr><td><code>-webSSL</code></td><td>启用 SSL 加密连接</td></tr></tbody></table><p>在 <code>bin</code> 目录下创建新的启动脚本（如 <code>h2_server.sh</code>），内容如下（三种启动方式可以任意选择一种）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">dir=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line">java -cp <span class="string">"<span class="variable">$dir</span>/h2-2.1.214.jar:<span class="variable">$H2DRIVERS</span>:<span class="variable">$CLASSPATH</span>"</span> org.h2.tools.Shell <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">dir=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line">java -cp <span class="string">"<span class="variable">$dir</span>/h2-2.1.214.jar:<span class="variable">$H2DRIVERS</span>:<span class="variable">$CLASSPATH</span>"</span> org.h2.tools.Console -webAllowOthers -webPort 8082 <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">dir=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line">java -cp <span class="string">"<span class="variable">$dir</span>/h2-2.1.214.jar:<span class="variable">$H2DRIVERS</span>:<span class="variable">$CLASSPATH</span>"</span> org.h2.tools.Server -tcpAllowOthers -webAllowOthers -webPort 8082 <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></tbody></table></figure><p>启动数据库服务</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新的启动脚本授权</span></span><br><span class="line">$ chmod +x h2_server.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前台运行新的启动脚本</span></span><br><span class="line">$ bash h2_server.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者后台运行新的启动脚本</span></span><br><span class="line">$ nohup h2_server.sh &amp;</span><br></pre></td></tr></tbody></table></figure><p>正常启动 Web 控制台（服务器模式）后，终端输出的日志信息如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Web Console server running at http://192.168.1.106:8082 (others can connect)</span><br><span class="line">TCP server running at tcp://192.168.1.106:9092 (others can connect)</span><br><span class="line">PG server running at pg://192.168.1.106:5435 (only local connections)</span><br></pre></td></tr></tbody></table></figure><h4 id="Windows-平台启动"><a href="#Windows-平台启动" class="headerlink" title="Windows 平台启动"></a>Windows 平台启动</h4><p>进入到 H2 解压后的 <code>bin</code> 目录下，点击 <code>h2.bat</code> 或者 <code>h2w.bat</code>，直接运行软件。值得一提的是，点击 <code>h2w.bat</code> 后，此方式会在后台静默运行 H2 的 Web 控制台。</p><h3 id="访问-H2-的-Web-控制台"><a href="#访问-H2-的-Web-控制台" class="headerlink" title="访问 H2 的 Web 控制台"></a>访问 H2 的 Web 控制台</h3><p>使用浏览器访问 H2 的 Web 控制台，URL 是 <code>http://127.0.0.1:8082</code>，也可以使用本机的 IP 地址（例如 <code>http://192.168.1.106:8082</code>）</p><p><img data-src="../../../asset/2023/05/h2-study-7.png"></p><h2 id="使用-H2-的数据库"><a href="#使用-H2-的数据库" class="headerlink" title="使用 H2 的数据库"></a>使用 H2 的数据库</h2><h3 id="创建-H2-数据库"><a href="#创建-H2-数据库" class="headerlink" title="创建 H2 数据库"></a>创建 H2 数据库</h3><p>H2 成功启动后，在系统桌面底部的状态栏右下角会有一个黄色小图标（如下图红色箭头所指的位置）</p><p><img data-src="../../../asset/2023/05/h2-study-8.png"></p><p>可以在桌面状态栏右下角的黄色小图标处，右键点击 H2 控制台的图标，选择 <code>Create a new database...</code>，即可以创建一个新的数据库</p><p><img data-src="../../../asset/2023/05/h2-study-9.png"></p><p>出现如下窗口后，填写数据库文件的存放路径（例如 <code>~/demo</code>，支持使用相对路径或者绝对路径）、访问数据库的用户名和密码，点击 <code>Create</code> 按钮，则会在用户目录下创建对应的数据库文件（例如 <code>demo.mv.db</code>）</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li><ol><li>H2 数据库创建后，可能还会看到一个 <code>demo.trace.db</code> 文件，它是 H2 数据库的错误日志文件。</li></ol></li><li><ol start="2"><li>H2 数据库的文件名称 <code>demo.mv.db</code>，之所以里面有 <code>mv</code>，这是因为高版本的 H2 存储引擎默认为 <code>mvStore</code>。</li></ol></li></ul></div><p><img data-src="../../../asset/2023/05/h2-study-10.png"></p><h3 id="连接-H2-数据库"><a href="#连接-H2-数据库" class="headerlink" title="连接 H2 数据库"></a>连接 H2 数据库</h3><div class="admonition note"><p class="admonition-title">提示</p><ul><li>H2 数据库连接成功后，会自动在用户目录下创建 <code>.h2.server.properties</code> 配置文件，用于保存数据库的历史连接信息。</li></ul></div><p>用鼠标左键点击在桌面状态栏右下角的黄色小图标，此时会在浏览器打开 H2 的 Web 控制台界面（默认地址是 <code>http://127.0.0.1:8082</code>），填写 <code>JDBC URL</code>、用户名和密码后，点击 <code>Connect</code> 按钮就可以连接 H2 数据库</p><p><img data-src="../../../asset/2023/05/h2-study-11.png"></p><p>H2 数据库成功连接后，就会自动进入数据库的管理界面</p><p><img data-src="../../../asset/2023/05/h2-study-12.png"></p><p>输入 <code>show databases;</code> 和 <code>show tables;</code> SQL 语句，可以显示 H2 默认的数据库和表名</p><p><img data-src="../../../asset/2023/05/h2-study-13.png"></p><h2 id="使用-H2-的-Web-控制台"><a href="#使用-H2-的-Web-控制台" class="headerlink" title="使用 H2 的 Web 控制台"></a>使用 H2 的 Web 控制台</h2><h3 id="设置超级管理员密码"><a href="#设置超级管理员密码" class="headerlink" title="设置超级管理员密码"></a>设置超级管理员密码</h3><p>H2 数据库连接成功后，会自动在用户目录下创建 <code>.h2.server.properties</code> 配置文件（如下），用于保存数据库的历史连接信息。因此，可以手动编辑 <code>.h2.server.properties</code> 配置文件，然后添加 <code>webAdminPassword</code> 参数来指定 H2 的超级管理员密码。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>webAllowOthers</code></td><td>允许远程机器访问 H2 的 Web 控制台</td></tr><tr><td><code>webPort</code></td><td>指定 Web 控制台的访问端口，默认是 <code>8082</code></td></tr><tr><td><code>webSSL</code></td><td>启用 SSL 加密连接</td></tr><tr><td><code>webAdminPassword</code></td><td>指定超级管理员密码 </td></tr></tbody></table><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">webSSL=false</span><br><span class="line">webAdminPassword=admin</span><br><span class="line">webAllowOthers=true</span><br><span class="line">webPort=8082</span><br><span class="line">10=Generic DB2|com.ibm.db2.jcc.DB2Driver|jdbc\:db2\://localhost/test|</span><br><span class="line">11=Generic Oracle|oracle.jdbc.driver.OracleDriver|jdbc\:oracle\:thin\:@localhost\:1521\:XE|sa</span><br><span class="line">12=Generic MS SQL Server 2000|com.microsoft.jdbc.sqlserver.SQLServerDriver|jdbc\:microsoft\:sqlserver\://localhost\:1433;DatabaseName\=sqlexpress|sa</span><br><span class="line">13=Generic MS SQL Server 2005|com.microsoft.sqlserver.jdbc.SQLServerDriver|jdbc\:sqlserver\://localhost;DatabaseName\=test|sa</span><br><span class="line">14=Generic PostgreSQL|org.postgresql.Driver|jdbc\:postgresql\:test|</span><br><span class="line">15=Generic MySQL|com.mysql.cj.jdbc.Driver|jdbc\:mysql\://localhost\:3306/test|</span><br><span class="line">16=Generic MariaDB|org.mariadb.jdbc.Driver|jdbc\:mariadb\://localhost\:3306/test|</span><br><span class="line">17=Generic HSQLDB|org.hsqldb.jdbcDriver|jdbc\:hsqldb\:test;hsqldb.default_table_type\=cached|sa</span><br><span class="line">18=Generic Derby (Server)|org.apache.derby.client.ClientAutoloadedDriver|jdbc\:derby\://localhost\:1527/test;create\=true|sa</span><br><span class="line">19=Generic Derby (Embedded)|org.apache.derby.iapi.jdbc.AutoloadedDriver|jdbc\:derby\:test;create\=true|sa</span><br><span class="line">0=Generic JNDI Data Source|javax.naming.InitialContext|java\:comp/env/jdbc/Test|sa</span><br><span class="line">1=Generic Teradata|com.teradata.jdbc.TeraDriver|jdbc\:teradata\://whomooz/|</span><br><span class="line">2=Generic Snowflake|com.snowflake.client.jdbc.SnowflakeDriver|jdbc\:snowflake\://accountName.snowflakecomputing.com|</span><br><span class="line">3=Generic Redshift|com.amazon.redshift.jdbc42.Driver|jdbc\:redshift\://endpoint\:5439/database|</span><br><span class="line">4=Generic Impala|org.cloudera.impala.jdbc41.Driver|jdbc\:impala\://clustername\:21050/default|</span><br><span class="line">5=Generic Hive 2|org.apache.hive.jdbc.HiveDriver|jdbc\:hive2\://clustername\:10000/default|</span><br><span class="line">6=Generic Hive|org.apache.hadoop.hive.jdbc.HiveDriver|jdbc\:hive\://clustername\:10000/default|</span><br><span class="line">7=Generic Azure SQL|com.microsoft.sqlserver.jdbc.SQLServerDriver|jdbc\:sqlserver\://name.database.windows.net\:1433|</span><br><span class="line">8=Generic Firebird Server|org.firebirdsql.jdbc.FBDriver|jdbc\:firebirdsql\:localhost\:c\:/temp/firebird/test|sysdba</span><br><span class="line">9=Generic SQLite|org.sqlite.JDBC|jdbc\:sqlite\:test|sa</span><br><span class="line">20=Generic H2 (Server)|org.h2.Driver|jdbc\:h2\:tcp\://localhost/~/test|sa</span><br><span class="line">21=Generic H2 (Embedded)|org.h2.Driver|jdbc\:h2\:~/demo|root</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>若没有找到 <code>.h2.server.properties</code> 文件，以 Web-Server 方式首次启动 H2 后，浏览器打开 Web 控制台，点击 <code>Save</code> 按钮后就会自动创建对应的配置文件。</p></div><h3 id="使用-H2-的配置界面"><a href="#使用-H2-的配置界面" class="headerlink" title="使用 H2 的配置界面"></a>使用 H2 的配置界面</h3><p>使用浏览器访问 H2 的 Web 控制台，然后点击 <code>Preferences</code>，填写超级管理员密码后，就可以进入 H2 的配置界面</p><p><img data-src="../../../asset/2023/05/h2-study-14.png"></p><p>进入到 H2 的配置界面后，可以设置远程访问、端口号等信息</p><p><img data-src="../../../asset/2023/05/h2-study-15.png"></p><h3 id="使用-H2-的工具界面"><a href="#使用-H2-的工具界面" class="headerlink" title="使用 H2 的工具界面"></a>使用 H2 的工具界面</h3><p>使用浏览器访问 H2 的 Web 控制台，然后点击 <code>Tools</code>，填写超级管理员密码后，就可以进入 H2 的工具界面</p><p><img data-src="../../../asset/2023/05/h2-study-17.png"></p><p>进入 H2 的工具界面后，可以对 H2 数据库进行备份、还原、恢复、集群、运行脚本、删除文件等操作</p><p><img data-src="../../../asset/2023/05/h2-study-16.png"></p><h2 id="H2-进阶使用"><a href="#H2-进阶使用" class="headerlink" title="H2 进阶使用"></a>H2 进阶使用</h2><h3 id="第三方软件连接-H2-数据库"><a href="#第三方软件连接-H2-数据库" class="headerlink" title="第三方软件连接 H2 数据库"></a>第三方软件连接 H2 数据库</h3><p>H2 除了可以使用自身的 Web 控制台管理数据库之外，还可以使用 Navicat、DBeaver 这样的数据库软件来管理。这里以开源的 DBeaver 数据库管理软件举例，介绍如何使用第三方软件连接 H2 数据库。</p><ul><li>在 DBeaver 的主界面新建数据库连接，数据库类型选择 <code>H2 Embedded V.2</code>，即使用内嵌模式连接 H2 数据库</li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><ul><li>内嵌模式只允许有一个客户端连接 H2 数据库，可以简单理解为只允许有一个应用访问数据库文件。</li><li>如果 H2 数据库已经以服务器模式启动了，那么 DBeaver 的数据库类型可以选择 <code>H2 Server</code>，服务器模式支持多个客户端同时连接 H2 数据库。</li></ul></div><p><img data-src="../../../asset/2023/05/h2-study-19.png"></p><ul><li>填写 <code>JDBC URL</code>、用户名和密码，然后点击 <code>测试连接</code> 按钮或者 <code>完成</code> 按钮即可</li></ul><p><img data-src="../../../asset/2023/05/h2-study-20.png"></p><ul><li>成功连接 H2 数据库后，就可以看到之前创建的数据库表</li></ul><p><img data-src="../../../asset/2023/05/h2-study-21.png"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>以下表格是 H2 数据库在不同模式下的 URL 连接字串，参考自：<a href="https://www.cnblogs.com/cnjavahome/p/8995650.html">H2 数据库使用简介</a></p><p><img data-src="../../../asset/2023/05/h2-study-18.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000007001959">H2 使用指南</a></li><li><a href="https://www.cnblogs.com/cnjavahome/p/8995650.html">H2 数据库使用简介</a></li><li><a href="https://zhuanlan.zhihu.com/p/509877891">H2 内存数据库使用教程详解</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 H2 数据库的基础使用教程，包括安装使用 Web 控制台、连接数据库等。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring 注解驱动开发随笔</title>
    <link href="https://www.techgrow.cn/posts/542a9813.html"/>
    <id>https://www.techgrow.cn/posts/542a9813.html</id>
    <published>2023-04-22T15:12:41.000Z</published>
    <updated>2023-04-22T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->]]></content>
    
    
    <summary type="html">本文主要记录 Spring 注解驱动开发的笔记。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>XXL-JOB 入门教程之二</title>
    <link href="https://www.techgrow.cn/posts/972c1f90.html"/>
    <id>https://www.techgrow.cn/posts/972c1f90.html</id>
    <published>2023-03-27T15:18:34.000Z</published>
    <updated>2023-03-27T15:18:34.000Z</updated>
    
    <content type="html"><![CDATA[<!-- tor --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/acac3139.html">XXL-JOB 入门教程之一</a></li><li><a href="/posts/972c1f90.html">XXL-JOB 入门教程之二</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://www.xuxueli.com/page/projects.html">XXL 官方开源社区</a></li><li><a href="https://www.xuxueli.com/xxl-job">XXL-JOB 官方文档</a></li><li><a href="https://github.com/xuxueli/xxl-job">XXL-JOB 官方项目</a></li></ul><span id="more"></span><h3 id="体系架构"><a href="#体系架构" class="headerlink" title="体系架构"></a>体系架构</h3><p>XXL-JOB 框架中包含了两个核心模块：调度中心和执行器，其中调度中心（服务端）主要负责任务的调度，而执行器（客户端）负责任务的执行。<code>v2.1.0</code> 版本的架构图如下：</p><p><img data-src="../../../asset/2023/03/xxl-job-arch.png"></p><h3 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h3><table><thead><tr><th>术语</th><th>描述</th></tr></thead><tbody><tr><td>执行器</td><td>真正执行调度任务的应用（客户端）</td></tr><tr><td>路由策略</td><td>路由的选择方式，即调度任务的分配规则，使用分片广播时，需要结合代码使用</td></tr><tr><td> Cron</td><td> 定时任务的触发时间规则</td></tr><tr><td>运行模式</td><td> - Bean：执行器要执行指定的 Bean 对象的方式<br> - GLUE (Java)：以源码的方式来维护调度中心，相当于就是将调度中心变成一个执行器，每次调用运行指定的脚本</td></tr><tr><td> JobHandler</td><td> 执行器执行的业务逻辑（调度任务）</td></tr><tr><td>子任务 ID</td><td> 当前任务执行完之后，下一个所要执行任务的 ID（支持多个子任务）</td></tr><tr><td>任务超时时间</td><td>当执行任务的时间大于规定时间时，就算任务超时</td></tr><tr><td>阻塞处理策略</td><td>任务调度过于密集，执行器来不及处理时的处理策略，一共有三种阻塞处理策略<br>- 单机串行：按顺序一个一个地执行完任务<br> - 丢弃后续调度：执行前一个任务，后面的调度任务全部丢弃，直到前一个任务执行完成<br> - 覆盖之前调度：后一个任务去覆盖前一个任务，前一个任务不再执行<br></td></tr></tbody></table><h3 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h3><p>本文的案例代码都可以在 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/xxl-job/xxl-job-study">这里</a> 下载得到，直接作为 Maven 项目导入到 IDEA 或者 Eclipse 即可。</p><h2 id="XXL-JOB-介绍"><a href="#XXL-JOB-介绍" class="headerlink" title="XXL-JOB 介绍"></a>XXL-JOB 介绍</h2><h3 id="调度中心的核心模块"><a href="#调度中心的核心模块" class="headerlink" title="调度中心的核心模块"></a>调度中心的核心模块</h3><table><thead><tr><th>模块名称</th><th>说明</th></tr></thead><tbody><tr><td>定时模块 Scheduled</td><td> 定时去获取任务调度的数据，数据存储在数据库中</td></tr><tr><td>路由模块 Route</td><td> 一定的路由规则，负责计算出要指定的执行器</td></tr><tr><td>远程调用 RPC</td><td> 通过远程调用执行执行器，将远程调用的信息发给执行器，信息包括哪个执行器，哪个任务</td></tr></tbody></table><blockquote><p>提示：执行器（客户端）中也有一个 RPC 用于通信，负责接收任务。</p></blockquote><h3 id="调度中心的执行流程"><a href="#调度中心的执行流程" class="headerlink" title="调度中心的执行流程"></a>调度中心的执行流程</h3><ul><li>1、启动服务，将执行器注册到调度中心（注意每 30s 重新注册到调度中心）</li><li>2、在数据库中存储着执行器的数据，也可以手动地去录入执行器</li><li> 3、配置调度中心、定时调度、配置路由规则</li><li> 4、远程调用指定的执行器实例，找到对应的任务进行调用</li></ul><h3 id="调度中心的设计思想"><a href="#调度中心的设计思想" class="headerlink" title="调度中心的设计思想"></a>调度中心的设计思想</h3><ul><li>将调度行为抽象形成 “调度中心” 公共平台，而平台自身并不承担业务逻辑，” 调度中心” 负责发起调度请求。</li><li>将任务抽象成分散的 JobHandler，交由 “执行器” 统一管理，” 执行器” 负责接收调度请求并执行对应的 JobHandler 中业务逻辑。因此，” 调度” 和 “任务” 两部分可以相互解耦，提高系统整体稳定性和扩展性。</li><li>调度模块（调度中心）：负责管理调度信息，按照调度配置发出调度请求，自身不承担业务代码。调度系统与任务解耦，提高了系统可用性和稳定性，同时调度系统性能不再受限于任务模块。</li><li>支持可视化、简单且动态的管理调度信息，包括任务新建、更新、删除、GLUE 开发和任务报警等，所有上述操作都会实时生效，同时支持监控调度结果以及执行日志，支持执行器 Failover。</li><li>执行模块（执行器）：负责接收调度请求并执行任务逻辑，任务模块专注于任务的执行等操作，开发和维护更简单和高效；接收 “调度中心” 的执行请求、终止请求和日志请求等。</li></ul><blockquote><p>提示：调度中心大体的架构设计图可查看 <a href="../../../asset/2023/03/xxl-job-arch2.png">这里</a>。</p></blockquote><h2 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h2><h3 id="创建-POM-模块"><a href="#创建-POM-模块" class="headerlink" title="创建 POM 模块"></a>创建 POM 模块</h3><p>为了后续方便管理多个子模块，这里先创建 Maven 的 POM 模块 <code>xxl-job-study</code>，XML 配置文件的内容如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.clay<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxl-job-executor-spring<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxl-job-executor-springboot<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="基于-Spring-开发"><a href="#基于-Spring-开发" class="headerlink" title="基于 Spring 开发"></a>基于 Spring 开发</h3><h4 id="框架版本说明"><a href="#框架版本说明" class="headerlink" title="框架版本说明"></a>框架版本说明</h4><table><thead><tr><th>框架</th><th>版本</th></tr></thead><tbody><tr><td> Spring</td><td>5.3.23</td></tr><tr><td>XXL-JOB</td><td>2.4.0</td></tr></tbody></table><h4 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h4><p><img data-src="../../../asset/2023/03/xxl-job-9.png"></p><h4 id="创建-Maven-子模块"><a href="#创建-Maven-子模块" class="headerlink" title="创建 Maven 子模块"></a>创建 Maven 子模块</h4><p>在 Maven 的 POM 模块中创建子模块 <code>xxl-job-executor-spring</code>，XML 配置文件的内容如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.clay<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-executor-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- xxl-job-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-mvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- logback --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.logback-extensions<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-ext-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archiveClasses</span>&gt;</span>false<span class="tag">&lt;/<span class="name">archiveClasses</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="创建项目的配置文件"><a href="#创建项目的配置文件" class="headerlink" title="创建项目的配置文件"></a>创建项目的配置文件</h4><h5 id="创建执行器的配置文件"><a href="#创建执行器的配置文件" class="headerlink" title="创建执行器的配置文件"></a>创建执行器的配置文件</h5><p>在子模块的 <code>/src/main/resources</code> 目录下创建 <code>xxl-job-executor.properties</code> 配置文件。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 调度中心部署根地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；</span></span><br><span class="line"><span class="meta">xxl.job.admin.addresses</span>=<span class="string">http://127.0.0.1:8080/xxl-job-admin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 执行器通讯TOKEN</span></span><br><span class="line"><span class="meta">xxl.job.accessToken</span>=<span class="string">default_token</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span><br><span class="line"><span class="meta">xxl.job.executor.appname</span>=<span class="string">xxl-job-executor-spring</span></span><br><span class="line"><span class="comment">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span><br><span class="line"><span class="meta">xxl.job.executor.address</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；</span></span><br><span class="line"><span class="meta">xxl.job.executor.ip</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span></span><br><span class="line"><span class="meta">xxl.job.executor.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="comment">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logpath</span>=<span class="string">/data/applogs/xxl-job/jobhandler</span></span><br><span class="line"><span class="comment">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logretentiondays</span>=<span class="string">30</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td> xxl.job.executor.appname</td><td> 执行器的名称，建议使用 Maven 模块的名称</td></tr><tr><td> xxl.job.executor.address</td><td> 执行器的注册地址，<strong>使用新版本（如 v2.4.0）时，必须带 HTTP/HTTPS 协议头</strong>，例如 <code>http://127.0.0.1:9999</code></td></tr><tr><td>xxl.job.accessToken</td><td>XXL-JOB 的访问令牌，只有调度中心和执行器双方的 <code>AccessToken</code> 互相匹配才允许通讯</td></tr></tbody></table><div class="admonition warning"><p class="admonition-title">特别注意</p><p>XXL-JOB 从 <code>v.2.3.1</code> 版本开始，调度通讯默认启用 <code>AccessToken</code>，且默认的 <code>AccessToken</code> 是 <code>default_token</code>。</p></div><h5 id="创建-Spring-的配置文件"><a href="#创建-Spring-的配置文件" class="headerlink" title="创建 Spring 的配置文件"></a>创建 Spring 的配置文件</h5><p>在子模块的 <code>/src/main/resources</code> 目录下创建 <code>applicationcontext-xxl-job.xml</code> 配置文件，这里主要需要指定 JobHandler 的扫描路径。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 读取执行器的配置信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.PropertySourcesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:xxl-job-executor.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置01、JobHandler 扫描路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.clay.job.executor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置02、执行器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"xxlJobSpringExecutor"</span> <span class="attr">class</span>=<span class="string">"com.xxl.job.core.executor.impl.XxlJobSpringExecutor"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 执行器注册中心地址[选填]，为空则关闭自动注册 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminAddresses"</span> <span class="attr">value</span>=<span class="string">"${xxl.job.admin.addresses}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 访问令牌[选填]，非空则进行匹配校验 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accessToken"</span> <span class="attr">value</span>=<span class="string">"${xxl.job.accessToken}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 执行器AppName[选填]，为空则关闭自动注册 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appname"</span> <span class="attr">value</span>=<span class="string">"${xxl.job.executor.appname}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注册地址[选填]，优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"${xxl.job.executor.address}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 执行器IP[选填]，为空则自动获取 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ip"</span> <span class="attr">value</span>=<span class="string">"${xxl.job.executor.ip}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 执行器端口号[选填]，小于等于0则自动获取 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"${xxl.job.executor.port}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 执行器日志路径[选填]，为空则使用默认路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logPath"</span> <span class="attr">value</span>=<span class="string">"${xxl.job.executor.logpath}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志保存天数[选填]，值大于3时生效 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logRetentionDays"</span> <span class="attr">value</span>=<span class="string">"${xxl.job.executor.logretentiondays}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="创建-Logback-的配置文件"><a href="#创建-Logback-的配置文件" class="headerlink" title="创建 Logback 的配置文件"></a>创建 Logback 的配置文件</h5><p>在子模块的 <code>/src/main/resources</code> 目录下创建 <code>logback.xml</code> 配置文件。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"1 seconds"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"/data/applogs/xxl-job/xxl-job-executor-spring.log"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}.%d{yyyy-MM-dd}.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date %level [%thread] %logger{36} [%file : %line] %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="创建-Web-容器的配置文件"><a href="#创建-Web-容器的配置文件" class="headerlink" title="创建 Web 容器的配置文件"></a>创建 Web 容器的配置文件</h5><p>在子模块的 <code>/src/main/webapp/WEB-INF</code> 目录下创建 <code>web.xml</code> 配置文件。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xmlns:web</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>xxl-job-executor-spring<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>webAppRootKey<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>xxl-job-executor-spring<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:applicationcontext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- logback --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>logbackConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:logback.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="创建自定义的执行器类"><a href="#创建自定义的执行器类" class="headerlink" title="创建自定义的执行器类"></a>创建自定义的执行器类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clay.job.executor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.context.XxlJobHelper;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.annotation.XxlJob;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * XxlJob 执行器开发示例（Bean模式）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 开发步骤：</span></span><br><span class="line"><span class="comment"> *      1、任务开发：在Spring Bean实例中，开发Job方法；</span></span><br><span class="line"><span class="comment"> *      2、注解配置：为Job方法添加注解 "<span class="doctag">@XxlJob</span>(value="自定义jobhandler名称", init = "JobHandler初始化方法", destroy = "JobHandler销毁方法")"，注解value值对应的是调度中心新建任务的JobHandler属性的值。</span></span><br><span class="line"><span class="comment"> *      3、执行日志：需要通过 "XxlJobHelper.log" 打印执行日志；</span></span><br><span class="line"><span class="comment"> *      4、任务结果：默认任务结果为 "成功" 状态，不需要主动设置；如有诉求，比如设置任务结果为失败，可以通过 "XxlJobHelper.handleFail/handleSuccess" 自主设置任务结果；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> clay</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomJobExecutor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CustomJobExecutor.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单任务示例（Bean模式）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@XxlJob(value = "sampleJobHandler")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleJobHandler</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        XxlJobHelper.log(<span class="string">"XXL-JOB, Hello World."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            XxlJobHelper.log(<span class="string">"beat at:"</span> + i);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        XxlJobHelper.handleSuccess();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="部署应用到-Tomcat-服务器"><a href="#部署应用到-Tomcat-服务器" class="headerlink" title="部署应用到 Tomcat 服务器"></a>部署应用到 Tomcat 服务器</h4><p><img data-src="../../../asset/2023/03/xxl-job-3.png"></p><h4 id="测试任务调度代码"><a href="#测试任务调度代码" class="headerlink" title="测试任务调度代码"></a>测试任务调度代码</h4><h5 id="启动调度中心服务"><a href="#启动调度中心服务" class="headerlink" title="启动调度中心服务"></a>启动调度中心服务</h5><ul><li><a href="/posts/acac3139.html#IDEA-%E8%BF%90%E8%A1%8C-XXL-JOB-%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83">IDEA 运行 XXL-JOB 调度中心</a></li><li><a href="/posts/b7f83596.html">Docker 安装 XXL-JOB 调度中心</a></li></ul><h5 id="调度中心添加执行器"><a href="#调度中心添加执行器" class="headerlink" title="调度中心添加执行器"></a>调度中心添加执行器</h5><p>登录 XXL-JOB 调度中心的管理页面，添加自定义的执行器信息，这里的 <code>AppName</code> 是在 <code>xxl-job-executor.properties</code> 配置文件中使用 <code>xxl.job.executor.appname</code> 参数指定的。</p><p><img data-src="../../../asset/2023/03/xxl-job-4.png"></p><p>确定执行器自动注册成功 ，添加执行器后一般需要等待 10 秒左右。</p><p><img data-src="../../../asset/2023/03/xxl-job-5.png"></p><div class="admonition warning"><p class="admonition-title">特别注意</p><p>XXL-JOB 使用新版本（如 <code>v2.4.0</code>）时，如果添加执行器选择的是手动录入模式，那么此时填写的机器地址必须是带 HTTP/HTTPS 协议头（例如 <code>http://127.0.0.1:9999</code>），否则后续添加的调度任务无法正常执行。</p></div><h5 id="调度中心添加调度任务"><a href="#调度中心添加调度任务" class="headerlink" title="调度中心添加调度任务"></a>调度中心添加调度任务</h5><p>这里的 <code>JobHandler</code> 配置内容，是在自定义的执行器类里使用 <code>@XxlJob</code> 注解的 <code>value</code> 属性指定。</p><p><img data-src="../../../asset/2023/03/xxl-job-6.png"></p><h5 id="调度中心启动调度任务"><a href="#调度中心启动调度任务" class="headerlink" title="调度中心启动调度任务"></a>调度中心启动调度任务</h5><p><img data-src="../../../asset/2023/03/xxl-job-7.png"></p><h5 id="查看任务调度日志信息"><a href="#查看任务调度日志信息" class="headerlink" title="查看任务调度日志信息"></a>查看任务调度日志信息</h5><p><img data-src="../../../asset/2023/03/xxl-job-8.png"></p><h3 id="基于-SpringBoot-开发"><a href="#基于-SpringBoot-开发" class="headerlink" title="基于 SpringBoot 开发"></a>基于 SpringBoot 开发</h3><h4 id="框架版本说明-1"><a href="#框架版本说明-1" class="headerlink" title="框架版本说明"></a>框架版本说明</h4><table><thead><tr><th>框架</th><th>版本</th></tr></thead><tbody><tr><td> Spring Boot</td><td>2.7.9</td></tr><tr><td>XXL-JOB</td><td>2.4.0</td></tr></tbody></table><h4 id="项目目录结构-1"><a href="#项目目录结构-1" class="headerlink" title="项目目录结构"></a>项目目录结构</h4><p><img data-src="../../../asset/2023/03/xxl-job-10.png"></p><h4 id="创建-Maven-子模块-1"><a href="#创建-Maven-子模块-1" class="headerlink" title="创建 Maven 子模块"></a>创建 Maven 子模块</h4><p>在 Maven 的 POM 模块中创建子模块 <code>xxl-job-executor-springboot</code>，XML 配置文件的内容如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.clay<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-executor-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xxl-job.version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">xxl-job.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- xxl-job-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${xxl-job.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-webmvc + tomcat --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring-boot.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring-boot.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="编写-Java-项目代码"><a href="#编写-Java-项目代码" class="headerlink" title="编写 Java 项目代码"></a>编写 Java 项目代码</h4><h5 id="创建应用的主启动类"><a href="#创建应用的主启动类" class="headerlink" title="创建应用的主启动类"></a>创建应用的主启动类</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clay.job.executor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> clay</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxlJobExecutorApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(XxlJobExecutorApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="创建-XXL-JOB-的配置类"><a href="#创建-XXL-JOB-的配置类" class="headerlink" title="创建 XXL-JOB 的配置类"></a>创建 XXL-JOB 的配置类</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clay.job.executor.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.executor.impl.XxlJobSpringExecutor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> clay</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxlJobConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(XxlJobConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${xxl.job.admin.addresses}")</span></span><br><span class="line">    <span class="keyword">private</span> String adminAddresses;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${xxl.job.accessToken}")</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${xxl.job.executor.appname}")</span></span><br><span class="line">    <span class="keyword">private</span> String appname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${xxl.job.executor.address}")</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${xxl.job.executor.ip}")</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${xxl.job.executor.port}")</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${xxl.job.executor.logpath}")</span></span><br><span class="line">    <span class="keyword">private</span> String logPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${xxl.job.executor.logretentiondays}")</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> logRetentionDays;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XxlJobSpringExecutor <span class="title">xxlJobExecutor</span><span class="params">()</span> </span>{</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init."</span>);</span><br><span class="line">        XxlJobSpringExecutor xxlJobSpringExecutor = <span class="keyword">new</span> XxlJobSpringExecutor();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">        xxlJobSpringExecutor.setAddress(address);</span><br><span class="line">        xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">        xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line">        <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对多网卡、容器内部署等情况，可借助 "spring-cloud-commons" 提供的 "InetUtils" 组件灵活定制注册IP；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      1、引入依赖：</span></span><br><span class="line"><span class="comment">     *          &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">     *             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">     *             &lt;artifactId&gt;spring-cloud-commons&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">     *             &lt;version&gt;${version}&lt;/version&gt;</span></span><br><span class="line"><span class="comment">     *         &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      2、配置文件，或者容器启动变量</span></span><br><span class="line"><span class="comment">     *          spring.cloud.inetutils.preferred-networks: 'xxx.xxx.xxx.'</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      3、获取IP</span></span><br><span class="line"><span class="comment">     *          String ip_ = inetUtils.findFirstNonLoopbackHostInfo().getIpAddress();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="创建-XXL-JOB-的执行器类"><a href="#创建-XXL-JOB-的执行器类" class="headerlink" title="创建 XXL-JOB 的执行器类"></a>创建 XXL-JOB 的执行器类</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clay.job.executor.jobhandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.context.XxlJobHelper;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.annotation.XxlJob;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * XxlJob 执行器开发示例（Bean模式）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 开发步骤：</span></span><br><span class="line"><span class="comment"> *      1、任务开发：在Spring Bean实例中，开发Job方法；</span></span><br><span class="line"><span class="comment"> *      2、注解配置：为Job方法添加注解 "<span class="doctag">@XxlJob</span>(value="自定义jobhandler名称", init = "JobHandler初始化方法", destroy = "JobHandler销毁方法")"，注解value值对应的是调度中心新建任务的JobHandler属性的值。</span></span><br><span class="line"><span class="comment"> *      3、执行日志：需要通过 "XxlJobHelper.log" 打印执行日志；</span></span><br><span class="line"><span class="comment"> *      4、任务结果：默认任务结果为 "成功" 状态，不需要主动设置；如有诉求，比如设置任务结果为失败，可以通过 "XxlJobHelper.handleFail/handleSuccess" 自主设置任务结果；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> clay</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomJobExecutor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CustomJobExecutor.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单任务示例（Bean模式）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@XxlJob(value = "sampleJobHandler")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleJobHandler</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        XxlJobHelper.log(<span class="string">"XXL-JOB, Hello World."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            XxlJobHelper.log(<span class="string">"beat at:"</span> + i);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        XxlJobHelper.handleSuccess();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="创建项目配置文件"><a href="#创建项目配置文件" class="headerlink" title="创建项目配置文件"></a>创建项目配置文件</h4><h5 id="创建日志配置文件"><a href="#创建日志配置文件" class="headerlink" title="创建日志配置文件"></a>创建日志配置文件</h5><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"1 seconds"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"/data/applogs/xxl-job/xxl-job-executor-springboot.log"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}.%d{yyyy-MM-dd}.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date %level [%thread] %logger{36} [%file : %line] %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="创建-SpringBoot-配置文件"><a href="#创建-SpringBoot-配置文件" class="headerlink" title="创建 SpringBoot 配置文件"></a>创建 SpringBoot 配置文件</h5><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8089</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="meta">logging.config</span>=<span class="string">classpath:logback.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 调度中心部署根地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；</span></span><br><span class="line"><span class="meta">xxl.job.admin.addresses</span>=<span class="string">http://127.0.0.1:8080/xxl-job-admin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 执行器通讯TOKEN</span></span><br><span class="line"><span class="meta">xxl.job.accessToken</span>=<span class="string">default_token</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span><br><span class="line"><span class="meta">xxl.job.executor.appname</span>=<span class="string">xxl-job-executor-springboot</span></span><br><span class="line"><span class="comment">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span><br><span class="line"><span class="meta">xxl.job.executor.address</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；</span></span><br><span class="line"><span class="meta">xxl.job.executor.ip</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span></span><br><span class="line"><span class="meta">xxl.job.executor.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="comment">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logpath</span>=<span class="string">/data/applogs/xxl-job/jobhandler</span></span><br><span class="line"><span class="comment">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logretentiondays</span>=<span class="string">30</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td> xxl.job.executor.appname</td><td> 执行器的名称，建议使用 Maven 模块的名称</td></tr><tr><td> xxl.job.executor.address</td><td> 执行器的注册地址，<strong>使用新版本（如 v2.4.0）时，必须带 HTTP/HTTPS 协议头</strong>，例如 <code>http://127.0.0.1:9999</code></td></tr><tr><td>xxl.job.accessToken</td><td>XXL-JOB 的访问令牌，只有调度中心和执行器双方的 <code>AccessToken</code> 互相匹配才允许通讯</td></tr></tbody></table><div class="admonition warning"><p class="admonition-title">特别注意</p><p>XXL-JOB 从 <code>v.2.3.1</code> 版本开始，调度通讯默认启用 <code>AccessToken</code>，且默认的 <code>AccessToken</code> 是 <code>default_token</code>。</p></div><h4 id="测试任务调度代码-1"><a href="#测试任务调度代码-1" class="headerlink" title="测试任务调度代码"></a>测试任务调度代码</h4><h5 id="启动调度中心服务-1"><a href="#启动调度中心服务-1" class="headerlink" title="启动调度中心服务"></a>启动调度中心服务</h5><ul><li><a href="/posts/acac3139.html#IDEA-%E8%BF%90%E8%A1%8C-XXL-JOB-%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83">IDEA 运行 XXL-JOB 调度中心</a></li><li><a href="/posts/b7f83596.html">Docker 安装 XXL-JOB 调度中心</a></li></ul><h5 id="调度中心添加执行器-1"><a href="#调度中心添加执行器-1" class="headerlink" title="调度中心添加执行器"></a>调度中心添加执行器</h5><p>登录 XXL-JOB 调度中心的管理页面，添加自定义的执行器信息，这里的 <code>AppName</code> 是在 <code>application.properties</code> 配置文件中使用 <code>xxl.job.executor.appname</code> 参数指定的。</p><p><img data-src="../../../asset/2023/03/xxl-job-11.png"></p><p>确定执行器自动注册成功 ，添加执行器后一般需要等待 10 秒左右。</p><p><img data-src="../../../asset/2023/03/xxl-job-12.png"></p><div class="admonition warning"><p class="admonition-title">特别注意</p><p>XXL-JOB 使用新版本（如 <code>v2.4.0</code>）时，如果添加执行器选择的是手动录入模式，那么此时填写的机器地址必须是带 HTTP/HTTPS 协议头（例如 <code>http://127.0.0.1:9999</code>），否则后续添加的调度任务无法正常执行。</p></div><h5 id="调度中心添加调度任务-1"><a href="#调度中心添加调度任务-1" class="headerlink" title="调度中心添加调度任务"></a>调度中心添加调度任务</h5><p>这里的 <code>JobHandler</code> 配置内容，是在自定义的执行器类里使用 <code>@XxlJob</code> 注解的 <code>value</code> 属性指定。</p><p><img data-src="../../../asset/2023/03/xxl-job-13.png"></p><h5 id="调度中心启动调度任务-1"><a href="#调度中心启动调度任务-1" class="headerlink" title="调度中心启动调度任务"></a>调度中心启动调度任务</h5><p><img data-src="../../../asset/2023/03/xxl-job-14.png"></p><h5 id="查看任务调度日志信息-1"><a href="#查看任务调度日志信息-1" class="headerlink" title="查看任务调度日志信息"></a>查看任务调度日志信息</h5><p><img data-src="../../../asset/2023/03/xxl-job-15.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍 XXL-JOB 的基础使用教程，包括 Spring 与 SpringBoot 项目整合 XXL-Job。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="分布式" scheme="https://www.techgrow.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 XXL-JOB</title>
    <link href="https://www.techgrow.cn/posts/b7f83596.html"/>
    <id>https://www.techgrow.cn/posts/b7f83596.html</id>
    <published>2023-03-25T15:18:34.000Z</published>
    <updated>2023-03-25T15:18:34.000Z</updated>
    
    <content type="html"><![CDATA[<!-- tor --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://www.xuxueli.com/page/projects.html">XXL 官方开源社区</a></li><li><a href="https://www.xuxueli.com/xxl-job">XXL-JOB 官方文档</a></li><li><a href="https://github.com/xuxueli/xxl-job">XXL-JOB 官方项目</a></li></ul><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><p>在 MySQL 执行 XXL-JOB GitHub 仓库中的 <a href="https://github.com/xuxueli/xxl-job/blob/master/doc/db/tables_xxl_job.sql">SQL 初始化脚本</a>，初始化完成后一共有 <a href="../../../asset/2023/03/xxl-job-docker-1.png">8 张表</a>。</p><table><thead><tr><th>表名称</th><th>描述</th></tr></thead><tbody><tr><td> xxl_job_group</td><td> 执行器信息表，用于维护任务执行器的信息</td></tr><tr><td> xxl_job_info</td><td> 调度扩展信息表，用于存储调度任务的扩展信息，比如任务分组、任务名、机器的地址等</td></tr><tr><td> xxl_job_lock</td><td> 任务调度锁表</td></tr><tr><td> xxl_job_log</td><td> 日志表，用于存储任务调度的历史信息，例如调度结果、执行结果、调度入参等</td></tr><tr><td> xxl_job_log_report</td><td> 日志报表，用于存储任务调度的日志报表，会在调度中心里的报表功能里使用到</td></tr><tr><td> xxl_job_logglue</td><td> 任务的 GLUE 日志，用于存储 GLUE 日志的更新历史变化，支持 GLUE 版本的回溯功能</td></tr><tr><td> xxl_job_registry</td><td> 执行器的注册表，用在维护在线的执行器与调度中心的地址信息</td></tr><tr><td> xxl_job_user</td><td> 系统的用户表，可以用表中默认的用户名与密码进行登录</td></tr></tbody></table><span id="more"></span><h2 id="XXL-JOB-安装"><a href="#XXL-JOB-安装" class="headerlink" title="XXL-JOB 安装"></a>XXL-JOB 安装</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新版本</span></span><br><span class="line">$ docker pull xuxueli/xxl-job-admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者指定版本号（推荐）</span></span><br><span class="line">$ docker pull xuxueli/xxl-job-admin:2.3.1</span><br></pre></td></tr></tbody></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><h4 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h4><p>XXL-JOB 启动后默认会监听 <code>8080</code> 端口，用于 Admin 的 HTTP 服务。</p><h4 id="自定义参数"><a href="#自定义参数" class="headerlink" title="自定义参数"></a>自定义参数</h4><ul><li>GitHub 仓库中的配置项参考文件：<code>/xxl-job/xxl-job-admin/src/main/resources/application.properties</code></li><li>如需自定义 JVM 内存参数等配置，可通过 Docker 的 <code>-e JAVA_OPTS</code> 指定，参数格式 <code>-e JAVA_OPTS="-Xmx512m"</code></li><li>如需自定义 MySQL 等配置，可通过 Docker 的 <code>-e PARAMS</code> 指定，参数格式 <code>-e PARAMS="--key=value  --key2=value2"</code></li></ul><h4 id="Docker-启动"><a href="#Docker-启动" class="headerlink" title="Docker 启动"></a>Docker 启动</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -e PARAMS=<span class="string">"--server.port=8080 --spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?characterEncoding=UTF-8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=root --xxl.job.accessToken=default_token"</span> \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v /tmp/logs:/data/applogs \</span><br><span class="line">--name xxl-job-admin \</span><br><span class="line">-d xuxueli/xxl-job-admin:2.3.1</span><br></pre></td></tr></tbody></table></figure><blockquote><p>请自行更改 MySQL 数据库的连接信息，例如 IP、用户名和密码。</p></blockquote><h4 id="Docker-Compose-启动"><a href="#Docker-Compose-启动" class="headerlink" title="Docker-Compose 启动"></a>Docker-Compose 启动</h4><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.5'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">xxl-job:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">xuxueli/xxl-job-admin:2.3.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">xxl-job-admin</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/logs:/data/applogs</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"PARAMS=--server.port=8080 --spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?characterEncoding=UTF-8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=root --xxl.job.accessToken=default_token"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>请自行更改 MySQL 数据库的连接信息，例如 IP、用户名和密码。</p></blockquote><h3 id="登录控制台"><a href="#登录控制台" class="headerlink" title="登录控制台"></a>登录控制台</h3><p>浏览器访问 <code>http://127.0.0.1:8080/xxl-job-admin</code>，默认登录的账号密码是 <code>admin / 123456</code>。</p><p><img data-src="../../../asset/2023/03/xxl-job-install-2.png"></p><h2 id="访问令牌配置"><a href="#访问令牌配置" class="headerlink" title="访问令牌配置"></a>访问令牌配置</h2><p>为了提升系统的安全性，可要求任务调度中心和执行器进行安全性校验，双方的 <code>AccessToken</code> 匹配才允许通讯。任务调度中心和执行器，均可通过配置项 <code>xxl.job.accessToken</code> 进行 <code>AccessToken</code> 的设置。</p><ul><li>启动 Docker 容器时，可以通过 <code>-e PARAMS</code> 指定 <code>AccessToken</code></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -e PARAMS=<span class="string">"--server.port=8080 --spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?characterEncoding=UTF-8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=root --xxl.job.accessToken=default_token"</span> \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v /tmp/logs:/data/applogs \</span><br><span class="line">--name xxl-job-admin \</span><br><span class="line">-d xuxueli/xxl-job-admin:2.3.1</span><br></pre></td></tr></tbody></table></figure><ul><li>在 SpringBoot 项目中，可以使用以下内容配置执行器的 <code>AccessToken</code></li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxl:</span></span><br><span class="line">  <span class="attr">job:</span></span><br><span class="line">    <span class="attr">accessToken:</span> <span class="string">default_token</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">addresses:</span> <span class="string">http://127.0.0.1:8080/xxl-job-admin</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示，如果任务调度中心和执行器要实现正常通讯，只有两种设置</p><ul><li>第一种：任务调度中心和执行器，设置了相同的 <code>AccessToken</code>。</li><li>第二种：任务调度中心和执行器，均不设置 <code>AccessToken</code>，即关闭安全性校验。</li><li>特别注意：XXL-JOB 从 <code>v.2.3.1</code> 版本开始，调度通讯默认启用 <code>AccessToken</code>，且默认的 <code>AccessToken</code> 是 <code>default_token</code>。</li></ul></div><h2 id="更改登录密码"><a href="#更改登录密码" class="headerlink" title="更改登录密码"></a>更改登录密码</h2><p>XXL-JOB 的用户密码采用 MD5 算法 32 位小写加密。由于 MD5 是摘要算法，不可逆向的，每次登录时需要将密码通过相同的 MD5 算法加密后对比数据库是否一致，所以想修改密码只能修改数据库表的字段值。使用下述 Java 代码将新密码通过 MD5 算法加密，然后更改到数据库的 <code>xxl_job_user</code> 表即可。</p><div class="admonition warning"><p class="admonition-title">特别注意</p><p>如果修改的新密码在加密前长度超过 18 位，仍然会登录失败，原因是 XXL-JOB 的前端页面对输入框输入的密码做了截取，只保留了 18 位字符并传到后端，因此会导致输入正确的密码后仍然登录失败，因此新密码的最大长度只支持 18 位。</p></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordEncoderUtil</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String password = DigestUtils.md5DigestAsHex(<span class="string">"newPassword"</span>.getBytes());</span><br><span class="line">        System.out.println(password);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/03/xxl-job-install-3.png"></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul><li><a href="https://blog.csdn.net/qq_44625080/article/details/127149775">XXL-JOB 的 Docker 部署与接入教程</a></li><li><a href="https://cloud.tencent.com/developer/article/2201473">XXL-JOB 访问令牌（AccessToken）设置</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Docker 如何安装 XXL-JOB，适用于单机环境。</summary>
    
    
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>XXL-JOB 入门教程之一</title>
    <link href="https://www.techgrow.cn/posts/acac3139.html"/>
    <id>https://www.techgrow.cn/posts/acac3139.html</id>
    <published>2023-03-25T15:18:34.000Z</published>
    <updated>2023-03-25T15:18:34.000Z</updated>
    
    <content type="html"><![CDATA[<!-- tor --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/acac3139.html">XXL-JOB 入门教程之一</a></li><li><a href="/posts/972c1f90.html">XXL-JOB 入门教程之二</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://www.xuxueli.com/page/projects.html">XXL 官方开源社区</a></li><li><a href="https://www.xuxueli.com/xxl-job">XXL-JOB 官方文档</a></li><li><a href="https://github.com/xuxueli/xxl-job">XXL-JOB 官方项目</a></li></ul><h2 id="什么是任务调度"><a href="#什么是任务调度" class="headerlink" title="什么是任务调度"></a>什么是任务调度</h2><p>任务调度就是我们常说的定时任务，定时任务是指在指定时间、指定的频率去执行任务（业务代码）。任务调度是日常开发中非常常见的一个业务场景，我们经常需要去运行一些的周期性、指定时间点等方式自动触发的异步业务逻辑。</p><h2 id="集中式任务调度"><a href="#集中式任务调度" class="headerlink" title="集中式任务调度"></a>集中式任务调度</h2><p>集中式任务是与分布式任务恰好相反的概念，集中式任务就是单机任务，一个项目，一台机器，也就是我们常说的单体应用。对于集中式任务，也就是我们 Java 开发中常见的定时任务。</p><span id="more"></span><h3 id="集中式任务调度的问题"><a href="#集中式任务调度的问题" class="headerlink" title="集中式任务调度的问题"></a>集中式任务调度的问题</h3><p>如果采用集中式的任务调度方式，在分布式集群部署的模式下会带来一些问题，比如：</p><ul><li>多台机器集群部署的定时任务如何保证不被重复执行？</li><li>如何动态地调整定时任务的执行时间（不重启服务的情况下）？</li><li>部署定时任务的机器发生故障时，如何实现故障转移？</li><li>如何对定时任务的执行情况进行监控？</li><li>业务量较大，单机遭遇性能瓶颈问题，任务调度如何扩展？</li></ul><h3 id="集中式任务调度的缺点"><a href="#集中式任务调度的缺点" class="headerlink" title="集中式任务调度的缺点"></a>集中式任务调度的缺点</h3><ul><li>不支持分片任务：处理有序数据时，多机器分片执行任务处理不同数据。</li><li>不支持生命周期统一管理：不重启服务的情况下关闭、启动任务。</li><li>不支持集群：存在任务重复执行的问题。</li><li>不支持失败重试：出现异常后任务终结，不能根据执行状态控制任务重新执行。</li><li>不支持动态调整：在不重启服务的情况下，动态修改任务参数。</li><li>不支持报警机制：在任务执行失败之后，没有报警机制。</li><li>不支持任务数据统计：在任务数据量大时，对于任务执行情况无法高效地统计执行情况。</li></ul><h3 id="Java-实现集中式任务调度的方式"><a href="#Java-实现集中式任务调度的方式" class="headerlink" title="Java 实现集中式任务调度的方式"></a>Java 实现集中式任务调度的方式</h3><table><thead><tr><th>实现方式</th><th>说明</th></tr></thead><tbody><tr><td><code>while (true) + Thread.sleep</code></td><td>轮询 + 线程休眠的方式实现定时任务（最古老的方法）</td></tr><tr><td><code>java.util.Timer + java.util.TimerTask</code></td><td>Timer 是一种定时器工具，用来在一个后台线程按计划执行指定任务，它可以按计划执行一个任务一次或反复多次。TimerTask 是一个抽象类，它的子类代表一个可以被 Timer 计划的任务。</td></tr><tr><td><code>ScheduledExecutorService</code></td><td>从 JDK 1.5 开始，<code>ScheduledExecutorService</code> 做为并发工具类被引入，是最理想的定时任务实现方式</td></tr><tr><td> Quartz</td><td><a href="https://github.com/quartz-scheduler/quartz">Quartz</a> 是一个开源的定时任务调度框架，由 Java 编写而成，用于 Java 生态下的定时任务调度，是一个灵活方便、使用简单的定时任务调度框架，可以和 Spring 整合使用</td></tr><tr><td> Spring Task</td><td>Spring 框架从 3.0 版本开始提供的轻量级的定时任务调用工具，使用起来很方便</td></tr><tr><td> Spring Boot 注解 <code>@EnableScheduling</code> + <code>@Scheduled</code></td><td>底层依然是采用 Spring Task 来实现任务调度</td></tr></tbody></table><h2 id="分布式任务调度"><a href="#分布式任务调度" class="headerlink" title="分布式任务调度"></a>分布式任务调度</h2><h3 id="分布式任务调度的优点"><a href="#分布式任务调度的优点" class="headerlink" title="分布式任务调度的优点"></a>分布式任务调度的优点</h3><ul><li>高可用。在集群架构下，有节点出现异常，不影响任务的执行。</li><li>动态配置。对任务的执行周期，以及其他跟任务相关的属性不停机修改。</li><li>生命周期管理。可以在不停机的情况下，对任务单次执行启动任务，关闭任务的管理。</li><li>失败机制。在任务执行过程中出现执行失败时，支持报警、任务重试并快速查阅执行日志。</li><li>数据统计。在定时任务数比较多的情况下，支持统计一共有多少任务，哪些任务执行失败过，哪些任务执行成功。</li><li>分片执行。对于批量处理的数据，让多台机器执行该任务，对数据进行分片处理。</li></ul><h3 id="分布式任务调度解决方案"><a href="#分布式任务调度解决方案" class="headerlink" title="分布式任务调度解决方案"></a>分布式任务调度解决方案</h3><p>由于集中式的定时任务调度需要解决一系列问题，所以在技术演进的过程中产生一些解决办法：</p><ul><li>使用数据库唯一约束</li><li>使用配置文件、Redis、MySQL 作为任务调度的开关</li><li>使用分布式锁实现任务调度的并发控制</li><li>使用开源的分布式任务调度平台 TBSchedule、Elastic-Job、Saturn、XXL-JOB 等</li><li>自研分布式任务调度平台</li></ul><h3 id="分布式任务调度开源框架"><a href="#分布式任务调度开源框架" class="headerlink" title="分布式任务调度开源框架"></a>分布式任务调度开源框架</h3><h4 id="XXL-JOB"><a href="#XXL-JOB" class="headerlink" title="XXL-JOB"></a>XXL-JOB</h4><p><a href="https://github.com/xuxueli/xxl-job">XXL-JOB</a> 是美团开源的轻量级分布式任务调度平台，其核心设计目标是轻量级、易扩展、开发迅速、开箱即用，已有多家公司线上产品线采用了 XXL-JOB。</p><h4 id="Elastic-Job"><a href="#Elastic-Job" class="headerlink" title="Elastic-Job"></a>Elastic-Job</h4><p><a href="https://github.com/apache/shardingsphere-elasticjob">Elastic-Job</a> 是当当网推出的分布式任务调度框架，现在已经被纳入到 Apache 基金会下，很多公司的产品都在使用该分布式任务调度框架。</p><h4 id="PowerJob"><a href="#PowerJob" class="headerlink" title="PowerJob"></a>PowerJob</h4><p><a href="https://github.com/KFCFans/PowerJob">PowerJob</a> 是新一代分布式任务调度与计算框架，支持 CRON、API、固定频率、固定延迟等调度策略，提供工作流来编排任务解决依赖关系，使用简单，功能强大。</p><h4 id="Saturn"><a href="#Saturn" class="headerlink" title="Saturn"></a>Saturn</h4><p><a href="https://github.com/vipshop/Saturn">Saturn</a> 唯品会推出的开源分布式任务调度平台，它是基于 Elastic-Job 而开发的，新增了一些特性，唯品会内部及一些互联网公司都在使用，但目前项目处于停止维护的状态。</p><h2 id="IDEA-运行-XXL-JOB-调度中心"><a href="#IDEA-运行-XXL-JOB-调度中心" class="headerlink" title="IDEA 运行 XXL-JOB 调度中心"></a>IDEA 运行 XXL-JOB 调度中心</h2><p>XXL-JOB 由调度中心（服务端）和执行器（客户端）两个核心模块组成，因此一般需要先运行调度中心的服务，然后再开发执行器（客户端）的业务代码。</p><h3 id="下载源码项目"><a href="#下载源码项目" class="headerlink" title="下载源码项目"></a>下载源码项目</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/xuxueli/xxl-job.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitee</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/xuxueli/xxl-job.git</span><br></pre></td></tr></tbody></table></figure><h3 id="导入源码项目"><a href="#导入源码项目" class="headerlink" title="导入源码项目"></a>导入源码项目</h3><p>将源码项目导入到 IDEA 中，方便快速启动 XXL-JOB 的调度中心和阅读底层源码。</p><p><img data-src="../../../asset/2023/03/xxl-job-1.png"></p><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>为了初始化调度中心的数据库，需要在数据库里执行源码项目中的 SQL 脚本，文件路径是 <code>/xxl-job/doc/db/tables_xxl_job.sql</code>。值得一提的是，数据库初始化完成之后，一共有 <a href="../../../asset/2023/03/xxl-job-docker-1.png">8 张表</a>。</p><table><thead><tr><th>表名称</th><th>描述</th></tr></thead><tbody><tr><td> xxl_job_group</td><td> 执行器信息表，用于维护任务执行器的信息</td></tr><tr><td> xxl_job_info</td><td> 调度扩展信息表，用于存储调度任务的扩展信息，比如任务分组、任务名、机器的地址等</td></tr><tr><td> xxl_job_lock</td><td> 任务调度锁表</td></tr><tr><td> xxl_job_log</td><td> 日志表，用于存储任务调度的历史信息，例如调度结果、执行结果、调度入参等</td></tr><tr><td> xxl_job_log_report</td><td> 日志报表，用于存储任务调度的日志报表，会在调度中心里的报表功能里使用到</td></tr><tr><td> xxl_job_logglue</td><td> 任务的 GLUE 日志，用于存储 GLUE 日志的更新历史变化，支持 GLUE 版本的回溯功能</td></tr><tr><td> xxl_job_registry</td><td> 执行器的注册表，用在维护在线的执行器与调度中心的地址信息</td></tr><tr><td> xxl_job_user</td><td> 系统的用户表，可以用表中默认的用户名与密码进行登录</td></tr></tbody></table><h3 id="更改配置信息"><a href="#更改配置信息" class="headerlink" title="更改配置信息"></a>更改配置信息</h3><p>打开 <code>xxl-job-admin</code> 模块下的 <code>application.properties</code> 配置文件，更改数据库的连接信息。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### xxl-job, datasource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动调度中心"><a href="#启动调度中心" class="headerlink" title="启动调度中心"></a>启动调度中心</h3><p>打开 <code>xxl-job-admin</code> 模块下的 <code>XxlJobAdminApplication</code> 主启动类，在 IDEA 内直接启动调度中心的服务。</p><p><img data-src="../../../asset/2023/03/xxl-job-2.png"></p><h3 id="登录调度中心"><a href="#登录调度中心" class="headerlink" title="登录调度中心"></a>登录调度中心</h3><p>浏览器访问 <code>http://127.0.0.1:8080/xxl-job-admin</code>，默认登录的账号密码是 <code>admin / 123456</code>。</p><p><img data-src="../../../asset/2023/03/xxl-job-install-2.png"></p><div class="admonition note"><p class="admonition-title">提示</p><ol><li>若浏览器能正常访问调度中心的管理页面，则说明 XXL-JOB 的调度中心启动成功。</li><li>XXL-JOB 调度中心的前端页面使用了 AdminLTE 框架，它是一个基于 Bootstrap 框架和 jQuery 插件的开源的管理模板工具，提供了一系列响应迅速的、可重复使用的组件，并设置了许多模板页面。</li></ol></div><h2 id="Docker-运行-XXL-JOB-调度中心"><a href="#Docker-运行-XXL-JOB-调度中心" class="headerlink" title="Docker 运行 XXL-JOB 调度中心"></a>Docker 运行 XXL-JOB 调度中心</h2><ul><li><a href="/posts/b7f83596.html">Docker 安装 XXL-JOB</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 XXL-JOB 的基础使用教程，包括分布式任务调度框架对比、XXL-JOB 调度中心部署等内容。</summary>
    
    
    
    
    <category term="分布式" scheme="https://www.techgrow.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Maven 激活 SpringBoot 配置文件</title>
    <link href="https://www.techgrow.cn/posts/82a430bf.html"/>
    <id>https://www.techgrow.cn/posts/82a430bf.html</id>
    <published>2023-03-21T13:15:44.000Z</published>
    <updated>2023-03-21T13:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了实现不同环境构建的不同需求，这里使用到了 Maven 的 Profile 特性。因为 Profile 能够在构建时修改 POM 的一个子集，或者添加额外的配置元素。接下来将介绍 Maven 中对 Profile 的配置和激活。</p><span id="more"></span><h2 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>${project.name}<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多环境配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 环境标识，需要与配置文件的名称相对应 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profiles.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profiles.active</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nacos.username</span>&gt;</span>nacos<span class="tag">&lt;/<span class="name">nacos.username</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nacos.password</span>&gt;</span>nacos<span class="tag">&lt;/<span class="name">nacos.password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否为默认环境 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 环境标识，需要与配置文件的名称相对应 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profiles.active</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profiles.active</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nacos.username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">nacos.username</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nacos.password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">nacos.password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否为默认环境 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="SpringBoot-配置"><a href="#SpringBoot-配置" class="headerlink" title="SpringBoot 配置"></a>SpringBoot 配置</h2><p>在 SpringBoot 项目的 <code>application.yml</code> 配置文件中，可以通过 <code>@属性名@</code> 的格式获取在 <code>&lt;profile&gt;</code> 标签中定义的属性值，同时还可以通过 <code>@profiles.active@</code> 的格式来获取当前被激活的 Profile 的 Id 属性。</p><h3 id="配置案例一"><a href="#配置案例一" class="headerlink" title="配置案例一"></a>配置案例一</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@profiles.active@</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置案例二"><a href="#配置案例二" class="headerlink" title="配置案例二"></a>配置案例二</h3><p>在下述的例子中，使用 Nacos 作为配置中心，当 Maven 激活不同的 Profile 时，Nacos 的客户端会从配置中心拉取 Profile 对应的配置信息。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9091</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">@nacos.username@</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">@nacos.password@</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">${NACOS_HOST:shop-register}:${NACOS_PORT:8848}</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">${spring.cloud.nacos.discovery.server-addr}</span></span><br><span class="line">        <span class="string">extension-configs[0]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">shop-application-@profiles.active@.yml</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">extension-configs[1]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">@artifactId@-@profiles.active@.yml</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="无法解析-符号"><a href="#无法解析-符号" class="headerlink" title="无法解析 @ 符号"></a>无法解析 @ 符号</h3><p>若使用了上述的 SpringBoot 配置内容后，在 IDEA 内启动项目时，提示 <code>@...@</code> 的内容无法解析，可以按照以下步骤解决。</p><ul><li>第一步：在 POM 里添加 Maven 插件 </li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;build&gt;</span></span><br><span class="line">    <span class="string">&lt;resources&gt;</span></span><br><span class="line">        <span class="string">&lt;resource&gt;</span></span><br><span class="line">            <span class="string">&lt;directory&gt;src/main/java&lt;/directory&gt;</span></span><br><span class="line">            <span class="string">&lt;filtering&gt;false&lt;/filtering&gt;</span></span><br><span class="line">            <span class="string">&lt;includes&gt;</span></span><br><span class="line">                <span class="string">&lt;include&gt;**/*.*&lt;/include&gt;</span></span><br><span class="line">            <span class="string">&lt;/includes&gt;</span></span><br><span class="line">        <span class="string">&lt;/resource&gt;</span></span><br><span class="line">        <span class="string">&lt;resource&gt;</span></span><br><span class="line">            <span class="string">&lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span><br><span class="line">            <span class="string">&lt;filtering&gt;true&lt;/filtering&gt;</span></span><br><span class="line">            <span class="string">&lt;includes&gt;</span></span><br><span class="line">                <span class="string">&lt;include&gt;**/*.*&lt;/include&gt;</span></span><br><span class="line">            <span class="string">&lt;/includes&gt;</span></span><br><span class="line">        <span class="string">&lt;/resource&gt;</span></span><br><span class="line">    <span class="string">&lt;/resources&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;plugin&gt;</span></span><br><span class="line">        <span class="string">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span><br><span class="line">        <span class="string">&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;version&gt;3.3.0&lt;/version&gt;</span></span><br><span class="line">        <span class="string">&lt;configuration&gt;</span></span><br><span class="line">            <span class="string">&lt;delimiters&gt;@&lt;/delimiters&gt;</span></span><br><span class="line">            <span class="string">&lt;useDefaultDelimiters&gt;false&lt;/useDefaultDelimiters&gt;</span></span><br><span class="line">        <span class="string">&lt;/configuration&gt;</span></span><br><span class="line">    <span class="string">&lt;/plugin&gt;</span></span><br><span class="line"><span class="string">&lt;/build&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>第二步：先执行 Maven 的编译命令，再让 IDEA 启动项目 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean install</span><br></pre></td></tr></tbody></table></figure><h2 id="Maven-激活配置"><a href="#Maven-激活配置" class="headerlink" title="Maven 激活配置"></a>Maven 激活配置</h2><ul><li>当打包项目时，可以在 Maven 的命令行中添加参数 <code>-P</code>，指定要激活的 Profile 的 Id，这样就可以激活不同的环境配置。</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean package -Pdev</span><br></pre></td></tr></tbody></table></figure><ul><li>如果一次要激活多个 Profile，可以用逗号分开一起激活 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean package -Pdev,<span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><ul><li>若希望查看当前默认激活的是哪个 Profile，可以使用以下命令 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn <span class="built_in">help</span>:active-profiles</span><br></pre></td></tr></tbody></table></figure><h2 id="Maven-读取系统环境变量"><a href="#Maven-读取系统环境变量" class="headerlink" title="Maven 读取系统环境变量"></a>Maven 读取系统环境变量</h2><p>在 Linux 系统环境中，Maven 可以使用 <code>${env.xxxx}</code> 的格式读取到系统的环境变量，使用示例如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多环境配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 环境标识，需要与配置文件的名称相对应 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profiles.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profiles.active</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nacos.username</span>&gt;</span>nacos<span class="tag">&lt;/<span class="name">nacos.username</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nacos.password</span>&gt;</span>nacos<span class="tag">&lt;/<span class="name">nacos.password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否为默认环境 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 环境标识，需要与配置文件的名称相对应 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profiles.active</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profiles.active</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nacos.username</span>&gt;</span>${env.NACOS_USERNAME}<span class="tag">&lt;/<span class="name">nacos.username</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nacos.password</span>&gt;</span>${env.NACOS_PASSWORD}<span class="tag">&lt;/<span class="name">nacos.password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否为默认环境 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://cloud.tencent.com/developer/article/2114790">Maven 构建配置和激活 SpringBoot 配置文件</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Maven 如何激活 SpringBoot 的配置文件。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Nacos 开发随笔</title>
    <link href="https://www.techgrow.cn/posts/85aa5d65.html"/>
    <id>https://www.techgrow.cn/posts/85aa5d65.html</id>
    <published>2023-03-20T13:12:19.000Z</published>
    <updated>2023-03-20T13:12:19.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="配置内存大小"><a href="#配置内存大小" class="headerlink" title="配置内存大小"></a>配置内存大小</h2><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><table><thead><tr><th align="center">JVM 参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"> JVM_XMS=512m</td><td align="center"><code>-Xms</code> - JVM 启动时分配的内存大小</td></tr><tr><td align="center"> JVM_XMX=512m</td><td align="center"><code>-Xmx</code> - JVM 运行过程中分配的最大内存大小</td></tr><tr><td align="center"> JVM_XMN=256m</td><td align="center"><code>-Xmn</code> - JVM 堆内存中新生代的大小</td></tr></tbody></table><span id="more"></span><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ul><li>第一种方式，启动 Docker 容器时指定 JVM 参数 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nacos-standalone -e MODE=standalone -e JVM_XMS=512m -e JVM_XMX=512m -e JVM_XMN=256m -p 8848:8848 -d nacos/nacos-server:latest</span><br></pre></td></tr></tbody></table></figure><ul><li>第二种方式，在 Nacos 的 <code>Env</code> 配置文件中添加 JVM 参数 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PREFER_HOST_MODE=hostname</span><br><span class="line">MODE=standalone</span><br><span class="line">SPRING_DATASOURCE_PLATFORM=mysql</span><br><span class="line">JVM_XMS=512m</span><br><span class="line">JVM_XMX=512m</span><br><span class="line">JVM_XMN=256m</span><br></pre></td></tr></tbody></table></figure><h2 id="更改登录密码"><a href="#更改登录密码" class="headerlink" title="更改登录密码"></a>更改登录密码</h2><ul><li>引入依赖 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>通过 <code>BCryptPasswordEncoder</code> 类生成新的密码，注意盐值是随机的，所以生成的密码每次都可能不一样，请不要担心 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordEncoderUtil</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 每次生成的密码都可能不一样</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"newPassword"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>更改 Nacos 的 <code>users</code> 表，指定新的密码</li></ul><p><img data-src="../../../asset/2023/03/nacos-change-password.png"></p><ul><li>若是添加新的 Nacos 用户，可以参考以下 SQL 语句 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">'admin'</span>, <span class="string">'$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu'</span>, <span class="literal">TRUE</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">'admin'</span>, <span class="string">'ROLE_ADMIN'</span>);</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要记录 Nacos 日常使用的笔记。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>快乐 8 购买攻略</title>
    <link href="https://www.techgrow.cn/posts/b99b3e39.html"/>
    <id>https://www.techgrow.cn/posts/b99b3e39.html</id>
    <published>2023-03-05T14:38:21.000Z</published>
    <updated>2023-03-05T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->]]></content>
    
    
    <summary type="html">本文主要介绍快乐 8 的购买攻略。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="彩票竞猜" scheme="https://www.techgrow.cn/tags/%E5%BD%A9%E7%A5%A8%E7%AB%9E%E7%8C%9C/"/>
    
  </entry>
  
  <entry>
    <title>双色球购买攻略</title>
    <link href="https://www.techgrow.cn/posts/6be8d9e3.html"/>
    <id>https://www.techgrow.cn/posts/6be8d9e3.html</id>
    <published>2023-02-28T14:38:21.000Z</published>
    <updated>2023-02-28T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="开奖日期"><a href="#开奖日期" class="headerlink" title="开奖日期"></a>开奖日期</h2><ul><li>开奖时间： 21:15</li><li> 开奖日期： 每周二、四、日</li><li>截止停售时间： 开奖日期的 20:00</li></ul><h2 id="购买规则"><a href="#购买规则" class="headerlink" title="购买规则"></a>购买规则</h2><p><code>双色球</code> 每注投注号码由 6 个红色球号码和 1 个蓝色球号码组成。红色球号码从 1 ~ 33 中选择，蓝色球号码从 1 ~ 16 中选择。每注基本投注金额人民币为 2 元。</p><h2 id="购彩攻略"><a href="#购彩攻略" class="headerlink" title="购彩攻略"></a>购彩攻略</h2><ul><li>1、增加购买彩票的数量：这会提高中奖的机会，但同时也会增加投入的成本。</li><li>2、避免常见的号码组合：比如选择连号、同尾数、同奇偶等常见组合，因为这些号码容易被别人选择，中奖的概率也会降低。</li><li>3、购买多种号码组合：通过购买多种号码组合，可以增加中奖的机会。但是，这也会增加成本。</li><li>4、参与合买：加入合买团队可以增加中奖的概率，但是奖金也需要与其他参与者分享。</li><li>5、选择冷门号码：通常人们会倾向于选择热门号码，也就是经常出现的号码，但这样的号码也会有很多人选择，导致最终的奖金分配比较平均。选择一些较为冷门的号码，虽然中奖的概率较低，但是如果中奖的话，奖金可能会更高。</li></ul><blockquote><p>请注意，彩票是一种纯粹的随机游戏，没有任何策略可以保证中奖。所以，玩彩票应该理性看待，量力而行。</p></blockquote><span id="more"></span><h2 id="中奖规则"><a href="#中奖规则" class="headerlink" title="中奖规则"></a>中奖规则</h2><p><img data-src="../../../asset/2023/02/ticks_buy_rule.png"></p><h2 id="中奖概率"><a href="#中奖概率" class="headerlink" title="中奖概率"></a>中奖概率</h2><p><img data-src="../../../asset/2023/02/ticks_buy_rule_3.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍双色球的购买攻略。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="彩票竞猜" scheme="https://www.techgrow.cn/tags/%E5%BD%A9%E7%A5%A8%E7%AB%9E%E7%8C%9C/"/>
    
  </entry>
  
  <entry>
    <title>超级大乐透购买攻略</title>
    <link href="https://www.techgrow.cn/posts/2ad61463.html"/>
    <id>https://www.techgrow.cn/posts/2ad61463.html</id>
    <published>2023-02-28T14:38:21.000Z</published>
    <updated>2023-02-28T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="开奖日期"><a href="#开奖日期" class="headerlink" title="开奖日期"></a>开奖日期</h2><ul><li>开奖时间： 21:25</li><li> 开奖日期： 每周一、三、六</li><li>截止停售时间： 开奖日期的 21:00</li></ul><h2 id="购买规则"><a href="#购买规则" class="headerlink" title="购买规则"></a>购买规则</h2><p><code>超级大乐透</code> 基本投注是指从前区号码中任选 5 个号码，并从后区号码中任选 2 个号码的组合进行投注。其中，前区号码由 1 ~ 35 号码组成，后区号码由 1 ~ 12 号码组成。每注基本投注金额人民币为 2 元。</p><h2 id="购买攻略"><a href="#购买攻略" class="headerlink" title="购买攻略"></a>购买攻略</h2><ul><li>1、购买更多的彩票：这会增加中奖的机会，但是也意味着需要投入更多的资金。</li><li>2、选择冷门号码：冷门号码是指在过去的开奖中出现频率较低的号码，虽然中奖概率较低，但如果中奖可以获得较高的奖金。</li><li>3、使用统计学方法：通过分析历史开奖数据，利用统计学方法预测下一期的中奖号码，例如数学公式、遗漏数据、走势图等。</li><li>4、参加合买：合买是指多人共同购买彩票，增加了中奖的机会，但中奖奖金需要分配给所有参与者。</li><li>5、选择热门号码：热门号码是指在过去的开奖中出现频率较高的号码，可以通过分析历史开奖数据来选择热门号码，但这样的号码也会有很多人选择，导致最终的奖金分配比较平均。</li></ul><blockquote><p>请注意，彩票是一种纯粹的随机游戏，没有任何策略可以保证中奖。所以，玩彩票应该理性看待，量力而行。</p></blockquote><h2 id="中奖规则"><a href="#中奖规则" class="headerlink" title="中奖规则"></a>中奖规则</h2><p><img data-src="../../../asset/2023/02/ticks_budy_rule_2.png"></p><h2 id="中奖概率"><a href="#中奖概率" class="headerlink" title="中奖概率"></a>中奖概率</h2><p><img data-src="../../../asset/2023/02/ticks_buy_rule_4.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍超级大乐透的购买攻略等。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="彩票竞猜" scheme="https://www.techgrow.cn/tags/%E5%BD%A9%E7%A5%A8%E7%AB%9E%E7%8C%9C/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT 资源汇总</title>
    <link href="https://www.techgrow.cn/posts/78bfedfa.html"/>
    <id>https://www.techgrow.cn/posts/78bfedfa.html</id>
    <published>2023-02-16T11:41:00.000Z</published>
    <updated>2023-02-16T11:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="网站资源"><a href="#网站资源" class="headerlink" title="网站资源"></a>网站资源</h2><table><thead><tr><th>名称</th><th>网址</th><th>描述</th></tr></thead><tbody><tr><td> GPT-3 Demo</td><td><a href="https://gpt3demo.com/">https://gpt3demo.com/</a></td><td>ChatGPT, AI and GPT-3 Apps and use cases</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">ChatGPT 资源汇总，不限于网站、App、开源代码等。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="AI" scheme="https://www.techgrow.cn/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>JMeter 压测教程之二 JVM 调优</title>
    <link href="https://www.techgrow.cn/posts/e0671e6d.html"/>
    <id>https://www.techgrow.cn/posts/e0671e6d.html</id>
    <published>2023-01-12T13:12:35.000Z</published>
    <updated>2023-01-12T13:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/7e51ed02.html">JMeter 压测教程之一基础使用</a></li><li><a href="/posts/e0671e6d.html">JMeter 压测教程之二 JVM 调优</a></li></ul><h2 id="JVM-简单介绍"><a href="#JVM-简单介绍" class="headerlink" title="JVM 简单介绍"></a>JVM 简单介绍</h2><h3 id="JVM-内存结构"><a href="#JVM-内存结构" class="headerlink" title="JVM 内存结构"></a>JVM 内存结构</h3><p>JVM 内存结构主要有三大块：栈、堆内存、方法区。堆内存是 JVM 中最大的一块。方法区存储类信息、静态变量、常量、常量池等数据，是线程共享的区域，为了与 Java 堆区分，方法区还有一个别名 Non-Heap （非堆）。栈又分为 Java 虚拟机栈和本地方法栈，主要用于方法的执行。</p><span id="more"></span><p><img data-src="../../../asset/2020/06/java-jvm-architecture.png"></p><h3 id="JVM-堆内存"><a href="#JVM-堆内存" class="headerlink" title="JVM 堆内存"></a>JVM 堆内存</h3><p>所有的对象实例以及数组都要在堆内存上分配，堆内存是垃圾收集器管理的主要区域，也被称为 <code>GC 堆</code>。堆内存由新生代和老年代组成，不包括永久代（方法区）；而新生代内存又被分成 Eden 空间、From Survivor 空间、To Survivor 空间，默认情况下新生代按照 8:1:1 的比例来分配。</p><div class="admonition note"><p class="admonition-title">提示</p><p>从 Java 8 开始，HotSpot 已经完全将永久代（Permanent Generation）移除，取而代之的是一个新的区域 — 元空间（MetaSpace）。</p></div><p><img data-src="../../../asset/2023/02/java-jvm-architecture-2.png"></p><h2 id="JVM-性能监控"><a href="#JVM-性能监控" class="headerlink" title="JVM 性能监控"></a>JVM 性能监控</h2><p>为了方便监控 JVM 的性能，JDK 提供了 <code>jconsole</code>、<code>jvisualvm</code> 工具，两者都可以通过命令行直接启动，支持监控本地和远程应用。值得一提的是，推荐使用 <code>jvisualvm</code>，因为它可以看作是升级版的 <code>jconsole</code>。</p><h3 id="Jconsole-监控"><a href="#Jconsole-监控" class="headerlink" title="Jconsole 监控"></a>Jconsole 监控</h3><h4 id="启动监控"><a href="#启动监控" class="headerlink" title="启动监控"></a>启动监控</h4><ul><li>启动命令 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jconsole</span><br></pre></td></tr></tbody></table></figure><ul><li>运行界面</li></ul><p><img data-src="../../../asset/2023/02/jvm-monitor-jconsole.png"></p><h3 id="Jvisualvm-监控"><a href="#Jvisualvm-监控" class="headerlink" title="Jvisualvm 监控"></a>Jvisualvm 监控</h3><p><code>jvisualvm</code> 可以监控内存泄露、跟踪垃圾回收、执行时内存分析、CPU 分析、线程分析等。</p><h4 id="启动监控-1"><a href="#启动监控-1" class="headerlink" title="启动监控"></a>启动监控</h4><ul><li>启动命令 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jvisualvm</span><br></pre></td></tr></tbody></table></figure><ul><li>运行界面</li></ul><p><img data-src="../../../asset/2023/02/jvm-monitor-jvisualvm.png"></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>为了方便查看 GC 的情况，<code>jvisualvm</code> 需要提前安装指定的插件。</p><ul><li>第一步：查看 JDK 版本 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></tbody></table></figure><ul><li>第二步：浏览器打开 <a href="https://visualvm.github.io/pluginscenters.html">官方插件中心</a> 的页面，根据 JDK 版本找到 Java VisualVM 的更新链接，例如 <code>https://visualvm.github.io/archive/uc/8u40/updates.xml.gz</code></li></ul><p><img data-src="../../../asset/2023/02/jvisualvm-plugin-update.png"></p><ul><li>第三步：菜单栏导航到 <code>工具</code> -&gt; <code>插件</code> -&gt; <code>设置</code>，点击 <code>编辑</code> 按钮，将 URL 更改为上面找到的 Java VisualVM 更新链接</li></ul><p><img data-src="../../../asset/2023/02/jvisualvm-plugin-update-2.png"></p><ul><li>第四步：菜单栏导航到 <code>工具</code> -&gt; <code>插件</code> -&gt; <code>可用插件</code>，点击 <code>检查最新版本</code> 按钮，等插件列表更新成功后，勾选 <code>Visual GC</code> 项，最后点击 <code>安装</code> 按钮即可。</li></ul><p><img data-src="../../../asset/2023/02/jvisualvm-plugin-update-3.png"></p><ul><li>第六步：重启 <code>jvisualvm</code> 后，选择要监控的应用，若在标签页中看到 <code>Visual GC</code> 页面，则说明 GC 插件安装成功。</li></ul><p><img data-src="../../../asset/2023/02/jvisualvm-plugin-update-4.png"></p><h2 id="性能监控指标"><a href="#性能监控指标" class="headerlink" title="性能监控指标"></a>性能监控指标</h2><h3 id="中间件指标"><a href="#中间件指标" class="headerlink" title="中间件指标"></a>中间件指标</h3><p>常用的中间件（如 Tomcat、Weblogic）监控指标，主要包括 JVM、ThreadPool、JDBC 等，具体如下：</p><p><img data-src="../../../asset/2023/02/jmeter-monitor-item.png"></p><ul><li>当前正在运行的线程数不能超过设定的最大值。一般情况下系统性能较好的情况下，线程数最小值设置为 50 和最大值设置为 200 比较合适。</li><li>当前运行的 JDBC 连接数不能超过设定的最大值。一般情况下系统性能较好的情况下，JDBC 最小值设置为 50 和最大值设置为 200 比较合适。</li><li>GC 频率不能频繁，特别是 FULL GC 更不能频繁，一般情况下系统性能较好的情况下，JVM 最小堆大小和最大堆大小分别设置 1024M 比较合适。</li></ul><h3 id="数据库指标"><a href="#数据库指标" class="headerlink" title="数据库指标"></a>数据库指标</h3><p>常用的数据库（如 MySQL）监控指标，主要包括 SQL 性能、吞吐量、缓存命中率、锁、连接数等，具体如下：</p><p><img data-src="../../../asset/2023/02/jmeter-monitor-item2.png"></p><ul><li>SQL 执行耗时越小越好，一般情况下微秒级别。</li><li>缓存命中率越高越好，一般情况下不能低于 95%。</li><li>锁等待次数越低越好，等待时间越短越好。</li></ul><h3 id="中间件压测案例"><a href="#中间件压测案例" class="headerlink" title="中间件压测案例"></a>中间件压测案例</h3><p>以简单的电商商城项目为例，各中间件的压测结果如下：</p><p><img data-src="../../../asset/2023/02/jmeter-monitor-middle.png"></p><div class="admonition note"><p class="admonition-title">总结</p><ul><li>中间件越多，性能损失越大，大多都损失在网络交互上。</li><li>业务优化方向：数据库、模板页面的渲染速度、静态资源。</li></ul></div><h2 id="JVM-分析-amp-调优"><a href="#JVM-分析-amp-调优" class="headerlink" title="JVM 分析 &amp; 调优"></a>JVM 分析 &amp; 调优</h2><p>JVM 调优，调的是稳定，并不能让性能得到大幅提升。服务稳定的重要性就不用多说了，保证服务的稳定，GC 永远会是 JAVA 程序员需要考虑的不稳定因素之一。复杂和高并发下的服务，必须保证每次 GC 不会出现性能下降，各种性能指标不会出现波动，GC 回收规律而且干净，找到合适的 JVM 设置。FULL GC 最会影响性能，根据代码问题，避免 FULL GC 频率。可以适当调大年轻代的容量，让大对象可以在年轻代触发 YONG GC，调整大对象在年轻代的回收频次，尽可能保证大对象在年轻代回收，减小老年代缩短回收时间。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BGBCIEFC">Oracle 官方的 JVM 调优文档</a></li></ul></div><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><table><thead><tr><th>工具</th><th>说明</th></tr></thead><tbody><tr><td> jstack</td><td> 查看 JVM 线程运行状态，是否有死锁现象等信息</td></tr><tr><td> jinfo</td><td> 可以输出并修改运行时的 Java 进程的 opts</td></tr><tr><td>jps</td><td> 与 Unix 上的 <code>ps</code> 命令类似，用来显示本地的 Java 进程，可以查看本地运行着几个 Java 程序，并显示它们的进程号</td></tr><tr><td> jstat</td><td> 一个极强的监视 VM 内存工具。可以用来监视 VM 内存内的各种堆和非堆的大小及其内存使用量</td></tr><tr><td> jmap</td><td> 打印出某个 Java 进程（使用 <code>pid</code>）内存内的所有 <code>对象</code> 的情况（如：产生哪些对象及其数量）</td></tr></tbody></table><h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><p>在使用下述工具前，建议先用 <code>jps</code> 命令获取当前的每个 JVM 进程号，然后选择要查看的 JVM。</p><h4 id="jstat-使用"><a href="#jstat-使用" class="headerlink" title="jstat 使用"></a>jstat 使用</h4><p><code>jstat</code> 工具特别强大，参数有众多的可选项，可详细地查看堆内各个部分的使用量，以及类加载的数量。使用时，需加上应用的进程 <code>id</code> 和所选参数。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td> jstat -class pid</td><td> 显示加载 Class 的数量，及所占空间等信息</td></tr><tr><td> jstat -compiler pid</td><td> 显示 VM 实时编译的数量等信息</td></tr><tr><td> jstat -gc pid</td><td> 显示 GC 的信息，查看 GC 的次数与时间</td></tr><tr><td> jstat -gccapacity pid</td><td> 堆内存统计，包括堆内存的使用和占用大小</td></tr><tr><td> jstat -gcnew pid</td><td> 新生代垃圾回收统计</td></tr><tr><td> jstat -gcnewcapacity pid</td><td> 新生代内存统计</td></tr><tr><td> jstat -gcold pid</td><td> 老年代垃圾回收统计</td></tr><tr><td> jstat -gcutil pid</td><td> 堆内存（包括新生代、老年代）的垃圾回收统计</td></tr></tbody></table><p>除了以上 <code>pid</code> 参数外，还可以同时加上两个数字，示例如下：</p><ul><li><code>jstat -gcutil pid 1000 100</code>: 每 1000 毫秒统计一次 GC 情况，一共统计 100 次</li><li><code>jstat -printcompilation pid 250 6</code>： 表示每 250 毫秒打印一次，一共打印 6 次，还可以加上 <code>-h3</code> 参数使每三行显示一次标题</li></ul><h4 id="jinfo-使用"><a href="#jinfo-使用" class="headerlink" title="jinfo 使用"></a>jinfo 使用</h4><p><code>jinfo</code> 是 JDK 自带的命令，可以用来查看正在运行的 Java 应用程序的扩展参数，包括 Java System 属性和 JVM 命令行参数；也可以动态地修改正在运行的 JVM 一些参数。当系统崩溃时，<code>jinfo</code> 可以从 core 文件里面知道崩溃的 Java 应用程序的配置信息。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td> jinfo pid</td><td> 输出当前 JVM 进程的全部参数和系统属性</td></tr><tr><td> jinfo -flag name pid</td><td> 查看指定的 JVM 参数的值，打印结果： <code>-</code> 无此参数，`+ 有此参数</td></tr><tr><td> jinfo -flag [+/-]name pid</td><td> 开启或者关闭对应名称的参数（无需重启虚拟机）</td></tr><tr><td>jinfo -flag name=value pid</td><td> 修改指定参数的值</td></tr><tr><td> jinfo -flags pid</td><td> 输出全部的参数</td></tr><tr><td> jinfo -sysprops pid</td><td> 输出当前 JVM 进行的全部的系统属性</td></tr></tbody></table><h4 id="jmap-使用"><a href="#jmap-使用" class="headerlink" title="jmap 使用"></a>jmap 使用</h4><p><code>jmap</code> 命令可以生成堆内存的 Dump 文件，也可以查看堆内对象分析内存信息等，如果不使用这个命令，还可以使用 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 参数来让虚拟机在出现 OOM 的时候自动生成 Dump 文件。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td> jmap -dump:live,format=b,file=product.dump pid</td><td>Dump 堆内存到指定的文件，format 指定输出格式，live 指明是活着的对象，file 指定文件名。Eclipse 可以直接打开这个文件</td></tr><tr><td> jmap -heap pid</td><td> 打印堆内存的概要信息，包括 GC 使用的算法、堆内存的配置和使用情况，可以用此来判断目前内存的使用情况以及垃圾回收情况</td></tr><tr><td> jmap -finalizerinfo pid</td><td> 打印等待回收的对象信息</td></tr><tr><td> jmap -histo:live pid</td><td> 打印堆的对象统计，包括对象数、内存大小等。特别注意，这个命令执行，JVM 会先触发一次 GC，然后再统计信息</td></tr><tr><td> jmap -clstats pid</td><td> 打印 Java 类加载器的智能统计信息，对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印</td></tr></tbody></table><p><code>-F</code> 参数表示强制模式。如果指定的 <code>pid</code> 没有响应，请使用 <code>jmap -dump</code> 或 <code>jmap -histo</code> 选项。此模式下，不支持 <code>live</code> 子选项。使用示例：<code>jmap -F -histo pid</code>。</p><h4 id="jstack-使用"><a href="#jstack-使用" class="headerlink" title="jstack 使用"></a>jstack 使用</h4><p><code>jstack</code> 是 JDK 自带的线程堆栈分析工具，使用该命令可以查看或导出 Java 应用程序中的线程堆栈信息。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td> jstack pid</td><td> 输出当前 JVM 进程的线程堆栈信息</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">本文主要记录如何使用 JMeter 进行压力测试，包括 JVM 性能监控与调优。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="软件测试" scheme="https://www.techgrow.cn/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JMeter 压测教程之一基础使用</title>
    <link href="https://www.techgrow.cn/posts/7e51ed02.html"/>
    <id>https://www.techgrow.cn/posts/7e51ed02.html</id>
    <published>2023-01-08T13:12:35.000Z</published>
    <updated>2023-01-08T13:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/7e51ed02.html">JMeter 压测教程之一基础使用</a></li><li><a href="/posts/e0671e6d.html">JMeter 压测教程之二 JVM 调优</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://jmeter.apache.org/">JMeter 官方网站</a></li><li><a href="https://github.com/apache/jmeter">JMeter GitHub 仓库</a></li></ul><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><ul><li><code>RT (Response Time)</code>：用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。</li><li><code>HPS (Hits Per Second)</code>：每秒点击的次数，单位是次 / 秒。</li><li><code>TPS (Transaction per Second)</code>：系统每秒处理交易 (事务) 的笔数，单位是笔 / 秒。</li><li><code>QPS (Query per Second)</code>：系统每秒处理查询的次数，单位是次 / 秒。</li></ul><span id="more"></span><p>对于互联网业务，如果某些业务有且仅有一个请求连接，那么 TPS=QPS=HPS。一般情况下用 TPS 来衡量整个业务流程，用 QPS 来衡量接口查询次数，用 HPS 来表示对服务器的单击请求。</p><ul><li><code>最大响应时间 (Max Response Time)</code>：指用户发出请求或者指令到系统做出反应 (响应) 的最大时间。</li><li><code>最少响应时间 (Mininum Response Time)</code>：指用户发出请求或者指令到系统做出反应 (响应) 的最少时间。</li><li><code>90% 响应时间 (90% Response Time)</code>：指将所有用户的响应时间进行排序，第 90% 的响应时间。</li></ul><p>无论 TPS、QPS、HPS，此指标是衡量系统处理能力非常重要的指标，越大越好，根据经验，一般情况下:</p><ul><li>金融行业：1000TPS~50000TPS，不包括互联网化的活动</li><li>保险行业：100TPS~100000TPS，不包括互联网化的活动</li><li>制造行业：10TPS~5000TPS</li><li> 互联网电子商务：10000TPS~1000000TPS</li><li> 互联网中型网站：1000TPS~50000TPS</li><li> 互联网小型网站：500TPS~10000TPS</li></ul><p>从外部看，性能测试主要关注如下三个指标：</p><ul><li><code>吞吐量</code>：每秒钟系统能够处理的请求数、任务数。</li><li><code>响应时间</code>：服务处理一个请求或一个任务的耗时。</li><li><code>错误率</code>：一批请求中结果出错的请求所占比例。</li></ul><h2 id="JMeter-安装"><a href="#JMeter-安装" class="headerlink" title="JMeter 安装"></a>JMeter 安装</h2><p>在 <a href="https://jmeter.apache.org/download_jmeter.cgi">JMeter 官网</a> 下载安装包，然后解压文件。进入解压后的 <code>bin</code> 目录，Windows 系统运行 <code>jmeter.bat</code>，而 Linux 系统运行 <code>jmeter.sh</code> 即可启动 JMeter。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li>本文使用的 JMeter 版本是 <code>5.5</code></li><li>JMeter 3.2 以上版本需要安装 JDK 1.8 以上版本才能使用。</li></ul></div><p>JMeter 默认支持国际化，因此可以很方便地支持中文显示，切换语言的步骤如下：</p><p><img data-src="../../../asset/2023/01/jmeter-0.png"></p><h2 id="JMeter-压测案例"><a href="#JMeter-压测案例" class="headerlink" title="JMeter 压测案例"></a>JMeter 压测案例</h2><h3 id="添加线程组"><a href="#添加线程组" class="headerlink" title="添加线程组"></a>添加线程组</h3><p>选中 <code>测试计划</code> 并右击，在弹出的菜单中选择 <code>添加</code> -&gt; <code>线程 (用户)</code> -&gt; <code>线程组</code></p><p><img data-src="../../../asset/2023/01/jmeter-1.png"></p><p><img data-src="../../../asset/2023/01/jmeter-2.png"></p><p>线程组参数详解:</p><ul><li><code>线程数</code>：虚拟用户数。一个虚拟用户占用一个进程或线程，在这里设置多少个虚拟用户，也就表示设置多少个线程。</li><li><code>Ramp-Up 时间 (秒)</code>：准备时长，即设置的线程数需要在多长时间内全部启动完成。如果线程数为 10， 准备时长为 2， 那么需要 2 秒钟启动 10 个线程，也就是每秒启动 5 个线程。</li><li><code>循环次数</code>：每个线程发送请求的次数。如果线程数为 10，循环次数为 100，那么每个线程发送 100 次请求，即总请求数为 10*100=1000。如果勾选了 <code>永远</code> 选项，那么所有线程会一直发送请求，直到选择停止运行脚本为止。</li><li><code>延迟创建线程直到需要</code>：直到需要时延迟线程的创建。</li><li><code>持续时间 (秒)</code>：测试持续时间，会覆盖结束时间。</li><li><code>启动延迟 (秒)</code>：测试延迟启动时间，会覆盖启动时间。</li><li><code>启动时间</code>：测试启动时间，启动延迟会覆盖它。当启动时间已过，手动只需测试时当前时间也会覆盖它。</li><li><code>结束时间</code>：测试结束时间，持续时间会覆盖它。</li></ul><h3 id="添加-HTTP-请求"><a href="#添加-HTTP-请求" class="headerlink" title="添加 HTTP 请求"></a>添加 HTTP 请求</h3><p>选中已创建的线程组并右击，在弹出的菜单中选择 <code>添加</code> -&gt; <code>取样器</code> -&gt; <code>HTTP 请求</code></p><p><img data-src="../../../asset/2023/01/jemeter-3.png"></p><p><img data-src="../../../asset/2023/01/jmeter-4.png"></p><h3 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h3><p>选中已创建的线程组并右击，在弹出的菜单中选择 <code>添加</code> -&gt; <code>监听器</code> -&gt; <code>汇总报告</code> 、<code>聚合报告</code></p><p><img data-src="../../../asset/2023/01/jmeter-5.png"></p><h3 id="启动压测脚本"><a href="#启动压测脚本" class="headerlink" title="启动压测脚本"></a>启动压测脚本</h3><h4 id="GUI-启动压测"><a href="#GUI-启动压测" class="headerlink" title="GUI 启动压测"></a>GUI 启动压测</h4><div class="admonition warning"><p class="admonition-title">特别注意</p><p>JMeter 官方要求在一般情况下，要使用命令行启动压测，而不是使用 GUI 的方式。</p></div><p><img data-src="../../../asset/2023/01/jmeter-6.png"></p><h4 id="命令行启动压测"><a href="#命令行启动压测" class="headerlink" title="命令行启动压测"></a>命令行启动压测</h4><h5 id="保存压测脚本"><a href="#保存压测脚本" class="headerlink" title="保存压测脚本"></a>保存压测脚本</h5><p>将所有操作保存为压测脚本，文件的后缀是 <code>jmx</code>。</p><p><img data-src="../../../asset/2023/01/jmeter-7.png"></p><h5 id="命令行执行压测"><a href="#命令行执行压测" class="headerlink" title="命令行执行压测"></a>命令行执行压测</h5><p>进入 JMeter 的 <code>bin</code> 目录，执行压测脚本。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter -n -t /tmp/jmeter/product-up.jmx -l /tmp/jmeter/result.jtl</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td> -n</td><td> 命令行模式</td></tr><tr><td> -t</td><td>JMX 脚本的路径</td></tr><tr><td> -l</td><td>JTL 结果文件的存放路径</td></tr></tbody></table><h5 id="分析命令行压测结果"><a href="#分析命令行压测结果" class="headerlink" title="分析命令行压测结果"></a>分析命令行压测结果</h5><p>使用命令行执行压测后，输出的日志信息如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using product-up.jmx</span><br><span class="line">Starting standalone test @ 2023 Jan 10 13:38:23 CST (1673329103194)</span><br><span class="line">Waiting for possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445</span><br><span class="line">Warning: Nashorn engine is planned to be removed from a future JDK release</span><br><span class="line">summary +  16585 in 00:00:06 = 2582.9/s Avg:    70 Min:     7 Max:   314 Err:     0 (0.00%) Active: 200 Started: 200 Finished: 0</span><br><span class="line">summary +   3415 in 00:00:01 = 3162.0/s Avg:    53 Min:     4 Max:    99 Err:     0 (0.00%) Active: 0 Started: 200 Finished: 200</span><br><span class="line">summary =  20000 in 00:00:08 = 2666.0/s Avg:    67 Min:     4 Max:   314 Err:     0 (0.00%)</span><br><span class="line">Tidying up ...    @ 2023 Jan 10 13:38:31 CST (1673329111081)</span><br><span class="line">... end of run</span><br></pre></td></tr></tbody></table></figure><ul><li><code>+</code>：表示过去 30 秒的执行情况</li><li><code>=</code>：表示脚本从开始到现在的运行情况</li><li>在 JMeter 的 <code>/bin/jmeter.properties</code> 配置文件中，可以修改 <code>summariser.interval</code> 参数来指定控制台取样的时间间隔，默认值是 <code>30</code></li></ul><h5 id="JMeter-查看压测结果"><a href="#JMeter-查看压测结果" class="headerlink" title="JMeter 查看压测结果"></a>JMeter 查看压测结果</h5><p>在 JMeter 的界面内打开压测脚本（后缀是 <code>jmx</code> 的文件），找到希望查看的监听器（例如 <code>聚合报告</code>、<code>汇总报告</code>），然后点击 <code>浏览</code> 按钮，选中上面生成 JTL 文件后，即可查看对应的压测结果。</p><p><img data-src="../../../asset/2023/01/jmeter-9.png"></p><h5 id="命令行生成-HTML-压测报表"><a href="#命令行生成-HTML-压测报表" class="headerlink" title="命令行生成 HTML 压测报表"></a>命令行生成 HTML 压测报表</h5><p>JMeter 支持根据 JTL 结果文件生成 HTML 压测报表，具体的使用步骤如下：</p><ul><li>进入 JMeter 的 <code>bin</code> 目录，修改 <code>reportgenerator.properties</code> 配置文件，将 <code>jmeter.reportgenerator.overall_granularity</code> 的参数值更改为 <code>1000</code>（设置报表中数据展示间隔 1 秒，默认值为 60 秒）</li><li>创建一个存放数据报表的文件夹 (例如 <code>report</code>)</li><li> 执行下述命令，根据 JTL 结果文件生成 HTML 报表 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter -g /tmp/jmeter/result.jtl -o /tmp/jmeter/report</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td> -g</td><td> 指定 JTL 文件的路径</td></tr><tr><td> -o</td><td> 指定 HTML 报表生成到哪个文件夹下</td></tr></tbody></table><ul><li>浏览器打开生成的 <code>index.html</code> 文件，就可以很直观地查看压测结果</li></ul><p><img data-src="../../../asset/2023/01/jmeter-8.png"></p><h3 id="压测结果分析"><a href="#压测结果分析" class="headerlink" title="压测结果分析"></a>压测结果分析</h3><ul><li>若有错误率则需同开发人员确认，确定是否允许错误的发生或者错误率允许在多大的范围内。</li><li>若吞吐量 (每秒请求的数) 大于并发数，则可以慢慢的往上面增加并发数；若在压测的机器性能很好的情况下，出现吞吐量小于并发数，说明并发数不能再增加了，可以慢慢的往下减，找到最佳的并发数。</li><li>压测结束，登陆相应的 Linux/Windows 服务器查看 CPU 与内存占用等性能指标，然后进行数据分析。</li><li>最大的 TPS：不断的增加并发数，加到 TPS 达到一定值开始出现下降，那么那个值就是最大的 TPS。</li><li>最大的并发数：最大的并发数和最大的 TPS 是不同的，一般不断增加并发数，达到一个值后，服务器出现请求超时，则可认为该值为最大的并发数。</li><li>压测过程出现性能瓶颈，若在压力机的任务管理器查看到 CPU、网络和内存占用都正常，即均未达到 90% 以上，则可以说明 Linux/Windows 服务器有问题，而压力机没有问题。</li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>影响性能的考虑点包括：数据库、应用程序、中间件 (Tomcat、Nginx)、网络和操作系统等方面，优先考虑运行的应用程序属于 CPU 密集型还是 IO 密集型。</p></div><h3 id="常见错误解决"><a href="#常见错误解决" class="headerlink" title="常见错误解决"></a>常见错误解决</h3><h4 id="错误一"><a href="#错误一" class="headerlink" title="错误一"></a>错误一</h4><p><strong>错误信息</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JMeter Address Already in use</span><br></pre></td></tr></tbody></table></figure><p><strong>错误分析</strong></p><p>这是 Windows 系统本身提供的端口访问机制导致的。Windows 提供给 TCP/IP 连接的端口为 1024 ~ 5000，并且要每隔四分钟来循环回收它们，因此就导致在短时间内跑大量的请求时将端口占满了。</p><p><strong>解决方法</strong></p><ul><li>在 CMD 窗口中，使用 <code>regedit</code> 命令打开注册表编辑器</li><li>在 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</code> 下<ul><li>右击 <code>Parameters</code>，添加一个新的 DWORD，名字为 <code>MaxUserPort</code>，然后双击 <code>MaxUserPort</code>，输入数值数据为 <code>65534</code>，基数选择十进制</li><li>右击 <code>Parameters</code>，添加一个新的 DWORD，名字为 <code>TCPTimedWaitDelay</code>，然后双击 <code>TCPTimedWaitDelay</code>，输入数值数据为 <code>30</code>，基数选择十进制</li><li>退出注册表编辑器，重启 Wnidows 操作系统，让新增的配置内容生效</li><li>若是分布式执行压测的话，控制机器和负载机器都需要这样操作</li></ul></li></ul>]]></content>
    
    
    <summary type="html">本文主要记录如何使用 JMeter 进行压力测试，包括 JMeter 的基础使用、命令行压测、生成 HTML 压测报表等内容。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="软件测试" scheme="https://www.techgrow.cn/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>近期开发计划</title>
    <link href="https://www.techgrow.cn/posts/29d74d90.html"/>
    <id>https://www.techgrow.cn/posts/29d74d90.html</id>
    <published>2023-01-05T14:38:21.000Z</published>
    <updated>2023-01-27T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误, 请重新输入." data-whm="文章校验失败, 但不影响阅读解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="12370d4cfc0c6d1e0678172679f4261d61226bb6446d06db542dc2a0c9cee86f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="请 输 入 阅 读 密 码.">请 输 入 阅 读 密 码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文主要记录近期的近期开发计划。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="加密博客" scheme="https://www.techgrow.cn/tags/%E5%8A%A0%E5%AF%86%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>近期学习计划</title>
    <link href="https://www.techgrow.cn/posts/860c6c02.html"/>
    <id>https://www.techgrow.cn/posts/860c6c02.html</id>
    <published>2023-01-02T14:38:21.000Z</published>
    <updated>2023-01-27T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误, 请重新输入." data-whm="文章校验失败, 但不影响阅读解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c400fb09908678725767d0d81adc12e0496fe65331d81e1d3e66ee59613e6489"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="请 输 入 阅 读 密 码.">请 输 入 阅 读 密 码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文主要记录近期开发相关的学习计划。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="加密博客" scheme="https://www.techgrow.cn/tags/%E5%8A%A0%E5%AF%86%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>国产互联网产品汇总</title>
    <link href="https://www.techgrow.cn/posts/3ccf5667.html"/>
    <id>https://www.techgrow.cn/posts/3ccf5667.html</id>
    <published>2022-12-26T13:30:00.000Z</published>
    <updated>2022-12-26T13:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="国内数据库"><a href="#国内数据库" class="headerlink" title="国内数据库"></a>国内数据库</h2><h3 id="云厂商数据库"><a href="#云厂商数据库" class="headerlink" title="云厂商数据库"></a>云厂商数据库</h3><table><thead><tr><th align="center">数据库</th><th align="center">云厂商</th></tr></thead><tbody><tr><td align="center"> TDSQL</td><td align="center"> 腾讯云</td></tr><tr><td align="center"> GaussDB</td><td align="center"> 华为云</td></tr><tr><td align="center"> AnalyticDB</td><td align="center"> 阿里云</td></tr></tbody></table><span id="more"></span><h3 id="国产商用数据库"><a href="#国产商用数据库" class="headerlink" title="国产商用数据库"></a>国产商用数据库</h3><table><thead><tr><th align="center">数据库</th><th align="center">公司</th></tr></thead><tbody><tr><td align="center">武汉达梦</td><td align="center"> -</td></tr><tr><td align="center"> 人大金仓</td><td align="center"> -</td></tr><tr><td align="center"> 神州通用</td><td align="center"> -</td></tr><tr><td align="center">GBase</td><td align="center"> 南大通用</td></tr><tr><td align="center"> PolarDB</td><td align="center"> 阿里云</td></tr></tbody></table><h3 id="国产开源数据库"><a href="#国产开源数据库" class="headerlink" title="国产开源数据库"></a>国产开源数据库</h3><table><thead><tr><th align="center">数据库</th><th align="center">公司</th></tr></thead><tbody><tr><td align="center"> TiDB</td><td align="center">PingCAP</td></tr><tr><td align="center">openGauss</td><td align="center"> 华为</td></tr><tr><td align="center"> OceanBase</td><td align="center"> 阿里</td></tr></tbody></table><h2 id="国产-Linux-系统"><a href="#国产-Linux-系统" class="headerlink" title="国产 Linux 系统"></a>国产 Linux 系统</h2><table><thead><tr><th align="center">Linux 系统</th><th align="center">公司</th></tr></thead><tbody><tr><td align="center"> HarmonyOs</td><td align="center"> 华为</td></tr><tr><td align="center">统信 UOS</td><td align="center">-</td></tr><tr><td align="center"> 银河麒麟</td><td align="center"> -</td></tr><tr><td align="center">openEuler</td><td align="center"> 华为</td></tr><tr><td align="center"> Deepin</td><td align="center">-</td></tr><tr><td align="center"> 优麒麟</td><td align="center"> -</td></tr></tbody></table><style>    table {        width: fit-content;        border-collapse: unset;    }    th, td {        padding-left: 30px;        padding-right: 30px;        font-weight: normal;        border-bottom: 1px solid #ddd;    }</style>]]></content>
    
    
    <summary type="html">本文主要介绍国产的互联网产品。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 开发随笔</title>
    <link href="https://www.techgrow.cn/posts/26ba10c4.html"/>
    <id>https://www.techgrow.cn/posts/26ba10c4.html</id>
    <published>2022-12-20T13:12:35.000Z</published>
    <updated>2022-12-20T13:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="ElasticSearch-客户端选择"><a href="#ElasticSearch-客户端选择" class="headerlink" title="ElasticSearch 客户端选择"></a>ElasticSearch 客户端选择</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>基于 TCP 协议（ES 的 9300 端口，用于集群通信），依赖 <code>spring-data-elasticsearch:transport-api.jar</code>，此方式的缺点如下：</p><ul><li>SpringBoot 版本不同， 依赖的 <code>transport-api.jar</code> 版本也就不同，不能适配不同版本的 ES</li><li> 从 ES <code>7.x</code> 版本开始，官方已经不建议使用 9300 端口来操作，而且 ES <code>8.x</code> 以后就要移除该操作方式</li></ul><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>基于 HTTP 协议（ES 的 9200 端口，用于 RESTful API），可选的客户端如下：</p><ul><li>RestTemplate、HttpClient、OkHttp：直接发送 HTTP 请求，ES 的很多操作需要自己封装，使用起来比较麻烦</li><li> Elasticsearch-Rest-Client：官方的 Rest 客户端，分为 <code>Java Low Level REST Client</code> 和 <code>Java High Level REST Client</code>，API 层次分明，上手简单</li></ul><span id="more"></span><h3 id="客户端对比"><a href="#客户端对比" class="headerlink" title="客户端对比"></a>客户端对比</h3><table><thead><tr><th>客户端</th><th>优点</th><th>缺点</th><th>说明</th></tr></thead><tbody><tr><td> Java Low Level Rest Client</td><td> 与 ES 版本之间没有关系，适用于作为所有版本 ES 的客户端</td><td></td><td>可以看做是低级的 HTTP 客户端，没有封装过多的 ES 操作</td></tr><tr><td> Java High Level Rest Client</td><td> 使用最多</td><td>使用时必须与 ES 版本保持一致</td><td>基于 Low Level Rest Client，但在 ES <code>7.15.0</code> 版本之后被弃用</td></tr><tr><td> TransportClient</td><td> 使用 Transport 端口 (9300) 进行通信，能够使用 ES 集群中的一些特性，性能最好</td><td> JAR 包版本必须与 ES 集群版本一致，ES 集群升级，客户端也要跟着升级到相同版本</td><td>已过时，官方从 ES 7 版本开始不建议使用，ES 8 版本之后被移除</td></tr><tr><td> Elasticsearch Java API Client</td><td> 最新的 ES 客户端</td><td>文档较少</td><td></td></tr></tbody></table><div class="admonition note"><p class="admonition-title">提示</p><p>关于更多的 Elasticsearch 客户端说明，建议阅读 <a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">官方文档</a>。</p></div><h2 id="ElasticSearch-客户端使用案例"><a href="#ElasticSearch-客户端使用案例" class="headerlink" title="ElasticSearch 客户端使用案例"></a>ElasticSearch 客户端使用案例</h2><p>下面将简单介绍 SpringBoot 项目如何引入 <code>Java High Level Rest Client</code>，由于 SpringBoot Starter 默认依赖了某版本的 Elasticsearch，因此需要在 <code>pom.xml</code> 配置文件中使用 <code>&lt;elasticsearch.version&gt;</code> 来指定（覆盖） Elasticsearch 的实际版本号，否则会出现兼容性问题。</p><h3 id="引入-Maven-坐标"><a href="#引入-Maven-坐标" class="headerlink" title="引入 Maven 坐标"></a>引入 Maven 坐标</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${elasticsearch.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Java-配置类"><a href="#Java-配置类" class="headerlink" title="Java 配置类"></a>Java 配置类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="comment">// 基础配置信息</span></span><br><span class="line">        String token = <span class="string">""</span>;</span><br><span class="line">        RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();</span><br><span class="line">        <span class="comment">// builder.addHeader("Authorization", "Bearer " + token);</span></span><br><span class="line">        <span class="comment">// builder.setHttpAsyncResponseConsumerFactory(</span></span><br><span class="line">        <span class="comment">// new HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024));</span></span><br><span class="line">        COMMON_OPTIONS = builder.build();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义 ES 客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ES 客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 指定ES的连接地址</span></span><br><span class="line">        RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"127.0.0.1"</span>, <span class="number">9200</span>, <span class="string">"http"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Java-测试代码"><a href="#Java-测试代码" class="headerlink" title="Java 测试代码"></a>Java 测试代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSON;</span><br><span class="line"><span class="keyword">import</span> com.clay.gulimall.search.config.ElasticSearchConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregations;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.Terms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.metrics.Avg;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.metrics.AvgAggregationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchApiTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient esClient;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>).id(<span class="string">"1"</span>)</span><br><span class="line">                .source(<span class="string">"user"</span>, <span class="string">"Jim"</span>, <span class="string">"postDate"</span>, <span class="keyword">new</span> Date(), <span class="string">"message"</span>, <span class="string">"trying out ElasticSearch"</span>);</span><br><span class="line">        </span><br><span class="line">        IndexResponse indexResponse = esClient.index(request, ElasticSearchConfig.COMMON_OPTIONS);</span><br><span class="line">        log.info(JSON.toJSONString(indexResponse));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聚合查询</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; 查询 address 中包含 mill 的所有人的年龄分布以及平均薪资</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">        <span class="comment">// 指定索引</span></span><br><span class="line">        searchRequest.indices(<span class="string">"bank"</span>);</span><br><span class="line">        <span class="comment">// 检索条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchQuery(<span class="string">"address"</span>, <span class="string">"mill"</span>));</span><br><span class="line">        <span class="comment">// 按照年龄的分布进行聚合</span></span><br><span class="line">        TermsAggregationBuilder ageAgg = AggregationBuilders.terms(<span class="string">"group_by_age"</span>).field(<span class="string">"age"</span>).size(<span class="number">100</span>);</span><br><span class="line">        searchSourceBuilder.aggregation(ageAgg);</span><br><span class="line">        <span class="comment">// 计算所有人的平均薪资</span></span><br><span class="line">        AvgAggregationBuilder avgBalance = AggregationBuilders.avg(<span class="string">"avgBalance"</span>).field(<span class="string">"balance"</span>);</span><br><span class="line">        searchSourceBuilder.aggregation(avgBalance);</span><br><span class="line">        <span class="comment">// 执行检索</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = esClient.search(searchRequest, ElasticSearchConfig.COMMON_OPTIONS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取搜索结果</span></span><br><span class="line">        SearchHits searchHits = searchResponse.getHits();</span><br><span class="line">        SearchHit[] hitArray = searchHits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hitArray) {</span><br><span class="line">            String recored = hit.getSourceAsString();</span><br><span class="line">            log.info(<span class="string">"id: {}, data: {}"</span>, hit.getId(), recored);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取聚合结果 - 年龄的分布</span></span><br><span class="line">        Aggregations aggregations = searchResponse.getAggregations();</span><br><span class="line">        Terms terms = aggregations.get(<span class="string">"group_by_age"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : terms.getBuckets()) {</span><br><span class="line">            log.info(<span class="string">"age: {}, total: {}"</span>, bucket.getKeyAsString(), bucket.getDocCount());</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取聚合结果 - 平均薪资</span></span><br><span class="line">        Avg avg = aggregations.get(<span class="string">"avgBalance"</span>);</span><br><span class="line">        log.info(<span class="string">"avg balance: {}"</span>, avg.getValue());</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">"search params: {}\n"</span>, searchSourceBuilder.toString());</span><br><span class="line">        log.info(<span class="string">"search result: {}\n"</span>, JSON.toJSONString(searchResponse));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述的聚合查询代码，最终发出 HTTP 请求体内容如下：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"query"</span>: {</span><br><span class="line">        <span class="attr">"match"</span>: {</span><br><span class="line">            <span class="attr">"address"</span>: <span class="string">"mill"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"aggs"</span>: {</span><br><span class="line">        <span class="attr">"group_by_age"</span>: {</span><br><span class="line">            <span class="attr">"terms"</span>: {</span><br><span class="line">                <span class="attr">"field"</span>: <span class="string">"age"</span>,</span><br><span class="line">                <span class="attr">"size"</span>: <span class="number">100</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"avgBalance"</span>: {</span><br><span class="line">            <span class="attr">"avg"</span>: {</span><br><span class="line">                <span class="attr">"field"</span>: <span class="string">"balance"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ElasticSearch-日志分析技术栈"><a href="#ElasticSearch-日志分析技术栈" class="headerlink" title="ElasticSearch 日志分析技术栈"></a>ElasticSearch 日志分析技术栈</h2><p>大型项目的日志分析一般有以下两种技术栈：</p><ul><li>Kafka + ElasticSearch + Kibana</li></ul><p><img data-src="../../../asset/2022/12/elasticsearch-log-stack-2.png"></p><ul><li>Logstash + ElasticSearch + Kibana</li></ul><p><img data-src="../../../asset/2022/12/elasticsearch-log-stack-1.png"></p>]]></content>
    
    
    <summary type="html">本文主要记录 ElasticSearch 日常开发的笔记。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Java 的五种代理实现方式</title>
    <link href="https://www.techgrow.cn/posts/aa402c78.html"/>
    <id>https://www.techgrow.cn/posts/aa402c78.html</id>
    <published>2022-11-30T14:33:05.000Z</published>
    <updated>2022-11-30T14:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 Java 的五种代理实现方式，包括 Cglib、ASM、Javassist、Byte Buddy、JDK 代理，<a href="/downloads/2022/11/java-proxy-demo.zip">点击</a> 下载完整的案例代码。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先定义出一个接口和相应的实现类，方便后续使用代理类在方法中添加日志信息。</p><ul><li>接口 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserApi</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function">String <span class="title">queryUserInfo</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><ul><li>实现类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApi</span> <span class="keyword">implements</span> <span class="title">IUserApi</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryUserInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Proxy!"</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>反射调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        Class&lt;UserApi&gt; clazz = UserApi.class;</span><br><span class="line">        Method queryUserInfo = clazz.getMethod(<span class="string">"queryUserInfo"</span>);</span><br><span class="line">        Object invoke = queryUserInfo.invoke(clazz.newInstance());</span><br><span class="line">        System.out.println(invoke);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>有代理地方几乎就会有反射，它们是一套互相配合使用的功能类。在反射中可以调用方法、获取属性、拿到注解等相关内容。这些都可以与接下来的类代理组合使用，满足各种框架所面临的技术场景。</p></blockquote><ul><li>执行结果 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h2 id="JDK-代理"><a href="#JDK-代理" class="headerlink" title="JDK 代理"></a>JDK 代理</h2><p>JDK 代理用于对接口的动态代理，会动态产生一个实现指定接口的类。特别注意，JDK 动态代理有个约束：目标对象一定是要有接口的，没有接口就不能实现动态代理，只能为接口创建动态代理实例，而不能对类创建动态代理实例。值得一提的是，JDK 动态代理主要依赖 <code>java.lang.reflect</code> 包中的 <code>InvocationHandler</code>、<code>Proxy</code> 类来实现。</p><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>JDK 代理类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line">    </span><br><span class="line">    Object originalObj;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Object originalObj)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.originalObj = originalObj;</span><br><span class="line">        <span class="comment">// JDK 动态代理只能为接口创建代理实例</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(originalObj.getClass().getClassLoader(), originalObj.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(method.getName() + <span class="string">"() 被 JDKProxy 代理了"</span>);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(originalObj, args);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>JDK 代理类调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.jdk.JDKProxy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jdkProxy</span><span class="params">()</span> </span>{</span><br><span class="line">        IUserApi userApi = (IUserApi) <span class="keyword">new</span> JDKProxy().getProxy(<span class="keyword">new</span> UserApi());</span><br><span class="line">        String invoke = userApi.queryUserInfo();</span><br><span class="line">        System.out.println(<span class="string">"运行结果: "</span> + invoke);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryUserInfo() 被 JDKProxy 代理了</span><br><span class="line">运行结果: Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：中间件开发、设计模式中代理模式和装饰器模式的应用</li><li>使用点评：JDK 动态代理是非常常用的一种，也是非常简单的一种。基本会在一些中间件代码里看到，例如：数据库路由组件、Redis 组件等，同时也可以将这样的方式应用到设计模式中。</li></ul><h2 id="Cglib-代理"><a href="#Cglib-代理" class="headerlink" title="Cglib 代理"></a>Cglib 代理</h2><p><a href="https://github.com/cglib/cglib">Cglib</a> 是 <code>Code Generation Library</code> 的缩写，属于动态代理方式中的一种。Cglib 用于对类的代理，不强制要求被代理的对象具有接口，其原理是把被代理对象类的 Class 文件加载进来，修改其字节码生成一个继承了被代理类的子类。由于 Cglib 采用了类的继承方式，所以不能对 <code>final</code> 修饰的类进行代理。Cglib 相对于 JDK 动态代理生成了大量的字节码文件，这是一种空间换时间的策略，在生成字节码的时候效率低于 JDK 动态代理。相比于反射机制，CGLIB 用到了 FastClass 机制，通过索引取调用方法，调用效率要高于 JDK 动态代理。值得一提的是，由于修改了字节码，所以 Cglib 需要依赖 ASM（Java 字节码操作类库），使用 Cglib 可以弥补 JDK 动态代理的不足。</p><h3 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>Maven 坐标 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Cglib 代理类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(method.getName() + <span class="string">"() 被 CglibProxy 代理了"</span>);</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Cglib 代理类调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.cglib.CglibProxy;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cglibProxy</span><span class="params">()</span> </span>{</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 设置父类（这里指定的是类，而不是接口）</span></span><br><span class="line">        enhancer.setSuperclass(UserApi.class);</span><br><span class="line">        <span class="comment">// 设置拦截器</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> CglibProxy());</span><br><span class="line">        <span class="comment">// 生成动态代理类</span></span><br><span class="line">        IUserApi userApi = (UserApi) enhancer.create();</span><br><span class="line">        <span class="comment">// 调用类方法</span></span><br><span class="line">        System.out.println(<span class="string">"运行结果: "</span> + userApi.queryUserInfo());</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryUserInfo() 被 CglibProxy 代理了</span><br><span class="line">运行结果: Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结-1"><a href="#使用总结-1" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：Spring AOP 切面、鉴权服务、中间件开发、RPC 框架等</li><li>使用点评：Cglib 不同于 JDK 代理，它的底层使用 ASM 字节码框架在类中修改指令码来实现代理，所以这种代理方式也就不需要像 JDK 代理那样需要接口才能代理。同时得益于字节码框架的使用，所以这种代理方式也会比使用 JDK 代理的方式快 1.5~2.0 倍。</li></ul><h2 id="ASM-代理"><a href="#ASM-代理" class="headerlink" title="ASM 代理"></a>ASM 代理</h2><p><a href="https://asm.ow2.io/">ASM</a> 是一个 Java 字节码操作的类库。它能够以二进制形式修改已有类或者动态生成类。ASM 可以直接产生二进制 Class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。特别注意，ASM 在创建 Class 字节码的过程中，操纵的级别是底层 JVM 的汇编指令级别，这要求 ASM 使用者要对 Class 组织结构和 JVM 汇编指令有一定的了解。</p><h3 id="使用案例-2"><a href="#使用案例-2" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>Maven 坐标 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ow2.asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>类加载器 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsmClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] bytes) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] generateClassBytes() {</span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 定义对象头：版本号、修饰符、全类名、签名、父类、实现的接口</span></span><br><span class="line">        cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, <span class="string">"com/proxy/asm/HelloWorld"</span>, <span class="keyword">null</span>, <span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 添加方法：修饰符、方法名、描述符、签名、抛出的异常</span></span><br><span class="line">        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">"main"</span>, <span class="string">"([Ljava/lang/String;)V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 执行指令：获取静态属性</span></span><br><span class="line">        mv.visitFieldInsn(Opcodes.GETSTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"out"</span>, <span class="string">"Ljava/io/PrintStream;"</span>);</span><br><span class="line">        <span class="comment">// 加载常量</span></span><br><span class="line">        mv.visitLdcInsn(<span class="string">"Hello ASM!"</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, <span class="string">"java/io/PrintStream"</span>, <span class="string">"println"</span>, <span class="string">"(Ljava/lang/String;)V"</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 返回值</span></span><br><span class="line">        mv.visitInsn(Opcodes.RETURN);</span><br><span class="line">        <span class="comment">// 设置栈大小和局部变量表大小</span></span><br><span class="line">        mv.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 方法结束</span></span><br><span class="line">        mv.visitEnd();</span><br><span class="line">        <span class="comment">// 类定义完成</span></span><br><span class="line">        cw.visitEnd();</span><br><span class="line">        <span class="comment">// 生成字节数组</span></span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>类加载器调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.asm.AsmClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsmProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">amsProxyTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        AsmClassLoader classLoader = <span class="keyword">new</span> AsmClassLoader();</span><br><span class="line">        <span class="comment">// 生成二进制字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = classLoader.generateClassBytes();</span><br><span class="line">        <span class="comment">// 加载生成的 HelloWorld 类</span></span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.defineClass(<span class="string">"com.proxy.asm.HelloWorld"</span>, bytes);</span><br><span class="line">        <span class="comment">// 反射获取 main 方法</span></span><br><span class="line">        Method main = clazz.getMethod(<span class="string">"main"</span>, String[].class);</span><br><span class="line">        <span class="comment">// 调用 main 方法</span></span><br><span class="line">        main.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] {<span class="keyword">new</span> String[] {}});</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello ASM!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结-2"><a href="#使用总结-2" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：全链路监控、破解工具包、Cglib、Byte Buddy</li><li> 使用点评：ASM 代理使用了字节码编程的方式进行处理，它的实现方式相对复杂，而且需要了解 Java 虚拟机规范相关的知识。因为开发人员的每一步代理操作，都是在操作字节码指令，例如：<code>Opcodes.GETSTATIC</code>、<code>Opcodes.INVOKEVIRTUAL</code>，除了这些还有约 200 个常用的指令。但 ASM 这种最接近底层的方式，也是效率最快的方式，所以在一些使用字节码插装的全链路监控中，会非常常见。</li></ul><h2 id="Javassist-代理"><a href="#Javassist-代理" class="headerlink" title="Javassist 代理"></a>Javassist 代理</h2><p><a href="https://github.com/jboss-javassist/javassist">Javassist</a> 是一个开源的 Java 字节码操作类库。由东京工业大学的数学和计算机科学系的 Shigeru Chiba 创建。它已加入了开放源代码 JBoss 应用服务器项目，通过使用 Javassist 对字节码操作为 JBoss 实现动态 AOP 框架。其功能与 JDK 自带的反射功能类似，但比反射功能更强大，可以用来检查、动态修改以及创建 Java 类。</p><h3 id="使用案例-3"><a href="#使用案例-3" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>Maven 坐标 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.29.2-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Javassist 代理类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxy</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        <span class="comment">// 获取类</span></span><br><span class="line">        CtClass ctClass = pool.get(clazz.getName());</span><br><span class="line">        <span class="comment">// 获取方法</span></span><br><span class="line">        CtMethod ctMethod = ctClass.getDeclaredMethod(<span class="string">"queryUserInfo"</span>);</span><br><span class="line">        <span class="comment">// 方法前加强</span></span><br><span class="line">        ctMethod.insertBefore(<span class="string">"{System.out.println(\""</span> + ctMethod.getName() + <span class="string">"() 被 JavassistProxy 代理了\");}"</span>);</span><br><span class="line">        <span class="comment">// 获取字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">new</span> JavassistProxy().defineClass(clazz.getName(), bytes, <span class="number">0</span>, bytes.length).newInstance();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Javassist 代理类调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.javassist.JavassistProxy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">javassistProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        IUserApi userApi = JavassistProxy.getProxy(UserApi.class);</span><br><span class="line">        String invoke = userApi.queryUserInfo();</span><br><span class="line">        System.out.println(<span class="string">"运行结果: "</span> + invoke);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryUserInfo() 被 JavassistProxy 代理了</span><br><span class="line">运行结果: Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结-3"><a href="#使用总结-3" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：全链路监控、类代理、AOP</li><li> 使用点评：Javassist 是一个使用非常广的字节码插装框架，几乎一大部分非入侵式的全链路监控都是会选择使用这个框架。因为它不想像 ASM 那样操作字节码导致风险，同时它的功能也非常齐全。另外，这个框架即可使用它所提供的方式直接编写插装代码，也可以使用字节码指令进行控制生成代码，所以综合来看也是一个非常不错的字节码框架。</li></ul><h2 id="Byte-Buddy-代理"><a href="#Byte-Buddy-代理" class="headerlink" title="Byte Buddy 代理"></a>Byte Buddy 代理</h2><p><a href="https://github.com/raphw/byte-buddy">Byte Buddy</a> 是一个字节码生成和操作类库，用于在 Java 应用程序运行时创建和修改 Java 类，而无需编译器的帮助。除了 Java 类库附带的代码生成实用程序外，Byte Buddy 还允许创建任意类，并且不限于实现用于创建运行时代理的接口。此外，Byte Buddy 提供了一种方便的 API，可以使用 Java 代理或在构建过程中手动更改类；无需理解字节码指令，即可使用简单的 API 就能很容易操作字节码，控制类和方法。值得一提的是，Byte Buddy 跟 Cglib 一样，底层都是依赖 ASM 实现的。2015 年 10 月，Byte Buddy 被 Oracle 授予了 Duke’s Choice 大奖。该奖项对 Byte Buddy 的 “Java 技术方面的巨大创新” 表示赞赏。</p><h3 id="使用案例-4"><a href="#使用案例-4" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>Maven 坐标 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.bytebuddy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>byte-buddy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Byte Buddy 拦截器类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.AllArguments;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.Origin;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.RuntimeType;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.SuperCall;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvocationInterceptor</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RuntimeType</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">intercept</span><span class="params">(<span class="meta">@Origin</span> Method method, <span class="meta">@AllArguments</span> Object[] args, <span class="meta">@SuperCall</span> Callable&lt;?&gt; callable)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(method.getName() + <span class="string">"() 被 ByteBuddyProxy 代理了"</span>);</span><br><span class="line">        <span class="keyword">return</span> callable.call();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Byte Buddy 代理类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.bytebuddy.ByteBuddy;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.description.method.MethodDescription;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.dynamic.DynamicType;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.MethodDelegation;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.matcher.ElementMatchers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuddyProxy</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        DynamicType.Unloaded&lt;?&gt; dynamicType = <span class="keyword">new</span> ByteBuddy().subclass(clazz)</span><br><span class="line">                .method(ElementMatchers.&lt;MethodDescription&gt;any())</span><br><span class="line">                .intercept(MethodDelegation.to(InvocationInterceptor.class)).make();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (T) dynamicType.load(Thread.currentThread().getContextClassLoader()).getLoaded().newInstance();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Byte Buddy 代理类调用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.proxy.buddy.ByteBuddyProxy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuddyProxyTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">byteBuddyProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        IUserApi userApi = ByteBuddyProxy.getProxy(UserApi.class);</span><br><span class="line">        String invoke = userApi.queryUserInfo();</span><br><span class="line">        System.out.println(invoke);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryUserInfo() 被 ByteBuddyProxy 代理了</span><br><span class="line">Hello Proxy!</span><br></pre></td></tr></tbody></table></figure><h3 id="使用总结-4"><a href="#使用总结-4" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>使用场景：AOP 切面、类代理、组件、监控、日志</li><li>使用点评：Byte Buddy 也是一个字节码操作的类库，但 Byte Buddy 的使用方式更加简单。比起 JDK 动态代理、Cglib、Javassist 的实现，Byte Buddy 在性能上具有一定的优势。</li></ul><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>代理的实际目的就是通过一些技术手段，替换掉原有的实现类或者给原有的实现类注入新的字节码指令；而这些技术往往会被应用到一些框架、中间件开发以及类似非入侵式的全链路监控中。几种代理方式相比较，在性能上 Javassist 高于反射，但低于 ASM，因为 Javassist 增加了一层抽象。在实现成本上 Javassist 和反射都很低，而 ASM 由于直接操作字节码，相比 Javassist 源码级别的 API 实现，ASM 的实现成本要高很多。</p><p><img data-src="../../../asset/2022/11/java-proxy.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://asm.ow2.io/">ASM 官方文档</a></li><li><a href="https://bytebuddy.net/">Byte Buddy 官方文档</a></li><li><a href="https://github.com/fuzhengwei/itstack-demo-bytecode">Java 字节码编程系列知识</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Java 的五种代理实现方式，包括 JDK、Cglib、ASM、Byte Buddy、Javassist。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
  </entry>
  
</feed>
