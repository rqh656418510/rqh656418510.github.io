<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clay 的技术博客</title>
  
  <subtitle>用进废退 | 艺不压身</subtitle>
  <link href="https://www.techgrow.cn/atom.xml" rel="self"/>
  
  <link href="https://www.techgrow.cn/"/>
  <updated>2022-03-19T13:48:23.000Z</updated>
  <id>https://www.techgrow.cn/</id>
  
  <author>
    <name>Clay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos7 使用 Rsync 同步文件</title>
    <link href="https://www.techgrow.cn/posts/a8ab361e.html"/>
    <id>https://www.techgrow.cn/posts/a8ab361e.html</id>
    <published>2022-03-19T13:48:23.000Z</published>
    <updated>2022-03-19T13:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Rsync 是一个增量备份工具，可压缩数据传输，速度快且增量备份，占用流量少。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建用户组</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> groupadd www</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建用户</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> useradd -g www www  -s /bin/<span class="literal">false</span></span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建Rsync服务器信息提示文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Welcome To Access"</span> &gt; /etc/rsyncd.motd</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建Rsync服务器密码文件，其中 RsyncUser 是用户名，123456 是密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"RsyncUser:123456"</span> &gt; /etc/rsyncd.secrets</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Rsync服务器密码文件授权，所属的用户和用户组必须都是 root，同时权限必须为 600</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chown root:root /etc/rsyncd.secrets</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod 600 /etc/rsyncd.secrets</span></span><br></pre></td></tr></tbody></table></figure><h2 id="安装-Rsync"><a href="#安装-Rsync" class="headerlink" title="安装 Rsync"></a>安装 Rsync</h2><h3 id="安装-Rsync-服务"><a href="#安装-Rsync-服务" class="headerlink" title="安装 Rsync 服务"></a>安装 Rsync 服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&nbsp;yum install rsync</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机自启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> rsyncd</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">注意</p><p>这里还需要更改 systemd 的配置文件，加入以下内容，否则 Rsync 服务开机无法正常自启动。</p></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更改systemd的配置文件，加入以下内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /usr/lib/systemd/system/rsyncd.service</span></span><br><span class="line">[Unit]</span><br><span class="line">...</span><br><span class="line">After=network.target</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 让配置文件生效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl daemon-reload</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置-Rsync-服务"><a href="#配置-Rsync-服务" class="headerlink" title="配置 Rsync 服务"></a>配置 Rsync 服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份默认的配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /etc/rsyncd.conf /etc/rsyncd.conf.bak</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑配置文件，添加以下内容（请自行根据实际情况更改对应的配置内容）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/rsyncd.conf</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 设置服务器信息提示文件名称，在该文件中编写提示信息</span><br><span class="line">motd file = /etc/rsyncd.motd</span><br><span class="line"># 开启Rsync数据传输日志功能</span><br><span class="line">transfer logging = yes</span><br><span class="line"># 设置日志文件名称，可以通过log format参数设置日志格式</span><br><span class="line">log file =/var/log/rsyncd.log</span><br><span class="line"># 设置Rsync进程号保存文件名称</span><br><span class="line">pid file =/var/run/rsyncd.pid</span><br><span class="line"># 设置锁文件名称</span><br><span class="line">lock file =/var/run/rsync.lock</span><br><span class="line"># 设置服务器监听的端口号，默认为873 </span><br><span class="line">port = 873</span><br><span class="line"># 设置服务器所监听网卡接口的IP地址（内网IP）</span><br><span class="line">address = 172.0.25.18</span><br><span class="line"># 设置进行数据传输时所使用的账户名称或ID号，默认使用nobody </span><br><span class="line">uid = www</span><br><span class="line"># 设置进行数据传输时所使用的组名称或GID号，默认使用nobody </span><br><span class="line">gid = www</span><br><span class="line"># 设置user chroot为yes后，rsync会首先进行chroot设置，将根映射到path参数路径下，对客户端而言，系统的根就是path参数所指定的路径。但这样做需要root权限，并且在同步符号连接资料时仅会同步名称，而内容将不会同步。 </span><br><span class="line">use chroot = no</span><br><span class="line"># 是否允许客户端上传数据，这里设置不为只读。 </span><br><span class="line">read only = no</span><br><span class="line"># 设置并发连接数，0代表无限制。超出并发数后，如果依然有客户端连接请求，则将会收到稍后重试的提示消息 </span><br><span class="line">max connections = 10</span><br><span class="line"># 模块，Rsync通过模块定义同步的目录，模块以[name]的形式定义，这与Samba定义共享目录是一样的效果，在Rsync中也可以定义多个模块</span><br><span class="line">[blog]</span><br><span class="line"># comment定义注释说明字串 </span><br><span class="line">comment = rsync blog files</span><br><span class="line"># 同步目录的真实路径通过path指定 </span><br><span class="line">path = /home/www/blog</span><br><span class="line"># 忽略一些IO错误 </span><br><span class="line">ignore errors</span><br><span class="line"># exclude可以指定例外的目录，即将common目录下的某个目录设置为不同步数据 </span><br><span class="line"># exclude = test/ </span><br><span class="line"># 设置允许连接服务器的账户，账户可以是系统中不存在的用户 </span><br><span class="line">auth users = RsyncUser</span><br><span class="line"># 设置密码文件名称，注意该文件的权限要求为只读，建议权限为600，仅在设置auth users参数后有效 </span><br><span class="line">secrets file = /etc/rsyncd.secrets</span><br><span class="line"># 设置允许哪些主机可以同步数据，可以是单个IP，也可以是网段，多个IP与网段之间使用空格分隔 </span><br><span class="line">hosts allow = *</span><br><span class="line"># 设置拒绝所有（除hosts allow定义的主机外） </span><br><span class="line"># hosts deny = *</span><br><span class="line"># 客户端请求显示模块列表时，本模块名称是否显示，默认为true </span><br><span class="line">list = true</span><br></pre></td></tr></tbody></table></figure><h3 id="启动-Rsync-服务"><a href="#启动-Rsync-服务" class="headerlink" title="启动 Rsync 服务"></a>启动 Rsync 服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl start rsyncd</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务的运行状态</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl status rsyncd</span></span><br></pre></td></tr></tbody></table></figure><p>值得一提的是，还可以使用以下命令管理 Rsync 服务：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl stop rsyncd</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl restart rsyncd</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置系统防火墙"><a href="#配置系统防火墙" class="headerlink" title="配置系统防火墙"></a>配置系统防火墙</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开放Rsync监听的端口（默认端口是873）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --permanent --add-port=873/tcp</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 让防火墙规则生效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有开放的端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --list-ports</span></span><br></pre></td></tr></tbody></table></figure><h2 id="测试文件同步服务"><a href="#测试文件同步服务" class="headerlink" title="测试文件同步服务"></a>测试文件同步服务</h2><div class="admonition note"><p class="admonition-title">提示</p><p>在下述的案例里，各命令参数的说明如下：</p><ul><li><code>183.242.11.186</code>：服务器的 IP 地址</li><li><code>blog</code>：在 <code>/etc/rsyncd.conf</code> 配置文件中定义的模块名称</li><li><code>RsyncUser</code>：在 <code>/etc/rsyncd.secrets</code> 配置文件中定义的用户名</li><li><code>--delete</code>：表示同步文件时，删除目标目录比源目录多余的文件</li></ul></div><h3 id="同步目录授权"><a href="#同步目录授权" class="headerlink" title="同步目录授权"></a>同步目录授权</h3><p>在服务器上，确保用户拥有在 <code>/etc/rsyncd.conf</code> 配置文件中定义的 <code>path</code> 同步目录的访问权限。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 同步目录授权</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chown -R www:www /home/www/blog</span></span><br></pre></td></tr></tbody></table></figure><h3 id="客户端同步服务器文件到本地"><a href="#客户端同步服务器文件到本地" class="headerlink" title="客户端同步服务器文件到本地"></a>客户端同步服务器文件到本地</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 客户端同步服务器的某个文件到本地</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rsync -vzrtopg --progress RsyncUser@183.242.11.186::blog/index.html ./</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端同步服务器的某个目录到本地</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rsync -vzrtopg --progress RsyncUser@183.242.11.186::blog/posts/ ./posts/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="客户端同步本地文件到服务器"><a href="#客户端同步本地文件到服务器" class="headerlink" title="客户端同步本地文件到服务器"></a>客户端同步本地文件到服务器</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 客户端同步本地的某个文件到服务器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rsync -rlptDv index.html RsyncUser@183.242.11.186::blog/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端同步本地的某个目录到服务器（本地的目录路径必须不以<span class="string">'/'</span>结尾）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rsync -avzP --delete ./posts RsyncUser@183.242.11.186::blog/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端同步本地某个目录下的所有文件到服务器（本地的目录路径必须以<span class="string">'/'</span>结尾）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rsync -avzP --delete ./posts/ RsyncUser@183.242.11.186::blog/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="设置同步时不手动输入密码"><a href="#设置同步时不手动输入密码" class="headerlink" title="设置同步时不手动输入密码"></a>设置同步时不手动输入密码</h2><p>在客户端同步文件时指定密码文件，这样可以避免每次都手动输入密码。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在本地创建密码文件，其中 123456 是密码，这里不需要指定用户名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"123456"</span> &gt; /etc/rsyncd.password</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 密码文件授权，所属的用户和用户组必须都是 root，同时权限必须为 600</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chown root:root /etc/rsyncd.password</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod 600 /etc/rsyncd.password</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 客户端同步服务器的某个文件到本地（指定密码文件）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rsync -vzrtopg --progress RsyncUser@183.242.11.186::blog/index.html ./ --password-file=/etc/rsyncd.password</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>除了上述的方法之外，还可通过设置环境变量的方式，避免每次都手动输入密码。</p></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过环境变量设置密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> RSYNC_PASSWORD=<span class="string">"123456"</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端同步服务器的某个文件到本地</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rsync -vzrtopg --progress RsyncUser@183.242.11.186::blog/index.html ./</span></span><br></pre></td></tr></tbody></table></figure><h2 id="不同步文件的所有者和用户组信息"><a href="#不同步文件的所有者和用户组信息" class="headerlink" title="不同步文件的所有者和用户组信息"></a>不同步文件的所有者和用户组信息</h2><p>在 <code>rsync -a dir/ remote:/dir/</code> 命令中，<code>-a</code> 相当于 <code>-rlptgoD</code>，各参数选项的说明如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-o, --owner                 preserve owner (super-user only)</span><br><span class="line">-g, --group                 preserve group</span><br><span class="line">-r, --recursive             recurse into directories</span><br><span class="line">-l, --links                 copy symlinks as symlinks</span><br><span class="line">-p, --perms                 preserve permissions</span><br><span class="line">-t, --times                 preserve modification times</span><br><span class="line">-D                          same as --devices --specials</span><br><span class="line">    --devices               preserve device files (super-user only)</span><br><span class="line">    --specials              preserve special files</span><br></pre></td></tr></tbody></table></figure><p>若希望不同步文件的所有者和用户组信息，那么可以通过移除 <code>-o</code> 和 <code>-g</code> 参数选项来实现，示例命令如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -a --no-o --no-g dir/ remote:/dir/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="用参数控制-Rsync-同步时的比较算法"><a href="#用参数控制-Rsync-同步时的比较算法" class="headerlink" title="用参数控制 Rsync 同步时的比较算法"></a>用参数控制 Rsync 同步时的比较算法</h2><p>Rsync 默认只会比较文件大小和最后修改时间，只要这两者一样，Rsync 就认为文件相同；此时如果其它属性（包括文件内容）的不同，并不会让 Rsync 同步该文件。所以，如果本地文件与远程文件大小一样，修改时间也一样，那么默认情况下，即使文件内容不一样的文件也不同被同步。通过设置合适的参数，可以控制 Rsync 的比较算法，其中 Rsync 使用以下三个步骤来比较文件：</p><ul><li>a) 比较文件大小</li><li> b) 比较文件最后修改日期</li><li> c) 比较文件内容，通过 <code>checksum</code>，例如使用 <code>md5sum</code></li></ul><p>可以用参数来控制 Rsync 执行上面的哪些步骤：</p><ul><li>默认的比较算法只执行 a 和 b</li><li> 参数 <code>--size-only</code> 只检查 a ，即只要文件大小一样，即使修改日期不一样，就认为文件一样，更不会去检查文件内容</li><li>参数 <code>--ignore-times</code> 是忽略所有检查，直接认为文件都不一样，然后总是复制文件</li><li>参数 <code>--checksum</code> 是在 a 的基础上执行 c ，比较文件内容。如果文件大小不一样，可以确保内容不一样。如果文件大小一样，那么直接比较文件内容，不会执行 b 中的比较最后修改时间。该方法最安全，但需要读取两边的文件内容，某些情况下要慢很多（尤其是最后比较出来的文件内容一样的情况）</li></ul><p>命令参数的使用示例如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -avzP --delete --checksum dir/ remote:/dir/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="delete-参数不生效"><a href="#delete-参数不生效" class="headerlink" title="delete 参数不生效"></a>delete 参数不生效</h3><ul><li><a href="https://askubuntu.com/questions/609968/rsync-delete-option-doesnt-delete-files-in-target-directory">Rsync –delete option doesn’t delete files in target directory</a></li></ul></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Centos7 如何使用 Rsync 同步文件。</summary>
    
    
    
    
    <category term="Centos" scheme="https://www.techgrow.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 安装 Edge 浏览器</title>
    <link href="https://www.techgrow.cn/posts/350db602.html"/>
    <id>https://www.techgrow.cn/posts/350db602.html</id>
    <published>2022-03-08T13:48:23.000Z</published>
    <updated>2022-03-08T13:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在 Edge 的 <a href="https://www.microsoftedgeinsider.com/zh-cn/download/?platform=linux">官网</a>，手动下载最新版的 RPM 安装包，或者使用以下命令进行下载：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://packages.microsoft.com/yumrepos/edge/microsoft-edge-dev-101.0.1193.0-1.x86_64.rpm</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install libatomic</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>若不提前安装 <code>libatomic</code> 库，则安装 Edge 时会出现以下错误信息。</p></div><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：依赖检测失败：</span><br><span class="line">libatomic.so.1()(64bit) 被 microsoft-edge-dev-101.0.1193.0-1.x86_64 需要</span><br><span class="line">libatomic.so.1(LIBATOMIC_1.0)(64bit) 被 microsoft-edge-dev-101.0.1193.0-1.x86_64 需要</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-Edge-浏览器"><a href="#安装-Edge-浏览器" class="headerlink" title="安装 Edge 浏览器"></a>安装 Edge 浏览器</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rpm -ivh microsoft-edge-dev-101.0.1193.0-1.x86_64.rpm</span></span><br></pre></td></tr></tbody></table></figure></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍Centos7如何安装Edge浏览器。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Centos" scheme="https://www.techgrow.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客导流微信公众号</title>
    <link href="https://www.techgrow.cn/posts/c86372a2.html"/>
    <id>https://www.techgrow.cn/posts/c86372a2.html</id>
    <published>2022-03-04T14:13:21.000Z</published>
    <updated>2022-03-04T14:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 博客建议安装 <a href="https://github.com/rqh656418510/hexo-readmore">hexo-readmore</a> 插件，将 <a href="https://open.techgrow.cn/">TechGrow</a> 的免费微信公众号导流工具整合到博客中，用户扫码关注微信公众号后可以解锁全站文章，让微信公众号的粉丝数躺着增长。</p><h2 id="注册博客"><a href="#注册博客" class="headerlink" title="注册博客"></a>注册博客</h2><p>浏览器访问 <a href="https://open.techgrow.cn/">TechGrow</a> 的官网，注册并登录账号后，进入博客的后台管理页面。首先点击左侧的菜单 <code>博客注册</code>，然后点击 <code>新增</code> 按钮，添加自己博客的信息。博客注册成功后，记录下博客 ID，后面的步骤会使用到</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/717e14eb59dd44dea62d6a0b7549abfd.png"></p><span id="more"></span><h2 id="设置公众号"><a href="#设置公众号" class="headerlink" title="设置公众号"></a>设置公众号</h2><p>在微信公众号的后台管理页面，菜单栏里选择 <code>自动回复</code> - <code>关键词回复</code>，启用 <code>自动回复</code>，然后点击 <code>添加回复</code> 按钮：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/em64p7w8wlqtt0rsjop0jjeywx29m25w.png"></p><p>填写 <code>规则名称</code>、<code>关键词（当初你在 TechGrow 中设置的）</code>、<code>回复内容</code> 选择 <code>文字</code>，然后 <code>回复文字</code> 的内容填写获取博客解锁验证码的链接，如下所示（请自行更改 <code>xxxxx-xxxxxxxxx-xxx</code> 为你申请到的博客 ID）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://open.techgrow.cn/#/readmore/captcha/generate?blogId=xxxxx-xxxxxxxxx-xxx"</span>&gt;</span>点击链接，获取博客解锁验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/yd89wbdji196ixtwzgzamw37fbein1ia.png"></p><p>此时，当读者关注你的微信公众号，并输入关键词后（比如我设置的关键词就是 <code>tech</code>），那么读者就会自动接收到获取博客解锁验证码的链接</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul><li>运行 <code>npm install</code> 命令安装插件到本地项目 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-readmore --save</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h2><p>编辑 Hexo 的 <code>_config.yml</code> 配置文件，新增插件的配置信息（请自行更改博客相关的信息），如下所示：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readmore:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                                      <span class="comment"># 是否启用，默认否</span></span><br><span class="line">  <span class="attr">blogId:</span> <span class="string">'18762-1609305354821-257'</span>                                 <span class="comment"># 已申请的博客 ID</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">'全栈技术驿站'</span>                                                <span class="comment"># 已申请的微信公众号名称</span></span><br><span class="line">  <span class="attr">keyword:</span> <span class="string">'tech'</span>                                                   <span class="comment"># 已申请的微信公众号回复关键字</span></span><br><span class="line">  <span class="attr">qrcode:</span> <span class="string">'https://www.techgrow.cn/img/wx_mp_qr.png'</span>                <span class="comment"># 已申请的微信公众号二维码链接</span></span><br><span class="line">  <span class="comment"># libUrl: 'https://qiniu.techgrow.cn/js/readmore.js'              # CDN 加速链接（可选）</span></span><br><span class="line">  <span class="comment"># random: 0.8                                                     # 每篇文章随机添加微信公众号导流工具的概率，有效范围在 0.1 ~ 1 之间，1 则表示所有文章默认都自动添加导流工具（可选）</span></span><br></pre></td></tr></tbody></table></figure><p>或者打开 TechGrow 的<a href="https://open.techgrow.cn/#/readmore/website/register">博客后台管理页面</a>，点击博客列表中右侧的 <code>使用</code> 链接，将窗口里的 YML 配置内容复制到 Hexo 的 <code>_config.yml</code> 配置文件即可</p><h2 id="构建-Hexo"><a href="#构建-Hexo" class="headerlink" title="构建 Hexo"></a>构建 Hexo</h2><ul><li>运行 <code>hexo generate</code> 命令构建本地项目 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br></pre></td></tr></tbody></table></figure><ul><li>运行 <code>hexo server</code> 命令启动本地服务 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></tbody></table></figure><h2 id="验证插件效果"><a href="#验证插件效果" class="headerlink" title="验证插件效果"></a>验证插件效果</h2><p>打开文章页面，若文章自动隐藏了部分内容，并且出现了 <code>阅读全文</code> 按钮，则说明导流插件正常运行，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/3f53ab36dfa84fb99a6508ae46e5373a.png"></p><p>点击 <code>阅读全文按钮</code>，会弹出微信公众号的二维码窗口，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/202980a480fd463c814a31d5cc3fb2a1.png"></p><h2 id="取消阅读限制"><a href="#取消阅读限制" class="headerlink" title="取消阅读限制"></a>取消阅读限制</h2><p>若希望关闭某篇文章的微信公众号导流功能，可以在文章的头模板中使用 <code>readmore: false</code> 配置属性，如下所示：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:  Hexo版本升级教程</span><br><span class="line">tags: [Hexo]</span><br><span class="line">readmore: false</span><br><span class="line">keywords: [Hexo, 版本升级]</span><br><span class="line">date: 2022-01-12 22:25:49</span><br><span class="line">updated: 2022-01-12 22:25:49</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><h2 id="在线演示案例"><a href="#在线演示案例" class="headerlink" title="在线演示案例"></a>在线演示案例</h2><ul><li><a href="/posts/52f22f9b.html">官方博客</a></li></ul><h2 id="手动整合导流工具"><a href="#手动整合导流工具" class="headerlink" title="手动整合导流工具"></a>手动整合导流工具</h2><p>若有特殊的使用要求，你还可以手动为博客整合微信公众号导流工具，这样就可以不使用 Hexo 插件了，详细教程可以点击 <a href="/posts/48b470db.html">这里</a>。</p>]]></content>
    
    
    <summary type="html">本文主要介绍 Hexo 博客如何将网站的流量导向微信公众号，比 OpenWrite 的导流工具更强大。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>博客导流微信公众号</title>
    <link href="https://www.techgrow.cn/posts/48b470db.html"/>
    <id>https://www.techgrow.cn/posts/48b470db.html</id>
    <published>2022-03-02T14:13:21.000Z</published>
    <updated>2022-03-02T14:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博客将流量导向微信公众号很简单，可以使用 <a href="https://open.techgrow.cn/">TechGrow</a> 的免费导流工具实现，用户扫码关注微信公众号后可以解锁全站文章，让微信公众号的粉丝数躺着增长。整个过程只需六步就可以搞定，适用于各类主流的博客，本文以 Hexo 的 NexT 主题博客举例。</p><div class="admonition note"><p class="admonition-title">提示</p><p>若使用的是 Hexo 静态博客，建议直接安装 <a href="https://github.com/rqh656418510/hexo-readmore">hexo-readmore</a> 插件，将微信公众号导流工具快速添加到 Hexo 博客中，详细教程可点击<a href="/posts/c86372a2.html">这里</a>。</p></div><h2 id="第一步：注册博客"><a href="#第一步：注册博客" class="headerlink" title="第一步：注册博客"></a>第一步：注册博客</h2><p>浏览器访问 <a href="https://open.techgrow.cn/">TechGrow</a> 的官网，注册并登录账号后，进入博客的后台管理页面。首先点击左侧的菜单 <code>博客注册</code>，然后点击 <code>新增</code> 按钮，添加自己博客的信息。博客注册成功后，记录下博客 ID，后面的步骤会使用到</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/717e14eb59dd44dea62d6a0b7549abfd.png"></p><span id="more"></span><h2 id="第二步：设置微信公众号自动回复"><a href="#第二步：设置微信公众号自动回复" class="headerlink" title="第二步：设置微信公众号自动回复"></a>第二步：设置微信公众号自动回复</h2><p>在微信公众号的后台管理页面，菜单栏里选择 <code>自动回复</code> - <code>关键词回复</code>，启用 <code>自动回复</code>，然后点击 <code>添加回复</code> 按钮：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/em64p7w8wlqtt0rsjop0jjeywx29m25w.png"></p><p>填写 <code>规则名称</code>、<code>关键词（当初你在 TechGrow 中设置的）</code>、<code>回复内容</code> 选择 <code>文字</code>，然后 <code>回复文字</code> 的内容填写获取博客解锁验证码的链接，如下所示（请自行更改 <code>xxxxx-xxxxxxxxx-xxx</code> 为你申请到的博客 ID）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://open.techgrow.cn/#/readmore/captcha/generate?blogId=xxxxx-xxxxxxxxx-xxx"</span>&gt;</span>点击链接，获取博客解锁验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/yd89wbdji196ixtwzgzamw37fbein1ia.png"></p><p>此时，当读者关注你的微信公众号，并输入关键词后（比如我设置的关键词就是 <code>tech</code>），那么读者就会自动接收到获取博客解锁验证码的链接</p><h2 id="第三步：定位文章主体的标签元素"><a href="#第三步：定位文章主体的标签元素" class="headerlink" title="第三步：定位文章主体的标签元素"></a>第三步：定位文章主体的标签元素</h2><p>在博客的 <code>themes</code> 目录下，找到你正在使用的主题目录，比如：<code>next</code> 等，具体根据你选择的主题来判断。进入主题的 <code>layout</code> 目录，找到 <code>_macro/post.njk</code> 模板文件，若这里有一大段与文章主体内容相关的 HTML 代码，那就说明文章的模板定义就在这里，示例模板代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-block"</span>&gt;</span><br><span class="line">  {# Gallery support #}</span><br><span class="line">  {{ post_gallery(post.photos) }}</span><br><span class="line"></span><br><span class="line">  &lt;article itemscope itemtype=<span class="string">"http://schema.org/Article"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-content"</span> lang=<span class="string">"{{ post.lang }}"</span>&gt;</span><br><span class="line">    &lt;link itemprop="mainEntityOfPage" href="{{ post.permalink }}"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"&gt;</span><br><span class="line">      &lt;meta itemprop="image" content="{{ url_for(theme.avatar.url or theme.images + '/avatar.gif') }}"&gt;</span><br><span class="line">      &lt;meta itemprop="name" content="{{ author }}"&gt;</span><br><span class="line">      &lt;meta itemprop="description" content="{{ description }}"&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    ...（省略）</span><br><span class="line"></span><br><span class="line">  &lt;/article&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>另一种查看方式是打开你博客的任意一篇文章，利用 Chrome 等浏览器的元素审查功能，找到文章页面中文章主体的标签元素，比如下图中的 <code>article</code> 就是整篇文章的主体标签元素：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/5562a8e4868843e0868a4bdfd67c530e.png"></p><h2 id="第四步：新增文章内容的-DIV-标签"><a href="#第四步：新增文章内容的-DIV-标签" class="headerlink" title="第四步：新增文章内容的 DIV 标签"></a>第四步：新增文章内容的 DIV 标签</h2><p>在文章模板文件中找到文章主体的标签元素之后，在其上一层包一层 <code>div</code> 标签，并将 <code>div</code> 标签的 <code>id</code> 属性设置为 <code>readmore-container</code>，示例模板代码如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-block"</span>&gt;</span></span><br><span class="line">  {# Gallery support #}</span><br><span class="line">  {{ post_gallery(post.photos) }}</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"readmore-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Article"</span> <span class="attr">class</span>=<span class="string">"post-content"</span> <span class="attr">lang</span>=<span class="string">"{{ post.lang }}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">itemprop</span>=<span class="string">"mainEntityOfPage"</span> <span class="attr">href</span>=<span class="string">"{{ post.permalink }}"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">hidden</span> <span class="attr">itemprop</span>=<span class="string">"author"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"image"</span> <span class="attr">content</span>=<span class="string">"{{ url_for(theme.avatar.url or theme.images + '/avatar.gif') }}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"name"</span> <span class="attr">content</span>=<span class="string">"{{ author }}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"{{ description }}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        ...（省略）</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="第五步：新增导流工具的-HTML-代码"><a href="#第五步：新增导流工具的-HTML-代码" class="headerlink" title="第五步：新增导流工具的 HTML 代码"></a>第五步：新增导流工具的 HTML 代码</h2><p>打开 TechGrow 的<a href="https://open.techgrow.cn/#/readmore/website/register">博客后台管理页面</a>，点击博客列表中右侧的 <code>使用</code> 链接，将窗口里的 HTML 代码复制到第三步中找到的文章模板文件的末尾，也可以添加到主题的 <code>footer</code> 模板文件中，示例 HTML 代码如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/ad963a38752743169e8f351983cc6cc1.png"></p><div class="admonition note"><p class="admonition-title">参数说明</p><ul><li>id：div 标签的 ID</li><li>blogId：已申请的博客 ID</li><li>name: 已申请的微信公众号名称</li><li> qrcode: 已申请的微信公众号二维码链接</li><li> keyword：已申请的微信公众号回复关键字</li><li> random：每篇文章随机添加微信公众号导流工具的概率，有效范围在 0.1 ~ 1 之间，1 则表示所有文章默认都自动添加导流工具（可选）</li></ul></div><h2 id="第六步：验证导流工具是否正常运行"><a href="#第六步：验证导流工具是否正常运行" class="headerlink" title="第六步：验证导流工具是否正常运行"></a>第六步：验证导流工具是否正常运行</h2><p>重新构建并运行博客服务后，打开文章页面，若文章自动隐藏了部分内容，并且出现了 <code>阅读全文</code> 按钮，则说明导流工具整合成功，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/3f53ab36dfa84fb99a6508ae46e5373a.png"></p><p>点击 <code>阅读全文按钮</code>，会弹出微信公众号的二维码窗口，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/202980a480fd463c814a31d5cc3fb2a1.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍博客如何将网站的流量导向微信公众号，比 OpenWrite 的导流工具更强大。</summary>
    
    
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Vue 页面高亮显示代码块</title>
    <link href="https://www.techgrow.cn/posts/5cf75f16.html"/>
    <id>https://www.techgrow.cn/posts/5cf75f16.html</id>
    <published>2022-03-01T12:23:31.000Z</published>
    <updated>2022-03-01T12:23:31.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue 页面可以基于 <a href="https://github.com/koca/vue-prism-editor">vue-prism-editor</a> 实现高亮显示代码块，支持 Vue 2.x 和 Vue 3.x。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li><code>vue-prism-editor</code> 要求 Vue 的版本高于 <code>2.6.11</code></li><li>若 Vue 的版本为 3.x，则需要使用 <code>vue-prism-editor</code> 的 <a href="https://github.com/koca/vue-prism-editor/tree/feature/next">feature/next</a> 分支代码</li></ul></div><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install vue-prism-editor --save</span></span><br></pre></td></tr></tbody></table></figure><p>由于 <code>vue-prism-editor</code> 依赖了 <code>prismjs</code>，所以还需要安装 <code>prismjs</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install prismjs --save</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="Vue-代码"><a href="#Vue-代码" class="headerlink" title="Vue 代码"></a>Vue 代码</h2><p>在 Vue 页面中引入 <code>vue-prism-editor</code> 组件，完整的示例代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">prism-editor</span> <span class="attr">class</span>=<span class="string">"my-editor height-300"</span> <span class="attr">v-model</span>=<span class="string">"code"</span> <span class="attr">:highlight</span>=<span class="string">"highlighter"</span> <span class="attr">readonly</span> <span class="attr">line-numbers</span>&gt;</span><span class="tag">&lt;/<span class="name">prism-editor</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// import Prism Editor</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> { PrismEditor } <span class="keyword">from</span> <span class="string">'vue-prism-editor'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> <span class="string">'vue-prism-editor/dist/prismeditor.min.css'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// import highlighting library</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> { highlight, languages } <span class="keyword">from</span> <span class="string">'prismjs/components/prism-core'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> <span class="string">'prismjs/components/prism-clike'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> <span class="string">'prismjs/components/prism-javascript'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> <span class="string">'prismjs/themes/prism-tomorrow.css'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>: {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      PrismEditor</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    },</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">data</span>: <span class="function">() =&gt;</span> ({</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">code</span>: <span class="string">'console.log("Hello World")'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    }),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      highlighter (code) {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> highlight(code, languages.js)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  }</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="comment">/* required class */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.my-editor</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/* we dont use `language-` classes anymore so thats why we need to add background and text color manually */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">background</span>: <span class="number">#2d2d2d</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/* you must provide font-family font-size line-height. Example: */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">font-family</span>: Fira code, Fira Mono, Consolas, Menlo, Courier, monospace;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="comment">/* optional class for removing the outline */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.prism-editor__textarea</span><span class="selector-pseudo">:focus</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">  }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="comment">/* not required: */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.height-300</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><ul><li><code>highlighter</code>：定义在 <code>methods</code> 中的一个方法，用于将代码高亮显示</li><li><code>readonly</code>：代码块是否只读（不可编辑）</li><li><code>code</code>：需要高亮显示的代码内容</li><li><code>lineNumbers</code>：是否显示行号</li></ul></div><h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><p><img data-src="../../../asset/2022/03/vue-highlighter-code-2.png"></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>如果安装 NPM 模块失败，且错误信息中有提示升级 <code>vue@^2.6.11</code> 版本，则根据提示升级 Vue 的版本即可：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install vue@^2.6.11</span></span><br></pre></td></tr></tbody></table></figure><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p><code>vue</code> 与 <code>vue-template-compiler</code> 的版本不一致，导致 Vue 项目编译失败</p><p><img data-src="../../../asset/2022/03/vue-highlighter-code-1.png"></p><p>首先卸载低版本的 <code>vue-template-compiler</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm uninstall vue-template-compiler</span></span><br></pre></td></tr></tbody></table></figure><p>然后安装跟 <code>vue</code> 相同版本的 <code>vue-template-compiler</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install vue-template-compiler@2.6.11</span></span><br></pre></td></tr></tbody></table></figure></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Vue 页面如果高亮显示代码块，包括 vue-prism-editor 组件的使用。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue 页面读取并展示 Markdown 文件</title>
    <link href="https://www.techgrow.cn/posts/df920f01.html"/>
    <id>https://www.techgrow.cn/posts/df920f01.html</id>
    <published>2022-02-26T12:23:30.000Z</published>
    <updated>2022-02-26T12:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如何在 Vue 中读取项目本地的 MarkDown 文件并展示在网页上呢？查阅资料后发现，一般的方案是在 Vue 页面中引入 Markdown 编辑器，然后利用编辑器的预览功能来展示 MarkDown 文件的内容。推荐使用开源的 MarkDown 编辑器 <a href="https://github.com/hinesboy/mavonEditor">mavonEditor</a> 或者 <a href="https://github.com/zhaoxuhui1122/vue-markdown">vue-meditor</a>。</p><h2 id="vue-meditor-介绍"><a href="#vue-meditor-介绍" class="headerlink" title="vue-meditor 介绍"></a>vue-meditor 介绍</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://zhaoxuhui1122.github.io/vue-markdown-docs/">vue-meditor 官方文档</a></li><li><a href="https://github.com/zhaoxuhui1122/vue-markdown">vue-meditor Github 仓库</a></li></ul></div><span id="more"></span><p><code>vue-markdown</code> 是一款使用 <code>marked</code> 和 <code>highlight.js</code> 开发的一款 MarkDown 编辑器，主要包括三个部分：</p><ul><li>简单版编辑器，左侧文本输入框使用 <code>textarea</code> 实现</li><li>专业版编辑器，左侧输入框使用 <code>codemirror</code> 实现</li><li> MarkDown 预览组件，可单独使用</li></ul><h3 id="显示效果图"><a href="#显示效果图" class="headerlink" title="显示效果图"></a>显示效果图</h3><p><img data-src="../../../asset/2022/02/vue-meditor-preview-1.png"><br><img data-src="../../../asset/2022/02/vue-meditor-preview-2.png"><br><img data-src="../../../asset/2022/02/vue-meditor-preview-3.png"></p><h2 id="vue-meditor-使用"><a href="#vue-meditor-使用" class="headerlink" title="vue-meditor 使用"></a>vue-meditor 使用</h2><h3 id="使用-NPM-安装"><a href="#使用-NPM-安装" class="headerlink" title="使用 NPM 安装"></a>使用 NPM 安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -S vue-meditor</span></span><br></pre></td></tr></tbody></table></figure><h3 id="在项目中引入组件"><a href="#在项目中引入组件" class="headerlink" title="在项目中引入组件"></a>在项目中引入组件</h3><p>在 Vue 页面中引入 <code>vue-meditor</code> 的预览组件 <code>MarkdownPreview</code>，完整示例代码如下，编辑器的完整基本属性可查阅 <a href="https://zhaoxuhui1122.github.io/vue-markdown-docs/props.html">官方文档</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"markdown"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MarkdownPreview</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">v-model</span>=<span class="string">"content"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:height</span>=<span class="string">"1024"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:isPreview</span>=<span class="string">true</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:bordered</span>=<span class="string">false</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:copyCode</span>=<span class="string">true</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">theme</span>=<span class="string">"oneDark"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> MarkdownPreview <span class="keyword">from</span> <span class="string">'vue-meditor'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>: <span class="string">'markdown'</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    data () {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">content</span>: <span class="string">''</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    },</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>: {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      MarkdownPreview</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    },</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    created () {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 读取本地的Markdown文件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$http.get(<span class="string">'/static/guide/start.md'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (response.data) {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.content = response.data</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      })</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  }</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>值得一提的是，<code>/static/guide/start.md</code> 是 Vue 项目根目录下 MarkDown 文件的路径，上面的代码通过 HTTP 请求去读取 Markdown 文件，这样的优势是可以实时预览 MarDown 文件的内容。</p><h3 id="最终实现的效果图"><a href="#最终实现的效果图" class="headerlink" title="最终实现的效果图"></a>最终实现的效果图</h3><p><img data-src="../../../asset/2022/02/vue-meditor-preview-4.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/xingmeiok/article/details/103862369">Vue 使用 MarkDown</a></li><li><a href="https://www.appblog.cn/2018/06/12/Vue%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0md%E6%96%87%E4%BB%B6/">Vue 读取本地 MarkDown 文件</a></li><li><a href="https://www.cnblogs.com/ChineseLiao/p/11079080.html">Vue 读取展示 MarkDown 文件</a></li></ul></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Vue 页面如何读取并展示 MarkDown 文件，包括 MarkDown 编辑器 vue-meditor 的使用。</summary>
    
    
    
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CTP 开发随笔</title>
    <link href="https://www.techgrow.cn/posts/790d6d80.html"/>
    <id>https://www.techgrow.cn/posts/790d6d80.html</id>
    <published>2022-02-09T13:55:35.000Z</published>
    <updated>2022-02-09T13:55:35.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="API-版本升级"><a href="#API-版本升级" class="headerlink" title="API 版本升级"></a>API 版本升级</h2><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://blog.csdn.net/pjjing/article/details/101260440">CTP API 版本说明</a></li><li><a href="http://www.sfit.com.cn/5_2_DocumentDown_2.htm">CTP API 各版本官方下载</a></li><li>下面将以 v6.3.15 版本升级到 v6.6.1_P1 版本举例，同样适用于将 v6.3.19_P1 版本升级到 v6.6.1_P1</li></ul></div><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>从官网下载 <a href="http://www.sfit.com.cn/5_2_DocumentDown_2.htm">v6.6.1_P1_20210406</a> 版本的 API，然后解压并将 <code>.h</code> 头文件和 <code>.DLL</code> 文件拷贝到 C/C++ 项目里；也就是说，将原有的 API 文件替换掉即可。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p><code>v6.6.1_P1</code> 相比 <code>v6.3.15</code>，其中一个不同的地方，就是函数里的结构体名称更改了。因此需要在 IDE 里全局将 <code>CThostFtdcQueryMaxOrderVolumeField</code> 替换为 <code>CThostFtdcQryMaxOrderVolumeField</code>，同时将 <code>ReqQueryMaxOrderVolume</code> 替换为 <code>ReqQryMaxOrderVolume</code>。</p><span id="more"></span><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>由于 <code>v6.6.1_P1</code> 版本新增了一些函数，若项目的代码是基于官方的 Demo 进行二次开发的，那么则需要在下述的 C++ 源文件末尾追加以下代码：</p><ul><li>traderApi.h</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///请求查询分类合约</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">ReqQryClassifiedInstrument</span><span class="params">(CThostFtdcQryClassifiedInstrumentField *pQryClassifiedInstrument, <span class="keyword">int</span> nRequestID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///请求组合优惠比例</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">ReqQryCombPromotionParam</span><span class="params">(CThostFtdcQryCombPromotionParamField *pQryCombPromotionParam, <span class="keyword">int</span> nRequestID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///投资者风险结算持仓查询</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">ReqQryRiskSettleInvstPosition</span><span class="params">(CThostFtdcQryRiskSettleInvstPositionField *pQryRiskSettleInvstPosition, <span class="keyword">int</span> nRequestID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///风险结算产品查询</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">ReqQryRiskSettleProductStatus</span><span class="params">(CThostFtdcQryRiskSettleProductStatusField *pQryRiskSettleProductStatus, <span class="keyword">int</span> nRequestID)</span></span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>traderApi.cpp</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CTraderApi::ReqQryClassifiedInstrument</span><span class="params">(CThostFtdcQryClassifiedInstrumentField *pQryClassifiedInstrument, <span class="keyword">int</span> nRequestID)</span> </span>{</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CTraderApi::ReqQryCombPromotionParam</span><span class="params">(CThostFtdcQryCombPromotionParamField *pQryCombPromotionParam, <span class="keyword">int</span> nRequestID)</span> </span>{</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CTraderApi::ReqQryRiskSettleInvstPosition</span><span class="params">(CThostFtdcQryRiskSettleInvstPositionField *pQryRiskSettleInvstPosition, <span class="keyword">int</span> nRequestID)</span> </span>{</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CTraderApi::ReqQryRiskSettleProductStatus</span><span class="params">(CThostFtdcQryRiskSettleProductStatusField *pQryRiskSettleProductStatus, <span class="keyword">int</span> nRequestID)</span> </span>{</span><br><span class="line"></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 CTP 开发中常遇到的问题。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    <category term="量化交易" scheme="https://www.techgrow.cn/tags/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
  </entry>
  
  <entry>
    <title>学习与开发计划</title>
    <link href="https://www.techgrow.cn/posts/29d74d90.html"/>
    <id>https://www.techgrow.cn/posts/29d74d90.html</id>
    <published>2022-02-03T14:38:21.000Z</published>
    <updated>2022-02-03T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误, 请重新输入." data-whm="文章校验失败, 但不影响阅读解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a64012440754e820173e7599621e2f24864bbc9b67c480765227c40a89c9c697">4cfab7e4fdfd9afdbf1592f9652b8a194263aa6a7e6b4c103fbd9ff49c09b0448cdca81362464dc5686f95504da6299b6490ac25c35cdeb830b4ba7a9cf2685b33fc39e79fb8f4428211a3627c1ec7a0cbbf24dada87cb794a94c4848262ef48357c8d73a5bf83d40948261328d66e0bff17ffd38d41bcd0d1fc683fc31dd3c80e71868c7bf52ab01e12be51f74475299f4ac9540a69a67d78f5e7c10d4c0b764a171047a5eaf857aa307673cc4c870e17499b5c62dccb724834333eb82019590ad2374fbd15ce6c9c7b5d1dba92e43554f32d1c73942822adecdef87379cbac9e9349bd85119796d6a5c6631f5e516f0478907db61af4f983aa6ad2b5393cf975687eb140a1e9fbb2292575ea2aedd7553199ac383d191771bd23715e460a04bf468193f6e2071f64e22ed4c65c2ac7d8b8639d9771ee6e2498836a50c2cdcc208667d15b805cd24c5adafe630c6bb4bd038dd7f551120f1f5a3da469dbabf90589065d0054618c666243bbe8bce78818989bf699de93663a2069767baf28b9c50a733c48ca473c798bc70cd16f409c94201d0fb00e82a2f0501c2e76b299c98f19af7e4d00516103eee91b5b6f8d85904b3d4e84cfadd59e0c49523589b4ccedd50f8e0260ad04dd2bcc9a82ba77a6bfb437b670833c1e4f570af7c7e35ca527e95923553bd3f007d5163b0835eefe136dfc7e214531b34e2ea9f182a3b59bfe0e4911644fb8e147e47b01333aaf9cd7313108ff253adc1f7c0ce6542a550fd84ee41738e2a989ef02e4cabaaa80735a6a9976177486c297e1686c94f331ac4a91b64e60b65564a63f4d35a0d2c366096161e747c060f1be56422e72bc087d8f53ae420d717f228dcf2155b4291969e65585919ca835c979a281e273c926c2c73278f8ad6035a3566fa0cf4d557e5241be8a30980e5620b7b6ef3389c5625afff061ceea1467743c6ca9311d7a4af401af28c3bad54c317b413d607c8f849047dbd7e01514a90ff51ba8a65270e515e0f3cbdfe35154e81e93f97a8d0374e1023c4aa078a1a6cacf5470cdd44b4793ff74ceff9d1f957fa184bc70d57ea70da929ba370306ae837d71cd6ff314b8a4e625ae4a3457a117841a032be44e89a2a3b235fe7d326bc5cd003db40fad3990a1cf97cf1ee4b290e9c89a47873327f29af32421b761ed5eaac40d890b9403defedc37fbd6c387813b219f6f375456277587d0523779fbcdd533fcb6f62f109d7ae9996b06db502e6f7b0b26913b6402ce3b32c985fa8bdb93bc902387a8c706c551321dcd2dbd3039cb721bbb1d71840701bcfffcb141bde8c69c0b074e2fe3a55c5b5138577ef84a661e39945488543990d7c07ce1586fb5924bdc310bd47f451ce6dc290fe60d7874b59343cfb8be37b1c256dddd7e86e7769e9d41470ac83793b8ed8594e6f0185c8c922d2aec29e2c2edea0aabd202f6b71554c41148a254a3d645bec8ea440cbca6a8fabaaa34c029b18bc40a9e5520420e3324de11f27f452c820d54e68b3aff60d8a53df7e7baf209900b7cfe6d46f1ef095e514793106f4e21cbb991066a4431e73fa842ee145ebdb2ae73ded7c2c0b525aabee5e414366a1ff111614a4dd6f0035b98f5ef7b80d86a4da672a8f397148c7d05ed8924fd07930beb5c198fb4fef2a8e1d7b4faebee96d7f8d297566c610a4fa6fec1676d4d3d3e23b9e9bdd335ba32c0eb8734ea80bda7299e2631361aee439a4d519c7627c778885119b108016a185a6543fec5432d8007ce7780e62336577b9305f71d86e3f2fe24cc22695d3fadfad817d832114caa704e8a6b7757d753fcd778ec18bc9bf8c41a6e7d25438b4d0ddd1271eaf4e8f2fcc51931886f36736cb072d2ddde9c9bc7dc3d489aebdbfb7828578c1fee605f1367092a31786acc6cd85936e00d7a313ad7b4aa11e0c52524f3b304925541b6e6973100d7e75ee89a5954f9014c9757743d3f7e9955431a6040dd296dfc4655d816a2cde770183a3acae950ae7eccf3d998a1c017b9eb13b9f2722fe6fc27f799040740802d827bd9568cc98789eab29b2d4305c1835104b4c2a23a4b97b89eb622845272f5bfc4c614b3f16ebcf735022477343f599402540c3a0cf3dbca55437f7c4db37e8e6fbee186f50a447804e578c0601cc2dcd8a786f3103bfa3dbf932e1669c548949e2a93e1400928f3a9b88897ee5d3198004837a84e242a9a4d04fb7e7677ec7372dbbd55524b69a3d9aad89a6a83e0358c3c0770b686f2b55ba167f3034a0c11646c957839924a8648bb38b8358084564a5b29c31bc437020fe2247d5cad1bab4c956c935d2bfbc40232040a038eca0985212cd80e17e2597620846dd0bee2b45d24aaade7acac676897097ba642a937621d47fc00135e4759f85bc84fd631c8e3d5f9d809dbd3a7c3e5b654bb3cd6afb44c65c5b48992f0fdaac75db426cfae0ab2a3cb20acfb82d858a14d33824976b33ea84b2b7550e21f25db3cae73b629bc1a54fe112c4c21f1ff657b9ea9094fdbca0c3f8099d79bb3c9762a23630bc44e9cddbcb4a216f2bbfb524ec0883b2dd39984b54eea9dfa334b74ad4a92a46756b9fdf9d62c441f33812d0b0425d7d35c172ac4d9ef8ba77eb04f082e4e3a8c49dbc8e0b8e22e13d5a018d3fd0a1504e935f2cc016d45b13c5101ba53d10aa342a2b4dd624bed67013dd5210d1e28a8b8673da67341550f8d7e2cbb369e17789af004073c40bbf603304e7f009785f0adef47bbef7dfa5e29ed79e55913ae869cf785de14d58a8f16d6775c4b6140b2ff24822d72472b6b4ecdc665743d65bcfffcdda0c519dfc2048ba814660b2ddc4fecb2535b9343cc6abe1407303f1e3def66e4e7f844c9339c73c632a801d6674dd4976a56e11e79d508d8838f79c01c8f9a1d945edac4c3fcf6ee52f5a90ca4a995028c8cf7fcbe5550a956de38693ec2b281e8ad6659e7df3438188c0302f69012bdedf84de1ed0373e17f127833172b3bffbbcebe24829fb1d3643d2537bd83370ef0d0f5a0c41db4de390b1b6804c3851e2ee970da9d721e5531bf7684bfa9ae16bd7c071c23745d128b14289efaa95d15388bf427ef7d2e84bfa9f8e82c50049a613c9644fe8f500f0863c8a242c4306ed6baf6387755fdfe16ca54f8ca459d05abdf149de840c850ab9bd6698afb8e67fcce5039c55be6a421d982a5a8e8f7c600093da830df4a027e5c3271a52c37b230a678643a25201157ac00d2eac282b426a0bd02683275834e44cbad288ccdd9e1b4bd9c58dde0d474270491cf91002dda783d350706e820b38581170c172e29ae57850ec5341e24f570e1378c92139ea9ec16b0edae3f824020590f50dda17a9569a71c3b45958b4c063ddbf56e7cb78f7f51fb95d9fa4af101941f722a97dd112839562d45d663b1ad5502cac64dca596dc360d90297b62dcc3405d071439a61db60359e2e7b5b821a1f4622a88b884b9f4531282d798cb0b7a63bdc28118145e1e7cb9e78859f238c07483ed7b8c7208f687a88f19e8b3b3e3a3ead3df0ce40a0217dbbb7c8521be3fe5ceb55b13e57756830b1268e50d687520051118145bb707ec44f6269ee1b74abb7645fe44455cf0a66e3a9db5d4aad5c307edddab98e81f75488c4025b1b8e814bd7ccb1211fb307623dca9f2840fd7ed2d122317b601f1f2248908188ed3875131797137d11a6253f73c8a79206a45d6b5d39d1cec1441f3534a0dcb9fb1572eecae5881ffad798dbe061fa250d59c12da31196b7be9f831a8bf978018dfbfb17a3c525aa139b59278ac454ccc7014c984da6ee7115bb79a119ef6f42036af53ef59c52c773b75d3c299ba107dd9fe659b892b560665f2b80cbc05c9a86f61cd5bdacebdbf7c7c2f9967c7a225371e9e0561196911638c971bcf83d11d8e0c431a0df213b836d3ed8595630d7eaa93c8a3dc7a735ac7d959c4f997f8b1c2920b3625d04e2336102c8e50e1dca59294efabd70d02271d86f373793f7f6fe5f74a87c4943fa94d0f93a1e8fb6c06d9e17bc6921ba6473593377b5d06b265345a34157dee09d3db6dab9787e2ea95c313874da9236fce5fad9b9a6f7b3d91b567e449409cf1bbbbfff0ab099dd439d783b8b82dec5fc41d56a67bb97b4b371b9d3361e3458ed260394948fe5ef7c2456123b70a97ebbc13089a25f2bcf86abee94561cc5ed52f82f0d2333c9d97a4bff7eb8ad5d93449ecd069b5ba9b0a99b55337a18100a293670ce1641169c61304956fd44a8b3869cc4316496a03bf91399ebef4ded403eb664e4aae919b43605ddad076bc8e8fc42cdf00634dea2f8d1f60cf1192220c0f024fcecdba6446cf9a39396f0a9ddde68e5905f0efdc7eb87cc95e57ffe5504c271f4dbd2ac4aae29968a97e33ac93d73fe9f90f9f179d12bfca77e35b6dba7596fcd0f83e861081c1d6b30cd11fd3c8cc83c71f58e47e398f833ae0a9139198136c4b43e531ecb068e1e3e64268c4f4680207f21c760b9ab979df7eb191f6844a59e6d2e9a0e0952593cf820869b041db87e66772ef9edbb0dd115f9cdffd1a6aefe2896ab7f8087450a845d801848c01740c14381c30b5e0c0aa33f734fa04f09ebd5530a37a10438e4a4f650ebe452bc0cfdd08cd3cbd1235d6058360b0ba5b5ce26727316f0fd2938bcc8bbb62c22ac02be3b55b42643a4a4a869e3a159ae4cec16b52b64a65338405df28783eefb355132c0084da0f2b0e4aa905beb767928cbb7ac69c208870a0804534d663c92d94bd275c9ab6921e9a61a9222b84b1e4a3d9d0836c66255a408eab9d973cb105cdba10b284501484a103ff3bc3cac0df01c0555100ab102d205a2376811655d1307380e4787606dc05edbff6aaad5a9a821330560a81daffbce7adafa139efc4ccc25be4587b709c9f42048164937cff7eb08cb5c574f95fb0f4f36b08055d0a5b385a10be9217e11c0dc84bce48a621ce48e93447bd38c7c57ee9af22c65da1ded65239bf88c80d11ce9a01dd0d608fba7f2fb9ad2d3ee3ad1dd3ab5f19c44ba32af26f8f0fd4d45a0885f31f51ea6f97d4865775e7107c36922ca9e08e7d31afdb29e1d7bf8ef2caf0d8d71db2b467853c4209488247e5754645916133b6d3098ad1a8a61f9d5ca287328110328eef551e8eab010966b50594ccd9ba67039cc7708f4a2b1203a0902810df87fa04caa1f4b508b9e4c455879fa626203384ca28eae59c2822f431717e1a0a2a5b8c025b43033c54ff806f4b70ade00ea6c5dea1d353f9827517a7784a9bc7479f40387c9da8d1edfb2412b12ca55fc780060feb6006edc256efda869700ea2ca2536639283cda6cfacb3e097d1376461642d6234094892d75837c3766631042ebbc6883a3215fa7c0f713e58b1b138e06ee6a5ea0d25b2496cf3da43cb9f8146566a8d16ddc3c7fcca6f3768d31b7b1b289ca57433abac64db3a9a21133a041bee54b05263807de7a826bf545957a60bf9c91c22fb865888924f7535f09081298ada1d35fb4acaafed7c401ad250fe1ea31b0285a9cebf0cf717a1584b79e3af7d918e466fe4b1df4d71cb947002e00e31677abc1b4620ed42db4bb4fbea887c2e2afca74fd19e64ee8b6e55b094985542ee90e11cf9c12e74ad9a5b5dffe1b130e2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="请 输 入 阅 读 密 码.">请 输 入 阅 读 密 码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文主要记录近期的学习与开发计划。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="加密博客" scheme="https://www.techgrow.cn/tags/%E5%8A%A0%E5%AF%86%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>初探最流行的前端低代码平台</title>
    <link href="https://www.techgrow.cn/posts/65ee20c1.html"/>
    <id>https://www.techgrow.cn/posts/65ee20c1.html</id>
    <published>2022-01-25T12:23:30.000Z</published>
    <updated>2022-01-25T12:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2022 年，“低代码” 成了热门的话题，各大云厂商都在这个领域发力。那么作为普通的企业，是否也可以深度定制一套自己的 “低代码” 平台呢？</p><h2 id="云厂商的低代码平台"><a href="#云厂商的低代码平台" class="headerlink" title="云厂商的低代码平台"></a>云厂商的低代码平台</h2><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p>阿里云推出了易搭，通过简单的拖拽、配置，即可完成业务应用的搭建。旨在为广大中小企业提供一套低成本的企业应用搭建解决方案。应用无缝植入钉钉企业工作台，随时随地、高效协同。</p><span id="more"></span><p><img data-src="../../../asset/2022/01/frontend-low-code-1.png" alt="frontend-low-code-1"></p><h3 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h3><p>腾讯云则是推出了微搭，通过行业化模板、拖放式组件和可视化配置快速构建多端应用（小程序、H5 应用、Web 应用等），打通了小程序、云函数。</p><p><img data-src="../../../asset/2022/01/frontend-low-code-2.png" alt="frontend-low-code-2"></p><h2 id="开源的低代码平台"><a href="#开源的低代码平台" class="headerlink" title="开源的低代码平台"></a>开源的低代码平台</h2><h3 id="基础平台"><a href="#基础平台" class="headerlink" title="基础平台"></a>基础平台</h3><h4 id="amis"><a href="#amis" class="headerlink" title="amis"></a>amis</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/baidu/amis">amis GitHub 仓库</a></li><li><a href="https://baidu.gitee.io/amis/zh-CN/docs/index">amis 官方中文文档</a></li></ul></div><p>amis 是一个低代码前端框架，它使用 JSON 配置来生成页面，可以减少页面开发工作量，极大提升效率，由百度团队开源。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-3.png" alt="frontend-low-coder-3"></p><p><strong>用 JSON 写页面的好处</strong></p><p>为了实现用最简单方式来生成大部分页面，amis 的解决方案是基于 JSON 来配置，它的独特好处是：</p><ul><li>不需要懂前端：在百度内部，大部分 amis 用户之前从来没写过前端页面，也不会 <code>JavaScript</code>，却能做出专业且复杂的后台界面，这是所有其他前端 UI 库都无法做到的；</li><li>不受前端技术更新的影响：百度内部最老的 amis 页面是 6 年多前创建的，至今还在使用，而当年的 <code>Angular/Vue/React</code> 版本现在都废弃了，当年流行的 <code>Gulp</code> 也被 <code>Webpack</code> 取代了，如果这些页面不是用 amis，现在的维护成本会很高；</li><li>享受 amis 的不断升级：amis 一直在提升细节交互体验，比如表格首行冻结、下拉框大数据下不卡顿等，之前的 JSON 配置完全不需要修改；</li><li>可以完全使用 <a href="https://aisuda.github.io/amis-editor-demo/">可视化页面编辑器</a> 来制作页面；一般前端可视化编辑器只能用来做静态原型，而 amis 可视化编辑器做出的页面是可以直接上线的。</li></ul><p><strong>amis 的其它亮点</strong></p><ul><li>提供完整的界面解决方案：其它 UI 框架必须使用 JavaScript 来组装业务逻辑，而 amis 只需 JSON 配置就能完成完整功能开发，包括数据获取、表单提交及验证等功能，做出来的页面不需要经过二次开发就能直接上线；</li><li>大量内置组件（120+），一站式解决：其它 UI 框架大部分都只有最通用的组件，如果遇到一些稍微不常用的组件就得自己找第三方，而这些第三方组件往往在展现和交互上不一致，整合起来效果不好，而 amis 则内置大量组件，包括了富文本编辑器、代码编辑器、diff、条件组合、实时日志等业务组件，绝大部分中后台页面开发只需要了解 amis 就足够了；</li><li>支持扩展：除了低代码模式，还可以通过 <a href="./extend/internal">自定义组件</a> 来扩充组件，实际上 amis 可以当成普通 UI 库来使用，实现 90% 低代码，10% 代码开发的混合模式，既提升了效率，又不失灵活性；</li><li>容器支持无限级嵌套：可以通过嵌套来满足各种布局及展现需求；</li><li>经历了长时间的实战考验：amis 在百度内部得到了广泛使用，在 6 年多的时间里创建了 5 万页面，从内容审核到机器管理，从数据分析到模型训练，amis 满足了各种各样的页面需求，最复杂的页面有超过 1 万行 JSON 配置。</li></ul><p><strong>amis 不适合做什么</strong></p><p>使用 JSON 有优点但也有明显缺点，在以下场合并不适合 amis：</p><ul><li>大量定制 UI：JSON 配置使得 amis 更适合做有大量常见 UI 组件的页面，但对于面向普通客户（toC）的页面，往往追求个性化的视觉效果，这种情况下用 amis 就不合适，实际上绝大部分前端 UI 组件库也都不适合，只能定制开发。</li><li>极为复杂或特殊的交互：<ul><li>有些复杂的前端功能，比如 可视化编辑器，其中有大量定制的拖拽操作，这种需要依赖原生 DOM 实现的功能无法使用 amis。</li><li>但对于某些交互固定的领域，比如图连线，amis 后续会有专门的组件来实现。</li></ul></li></ul><h4 id="mometa"><a href="#mometa" class="headerlink" title="mometa"></a>mometa</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/imcuttle/mometa">mometa GitHub 仓库</a></li></ul></div><p>mometa 是一款面向研发的低代码元编程，代码可视编辑，辅助编码工具。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-5.png" alt="frontend-low-coder-5"></p><p><strong>背景</strong></p><p>mometa 不是传统主流的低代码平台（如 amis / 云凤蝶），mometa 是面向研发的、代码可视设计编辑平台，它更像是 dreamweaver、gui 可视编辑之于程序员。</p><p><strong>特性</strong></p><ul><li>面向研发的代码可视化编辑，直接作用于源码<ul><li>响应式布局、路由模拟、物料预览</li><li>反向定位（视图定位源码）</li><li>拖拽插入物料</li><li>拖拽移动</li><li>上下移动</li><li>删除</li><li>替换</li><li>层级选择</li></ul></li><li>接入友好，Webpack&gt;=4 插件化接入</li><li>开发友好，物料库支持热更新，不破坏已有开发模式</li><li>开放物料生态，可定制团队内物料库，见 <a href="https://github.com/imcuttle/mometa-mat">mometa-mat</a></li><li> 多语言、多生态支持，目前暂只支持 React，后续有计划支持 Vue</li></ul><p><strong>解决的问题</strong></p><ul><li>对低代码平台不形成依赖，二次开发可以无缝进入代码开发模式</li><li>同时支持所见即所得的可视编辑，用于提效，提升开发体验</li><li>提供物料生态，可自定义物料，提升物料使用体验，提升复用率</li></ul><p>mometa 定位更多是基于程序员本地开发的模式，新增了可视化编码的能力（修改的也是本地的代码文件本身）。它更像是辅助编码工具，而不是 No-Code (amis / 云凤蝶) 的平台方案。</p><h4 id="Sortable"><a href="#Sortable" class="headerlink" title="Sortable"></a>Sortable</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/SortableJS/Sortable">Sortable GitHub 仓库</a></li></ul></div><p>Sortable 是一个用于可重新排序的拖放列表的 JavaScript 库，可实现适用于现代浏览器和触摸设备的可重新排序的拖放列表，不需要依赖 jQuery 或框架。</p><h3 id="H5-开发"><a href="#H5-开发" class="headerlink" title="H5 开发"></a>H5 开发</h3><h4 id="H5-Dooring"><a href="#H5-Dooring" class="headerlink" title="H5-Dooring"></a>H5-Dooring</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/MrXujiang/h5-Dooring">H5-Dooring GitHub 仓库</a></li><li><a href="https://github.com/MrXujiang/h5-Dooring/wiki">H5-Dooring 官方 Wiki</a></li></ul></div><p>H5-Dooring 是一款功能强大，专业可靠的 H5 可视化页面配置解决方案，致力于提供一套简单方便、专业可靠、无限可能的 H5 落地页最佳实践。技术栈以 React 和 Typescript 为主， 后台采用 Nodejs 开发，正在探索 h5-lowcode 解决方案。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-4.png" alt="frontend-low-coder-4"></p><h4 id="luban-h5"><a href="#luban-h5" class="headerlink" title="luban-h5"></a>luban-h5</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/ly525/luban-h5">luban-h5 GitHub 仓库</a></li><li><a href="https://ly525.github.io/luban-h5/zh/">luban-h5 官方中文文档</a></li><li><a href="https://h5.luban-h5.com/">luban-h5 在线 Demo 演示</a></li></ul></div><p>鲁班 H5 是基于 Vue2.0 开发，通过拖拽快速生成页面的平台，类似 <a href="http://www.eqxiu.com/">易企秀</a>、<a href="http://maka.im/">Maka</a>、<a href="https://h5.baidu.com/">百度 H5</a> 等平台。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-6.png" alt="frontend-low-coder-6"></p><h4 id="quark-h5"><a href="#quark-h5" class="headerlink" title="quark-h5"></a>quark-h5</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/huangwei9527/quark-h5">quark-h5 GitHub 仓库</a></li></ul></div><p>quark-h5 是一款基于 Vue2 + Koa2 的 H5 页面可视化制作工具，让不会写代码的人也能轻松快速上手制作 H5 页面。类似易企秀、百度 H5 等 H5 制作、建站工具。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-7.png" alt="frontend-low-coder7"></p><h4 id="其他开源项目"><a href="#其他开源项目" class="headerlink" title="其他开源项目"></a>其他开源项目</h4><ul><li><a href="https://github.com/yangyuji/h5-factory">h5-factory</a>：H5 页面制作，移动端专题活动页面可视化编辑 </li><li><a href="https://github.com/lzuntalented/lz-h5-edit">lz-h5-edit</a>：随心秀（React 版 H5 微场景编辑器)，一款类似易企秀、兔展的 H5 微场景编辑器 </li><li><a href="https://github.com/buqiyuan/vite-vue3-lowcode">vite-vue3-lowcode</a>：移动端低代码平台，实现了可视化拖拽、可视化编辑器，类似易企秀的 H5 制作、建站工具、可视化搭建工具；</li></ul><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul><li><a href="https://mp.weixin.qq.com/s/uWLwjJ-fjDL2BR2i7aebVw">云凤蝶低代码之路</a></li><li><a href="https://www.cnblogs.com/caicz/p/15189383.html">搭建自己的低代码平台</a></li><li><a href="https://zhuanlan.zhihu.com/p/90746742">云凤蝶可视化搭建的推导与实现</a></li><li><a href="https://juejin.im/post/6844903992426758152">Vue + Koa 从零打造一个 H5 页面可视化编辑器 - quark-h5</a></li><li><a href="https://juejin.cn/post/6895715094257205261">基于 Koa2 打造属于自己的 MVC 框架，仿 Egg 的简易版本</a></li></ul></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要推荐流行的前端低代码平台，包括云厂商和开源的前端低代码平台。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="开源" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 转换微信公众号文章内容</title>
    <link href="https://www.techgrow.cn/posts/1c073f45.html"/>
    <id>https://www.techgrow.cn/posts/1c073f45.html</id>
    <published>2022-01-18T12:23:30.000Z</published>
    <updated>2022-01-18T12:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用微信公众号编辑器有一个十分头疼的问题 —— 粘贴出来的代码，格式错乱，而且特别丑。<a href="https://github.com/rqh656418510/markdown-weixin">markdown-weixin</a> 是一款让 Markdown 转微信公众号内容的神器，能让 Markdown 内容，无需作任何调整就能一键复制到微信公众号使用，而且特别针对代码展示做了优化。</p><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取源代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/rqh656418510/markdown-weixin.git</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入源代码目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> markdown-weixin</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看构建生成的文件（docs目录可直接部署到Web服务器）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -al docs</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><div class="admonition note"><p class="admonition-title">提示</p><ul><li>markdown-weixin 的 <a href="https://tool.techgrow.cn/markdown-weixin/">在线使用地址</a></li><li> markdown-weixin 的 <a href="https://github.com/rqh656418510/markdown-weixin">GitHub 仓库地址</a></li></ul></div><p><img data-src="../../../asset/2022/01/markdown-weixin-demo.png" alt="markdown-weixin-demo"></p><h2 id="使用-Docker"><a href="#使用-Docker" class="headerlink" title="使用 Docker"></a>使用 Docker</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker build -f Dockerfile -t clay/markdown-weixin:latest .</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -p 8080:80 clay/markdown-weixin:latest</span></span><br></pre></td></tr></tbody></table></figure><p>Docker 容器运行起来之后，打开浏览器访问 <code>http://127.0.0.1:8080</code> 即可，完整的 Dockerfile（基于 Debian 9 + Tengine） 如下：</p><figure class="highlight docker"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> clay&lt;clay@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd tengine &amp;&amp; useradd -g tengine tengine</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cp /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib"</span> &gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian-security stretch/updates main"</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -y update &amp;&amp; apt-get -y upgrade &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get -y install vim tree htop apt-utils net-tools telnet wget curl &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get -y install autoconf git build-essential libpcre3 libpcre3-dev zlib1g zlib1g.dev openssl libssl-dev &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get -y autoclean &amp;&amp; apt-get -y autoremove</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义Tengine的版本号</span></span><br><span class="line"><span class="keyword">ENV</span> VERSION <span class="number">2.2</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并解压文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> http://tengine.taobao.org/download/tengine-<span class="variable">$VERSION</span>.tar.gz /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xvf /usr/<span class="built_in">local</span>/src/tengine-<span class="variable">$VERSION</span>.tar.gz -C /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> TENGINE_HOME /usr/local/tengine</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$TENGINE_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/src/tengine-<span class="variable">$VERSION</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./configure \</span></span><br><span class="line"><span class="bash">        --user=tengine \</span></span><br><span class="line"><span class="bash">        --group=tengine \</span></span><br><span class="line"><span class="bash">        --prefix=<span class="variable">$TENGINE_HOME</span> \</span></span><br><span class="line"><span class="bash">        --with-http_ssl_module \</span></span><br><span class="line"><span class="bash">        --with-http_realip_module \</span></span><br><span class="line"><span class="bash">        --with-http_concat_module  \</span></span><br><span class="line"><span class="bash">        --with-http_gzip_static_module \</span></span><br><span class="line"><span class="bash">        --with-http_stub_status_module \</span></span><br><span class="line"><span class="bash">        --with-http_upstream_consistent_hash_module \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$TENGINE_HOME/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义APP目录</span></span><br><span class="line"><span class="keyword">ENV</span> APP_HOME $TENGINE_HOME/html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译APP项目</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /tmp/markdown-weixin \</span></span><br><span class="line"><span class="bash">    &amp;&amp; git <span class="built_in">clone</span> https://github.com/rqh656418510/markdown-weixin /tmp/markdown-weixin \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">cd</span> /tmp/markdown-weixin \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm install \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝APP项目编译后的文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$APP_HOME</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf <span class="variable">$APP_HOME</span>/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp -R -rf /tmp/markdown-weixin/docs/* <span class="variable">$APP_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /usr/<span class="built_in">local</span>/src &amp;&amp; rm -rf /tmp/markdown-weixin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$APP_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="variable">$TENGINE_HOME</span>/sbin/nginx -g <span class="string">'daemon off;'</span> -c <span class="variable">$TENGINE_HOME</span>/conf/nginx.conf</span></span><br></pre></td></tr></tbody></table></figure></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何将 Markdown 内容转换为微信公众号文章内容。</summary>
    
    
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Docker 构建 Frp 镜像</title>
    <link href="https://www.techgrow.cn/posts/8285186a.html"/>
    <id>https://www.techgrow.cn/posts/8285186a.html</id>
    <published>2022-01-15T13:30:00.000Z</published>
    <updated>2022-01-15T12:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><div class="admonition note"><p class="admonition-title">前言</p><ul><li><a href="https://gofrp.org/docs/">Frp 官方文档</a></li><li><a href="https://github.com/fatedier/frp">Frp GitHub 项目</a></li><li><a href="https://github.com/snowdreamtech/frp">Frp Docker GitHub 项目</a></li></ul></div><h2 id="构建-Frps-镜像"><a href="#构建-Frps-镜像" class="headerlink" title="构建 Frps 镜像"></a>构建 Frps 镜像</h2><ul><li>Dockerfile 编写 </li></ul><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> amd64/alpine:<span class="number">3.10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"snowdream &lt;sn0wdr1am@icloud.com&gt;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> FRP_VERSION <span class="number">0.38</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /root \</span></span><br><span class="line"><span class="bash">    &amp;&amp;  wget --no-check-certificate -c https://github.com/fatedier/frp/releases/download/v<span class="variable">${FRP_VERSION}</span>/frp_<span class="variable">${FRP_VERSION}</span>_linux_amd64.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp;  tar zxvf frp_<span class="variable">${FRP_VERSION}</span>_linux_amd64.tar.gz  \</span></span><br><span class="line"><span class="bash">    &amp;&amp;  <span class="built_in">cd</span> frp_<span class="variable">${FRP_VERSION}</span>_linux_amd64/ \</span></span><br><span class="line"><span class="bash">    &amp;&amp;  cp frps /usr/bin/ \</span></span><br><span class="line"><span class="bash">    &amp;&amp;  mkdir -p /etc/frp \</span></span><br><span class="line"><span class="bash">    &amp;&amp;  cp frps.ini /etc/frp \</span></span><br><span class="line"><span class="bash">    &amp;&amp;  <span class="built_in">cd</span> /root \</span></span><br><span class="line"><span class="bash">    &amp;&amp;  rm frp_<span class="variable">${FRP_VERSION}</span>_linux_amd64.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp;  rm -rf frp_<span class="variable">${FRP_VERSION}</span>_linux_amd64/ </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /usr/bin/frps -c /etc/frp/frps.ini</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><ul><li>构建镜像 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker build -f Dockerfile -t clay/frps:0.38.0 .</span></span><br></pre></td></tr></tbody></table></figure><ul><li>启动镜像 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run --restart=always --network host -d -v /etc/frp/frps.ini:/etc/frp/frps.ini --name frps clay/frps</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看日志信息 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker logs -f --tail 20 frps</span></span><br></pre></td></tr></tbody></table></figure><h2 id="构建-Frpc-镜像"><a href="#构建-Frpc-镜像" class="headerlink" title="构建 Frpc 镜像"></a>构建 Frpc 镜像</h2><ul><li>Dockerfile 编写 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FROM amd64/alpine:3.10</span><br><span class="line"></span><br><span class="line">LABEL maintainer="snowdream &lt;sn0wdr1am@icloud.com&gt;"</span><br><span class="line"></span><br><span class="line">ENV FRP_VERSION 0.38.0</span><br><span class="line"></span><br><span class="line">RUN cd /root \</span><br><span class="line">    &amp;&amp;  wget --no-check-certificate -c https://github.com/fatedier/frp/releases/download/v${FRP_VERSION}/frp_${FRP_VERSION}_linux_amd64.tar.gz \</span><br><span class="line">    &amp;&amp;  tar zxvf frp_${FRP_VERSION}_linux_amd64.tar.gz  \</span><br><span class="line">    &amp;&amp;  cd frp_${FRP_VERSION}_linux_amd64/ \</span><br><span class="line">    &amp;&amp;  cp frpc /usr/bin/ \</span><br><span class="line">    &amp;&amp;  mkdir -p /etc/frp \</span><br><span class="line">    &amp;&amp;  cp frpc.ini /etc/frp \</span><br><span class="line">    &amp;&amp;  cd /root \</span><br><span class="line">    &amp;&amp;  rm frp_${FRP_VERSION}_linux_amd64.tar.gz \</span><br><span class="line">    &amp;&amp;  rm -rf frp_${FRP_VERSION}_linux_amd64/ </span><br><span class="line"></span><br><span class="line">ENTRYPOINT /usr/bin/frpc -c /etc/frp/frpc.ini</span><br></pre></td></tr></tbody></table></figure><ul><li>构建镜像 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker build -f Dockerfile -t clay/frpc:0.38.0 .</span></span><br></pre></td></tr></tbody></table></figure><ul><li>启动镜像 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run --restart=always --network host -d -v /etc/frp/frpc.ini:/etc/frp/frpc.ini --name frpc clay/frpc</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看日志信息 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker logs -f --tail 20 frpc</span></span><br></pre></td></tr></tbody></table></figure></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文将介绍Docker如何构建Frp镜像。</summary>
    
    
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CMake 入门教程之三单元测试</title>
    <link href="https://www.techgrow.cn/posts/52f22f9b.html"/>
    <id>https://www.techgrow.cn/posts/52f22f9b.html</id>
    <published>2022-01-09T14:25:49.000Z</published>
    <updated>2022-01-09T14:25:49.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CMake 是一个跨平台的 C/C++ 项目组织管理工具，虽然许多 IDE 都有私有的项目管理工具，但是在现在各大 IDE 基本都支持使用 CMake 管理项目，所以如果有跨平台的需求，使用 CMake 管理是最方便的。值得一提的是，CMake 支持 <a href="https://github.com/google/googletest">gtest</a>、<code>cppunit</code> 等单元测试框架，当然也可以使用断言自定义单元测试。</p><h2 id="创建简单的带单元测试的项目"><a href="#创建简单的带单元测试的项目" class="headerlink" title="创建简单的带单元测试的项目"></a>创建简单的带单元测试的项目</h2><h3 id="创建项目工程"><a href="#创建项目工程" class="headerlink" title="创建项目工程"></a>创建项目工程</h3><div class="admonition note"><p class="admonition-title">下载代码</p><p><a href="/downloads/2022/01/minder-test.zip">点击下载</a> 完整的案例代码，项目的目录结构如下：</p></div><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">minder-test</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── datetime.h</span><br><span class="line">├── src</span><br><span class="line">│   ├── datetime.cpp</span><br><span class="line">│   └── main.cpp</span><br><span class="line">└── test</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── include</span><br><span class="line">    │   └── strUtil.h</span><br><span class="line">    └── src</span><br><span class="line">        └── main.cpp</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="编写项目代码"><a href="#编写项目代码" class="headerlink" title="编写项目代码"></a>编写项目代码</h3><ul><li>include/datetime.h</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期工具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> {</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> string <span class="title">formatCurrentTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> string <span class="title">formatCurrentTime</span><span class="params">(string format)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dayOfWeek</span><span class="params">(<span class="keyword">const</span> string &amp;date)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">isWeekendDays</span><span class="params">(<span class="keyword">const</span> string &amp;date)</span></span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ul><li>src/datetime.cpp</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"datetime.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化当前时间</span></span><br><span class="line"><span class="comment">// 默认格式是: 2020-06-07 23:46:53</span></span><br><span class="line"><span class="function">string <span class="title">DateUtil::formatCurrentTime</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">time_t</span> rawtime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">info</span>;</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">80</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">time</span>(&amp;rawtime);</span><br><span class="line">    info = <span class="built_in">localtime</span>(&amp;rawtime);</span><br><span class="line">    <span class="built_in">strftime</span>(buffer, <span class="number">80</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>, info);</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">(buffer)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化当前时间</span></span><br><span class="line"><span class="comment">// format: 格式字符串，例如 %Y-%m-%d %H:%M:%S</span></span><br><span class="line"><span class="function">string <span class="title">DateUtil::formatCurrentTime</span><span class="params">(string format)</span> </span>{</span><br><span class="line">    <span class="keyword">time_t</span> rawtime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">info</span>;</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">80</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">time</span>(&amp;rawtime);</span><br><span class="line">    info = <span class="built_in">localtime</span>(&amp;rawtime);</span><br><span class="line">    <span class="built_in">strftime</span>(buffer, <span class="number">80</span>, format.<span class="built_in">c_str</span>(), info);</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">(buffer)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据给定的日期，计算它是星期几</span></span><br><span class="line"><span class="comment">// date: 日期字符串，格式是: 2021-12-01</span></span><br><span class="line"><span class="comment">// 返回值：1, 2, 3, 4, 5, 6, 0, 其中 0 表示星期日</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DateUtil::dayOfWeek</span><span class="params">(<span class="keyword">const</span> string &amp;date)</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> y, m, d;</span><br><span class="line">    <span class="built_in">stringstream</span>(date) &gt;&gt; y &gt;&gt; c &gt;&gt; m &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    tm t = {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, d, m - <span class="number">1</span>, y - <span class="number">1900</span>};</span><br><span class="line">    <span class="built_in">mktime</span>(&amp;t);</span><br><span class="line">    <span class="keyword">return</span> t.tm_wday;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据给定的日期，判断是否为周末</span></span><br><span class="line"><span class="comment">// date: 日期字符串，格式是: 2021-12-01</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DateUtil::isWeekendDays</span><span class="params">(<span class="keyword">const</span> string &amp;date)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> wday = <span class="built_in">dayOfWeek</span>(date);</span><br><span class="line">    <span class="keyword">if</span> (wday == <span class="number">6</span> || wday == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>src/main.cpp</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"datetime.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    cout &lt;&lt; DateUtil::formatCurrentTime() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; DateUtil::formatCurrentTime(<span class="string">"%Y-%m-%d"</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>test/include/strUtil.h</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除字符串两边的空格</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trim</span><span class="params">(string &amp;str)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    str.<span class="built_in">erase</span>(<span class="number">0</span>, str.<span class="built_in">find_first_not_of</span>(<span class="string">" "</span>));</span><br><span class="line">    str.<span class="built_in">erase</span>(str.<span class="built_in">find_last_not_of</span>(<span class="string">" "</span>) + <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>test/src/main.cpp</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"strUtil.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"datetime.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 去除字符串两边的空格</span></span><br><span class="line">    string str = <span class="string">" Hello World ! "</span>;</span><br><span class="line">    <span class="built_in">trim</span>(str);</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据给定的日期，计算它是星期几</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"wday = "</span> &lt;&lt; DateUtil::<span class="built_in">dayOfWeek</span>(<span class="string">"2022-01-11"</span>) &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">"isWeekendDays = "</span> &lt;&lt; (DateUtil::<span class="built_in">isWeekendDays</span>(<span class="string">"2022-01-11"</span>) ? <span class="string">"true"</span> : <span class="string">"false"</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中 <code>test</code> 目录可以视作为子项目，和主目录分开编译。为了模拟更真实的企业项目开发场景，这里的 <code>test/src/main.cpp</code> 同时引入了 <code>datetime.h</code> 和 <code>strUtil.h</code> 头文件。</p><h3 id="CMake-配置文件"><a href="#CMake-配置文件" class="headerlink" title="CMake 配置文件"></a>CMake 配置文件</h3><ul><li>主目录的 <code>CMakeLists.txt</code></li></ul><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(minder)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义C++的版本</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出调试信息</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">"-g"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启所有警告</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">"-Wall"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定构建输出的目录</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_BINARY_DIR <span class="variable">${PROJECT_SOURCE_DIR}</span>/build)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入主项目的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索主项目的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/src MAIN_SOURCES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定可执行文件的名称和主项目的所有源文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">${PROJECT_NAME}</span> <span class="variable">${MAIN_SOURCES}</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用项目测试</span></span><br><span class="line"><span class="keyword">enable_testing</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加子目录（测试项目）</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加测试项目的可执行文件</span></span><br><span class="line"><span class="keyword">add_test</span>(minder_test <span class="variable">${PROJECT_SOURCE_DIR}</span>/<span class="keyword">test</span>/build/minder_test)</span><br></pre></td></tr></tbody></table></figure><p>特别说明：</p><ul><li><code>set(CMAKE_CXX_FLAGS "-xxx")</code>：指定编译参数，细化的还有 <code>CMAKE_CXX_FLAGS_DEBUG</code> 和<code> CMAKE_CXX_FLAGS_RELEASE</code></li><li><code>add_subdirectory(xxx)</code>：添加子目录（子项目），要求子目录里必须有单独的 <code>CMakeLists.txt</code>，该文件包含了子目录的编译配置信息</li><li><code>add_test(xxx ${PROJECT_SOURCE_DIR}/test/build/xxx)</code>：第一个参数是某个单元测试的名称，第二个参数是该单元测试的可执行文件的路径</li></ul><hr><ul><li><code>test</code> 目录的 <code>CMakeLists.txt</code></li></ul><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(minder_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义C++的版本</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索父目录（父项目）的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(../<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索父目录（父项目）的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(../src MAIN_SOURCES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除父目录（父项目）的入口源文件</span></span><br><span class="line"><span class="keyword">list</span>(FILTER MAIN_SOURCES EXCLUDE REGEX <span class="string">"main.cpp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入子项目的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索子项目里的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/src TEST_SOURCES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定构建输出的目录</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_BINARY_DIR <span class="variable">${PROJECT_SOURCE_DIR}</span>/build)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定可执行文件的名称和单元测试的所有源文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">${PROJECT_NAME}</span> <span class="variable">${MAIN_SOURCES}</span> <span class="variable">${TEST_SOURCES}</span>)</span><br></pre></td></tr></tbody></table></figure><p>这里的 <code>test</code> 作为子项目，主要要生成单元测试的可执行文件。</p><h3 id="命令行编译项目"><a href="#命令行编译项目" class="headerlink" title="命令行编译项目"></a>命令行编译项目</h3><ul><li>编译 <code>test</code> 子项目 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入子项目的目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> minder-test/<span class="built_in">test</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建子项目的构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入子项目的构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建子项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake ..</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译子项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行可执行文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./minder_test</span></span><br></pre></td></tr></tbody></table></figure><ul><li>编译主项目 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入主项目的目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> minder-test</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建主项目的构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入主项目的构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建主项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake ..</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译主项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行项目测试</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make <span class="built_in">test</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行可执行文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./minder</span></span><br></pre></td></tr></tbody></table></figure><h2 id="CMake-使用-GoogleTest-测试框架"><a href="#CMake-使用-GoogleTest-测试框架" class="headerlink" title="CMake 使用 GoogleTest 测试框架"></a>CMake 使用 GoogleTest 测试框架</h2><div class="admonition note"><p class="admonition-title">相关站点</p><ul><li><a href="https://google.github.io/googletest/">GoogleTest 官方文档</a></li><li><a href="https://github.com/google/googletest">GoogleTest GitHub 仓库</a></li><li><a href="https://github.com/google/googletest/releases">GoogleTest 官方下载页面</a></li></ul></div><h3 id="GoogleTest-的安装"><a href="#GoogleTest-的安装" class="headerlink" title="GoogleTest 的安装"></a>GoogleTest 的安装</h3><h4 id="GoogleTest-编译安装"><a href="#GoogleTest-编译安装" class="headerlink" title="GoogleTest 编译安装"></a>GoogleTest 编译安装</h4><div class="admonition warning"><p class="admonition-title">注意事项</p><ol><li>GoogleTest 最新版（<code>1.11.0</code>）要求使用 GCC <code>5.0+</code> 和 Clang <code>5.0+</code>，若 GCC 的版本比较低，建议安装 GoogleTest <code>1.10.0</code> 或者 <code>1.8.1</code> 版本</li><li>实测 GCC <code>4.8.5</code> 可以正常使用 GoogleTest 的 <code>1.10.0</code> 版本，不兼容 <code>1.11.0</code> 版本 </li></ol></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/google/googletest/archive/refs/tags/release-1.11.0.tar.gz</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf release-1.11.0.tar.gz</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入解压目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> googletest-release-1.11.0</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成makefile，如果需要构建得到动态链接库，则必须添加参数 <span class="string">"-DBUILD_SHARED_LIBS=ON"</span>，否则默认只会得到静态库（.a）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake -DBUILD_SHARED_LIBS=ON -Dgtest_build_samples=ON ..</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make -j4</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make install</span></span><br></pre></td></tr></tbody></table></figure><p>值得一提的是，安装命令执行完成后，会自动将 <code>libgmock_main.so</code> 、<code>libgmock.so</code>、<code>libgtest_main.so</code>、<code>libgtest.so</code> 库文件拷贝到 <code>/usr/local/lib64/</code> 目录下。GoogleTest 的头文件则会安装在 <code>/usr/local/include/gmock</code> 和 <code>/usr/local/include/gtest/</code> 目录。</p><h4 id="GoogleTest-验证安装"><a href="#GoogleTest-验证安装" class="headerlink" title="GoogleTest 验证安装"></a>GoogleTest 验证安装</h4><ul><li>创建 C++ 源文件 <code>test.cpp</code></li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtest/gtest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST</span>( COutputPopLimitStrategyTest, PositiveNos )</span><br><span class="line">{</span><br><span class="line"><span class="built_in">EXPECT_EQ</span>(<span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">::testing::<span class="built_in">InitGoogleTest</span>( &amp;argc, argv );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(<span class="built_in">RUN_ALL_TESTS</span>() );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 G++ 命令编译 C++ 源文件 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译源文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> g++ -std=c++11 test.cpp -lpthread /usr/<span class="built_in">local</span>/lib64/libgtest.so -o <span class="built_in">test</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行可执行文件，若输出以下的日志信息，则说明GoogleTest安装成功</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./<span class="built_in">test</span></span></span><br><span class="line"></span><br><span class="line">[==========] Running 1 test from 1 test suite.</span><br><span class="line">[----------] Global test environment set-up.</span><br><span class="line">[----------] 1 test from COutputPopLimitStrategyTest</span><br><span class="line">[ RUN      ] COutputPopLimitStrategyTest.PositiveNos</span><br><span class="line">[       OK ] COutputPopLimitStrategyTest.PositiveNos (0 ms)</span><br><span class="line">[----------] 1 test from COutputPopLimitStrategyTest (1 ms total)</span><br><span class="line"></span><br><span class="line">[----------] Global test environment tear-down</span><br><span class="line">[==========] 1 test from 1 test suite ran. (1 ms total)</span><br><span class="line">[  PASSED  ] 1 test.</span><br></pre></td></tr></tbody></table></figure><p>G++ 编译参数说明：</p><ul><li><code>-std=c++11</code>：指定 C++ 的版本</li><li><code>/usr/local/lib64/libgtest.so</code>：链接 GoogleTest 的动态链接库</li><li><code>-lpthread</code>：由于 GoogleTest 的内部使用了多线程，因此需要链接 <code>pthread</code> 库</li></ul><h3 id="Google-Test-的使用案例"><a href="#Google-Test-的使用案例" class="headerlink" title="Google Test 的使用案例"></a>Google Test 的使用案例</h3><h4 id="创建项目工程-1"><a href="#创建项目工程-1" class="headerlink" title="创建项目工程"></a>创建项目工程</h4><div class="admonition note"><p class="admonition-title">下载代码</p><p><a href="/downloads/2022/01/minder-gtest.zip">点击下载</a> 完整的案例代码，项目的目录结构如下：</p></div><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">minder-gtest</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── datetime.h</span><br><span class="line">├── src</span><br><span class="line">│   ├── datetime.cpp</span><br><span class="line">│   └── main.cpp</span><br><span class="line">└── test</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── include</span><br><span class="line">    │   └── strUtil.h</span><br><span class="line">    └── src</span><br><span class="line">        └── main.cpp</span><br></pre></td></tr></tbody></table></figure><h4 id="编写项目代码-1"><a href="#编写项目代码-1" class="headerlink" title="编写项目代码"></a>编写项目代码</h4><div class="admonition note"><p class="admonition-title">下载代码</p><p>这里的 C++ 代码，除了 <code>main.cpp</code> 的代码不一样之外，其他代码与上面的案例代码完全一致，不再累述。</p></div><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"strUtil.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"datetime.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtest/gtest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除字符串两边的空格</span></span><br><span class="line"><span class="built_in">TEST</span>(TestCase, test1) {</span><br><span class="line">    string str = <span class="string">" Hello World ! "</span>;</span><br><span class="line">    <span class="built_in">trim</span>(str);</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="string">"Hello World !"</span>, str);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据给定的日期，计算它是星期几</span></span><br><span class="line"><span class="built_in">TEST</span>(TestCase, test2) {</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="literal">true</span>, DateUtil::<span class="built_in">isWeekendDays</span>(<span class="string">"2022-01-09"</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>{</span><br><span class="line">    testing::<span class="built_in">InitGoogleTest</span>(&amp;argc, argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RUN_ALL_TESTS</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="CMake-配置文件-1"><a href="#CMake-配置文件-1" class="headerlink" title="CMake 配置文件"></a>CMake 配置文件</h4><ul><li>主目录的 <code>CMakeLists.txt</code>，这里的配置内容与上面的案例没有任何区别 </li></ul><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(minder)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义C++的版本</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出调试信息</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">"-g"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启所有警告</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">"-Wall"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定构建输出的目录</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_BINARY_DIR <span class="variable">${PROJECT_SOURCE_DIR}</span>/build)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入主项目的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索主项目的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/src MAIN_SOURCES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定可执行文件的名称和主项目的所有源文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">${PROJECT_NAME}</span> <span class="variable">${MAIN_SOURCES}</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用单元测试</span></span><br><span class="line"><span class="keyword">enable_testing</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加子目录（子项目）</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加单元测试的可执行文件</span></span><br><span class="line"><span class="keyword">add_test</span>(minder_test <span class="variable">${PROJECT_SOURCE_DIR}</span>/<span class="keyword">test</span>/build/minder_test)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>test</code> 目录的 <code>CMakeLists.txt</code>，这里的配置内容新增了 GoogleTest 库 </li></ul><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(minder_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义C++的版本</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找 GoogleTest 库</span></span><br><span class="line"><span class="keyword">find_package</span>(GTest REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 GoogleTest 库的路径</span></span><br><span class="line"><span class="keyword">MESSAGE</span>(STATUS <span class="string">"GTEST_INCLUDE_DIRS : "</span> <span class="variable">${GTEST_INCLUDE_DIRS}</span>)</span><br><span class="line"><span class="keyword">MESSAGE</span>(STATUS <span class="string">"GTEST_BOTH_LIBRARIES : "</span> <span class="variable">${GTEST_BOTH_LIBRARIES}</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索父目录（父项目）的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(../<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索父目录（父项目）的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(../src MAIN_SOURCES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除父目录（父项目）的入口源文件</span></span><br><span class="line"><span class="keyword">list</span>(FILTER MAIN_SOURCES EXCLUDE REGEX <span class="string">"main.cpp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入子项目的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索子项目里的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/src TEST_SOURCES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入 GoogleTest 的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">${GTEST_INCLUDE_DIRS}</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定构建输出的目录</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_BINARY_DIR <span class="variable">${PROJECT_SOURCE_DIR}</span>/build)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定可执行文件的名称和单元测试的所有源文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">${PROJECT_NAME}</span> <span class="variable">${MAIN_SOURCES}</span> <span class="variable">${TEST_SOURCES}</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接 GoogleTest 与 pthread 库（请特别注意声明的顺序）</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">${PROJECT_NAME}</span> <span class="variable">${GTEST_BOTH_LIBRARIES}</span> pthread)</span><br></pre></td></tr></tbody></table></figure><h4 id="命令行编译项目-1"><a href="#命令行编译项目-1" class="headerlink" title="命令行编译项目"></a>命令行编译项目</h4><ul><li>编译 <code>test</code> 子项目 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入子项目的目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> minder-gtest/<span class="built_in">test</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建子项目的构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入子项目的构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建子项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake ..</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译子项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行可执行文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./minder_test</span></span><br></pre></td></tr></tbody></table></figure><p>运行可执行文件后，输出的日志信息如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[==========] Running 2 tests from 1 test suite.</span><br><span class="line">[----------] Global test environment set-up.</span><br><span class="line">[----------] 2 tests from TestCase</span><br><span class="line">[ RUN      ] TestCase.test1</span><br><span class="line">[       OK ] TestCase.test1 (0 ms)</span><br><span class="line">[ RUN      ] TestCase.test2</span><br><span class="line">[       OK ] TestCase.test2 (0 ms)</span><br><span class="line">[----------] 2 tests from TestCase (0 ms total)</span><br><span class="line"></span><br><span class="line">[----------] Global test environment tear-down</span><br><span class="line">[==========] 2 tests from 1 test suite ran. (2 ms total)</span><br><span class="line">[  PASSED  ] 2 tests.</span><br></pre></td></tr></tbody></table></figure><ul><li>编译主项目 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入主项目的目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> minder-gtest</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建主项目的构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入主项目的构建目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建主项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake ..</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译主项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行项目测试</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make <span class="built_in">test</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行可执行文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./minder</span></span><br></pre></td></tr></tbody></table></figure><h3 id="GoogleTest-使用扩展说明"><a href="#GoogleTest-使用扩展说明" class="headerlink" title="GoogleTest 使用扩展说明"></a>GoogleTest 使用扩展说明</h3><p>在上面的案例中，GoogleTest 是使用源码编译的方式安装到 Linux 系统上的，这在迁移操作系统的时候，需要重复执行同样的安装步骤。此时为了方便日后迁移操作系统，可以将 GoogleTest 的头文件、动态链接都复制一份到项目中，这样就可以不依赖外部的系统环境了。</p><div class="admonition note"><p class="admonition-title">提示</p><p><a href="/downloads/2022/01/minder-gtest-plus.zip">点击下载</a> 完整的案例代码，项目的目录结构如下：</p></div><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">minder-gtest-plus</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── datetime.h</span><br><span class="line">├── src</span><br><span class="line">│   ├── datetime.cpp</span><br><span class="line">│   └── main.cpp</span><br><span class="line">├── test</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── include</span><br><span class="line">│   │   └── strUtil.h</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main.cpp</span><br><span class="line">└── thirdparty</span><br><span class="line">    └── googletest</span><br><span class="line">        ├── gmock</span><br><span class="line">        │   ├── include</span><br><span class="line">        │   │   └── gmock</span><br><span class="line">        │   │       ├── gmock-actions.h</span><br><span class="line">        │   │       ├── gmock-cardinalities.h</span><br><span class="line">        │   │       ├── gmock-function-mocker.h</span><br><span class="line">        │   │       ├── gmock-generated-actions.h</span><br><span class="line">        │   │       ├── gmock-generated-actions.h.pump</span><br><span class="line">        │   │       ├── gmock-generated-function-mockers.h</span><br><span class="line">        │   │       ├── gmock-generated-function-mockers.h.pump</span><br><span class="line">        │   │       ├── gmock-generated-matchers.h</span><br><span class="line">        │   │       ├── gmock-generated-matchers.h.pump</span><br><span class="line">        │   │       ├── gmock.h</span><br><span class="line">        │   │       ├── gmock-matchers.h</span><br><span class="line">        │   │       ├── gmock-more-actions.h</span><br><span class="line">        │   │       ├── gmock-more-matchers.h</span><br><span class="line">        │   │       ├── gmock-nice-strict.h</span><br><span class="line">        │   │       ├── gmock-spec-builders.h</span><br><span class="line">        │   │       └── internal</span><br><span class="line">        │   │           ├── custom</span><br><span class="line">        │   │           │   ├── gmock-generated-actions.h</span><br><span class="line">        │   │           │   ├── gmock-generated-actions.h.pump</span><br><span class="line">        │   │           │   ├── gmock-matchers.h</span><br><span class="line">        │   │           │   ├── gmock-port.h</span><br><span class="line">        │   │           │   └── README.md</span><br><span class="line">        │   │           ├── gmock-internal-utils.h</span><br><span class="line">        │   │           ├── gmock-port.h</span><br><span class="line">        │   │           └── gmock-pp.h</span><br><span class="line">        │   └── lib</span><br><span class="line">        │       ├── libgmock_main.so</span><br><span class="line">        │       └── libgmock.so</span><br><span class="line">        └── gtest</span><br><span class="line">            ├── include</span><br><span class="line">            │   └── gtest</span><br><span class="line">            │       ├── gtest-death-test.h</span><br><span class="line">            │       ├── gtest.h</span><br><span class="line">            │       ├── gtest-matchers.h</span><br><span class="line">            │       ├── gtest-message.h</span><br><span class="line">            │       ├── gtest-param-test.h</span><br><span class="line">            │       ├── gtest_pred_impl.h</span><br><span class="line">            │       ├── gtest-printers.h</span><br><span class="line">            │       ├── gtest_prod.h</span><br><span class="line">            │       ├── gtest-spi.h</span><br><span class="line">            │       ├── gtest-test-part.h</span><br><span class="line">            │       ├── gtest-typed-test.h</span><br><span class="line">            │       └── internal</span><br><span class="line">            │           ├── custom</span><br><span class="line">            │           │   ├── gtest.h</span><br><span class="line">            │           │   ├── gtest-port.h</span><br><span class="line">            │           │   ├── gtest-printers.h</span><br><span class="line">            │           │   └── README.md</span><br><span class="line">            │           ├── gtest-death-test-internal.h</span><br><span class="line">            │           ├── gtest-filepath.h</span><br><span class="line">            │           ├── gtest-internal.h</span><br><span class="line">            │           ├── gtest-param-util.h</span><br><span class="line">            │           ├── gtest-port-arch.h</span><br><span class="line">            │           ├── gtest-port.h</span><br><span class="line">            │           ├── gtest-string.h</span><br><span class="line">            │           ├── gtest-type-util.h</span><br><span class="line">            │           └── gtest-type-util.h.pump</span><br><span class="line">            └── lib</span><br><span class="line">                ├── libgtest_main.so</span><br><span class="line">                └── libgtest.so</span><br></pre></td></tr></tbody></table></figure><ul><li><code>test</code> 目录的 <code>CMakeLists.txt</code>，这里的配置内容使用了项目里的 GoogleTest 库 </li></ul><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 GoogleTest 库的目录路径</span></span><br><span class="line"><span class="keyword">set</span>(PATH_TO_GOOGLE_TEST ../thirdparty/googletest/gtest)</span><br><span class="line"><span class="keyword">set</span>(PATH_TO_GOOGLE_MOCK ../thirdparty/googletest/gmock)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(minder_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义C++的版本</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索父目录（父项目）的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(../<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索父目录（父项目）的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(../src MAIN_SOURCES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除父目录（父项目）的入口源文件</span></span><br><span class="line"><span class="keyword">list</span>(FILTER MAIN_SOURCES EXCLUDE REGEX <span class="string">"main.cpp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入子项目的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索子项目里的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">${PROJECT_SOURCE_DIR}</span>/src TEST_SOURCES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入 GoogleTest 库的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">${PATH_TO_GOOGLE_TEST}</span>/<span class="keyword">include</span> <span class="variable">${PATH_TO_GOOGLE_MOCK}</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 GoogleTest 动态链接库所在的目录</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">${PATH_TO_GOOGLE_TEST}</span>/lib <span class="variable">${PATH_TO_GOOGLE_MOCK}</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定构建输出的目录</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_BINARY_DIR <span class="variable">${PROJECT_SOURCE_DIR}</span>/build)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定可执行文件的名称和单元测试的所有源文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">${PROJECT_NAME}</span> <span class="variable">${MAIN_SOURCES}</span> <span class="variable">${TEST_SOURCES}</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接 GoogleTest 与 pthread 库（请特别注意声明的顺序）</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">${PROJECT_NAME}</span> gtest_main.so gtest.so gmock_main.so gmock.so pthread)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>main.cpp</code> 的 C++ 代码，与上面的案例代码完全一致 </li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"strUtil.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"datetime.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtest/gtest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除字符串两边的空格</span></span><br><span class="line"><span class="built_in">TEST</span>(TestCase, test1) {</span><br><span class="line">    string str = <span class="string">" Hello World ! "</span>;</span><br><span class="line">    <span class="built_in">trim</span>(str);</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="string">"Hello World !"</span>, str);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据给定的日期，计算它是星期几</span></span><br><span class="line"><span class="built_in">TEST</span>(TestCase, test2) {</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(<span class="literal">true</span>, DateUtil::<span class="built_in">isWeekendDays</span>(<span class="string">"2022-01-09"</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>{</span><br><span class="line">    testing::<span class="built_in">InitGoogleTest</span>(&amp;argc, argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RUN_ALL_TESTS</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul><li><a href="https://www.dazhuanlan.com/zhangxiaofan/topics/1169035">建立简单的带单元测试的 CMake 项目</a></li><li><a href="https://blog.csdn.net/joelcat/article/details/90766192">CMake + GoogleTest 之一入门</a></li><li><a href="https://blog.csdn.net/yangxuan0261/article/details/104358123">CMake 使用 GoogleTest 进行单元测试</a></li><li><a href="https://blog.csdn.net/weixin_43778179/article/details/104943810">Centos7 C++ 安装使用 GoogleTest 进行单元测试</a></li></ul></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 CMake 的单元测试如何使用，包括创建简单的带单元测试的项目，同时整合 GoogleTest 测试框架。</summary>
    
    
    
    
    <category term="C++" scheme="https://www.techgrow.cn/tags/C/"/>
    
    <category term="Linux系统编程" scheme="https://www.techgrow.cn/tags/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C语言" scheme="https://www.techgrow.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Debian 安装 GCC、G++、GDB</title>
    <link href="https://www.techgrow.cn/posts/7df04100.html"/>
    <id>https://www.techgrow.cn/posts/7df04100.html</id>
    <published>2022-01-07T13:08:23.000Z</published>
    <updated>2022-01-07T13:08:23.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><div class="admonition note"><p class="admonition-title">提示</p><p>GCC 4.8.1，这是该编译器由 C 实现转向 C++ 实现（4.8 版本）后的首次升级，也是第一个实现 C++ 11 所有语言特性的编译器。</p></div><h3 id="Debian-8-Jessie"><a href="#Debian-8-Jessie" class="headerlink" title="Debian 8 Jessie"></a>Debian 8 Jessie</h3><ul><li>更改仓库源 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /etc/apt/sources.list /etc/apt/sources.list.bak</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改仓库源</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://ftp.us.debian.org/debian/ jessie main contrib non-free"</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb-src http://ftp.us.debian.org/debian/ jessie main contrib non-free"</span> &gt;&gt; /etc/apt/sources.list</span></span><br></pre></td></tr></tbody></table></figure><ul><li>安装 GCC、G++、GDB</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装软件（最后得到的版本是4.8.4）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> apt-get install -y gcc-4.8 g++-4.8 gdb</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立软链接（可选）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ln -s /usr/bin/gcc-4.8 /usr/bin/gcc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ln -s /usr/bin/g++-4.8 /usr/bin/g++</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="Debian-9-Stretch"><a href="#Debian-9-Stretch" class="headerlink" title="Debian 9 Stretch"></a>Debian 9 Stretch</h3><div class="admonition note"><p class="admonition-title">提示</p><ol><li><code>build-essential</code> 指的是编译程序必需的软件包，包含了 GCC、G++、Make 等工具</li><li>在 Debian 9 Stretch 上安装 <code>build-essential</code> 后，得到的 GCC、G++ 的版本是 <code>6.3.0</code></li><li>若希望在 Debian 9 Stretch 上安装低版本的 GCC/G++（例如 4.8），那么可以将上面 Debian 8 Jessie 的仓库源地址添加到 Debian 9 Stretch 系统里，然后使用同样的方法分别单独安装 GCC/G++</li></ol></div><ul><li> 更改仓库源 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /etc/apt/sources.list /etc/apt/sources.list.bak</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改仓库源</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://mirrors.163.com/debian/ stretch main non-free contrib"</span> &gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://mirrors.163.com/debian/ stretch-updates main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://mirrors.163.com/debian/ stretch-backports main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.163.com/debian/ stretch main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.163.com/debian/ stretch-updates main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.163.com/debian/ stretch-backports main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list</span></span><br></pre></td></tr></tbody></table></figure><ul><li>安装 GCC、G++、GDB</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> apt-get install -y build-essential gdb</span></span><br></pre></td></tr></tbody></table></figure><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul><li><a href="https://blog.csdn.net/weixin_34175509/article/details/92352317">Debian 9 安装 gcc-4.8</a></li><li><a href="https://installonlinux.com/zh/debian/stretch/gcc-4-8">如何在 Debian Stretch 上安装 gcc-4.8</a></li></ul></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何在 不同版本的 Debian 系统上安装 GCC、G++、GDB。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Debian/Ubuntu" scheme="https://www.techgrow.cn/tags/Debian-Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker 开发随笔</title>
    <link href="https://www.techgrow.cn/posts/abd1f0ff.html"/>
    <id>https://www.techgrow.cn/posts/abd1f0ff.html</id>
    <published>2022-01-05T13:08:23.000Z</published>
    <updated>2022-01-19T13:08:23.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h3 id="Docker-删除所有-none-镜像"><a href="#Docker-删除所有-none-镜像" class="headerlink" title="Docker 删除所有 none 镜像"></a>Docker 删除所有 none 镜像</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker rmi `docker images | grep  <span class="string">'&lt;none&gt;'</span> | awk <span class="string">'{print $3}'</span>`</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="Docker-构建镜像时忽略错误信息"><a href="#Docker-构建镜像时忽略错误信息" class="headerlink" title="Docker 构建镜像时忽略错误信息"></a>Docker 构建镜像时忽略错误信息</h3><p>根据 Dockerfile 构建镜像，当构建失败时，往往会出现以下错误：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">automake: error: no 'Makefile.am' found for any configure output</span><br><span class="line">Error build: The command [/bin/sh -c aclocal &amp;&amp; autoconf &amp;&amp; automake -a] returned a non-zero code: 1</span><br></pre></td></tr></tbody></table></figure><p>在很多企业的应用场景里，上面的错误信息实际上是无害的，可以忽略不处理。但一旦出现此类错误 Docker 就会停止构建，此时如果需要让 Docker 忽略类似的错误信息，可以使用 <code>exit 0</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN make</span><br></pre></td></tr></tbody></table></figure><p>当 Dockerfile 里包含了上面类似的指令，则可以改写为以下的内容，这将始终返回 0（成功）退出代码，此时 Docker 不会意外终止构建过程</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN make; exit 0</span><br></pre></td></tr></tbody></table></figure><h3 id="不同网段之间的容器实现互相通信"><a href="#不同网段之间的容器实现互相通信" class="headerlink" title="不同网段之间的容器实现互相通信"></a>不同网段之间的容器实现互相通信</h3><h4 id="Docker-命令行的使用"><a href="#Docker-命令行的使用" class="headerlink" title="Docker 命令行的使用"></a>Docker 命令行的使用</h4><div class="admonition note"><p class="admonition-title">提示</p><p>假设存在两个容器，分别是 Redis 容器（172.89.0.2）和 Nginx 容器（172.89.0.5），两者具体的 <code>docker-compose.yml</code> 配置信息如下：</p></div><ul><li>Redis 容器 </li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.5'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:5.0.4-stretch</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-network:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.89</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'/usr/local/redis/data:/data'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'/usr/local/redis/redis.conf:/usr/local/etc/redis/redis.conf'</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">redis-network:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis-network</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.89</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Nginx 容器 </li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.5'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.20</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">nginx-network:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.64</span><span class="number">.0</span><span class="number">.5</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">'/usr/local/nginx/conf/nginx.conf:/usr/local/nginx/conf/nginx.conf'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nginx-network:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-network</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.64</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></tbody></table></figure><p>上述的 Redis 和 Nginx 容器分别处于不同的网段中，两者之间的网络无法直接 <code>Ping</code> 得通；若希望在 Redis 内可以 <code>Ping</code> 通 Nginx 容器，那么可以将 Nginx 容器添加到 Redis 容器所在网络里，命令示例如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将Nginx容器添加到Redis容器所在网络里</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker network connect redis-network nginx</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Nginx容器在Redis容器所在网络里的IP</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker network inspect redis-network</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在Redis容器内直接Ping通Nginx容器（这里的IP是Nginx容器在新网络里的IP地址）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ping 172.89.0.3</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">警告</p><p>使用 <code>docker network connect redis-network nginx</code> 命令，将 Nginx 容器添加到 Redis 容器所在网络后，Nginx 在新网络里的 IP 地址是不固定的，例如 Docker 服务重启后 IP 地址会变更，这一点必须注意！</p></div><hr><p>将 Nginx 容器从 Redis 容器所在网络里移除掉，可以使用以下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker network disconnect redis-network nginx</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>Docker 默认网络的名称是 <code>bridge</code>，默认情况下创建的所有容器都会在 <code>bridge</code> 网络内。</p></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看Docker的所有网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker network ls</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某网络下所有容器的信息（包括各个容器的IP）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker network inspect redis-network</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Docker-Compose-的使用"><a href="#Docker-Compose-的使用" class="headerlink" title="Docker-Compose 的使用"></a>Docker-Compose 的使用</h4><p>在 Docker-Compose 中，支持将 Nginx 容器添加到 Redis 容器所在网络里，配置示例如下所示。</p><div class="admonition note"><p class="admonition-title">提示</p><p>值得一提的是，这里通过 <code>docker-compose.yml</code> 配置文件，将 Nginx 容器添加到 Redis 容器所在网络后，Nginx 在新网络里的 IP 地址是固定的。</p></div><ul><li>Redis 容器，配置内容和上面的案例一致 </li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.5'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:5.0.4-stretch</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-network:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.89</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'/usr/local/redis/data:/data'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'/usr/local/redis/redis.conf:/usr/local/etc/redis/redis.conf'</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">redis-network:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis-network</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.89</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Nginx 容器，配置了多个网络，同时指定了容器在不同网络下的 IP 地址 </li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.5'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.20</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">nginx-network:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.64</span><span class="number">.0</span><span class="number">.5</span></span><br><span class="line">      <span class="attr">redis-network:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.89</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">'/usr/local/nginx/conf/nginx.conf:/usr/local/nginx/conf/nginx.conf'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nginx-network:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-network</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.64</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line">  <span class="attr">redis-network:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis-network</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.89</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看 Docker 的网络状况 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看Nginx容器在Redis容器所在网络里的IP</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker network inspect redis-network</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在Redis容器内直接Ping通Nginx容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ping 172.89.0.3</span></span><br></pre></td></tr></tbody></table></figure></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要 Docker 日常使用的笔记。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 升级 OpenSSL</title>
    <link href="https://www.techgrow.cn/posts/4ffdb5e1.html"/>
    <id>https://www.techgrow.cn/posts/4ffdb5e1.html</id>
    <published>2021-12-28T14:25:46.000Z</published>
    <updated>2021-12-28T14:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux clay 3.10.0-1160.49.1.el7.x86_64 <span class="comment">#1 SMP Tue Nov 30 15:51:32 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></tbody></table></figure><h2 id="升级-OpenSSL"><a href="#升级-OpenSSL" class="headerlink" title="升级 OpenSSL"></a>升级 OpenSSL</h2><ul><li>查看 OpenSSL 的版本 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl version</span></span><br><span class="line">OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></tbody></table></figure><ul><li>备份旧版的 OpenSSL</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv /usr/bin/openssl /usr/bin/openssl.bak</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mv /usr/include/openssl /usr/include/openssl-bak</span></span><br></pre></td></tr></tbody></table></figure><ul><li>安装依赖 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install -y perl perl-devel perl-Test-Simple gcc gcc-c++ make</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><ul><li>编译安装</li></ul><div class="admonition warning"><p class="admonition-title">注意事项</p><ol><li>建议从 <a href="https://www.openssl.org/source/">OpenSSL 官网</a> 下载源码包，最新的稳定版本是 <code>1.1.1</code> 系列</li><li><code>./config</code> 命令必须加上 <code>shared</code> 参数，否则生成的 <code>lib</code> 目录里面只有 <code>.a</code> 静态库文件， 没有 <code>.so</code> 动态链接库文件 </li></ol></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1m.tar.gz</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar -xvf openssl-1.1.1m.tar.gz</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入解压目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> openssl-1.1.1m</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./config shared zlib --prefix=/usr/<span class="built_in">local</span>/openssl</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make -j4</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make install</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加动态链接库的路径到系统配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"/usr/local/openssl/lib"</span> &gt;&gt; /etc/ld.so.conf</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使配置生效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ldconfig -v</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 链接文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ln -sf /usr/<span class="built_in">local</span>/openssl/bin/openssl /usr/bin/openssl</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ln -sf /usr/<span class="built_in">local</span>/openssl/include/openssl /usr/include/openssl</span></span><br></pre></td></tr></tbody></table></figure><ul><li>验证是否升级成功 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl version</span></span><br><span class="line">OpenSSL 1.1.1m  14 Dec 2021</span><br></pre></td></tr></tbody></table></figure><h2 id="升级后的维护"><a href="#升级后的维护" class="headerlink" title="升级后的维护"></a>升级后的维护</h2><p>更新 OpenSSL 后，需要排查系统的第三方服务是否以静态编译方式使用了 OpenSSL；如果第三方服务是静态编译的，则需要指定新的 OpenSSL 库重新进行编译，否则会影响服务的正常运行或者容易让其受到安全攻击。</p><div class="admonition note"><p class="admonition-title">提示</p><p>一般以静态编译方式使用了 OpenSSL 的第三方服务有：OpenSSH、Nginx、Apache，尤其当 Web 服务器支持 HTTPS 协议的时候</p></div><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul><li><a href="https://blog.csdn.net/anqixiang/article/details/103458130">Ubuntu16.04.4 升级 OpenSSL</a></li><li><a href="https://blog.csdn.net/yiyihuazi/article/details/116000480">Centos8 OpenSSL 升级版本到最新</a></li><li><a href="https://www.4spaces.org/how-to-upgrade-openssl-on-centos-7/">CentOS 如何升级 OpenSSL 到最新版本</a></li></ul></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Centos7 如何升级 OpenSSL，包括通过源码编译安装 OpenSSL。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Centos" scheme="https://www.techgrow.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Linux 实现 Windows 的 Event 事件机制</title>
    <link href="https://www.techgrow.cn/posts/c847598e.html"/>
    <id>https://www.techgrow.cn/posts/c847598e.html</id>
    <published>2021-12-25T13:55:33.000Z</published>
    <updated>2021-12-25T13:55:33.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><div class="admonition note"><p class="admonition-title">前言</p><p>Linux 中没有 Windows 系统中的 <code>CreateEvent()</code>、<code>WaitEvent()</code>、<code>SetEvent()</code>、<code>ResetEvent()</code> 等函数，本文将介绍如何使用 <a href="https://github.com/neosmart/pevents">pevents</a> 替代 Linux 缺失的函数。</p></div><h2 id="pevents-介绍"><a href="#pevents-介绍" class="headerlink" title="pevents 介绍"></a>pevents 介绍</h2><span id="more"></span><h3 id="pevents-的简介"><a href="#pevents-的简介" class="headerlink" title="pevents 的简介"></a>pevents 的简介</h3><p><a href="https://github.com/neosmart/pevents">pevents</a> 是一个跨平台的轻量级 C++ 库，旨在为 POSIX 系统提供 WIN32 事件的实现。<code>pevents</code> 提供了 Windows 平台手动和自动重置事件的大部分功能，最显著的是支持同时等待多个事件（<code>WaitForMultipleObjects</code>），而且支持 Windows、FreeBSD、Linux、macOS、iOS、Android 等平台。</p><h3 id="pevents-的-API"><a href="#pevents-的-API" class="headerlink" title="pevents 的 API"></a>pevents 的 API</h3><h4 id="API-函数"><a href="#API-函数" class="headerlink" title="API 函数"></a>API 函数</h4><p><code>pevents</code> 的 API 是根据 Windows 的 <code>CreateEvent（）</code>、<code>WaitEvent（）</code> 和 <code>WaitForMultipleObjects（）</code> 函数编写的，熟悉 WIN32 事件的开发人员应该可以将代码库切换到 <code>pevents</code> API。虚假唤醒是 Linux 下系统编程的正常部分，也是来自 Windows 世界的开发人员的常见陷阱，<code>pevents</code> 可以保证不存在虚假唤醒和等待返回的数据的正确性，其提供了如下的 API：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SetEvent</span><span class="params">(<span class="keyword">neosmart_event_t</span> event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ResetEvent</span><span class="params">(<span class="keyword">neosmart_event_t</span> event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PulseEvent</span><span class="params">(<span class="keyword">neosmart_event_t</span> event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DestroyEvent</span><span class="params">(<span class="keyword">neosmart_event_t</span> event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">neosmart_event_t</span> <span class="title">CreateEvent</span><span class="params">(<span class="keyword">bool</span> manualReset, <span class="keyword">bool</span> initialState)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WaitForEvent</span><span class="params">(<span class="keyword">neosmart_event_t</span> event, <span class="keyword">uint64_t</span> milliseconds)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WaitForMultipleEvents</span><span class="params">(<span class="keyword">neosmart_event_t</span> *events, <span class="keyword">int</span> count, <span class="keyword">bool</span> waitAll, <span class="keyword">uint64_t</span> milliseconds)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WaitForMultipleEvents</span><span class="params">(<span class="keyword">neosmart_event_t</span> *events, <span class="keyword">int</span> count, <span class="keyword">bool</span> waitAll, <span class="keyword">uint64_t</span> milliseconds, <span class="keyword">int</span> &amp;index)</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="事件状态的类型"><a href="#事件状态的类型" class="headerlink" title="事件状态的类型"></a>事件状态的类型</h4><ul><li><code>CreateEvent()</code> 函数 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">neosmart_event_t CreateEvent(</span><br><span class="line">    // true：表示手动，在 WaitEvent 后需要手动调用 ResetEvent 清除事件信号。false：表示自动，在 WaitEvent 后，系统会自动清除事件信号</span><br><span class="line">    bool manualReset, </span><br><span class="line"></span><br><span class="line">    // 初始状态，false 为无信号，true 为有信号</span><br><span class="line">    bool initialState</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ul><li><code>WaitForEvent()</code> 函数 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int WaitForEvent(</span><br><span class="line">    // 句柄对象</span><br><span class="line">    neosmart_event_t event,</span><br><span class="line">    // 等待的时间（毫秒）</span><br><span class="line">    uint64_t milliseconds</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ul><li>事件状态的类型<ul><li><code>WAIT_TIMEOUT</code>：等待超时</li><li><code>WAIT_OBJECT_0</code>：句柄对象处于有信号状态</li><li><code>WAIT_FAILED</code>：出现错误，可通过 <code>GetLastError()</code> 函数得到错误码</li><li><code>WAIT_ABANDONED</code>：说明句柄代表的对象是个互斥对象，并且正在被其它线程占用</li></ul></li></ul><div class="admonition warning"><p class="admonition-title">warning</p><p>在 Linux 平台，<code>pevents</code> 的事件状态只支持使用 <code>WAIT_TIMEOUT</code>，且有信号的时候 <code>WaitEvent()</code> 函数的返回值是 <code>0</code>，而在 Windows 平台则支持上述四种事件状态</p></div><h3 id="pevents-的项目结构"><a href="#pevents-的项目结构" class="headerlink" title="pevents 的项目结构"></a>pevents 的项目结构</h3><ul><li>核心代码在 <code>src/</code> 目录</li><li>单元测试代码（通过 Meson 构建）在 <code>test/</code> 目录</li><li>在 <code>examples/</code> 目录中可以找到演示 <code>pevents</code> 用法的跨平台应用示例程序</li></ul><h3 id="pevents-的编译构建"><a href="#pevents-的编译构建" class="headerlink" title="pevents 的编译构建"></a>pevents 的编译构建</h3><p><code>pevents</code> 使用的构建工具是 Meson，目前这仅用于支持 <code>pevents</code> 核心代码及其单元测试的自动化构建 / 测试。值得一提的是，开发人员不需要担心构建工具的差异性，<code>pevents</code> 是特意基于 C/C++ 标准编写的，避免了复杂的配置或依赖于平台的构建指令的需要。</p><h3 id="pevents-的编译参数"><a href="#pevents-的编译参数" class="headerlink" title="pevents 的编译参数"></a>pevents 的编译参数</h3><p>通过编译参数 <code>-DWFMO</code> 与 <code>-DPULSE</code>，可以在编译时让 <code>pevents</code> 启用不同的功能：</p><ul><li><code>WFMO</code>：启用 WFMO 功能，如果需要使用 <code>WaitForMultipleEvents()</code> 函数，建议仅使用 WFMO 进行编译，因为它会为所有事件对象增加开销（较小）。</li><li><code>PULSE</code>：启用 PulseEvent 功能，<code>PulseEvent()</code> 在 Windows 平台从根本上被破坏了，一般不应该被使用，当你调用它时，它几乎永远不会做你认为你正在做的事情。<code>pevents</code> 包含这个函数只是为了让现有的（有缺陷的）代码从 WIN32 移植到 Unix/Linux 平台更容易，并且这个函数默认没有编译到 <code>pevents</code> 中。</li></ul><h4 id="Meson-指定编译参数"><a href="#Meson-指定编译参数" class="headerlink" title="Meson 指定编译参数"></a>Meson 指定编译参数</h4><p>在 Meson 中，可以通过 <code>meson_options.txt</code> 配置文件指定编译参数，让 <code>pevents</code> 启用不同的功能</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">option('wfmo', type: 'boolean', value: true,</span><br><span class="line">description: 'Enable WFMO events')</span><br><span class="line">option('pulse', type: 'boolean', value: false,</span><br><span class="line">description: 'Enable PulseEvent() function')</span><br></pre></td></tr></tbody></table></figure><h4 id="CMake-指定编译参数"><a href="#CMake-指定编译参数" class="headerlink" title="CMake 指定编译参数"></a>CMake 指定编译参数</h4><p>在 CMake 中，可以通过 <code>CMakeLists.txt</code> 配置文件指定编译参数，让 <code>pevents</code> 启用不同的功能</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(CMAKE_CXX_FLAGS "-std=c++11 -lpthread -DWFMO")</span><br></pre></td></tr></tbody></table></figure><h2 id="pevents-运行示例代码"><a href="#pevents-运行示例代码" class="headerlink" title="pevents 运行示例代码"></a>pevents 运行示例代码</h2><div class="admonition note"><p class="admonition-title">note</p><p>值得一提的是，<code>pevents</code> 的核心 C++ 源文件是 <code>pevents.h</code>、<code>pevents.cpp</code></p></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:clay-world/pevents.git</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入源码目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> pevents</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成构建的输出目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> meson build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入构建的输出目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ninja</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行示例程序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sample</span></span><br></pre></td></tr></tbody></table></figure><h2 id="pevents-的实战案例"><a href="#pevents-的实战案例" class="headerlink" title="pevents 的实战案例"></a>pevents 的实战案例</h2><h3 id="编译说明"><a href="#编译说明" class="headerlink" title="编译说明"></a>编译说明</h3><p>下面给出的案例使用了 <code>pthread</code>，由于 <code>pthread</code> 不是 Linux 系统默认的库，因此链接时需要使用静态库 <code>libpthread.a</code>。简而言之，在使用 <code>pthread_create()</code> 创建线程，以及调用 <code>pthread_atfork()</code> 函数建立 <code>fork</code> 处理程序时，需要通过 <code>-lpthread</code> 参数链接该库，同时还需要在 C++ 源文件里添加头文件 <code>pthread.h</code>。</p><div class="admonition note"><p class="admonition-title">提示</p><p>为了可以正常编译使用了 <code>pthread</code> 的项目代码，不同构建工具的使用说明如下：</p></div><p>若使用 G++ 编译 C++ 项目，则编译命令的示例如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> g++ main.cpp -o main -lpthread</span></span><br></pre></td></tr></tbody></table></figure><p>若使用 CMake 构建 C++ 项目，则 <code>CMakeLists.txt</code> 配置文件的示例内容如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set(CMAKE_CXX_FLAGS "-std=c++11 -lpthread -DWFMO")</span><br><span class="line"></span><br><span class="line">add_executable(main main.cpp)</span><br></pre></td></tr></tbody></table></figure><h3 id="实战案例一"><a href="#实战案例一" class="headerlink" title="实战案例一"></a>实战案例一</h3><p><code>CreateEvent(true, true)</code> - 手动清除事件信号，初始状态为有信号，<a href="/downloads/2021/12/pevents-cmake-demo-1.zip">点击下载</a> 基于 CMake 构建的完整案例代码</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pevents.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> neosmart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">neosmart_event_t</span> g_hEvent = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printIds</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>{</span><br><span class="line">    <span class="keyword">pid_t</span> pid = <span class="built_in">getpid</span>();</span><br><span class="line">    <span class="keyword">pthread_t</span> tid = <span class="built_in">pthread_self</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s pid %u tid %u (0x%x)\n"</span>, s, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) pid, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) tid, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) tid);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">procFunc1</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>{</span><br><span class="line">    <span class="built_in">printIds</span>(<span class="string">"thread-1"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WaitForEvent</span>(g_hEvent, <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"thread-1 is working..."</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *) <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">procFunc2</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>{</span><br><span class="line">    <span class="built_in">printIds</span>(<span class="string">"thread-2"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WaitForEvent</span>(g_hEvent, <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"thread-2 is working..."</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *) <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 手动清除事件信号，初始状态为有信号</span></span><br><span class="line">    g_hEvent = <span class="built_in">CreateEvent</span>(<span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> ntid1;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;ntid1, <span class="literal">NULL</span>, procFunc1, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> ntid2;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;ntid2, <span class="literal">NULL</span>, procFunc2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">thread-1 pid 62705 tid 2336241408 (0x8b403700)</span><br><span class="line">thread-1 is working...</span><br><span class="line">thread-2 pid 62705 tid 2327848704 (0x8ac02700)</span><br><span class="line">thread-2 is working...</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">note</p><p>可以看到线程 1 和线程 2 都完整执行了，这是因为创建的事件是需手动 Reset 才会变为无信号的，所以执行完线程 1 后事件仍处于有信号的状态，所以线程 2 的逻辑才会被继续执行。</p></div><h3 id="实战案例二"><a href="#实战案例二" class="headerlink" title="实战案例二"></a>实战案例二</h3><p><code>CreateEvent(false, true)</code> - 自动清除事件信号，且初始状态为有信号，<a href="/downloads/2021/12/pevents-cmake-demo-2.zip">点击下载</a> 基于 CMake 构建的完整案例代码</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pevents.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> neosmart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">neosmart_event_t</span> g_hEvent = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printIds</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>{</span><br><span class="line">    <span class="keyword">pid_t</span> pid = <span class="built_in">getpid</span>();</span><br><span class="line">    <span class="keyword">pthread_t</span> tid = <span class="built_in">pthread_self</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s pid %u tid %u (0x%x)\n"</span>, s, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) pid, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) tid, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) tid);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">procFunc1</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>{</span><br><span class="line">    <span class="built_in">printIds</span>(<span class="string">"thread-1"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WaitForEvent</span>(g_hEvent, <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"thread-1 is working..."</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *) <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">procFunc2</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>{</span><br><span class="line">    <span class="built_in">printIds</span>(<span class="string">"thread-2"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WaitForEvent</span>(g_hEvent, <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"thread-2 is working..."</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *) <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 自动清除事件信号，初始状态为有信号</span></span><br><span class="line">    g_hEvent = <span class="built_in">CreateEvent</span>(<span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> ntid1;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;ntid1, <span class="literal">NULL</span>, procFunc1, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> ntid2;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;ntid2, <span class="literal">NULL</span>, procFunc2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thread-1 pid 59685 tid 2245932800 (0x85de3700)</span><br><span class="line">thread-1 is working...</span><br><span class="line">thread-2 pid 59685 tid 2237540096 (0x855e2700)</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">note</p><p>可以看到只有线程 1 完整执行了，这是由于事件在执行完线程 1 后被系统自动重置为无信号，所以线程 2 中的逻辑没有被执行。</p></div><h3 id="实战案例三"><a href="#实战案例三" class="headerlink" title="实战案例三"></a>实战案例三</h3><p><code>CreateEvent(true, false)</code> - 手动清除事件信号，初始状态为无信号，包括 <code>SetEvent（）</code> 与 <code>ResetEvent()</code> 的使用，<a href="/downloads/2021/12/pevents-cmake-demo-3.zip">点击下载</a> 基于 CMake 构建的完整案例代码</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pevents.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> neosmart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">neosmart_event_t</span> g_hEvent = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printIds</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>{</span><br><span class="line">    <span class="keyword">pid_t</span> pid = <span class="built_in">getpid</span>();</span><br><span class="line">    <span class="keyword">pthread_t</span> tid = <span class="built_in">pthread_self</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s pid %u tid %u (0x%x)\n"</span>, s, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) pid, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) tid, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) tid);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">procFunc1</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>{</span><br><span class="line">    <span class="built_in">printIds</span>(<span class="string">"thread-1"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WaitForEvent</span>(g_hEvent, <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"thread-1 is working..."</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 重置事件为无信号</span></span><br><span class="line">    <span class="built_in">ResetEvent</span>(g_hEvent);</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *) <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">procFunc2</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>{</span><br><span class="line">    <span class="built_in">printIds</span>(<span class="string">"thread-2"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WaitForEvent</span>(g_hEvent, <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"thread-2 is working..."</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">void</span> *) <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 手动清除事件信号，初始状态为有信号</span></span><br><span class="line">    g_hEvent = <span class="built_in">CreateEvent</span>(<span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> ntid1;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;ntid1, <span class="literal">NULL</span>, procFunc1, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> ntid2;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;ntid2, <span class="literal">NULL</span>, procFunc2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 手动清除事件信号，初始状态为无信号</span></span><br><span class="line">    g_hEvent = <span class="built_in">CreateEvent</span>(<span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置事件为有信号</span></span><br><span class="line">    <span class="built_in">SetEvent</span>(g_hEvent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> ntid1;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;ntid1, <span class="literal">NULL</span>, procFunc1, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> ntid2;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;ntid2, <span class="literal">NULL</span>, procFunc2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thread-1 pid 70368 tid 2745513728 (0xa3a53700)</span><br><span class="line">thread-1 is working...</span><br><span class="line">thread-2 pid 70368 tid 2737121024 (0xa3252700)</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">note</p><p>可以看到只有线程 1 完整执行了，这是因为线程 1 在执行之前事件是有信号的，执行完成后事件被手动重置为无信号，所以线程 2 中的逻辑没有被执行。</p></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/sinat_31608641/article/details/105399249">C++ 的 CreateEvent ()</a></li><li><a href="https://blog.csdn.net/u011507161/article/details/42462079">WaitForSingleObject 和 WaitForMultipleObject</a></li><li><a href="https://blog.csdn.net/u011394598/article/details/82981399">事件 SetEvent、ResetEvent、WaitForSingleObject 与 CreateEvent 详解</a></li></ul></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Linux 如何实现 Windows 的 Event 事件机制，包括 CreateEvent、WaitEvent、SetEvent、ResetEvent 等函数的使用。</summary>
    
    
    
    
    <category term="C++" scheme="https://www.techgrow.cn/tags/C/"/>
    
    <category term="Linux系统编程" scheme="https://www.techgrow.cn/tags/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux 移植 Windows 的 C++ 代码</title>
    <link href="https://www.techgrow.cn/posts/15f45d12.html"/>
    <id>https://www.techgrow.cn/posts/15f45d12.html</id>
    <published>2021-12-22T14:25:49.000Z</published>
    <updated>2021-12-22T13:55:33.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="conio-h-头文件"><a href="#conio-h-头文件" class="headerlink" title="conio.h 头文件"></a>conio.h 头文件</h2><h3 id="移植简述"><a href="#移植简述" class="headerlink" title="移植简述"></a>移植简述</h3><p><code>conio.h</code> 不是 C 标准库中的头文件，在 ISO 和 POSIX 标准中均没有定义。<code>conio</code> 是 Console Input/Output（控制台输入输出）的简写，其中定义了通过控制台进行数据输入和数据输出的函数，主要是一些用户通过按键盘产生的对应操作，比如 <code>getch()</code> 函数等等。大部分 DOS、Windows、Phar Lap、DOSX，OS/2 等平台上的 C 编译器提供了此头文件，UNIX 和 Linux 平台的 C 编译器本身通常不包含此头文件。另外在项目开发中，平时主要是使用 <code>conio.h</code> 这个头文件中的 <code>getch()</code> 函数，即读取键盘字符但是不显示出来（without echo)，但是含有 <code>conio.h</code> 的代码在 Linux 下无法直接编译通过，因为 Linux 没有这个头文件。但 Linux 平台下完全可以使用 <a href="http://en.wikipedia.org/wiki/Ncurses">ncurses</a> 替代 <code>conio.h</code> 头文件，<code>ncurses</code> 支持的 API 可以阅读 <a href="https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/scanw.html#GETCHCLASS">官方文档</a>。值得一提的是，<code>ncurses</code> 在 Linux 平台实现了 <code>getch()</code>、<code>scanw()</code>、<code>getstr()</code> 等函数。</p><span id="more"></span><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><div class="admonition note"><p class="admonition-title">提示</p><p>由于 <code>ncurses</code> 不是 Linux 系统默认的库，因此需要安装后才能使用，不同平台的安装命令如下：</p></div><ul><li>CentOS/Fedora</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y ncurses ncurses-devel</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Debian/Ubuntu</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install -y libncurses5-dev libncursesw5-dev</span></span><br></pre></td></tr></tbody></table></figure><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><div class="admonition note"><p class="admonition-title">提示</p><p><code>ncurses.h</code> 与 <code>curses.h</code> 这两个头文件是等价的</p></div><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ncurses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    cout &lt;&lt; (<span class="string">"Hello Wolrd!"</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">getch</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编译说明"><a href="#编译说明" class="headerlink" title="编译说明"></a>编译说明</h3><p>由于 <code>ncurses</code> 不是 Linux 系统默认的库，因此编译时需要链接到该库，同时还需要在 C++ 的源文件里添加头文件 <code>ncurses.h</code>，否则编译会失败。</p><div class="admonition note"><p class="admonition-title">提示</p><p>为了可以正常编译使用了 <code>ncurses</code> 的项目代码，不同构建工具的使用说明如下：</p></div><p>若使用 G++ 编译 C++ 项目，则编译命令的示例如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> g++ main.cpp -o main -lncurses</span></span><br></pre></td></tr></tbody></table></figure><p>若使用 CMake 构建 C++ 项目，则 <code>CMakeLists.txt</code> 配置文件的示例内容如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set(CMAKE_CXX_FLAGS "-std=c++11 -lncurses")</span><br><span class="line"></span><br><span class="line">add_executable(main main.cpp)</span><br></pre></td></tr></tbody></table></figure><h2 id="itoa-函数"><a href="#itoa-函数" class="headerlink" title="itoa() 函数"></a>itoa () 函数</h2><h3 id="移植简述-1"><a href="#移植简述-1" class="headerlink" title="移植简述"></a>移植简述</h3><p>在 Window 平台里，<code>itoa()</code> 函数可以将整数转换为字符串，其函数的原型如下。Linux 平台中只有 <code>atoi()</code> 函数，并没有对应的 <code>itoa()</code> 函数，但可以使用 <code>sprintf()</code> 或者 <code>snprintf()</code> 函数替代，建议使用更安全的 <code>snprintf()</code>。</p><div class="admonition info"><p class="admonition-title">itoa () 函数</p><p>函数原型：<code>char *itoa( int value, char *string,int radix)</code></p><p>函数功能：将整数 <code>value</code> 转换成字符串存入 <code>string</code> 指向的内存空间，<code>radix</code> 为转换时所用基数 (保存到字符串中的数据的进制基数)</p><p>函数的参数：<code>value</code>：转换的数据，<code>string</code>：目标字符串的地址，<code>radix</code>：转换后的进制数，可以是 10 进制、16 进制等，范围必须在 2-36 之间</p></div><div class="admonition info"><p class="admonition-title">snprintf () 函数</p><p>头文件：<code>#include &lt;stdio.h&gt;</code></p><p>函数原型：<code>int snprintf(char *str, size_t size, const char *format, ...)</code></p><p>函数功能：将可变参数 <code>...</code> 按照 <code>format</code> 格式化成字符串，然后将其复制到 <code>str</code> 中</p><p>函数参数：<code>str</code>：目标字符串，<code>size</code>：拷贝字节数（Bytes），<code>format</code>：格式化字符串，<code>...</code> 可变参数</p></div><h3 id="案例代码-1"><a href="#案例代码-1" class="headerlink" title="案例代码"></a>案例代码</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> size = <span class="built_in">snprintf</span>(str, <span class="number">4</span>, <span class="string">"%d"</span>, num);</span><br><span class="line">    cout &lt;&lt; <span class="string">"str = "</span> &lt;&lt; str &lt;&lt; <span class="string">", size = "</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行的输出结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = 12, size = 2</span><br></pre></td></tr></tbody></table></figure><h2 id="strcpy-s-函数"><a href="#strcpy-s-函数" class="headerlink" title="strcpy_s() 函数"></a>strcpy_s () 函数</h2><div class="admonition info"><p class="admonition-title">相关站点</p><ul><li><a href="https://github.com/rurban/safeclib/releases">Safe C Library 的下载页面</a></li><li><a href="https://rurban.github.io/safeclib/doc/safec-3.6.0/index.html">Safe C Library 的官方文档</a></li><li><a href="https://rurban.github.io/safeclib/doc/safec-3.6.0/index.html">Safe C Library 的 GitHub 项目</a></li></ul></div><h3 id="移植简述-2"><a href="#移植简述-2" class="headerlink" title="移植简述"></a>移植简述</h3><p>在 Window 平台上，<code>strcpy_s()</code> 函数存在于 <code>#include &lt;cstring&gt;</code> 头文件中。Linux 平台没有该函数，但可以使用 <a href="https://github.com/rurban/safeclib">Safe C Library</a> 替代实现。<code>Safe C Library</code> 这个库是在 <code>libc</code> 的基础之上实现了安全的 C11 Annex K 函数，这些函数是它们所缺少的，可以帮助缓解不断增加的安全攻击，特别是缓冲区溢出。</p><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><div class="admonition note"><p class="admonition-title">提示</p><ul><li>由于 <code>Safe C Library</code> 不是 Linux 系统默认的库，因此需要安装后才能使用，其默认的安装目录如下</li><li><code>/usr/local/lib/</code>：包含静态库和动态链接库文件</li><li><code>/usr/local/include/libsafec</code>：包所有含头文件 </li></ul></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载文件（这里下载的不是源码压缩包）</span></span><br><span class="line"><span class="comment"># wget https://github.com/rurban/safeclib/releases/download/v02092020/libsafec-02092020.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line"><span class="comment"># tar -xvf libsafec-02092020.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line"><span class="comment"># cd libsafec-02092020.0-g6d921f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="comment"># ./configure</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="comment"># make -j4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment"># make install</span></span><br></pre></td></tr></tbody></table></figure><p>值得一提的是，<code>Safe C Library</code> 编译后会单独生成静态库文件 <code>/usr/local/lib/libsafec-3.6.0.a</code> 和动态链接库文件 <code>/usr/local/lib/libsafec-3.6.0.so.3.0.6</code>，其中的 <code>3.6.0</code> 是指版本号。</p><h3 id="案例代码-2"><a href="#案例代码-2" class="headerlink" title="案例代码"></a>案例代码</h3><div class="admonition note"><p class="admonition-title">提示</p><ul><li><code>strcpy_s()</code> 函数在 <code>Safe C Library</code> 里的 <code>safe_str_lib.h</code> 头文件中声明 </li></ul></div><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libsafec/safe_str_lib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">strcpy_s</span>(str, <span class="number">5</span>, <span class="string">"abcd"</span>);</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span>[] str;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编译说明-1"><a href="#编译说明-1" class="headerlink" title="编译说明"></a>编译说明</h3><p>由于 <code>Safe C Library</code> 不是 Linux 系统默认的库，因此编译时需要链接到该库，同时还需要在 C++ 的源文件里添加头文件 <code>&lt;libsafec/safe_str_lib.h&gt;</code>，否则编译会失败。</p><div class="admonition note"><p class="admonition-title">提示</p><ol><li>为了可以正常编译使用了 <code>Safe C Library</code> 的项目代码，不同构建工具的使用说明如下所示</li><li>可以将上面构建生成的 <code>libsafec-3.6.0.a</code> 静态库文件和 <code>.h</code> 头文件都拷贝到项目里，这样就可以方便在不同的 Linux 系统编译和运行项目，不用每次切换系统时都要重新安装 <code>Safe C Library</code></li></ol></div><p>若使用 G++ 编译 C++ 项目，则编译命令的示例如下，请自行更改库文件的版本号：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> g++ main.cpp -o main -L/usr/<span class="built_in">local</span>/lib/ -l:libsafec-3.6.0.a</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"-L"</span> 参数指定了库文件的目录路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"-l:"</span> 参数指定了库文件的文件名</span></span><br></pre></td></tr></tbody></table></figure><p>若使用 CMake 构建 C++ 项目，则 <code>CMakeLists.txt</code> 配置文件的示例内容如下，请自行更改库文件的版本号：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">link_libraries(/usr/local/lib/libsafec-3.6.0.a)</span><br><span class="line"></span><br><span class="line">add_executable(windows_to_linux main.cpp)</span><br></pre></td></tr></tbody></table></figure><h2 id="函数可变参数宏"><a href="#函数可变参数宏" class="headerlink" title="函数可变参数宏"></a>函数可变参数宏</h2><h3 id="移植简述-3"><a href="#移植简述-3" class="headerlink" title="移植简述"></a>移植简述</h3><p>在 Windows 平台与 Linux 平台，函数可变参数宏定义的语法是不一样的。</p><h3 id="案例代码-3"><a href="#案例代码-3" class="headerlink" title="案例代码"></a>案例代码</h3><ul><li>Windows 平台的函数可变参数宏定义的写法如下，使用的是 <code>__VA_ARGS__</code></li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FILE* logfile = <span class="built_in">fopen</span>(<span class="string">"syslog.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG(format, ...) fprintf(logfile, format, __VA_ARGS__); printf(format, __VA_ARGS__); fflush(logfile);</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Linux 平台的函数可变参数宏定义写法如下，使用的是 <code>##__VA_ARGS__</code></li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FILE* logfile = <span class="built_in">fopen</span>(<span class="string">"syslog.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG(format, ...) fprintf(logfile, format, ##__VA_ARGS__); printf(format, ##__VA_ARGS__); fflush(logfile);</span></span><br></pre></td></tr></tbody></table></figure></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要记录 Linux 移植 Windows 的 C++ 代码时，遇到的常见问题。</summary>
    
    
    
    
    <category term="C++" scheme="https://www.techgrow.cn/tags/C/"/>
    
    <category term="Linux系统编程" scheme="https://www.techgrow.cn/tags/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 进阶基础之六</title>
    <link href="https://www.techgrow.cn/posts/62e4578b.html"/>
    <id>https://www.techgrow.cn/posts/62e4578b.html</id>
    <published>2021-12-18T13:55:34.000Z</published>
    <updated>2021-12-20T13:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="string-容器的概念"><a href="#string-容器的概念" class="headerlink" title="string 容器的概念"></a>string 容器的概念</h2><p><code>string</code> 是 STL 的字符串类型，通常用来表示字符串。而在使用 <code>string</code> 之前，字符串通常是用 <code>char*</code> 表示的。<code>string</code> 与 <code>char*</code> 都可以用来表示字符串，两者的区别如下：</p><ul><li><code>string</code> 是一个类，<code>char*</code> 是一个指向字符的指针</li><li><code>string</code> 封装了 <code>char*</code> 来管理字符串，本质是一个 <code>char*</code> 类型的容器</li><li><code>string</code> 不用考虑内存释放和越界的问题</li><li><code>string</code> 负责管理 <code>char*</code> 所分配的内存。每一次 <code>string</code> 的复制，取值都由 <code>string</code> 类负责维护，不用担心复制越界和取值越界等问题</li><li><code>string</code> 提供了一系列的字符串操作函数，例如：查找（find）、拷贝（copy）、删除（erase）、替换（replace）、插入（insert）</li></ul><span id="more"></span><h2 id="stirng-容器的-API"><a href="#stirng-容器的-API" class="headerlink" title="stirng 容器的 API"></a>stirng 容器的 API</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>默认构造函数：<code>string();</code></li><li>带参数的构造函数：<ul><li><code>string(const char *s);</code>，用字符串 s 初始化</li><li><code>string(int n, char c);</code>，用 <code>n</code> 个字符 c 初始化</li></ul></li><li>拷贝构造函数：<code>string(const string &amp;str);</code></li></ul><h3 id="string-的长度"><a href="#string-的长度" class="headerlink" title="string 的长度"></a>string 的长度</h3><ul><li><code>size_t size() const</code>，返回当前字符串的长度，这里的长度不包括字符串的结尾的 <code>\0</code> 字符</li><li><code>size_t length() const;</code>，返回当前字符串的长度，这里的长度不包括字符串的结尾的 <code>\0</code> 字符</li><li><code>bool empty() const;</code>，判断当前字符串是否为空</li></ul><p>值得一提的是，<code>sizeof()</code> 返回的是对象所占用空间的字节数，<code>strlen()</code> 返回的是字符数组中第一个 <code>\0</code> 前的字节数，<code>string</code> 的成员函数 <code>size()</code> 和 <code>length()</code> 没有任何区别。</p><h3 id="string-的赋值"><a href="#string-的赋值" class="headerlink" title="string 的赋值"></a>string 的赋值</h3><ul><li><code>string &amp;operator=(const string &amp;s);</code>，把字符串 s 赋给当前的字符串</li><li><code>string &amp;assign(const char *s);</code>，把字符串 s 赋给当前的字符串</li><li><code>string &amp;assign(const char *s, int n);</code>，把字符串 s 的前 <code>n</code> 个字符赋给当前的字符串</li><li><code>string &amp;assign(const string &amp;s);</code>，把字符串 s 赋给当前字符串</li><li><code>string &amp;assign(int n, char c);</code>，用 <code>n</code> 个字符 c 赋值给当前字符串</li><li><code>string &amp;assign(const string &amp;s, int start, int n);</code>，把字符串 s 中从 start 开始的 <code>n</code> 个字符赋值给当前字符串</li></ul><h3 id="string-的子串"><a href="#string-的子串" class="headerlink" title="string 的子串"></a>string 的子串</h3><ul><li><code>string substr(int pos=0, int n=npos) const;</code>，返回由 <code>pos</code> 位置开始的 <code>n</code> 个字符组成的子字符串</li></ul><h3 id="string-的查找"><a href="#string-的查找" class="headerlink" title="string 的查找"></a>string 的查找</h3><ul><li><code>int find(char c, int pos=0) const;</code>，从 <code>pos</code> 位置开始查找字符 c 在当前字符串第一次出现的位置</li><li><code>int find(const char *s, int pos=0) const;</code>，从 <code>pos</code> 位置开始查找字符串 s 在当前字符串第一次出现的位置</li><li><code>int find(const string &amp;s, int pos=0) const;</code>，从 <code>pos</code> 位置开始查找字符串 s 在当前字符串第一次出现的位置</li><li><code>int rfind(char c, int pos=npos) const;</code>，从 <code>pos</code> 位置开始查找字符 c 在当前字符串中最后一次出现的位置</li><li><code>int rfind(const char *s, int pos=npos) const;</code>，从 <code>pos</code> 位置开始查找字符串 s 在当前字符串中最后一次出现的位置</li><li><code>int rfind(const string &amp;s, int pos=npos) const;</code>，从 <code>pos</code> 位置开始查找字符串 s 在当前字符串中最后一次出现的位置</li></ul><p>值得一提的是，当 <code>find()</code> 与 <code>rfind()</code> 函数查找不到时，都会返回 <code>-1</code>；两者不同的是 <code>find()</code> 是正向查找，而 <code>rfind()</code> 是逆向查找，但是最终两个函数返回的位置均是字符 / 字符串出现的正向位置；若有重复字符 / 字符串时，则 <code>rfind()</code> 返回的是逆向查找到的字符 / 字符串在正向的位置（即最后一次出现的正向位置）。</p><h3 id="string-的替换"><a href="#string-的替换" class="headerlink" title="string 的替换"></a>string 的替换</h3><ul><li><code>string &amp;replace(int pos, int n, const char *s);</code>，删除从 <code>pos</code> 位置开始的 <code>n</code> 个字符，然后在 <code>pos</code> 位置插入字符串 s</li><li><code>string &amp;replace(int pos, int n, const string &amp;s);</code>，删除从 <code>pos</code> 位置开始的 <code>n</code> 个字符，然后在 <code>pos</code> 位置插入字符串 s</li><li><code>void swap(string &amp;s2);</code>，交换当前字符串与字符串 s2 的值</li></ul><h3 id="string-的比较"><a href="#string-的比较" class="headerlink" title="string 的比较"></a>string 的比较</h3><ul><li><code>int compare(const string &amp;s) const;</code>，与字符串 s 比较</li><li><code>int compare(const char *s) const;</code>，与字符串 s 比较</li></ul><p><code>compare()</code> 函数的结果在 <code>&gt;</code> 时返回 1，<code>&lt;</code> 时返回 -1，<code>=</code> 时返回 0。字符串比较区分大小写，比较时参考字典顺序，排越前面的越小。大写的 A（65） 比小写的 a（97） 小。</p><h3 id="string-的字符存储"><a href="#string-的字符存储" class="headerlink" title="string 的字符存储"></a>string 的字符存储</h3><ul><li><code>char &amp;at(int n);</code></li><li><code>char &amp;operator[] (int n);</code></li><li><code>operator[]</code> 和 <code>at()</code> 均返回当前字符串中的第 <code>n</code> 个字符，但二者是有区别的<ul><li><code>at()</code> 在越界时会抛出异常，<code>[]</code> 在刚好越界时会返回 <code>(char)0</code>，再继续越界时，程序异常终止</li><li>如果程序希望可以通过 <code>try catch</code> 捕获异常，则建议采用 <code>at()</code></li></ul></li></ul><h3 id="string-的区间插入"><a href="#string-的区间插入" class="headerlink" title="string 的区间插入"></a>string 的区间插入</h3><ul><li><code>string &amp;insert(int pos, const char *s);</code>，在 <code>pos</code> 位置插入字符串 s，返回修改后的字符串</li><li><code>string &amp;insert(int pos, const string &amp;s);</code>，在 <code>pos</code> 位置插入字符串 s，返回修改后的字符串</li><li><code>string &amp;insert(int pos, int n, char c);</code>，在 <code>pos</code> 位置插入 <code>n</code> 个字符 c，返回修改后的字符串</li></ul><h3 id="string-的区间删除"><a href="#string-的区间删除" class="headerlink" title="string 的区间删除"></a>string 的区间删除</h3><ul><li><code>string &amp;erase(int pos=0, int n=npos);</code>，删除从 <code>pos</code> 位置开始的 <code>n</code> 个字符，返回修改后的字符串</li></ul><h3 id="string-的字符串拼接"><a href="#string-的字符串拼接" class="headerlink" title="string 的字符串拼接"></a>string 的字符串拼接</h3><ul><li><code>string &amp;operator+=(const string &amp;s);</code>，把字符串 s 连接到当前字符串的结尾</li><li><code>string &amp;operator+=(const char *s);</code>，把字符串 s 连接到当前字符串的结尾</li><li><code>string &amp;append(const char *s);  </code>，把字符串 s 连接到当前字符串的结尾</li><li><code>string &amp;append(const char *s, int n);</code>，把字符串 s 的前 <code>n</code> 个字符连接到当前字符串的结尾</li><li><code>string &amp;append(const string &amp;s); </code>，把字符串 s 连接到当前字符串的结尾</li><li><code>string &amp;append(const string &amp;s, int pos, int n);</code>，把字符串 s 中从 <code>pos</code> 位置开始的 <code>n</code> 个字符连接到当前字符串的结尾</li><li><code>string &amp;append(int n, char c); </code>，在当前字符串的结尾添加 <code>n</code> 个字符 c</li></ul><h3 id="从-string-取得-char"><a href="#从-string-取得-char" class="headerlink" title="从 string 取得 char*"></a>从 string 取得 char*</h3><ul><li><code>const char *c_str() const;</code>，返回一个以 <code>\0</code> 结尾的字符串的首地址</li></ul><p>值得一提的是，<code>char *</code> 可以隐式转换为 <code>string</code> 类型，反过来则不可以，例如右边这种写法是合法的： <code>char *p = "abc"; string str = p;</code></p><h3 id="将-string-拷贝到-char-指向的内存空间"><a href="#将-string-拷贝到-char-指向的内存空间" class="headerlink" title="将 string 拷贝到 char* 指向的内存空间"></a>将 string 拷贝到 char* 指向的内存空间</h3><ul><li><code>int copy(char *s, int n, int pos=0) const;</code></li></ul><p>将当前串中以 <code>pos</code> 位置开始的 <code>n</code> 个字符拷贝到以 <code>s</code> 为起始位置的字符数组中，返回实际拷贝的字符数量。特别注意，要保证指针 <code>s</code> 所指向的内存空间足以容纳当前的字符串，不然可能会发生越界。</p><h2 id="string-容器的使用"><a href="#string-容器的使用" class="headerlink" title="string 容器的使用"></a>string 容器的使用</h2><details><summary>★点击显示完整的示例代码★</summary><code><ul><li>string 容器的构造与赋值</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    string str1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    string str2 = str1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造函数</span></span><br><span class="line">    <span class="function">string <span class="title">str3</span><span class="params">(<span class="string">"abced"</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">str4</span><span class="params">(<span class="number">5</span>, <span class="string">'f'</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本赋值</span></span><br><span class="line">    str1 = <span class="string">"123456"</span>;</span><br><span class="line">    str2 = str3;</span><br><span class="line">    str3.<span class="built_in">assign</span>(<span class="string">"mnopq"</span>, <span class="number">3</span>);</span><br><span class="line">    str4.<span class="built_in">assign</span>(<span class="string">"45678"</span>, <span class="number">1</span>, <span class="number">3</span>);     <span class="comment">// 从0开始索引，1表示第2个字符</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"str1 = "</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"str2 = "</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"str3 = "</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"str4 = "</span> &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = 123456</span><br><span class="line">str2 = abced</span><br><span class="line">str3 = mno</span><br><span class="line">str4 = 567</span><br></pre></td></tr></tbody></table></figure><ul><li>string 容器的 API</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 存储字符</span></span><br><span class="line">    string str1 = <span class="string">"abcde"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str1.<span class="built_in">size</span>(); i++) {</span><br><span class="line">        <span class="comment">// 第一种方式</span></span><br><span class="line">        cout &lt;&lt; str1[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="comment">// 第二种方式</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; str1.at(i) &lt;&lt; " ";</span></span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串拼接</span></span><br><span class="line">    string str2 = <span class="string">"hello "</span>;</span><br><span class="line">    string str3 = <span class="string">"world "</span>;</span><br><span class="line">    str2 += str3;</span><br><span class="line">    str3.<span class="built_in">append</span>(<span class="string">"where"</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"str2 = "</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"str3 = "</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串查找</span></span><br><span class="line">    string str4 = <span class="string">"My name is Peter"</span>;</span><br><span class="line">    <span class="keyword">int</span> index1 = str4.<span class="built_in">find</span>(<span class="string">"name"</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"index1 = "</span> &lt;&lt; index1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">int</span> index2 = str4.<span class="built_in">rfind</span>(<span class="string">"e"</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"index2 = "</span> &lt;&lt; index2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串替换</span></span><br><span class="line">    string str5 = <span class="string">"abc123"</span>;</span><br><span class="line">    str5.<span class="built_in">replace</span>(<span class="number">3</span>, <span class="number">3</span>, <span class="string">"def"</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"str5 = "</span> &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line">    string str6 = <span class="string">"123456"</span>;</span><br><span class="line">    string str7 = <span class="string">"654321"</span>;</span><br><span class="line">    str6.<span class="built_in">swap</span>(str7);</span><br><span class="line">    cout &lt;&lt; <span class="string">"str6 = "</span> &lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串比较</span></span><br><span class="line">    string str8 = <span class="string">"ABC"</span>;</span><br><span class="line">    string str9 = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">int</span> result = str8.<span class="built_in">compare</span>(str9);    <span class="comment">// 返回值小于等于-1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"result = "</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 截取子字符串</span></span><br><span class="line">    string str10 = <span class="string">"124abc"</span>;</span><br><span class="line">    string str11 = str10.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"str11 = "</span> &lt;&lt; str11 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串的区间插入</span></span><br><span class="line">    string str12 = <span class="string">"abcdef"</span>;</span><br><span class="line">    str12.<span class="built_in">insert</span>(<span class="number">2</span>, <span class="string">"123"</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"str12 = "</span> &lt;&lt; str12 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串的区间删除</span></span><br><span class="line">    string str13 = <span class="string">"123456"</span>;</span><br><span class="line">    str13.<span class="built_in">erase</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"str13 = "</span> &lt;&lt; str13 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从字符串取得 char *</span></span><br><span class="line">    string str14 = <span class="string">"hijkl"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p1 = str14.<span class="built_in">c_str</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">"p1 = "</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// char * 隐式类型转换为 string</span></span><br><span class="line">    <span class="keyword">char</span> *p2 = <span class="string">"abc123"</span>;</span><br><span class="line">    string str15 = p2;</span><br><span class="line">    cout &lt;&lt; <span class="string">"str15 = "</span> &lt;&lt; str15 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 string 拷贝到 char* 指向的内存空间</span></span><br><span class="line">    <span class="keyword">char</span> *p3 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];</span><br><span class="line">    string str16 = <span class="string">"hello jim"</span>;</span><br><span class="line">    <span class="keyword">int</span> number = str16.<span class="built_in">copy</span>(p3, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"number = "</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"p3 = "</span> &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span>[] p3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a b c d e </span><br><span class="line">str2 = hello world </span><br><span class="line">str3 = world where</span><br><span class="line">index1 = 3</span><br><span class="line">index2 = 14</span><br><span class="line">str5 = abcdef</span><br><span class="line">str6 = 654321</span><br><span class="line">result = -32</span><br><span class="line">str11 = 24a</span><br><span class="line">str12 = ab123cdef</span><br><span class="line">str13 = 1256</span><br><span class="line">p1 = hijkl</span><br><span class="line">str15 = abc123</span><br><span class="line">number = 3</span><br><span class="line">p3 = llo</span><br></pre></td></tr></tbody></table></figure></code></details><h2 id="map-容器的使用"><a href="#map-容器的使用" class="headerlink" title="map 容器的使用"></a>map 容器的使用</h2><details><summary>★点击显示完整的示例代码★</summary><code><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// 定义Map集合变量</span></span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种数据插入方式</span></span><br><span class="line">m.<span class="built_in">insert</span>(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// 第二种数据插入方式（推荐）</span></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// 第三种数据插入方式</span></span><br><span class="line">m.<span class="built_in">insert</span>(map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::<span class="built_in">value_type</span>(<span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line"><span class="comment">// 第四种数据插入方式</span></span><br><span class="line">m[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种方式遍历Map集合</span></span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) {</span><br><span class="line">cout &lt;&lt; <span class="string">"key = "</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" , "</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式遍历Map集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) {</span><br><span class="line">cout &lt;&lt; <span class="string">"key = "</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" , value = "</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定的Key</span></span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator item = m.<span class="built_in">find</span>(<span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">"key = "</span> &lt;&lt; item-&gt;first &lt;&lt; <span class="string">" , value = "</span> &lt;&lt; item-&gt;second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种方式判断Key是否存在</span></span><br><span class="line"><span class="comment">// 如果Key存在，find()函数会返回Key对应的迭代器，如果Key不存在，find()函数会返回尾后迭代器end()</span></span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">find</span>(<span class="number">100</span>) == m.<span class="built_in">end</span>()) {</span><br><span class="line">cout &lt;&lt; <span class="string">"key "</span> &lt;&lt; <span class="number">100</span> &lt;&lt; <span class="string">" not exist"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式判断Key是否存在</span></span><br><span class="line"><span class="comment">// count()函数用于统计Key值在Map中出现的次数，Map的Key是不允许重复的，因此如果Key存在会返回1，不存在会返回0</span></span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">count</span>(<span class="number">5</span>) == <span class="number">1</span>) {</span><br><span class="line">cout &lt;&lt; <span class="string">"key "</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="string">" existed"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定的Key</span></span><br><span class="line">m.<span class="built_in">erase</span>(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) {</span><br><span class="line">cout &lt;&lt; <span class="string">"key = "</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" , value = "</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">key = 1 , 2</span><br><span class="line">key = 3 , 4</span><br><span class="line">key = 5 , 6</span><br><span class="line">key = 7 , 8</span><br><span class="line"></span><br><span class="line">key = 1 , value = 2</span><br><span class="line">key = 3 , value = 4</span><br><span class="line">key = 5 , value = 6</span><br><span class="line">key = 7 , value = 8</span><br><span class="line"></span><br><span class="line">key = 5 , value = 6</span><br><span class="line"></span><br><span class="line">key 100 not exist</span><br><span class="line"></span><br><span class="line">key 5 existed</span><br><span class="line"></span><br><span class="line">key = 1 , value = 2</span><br><span class="line">key = 3 , value = 4</span><br><span class="line">key = 5 , value = 6</span><br></pre></td></tr></tbody></table></figure></code></details><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1176228">C++ 中 string 成员函数 length ()、size () 与 strlen () 的区别</a></li></ul></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 C++ 的进阶基础教程，包括 STL 几大容器的使用等。</summary>
    
    
    
    
    <category term="C++" scheme="https://www.techgrow.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 进阶基础之五</title>
    <link href="https://www.techgrow.cn/posts/64fd9f88.html"/>
    <id>https://www.techgrow.cn/posts/64fd9f88.html</id>
    <published>2021-12-16T13:55:34.000Z</published>
    <updated>2021-12-16T13:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="模板的基本概念"><a href="#模板的基本概念" class="headerlink" title="模板的基本概念"></a>模板的基本概念</h3><p>模板是实现代码重用机制的一种重要工具，其<strong>本质是类型参数化，即把类型定义为参数</strong>。C++ 提供了类模板和函数模板，详细的使用可参考教程：<a href="/posts/779107de.html">C++ 进阶基础之二</a></p><h4 id="类模板的简介"><a href="#类模板的简介" class="headerlink" title="类模板的简介"></a>类模板的简介</h4><ul><li>类模板的本质就是建立一个通用类，其成员变量的类型、成员函数的返回类型和参数类型都可以不具体指定，而用虚拟的类型来替代</li><li>当使用类模板建立对象时，编译器会根据实参的类型取代类模板中的虚拟类型，从而实现不同类的功能</li></ul><h4 id="函数模板的简介"><a href="#函数模板的简介" class="headerlink" title="函数模板的简介"></a>函数模板的简介</h4><ul><li>函数模板就是建立一个通用的函数，其函数返回类型和形参类型不具体指定，而是用虚拟的类型来替代</li><li>凡是函数体相同的函数都可以用函数模板来代替，不必定义多个函数，只需在模板中定义一次即可</li><li>在调用函数时，编译器会根据实参的类型来取代模板中的虚拟类型，从而实现不同函数的功能</li></ul><span id="more"></span><h3 id="STL-的基本概念"><a href="#STL-的基本概念" class="headerlink" title="STL 的基本概念"></a>STL 的基本概念</h3><h4 id="STL-的简介"><a href="#STL-的简介" class="headerlink" title="STL 的简介"></a>STL 的简介</h4><p>STL（Standard Template Library，标准模板库）是惠普实验室开发的一系列软件的统称。现然主要出现在 C++ 中，但在被引入 C++ 之前该技术就已经存在了很长的一段时间。STL 的从广义上讲分为三类：Algorithm（算法）、Container（容器）和 Iterator（迭代器），容器和算法通过迭代器可以进行无缝地连接。几乎所有的 STL 代码都采用了类模板和函数模板的方式编写，这相比于传统的由类和函数组成的库来说提供了更好的代码重用机会。从逻辑层次来看，在 STL 中体现了泛型化程序设计的思想（Generic Programming），在这种思想里，大部分的基本算法被抽象和被泛化，独立于与之对应的数据结构，用于以相同或相近的方式处理各种不同情形。从实现层次看，整个 STL 是以一种类型参数化（Type Parameterized）的方式实现的，本质是基于模板（Template）。在 C++ 标准中，STL 被组织为下面的 13 个头文件：<code>&lt;algorithm&gt;</code>、<code>&lt;deque&gt;</code>、<code>&lt;functional&gt;</code>、<code>&lt;iterator&gt;</code>、<code>&lt;vector&gt;</code>、<code>&lt;list&gt;</code>、<code>&lt;map&gt;</code>、<code>&lt;memory&gt;</code>、<code>&lt;numeric&gt;</code>、<code>&lt;queue&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;stack&gt;</code> 、<code>&lt;utility&gt;</code>。</p><h4 id="STL-的优势"><a href="#STL-的优势" class="headerlink" title="STL 的优势"></a>STL 的优势</h4><ul><li>STL 是 C++ 的一部分，因此不用额外安装什么就可以直接使用，因为它被内建在编译器之内</li><li> STL 的一个重要特点是数据结构和算法的分离，尽管这是个简单的概念，但是这种分离使 STL 变得非常通用</li><li>开发人员一般可以不用思考 STL 具体的实现过程，只要能够熟练使用 STL 就可以了，这样可以把精力放在程序开发的其他方面</li><li> STL 具有高可重用性、高性能、高移植性、跨平台的优点<ul><li>高移植性：如在项目 A 上使用 STL 编写的模块，可以直接移植到项目 B 上</li><li>跨平台：如用 Windows 的 Visual Studio 编写的代码，可以在 Mac OS 的 XCode 上直接编译</li><li>高性能：如 <code>map</code> 可以高效地从十万条记录里面查找出指定的记录，因为 <code>map</code> 是采用红黑树的变体实现的（红黑树是平横二叉树的一种）</li><li>高可重用性：STL 中几乎所有的代码都采用了类模板和函数模板的方式实现，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会</li></ul></li></ul><h4 id="STL-的六大组件"><a href="#STL-的六大组件" class="headerlink" title="STL 的六大组件"></a>STL 的六大组件</h4><ul><li><code>容器（Containers）</code>：各种数据结构，如 <code>vector</code>、<code>list</code>、<code>deque</code>、<code>set</code>、<code>map</code> 用来存放数据，STL 容器是一种类模板。</li><li><code>算法（Algorithms）</code>：各种常用算法如 <code>sort</code>、<code>search</code>、<code>copy</code>、<code>erase</code>，从实现的角度来看，STL 算法是一种函数模板。</li><li><code>迭代器（Iterators）</code>：扮演容器与算法之间的胶合剂，是所谓的 <code>泛型指针</code>，共有五种类型，以及其它衍生变体。从实现的角度来看，迭代器是一种将 <code>Operators*</code>、<code>Operator-&gt;</code>、<code>Operator++</code>、<code>Operator--</code> 等相关操作予以重载的类模板。所有 STL 容器都附带有自己专属的迭代器，原生指针（Native pointer）也是一种迭代器。</li><li><code>仿函数（Functors）</code>： 行为类似函数，可作为算法的某种策略（Policy），从实现的角度来看，仿函数是一种重载了 <code>Operator()</code> 的类或者类模板。一般函数指针可视为狭义的仿函数。</li><li><code>适配器（Adapters）</code>：一种用来修饰容器（Containers）或仿函数（Functors）或迭代器（Iterators）接口的东西，例如：STL 提供的 Queue 和 Stack，虽然看似容器，但只能算是一种容器适配器，因为它们的底层完全借助 Deque，所有操作都由底层的 Deque 提供。改变 Functor 接口者，称为 Function Adapter；改变 Container 接口者，称为 Container Adapter；改变 Iterator 接口者，称为 Iterator Adapter。适配器的实现技术很难一言蔽之，必须逐一分析。</li><li><code>空间配置器（Allocators）</code>：负责空间配置与管理，从实现的角度来看，配置器是一个实现了动态空间配置、空间管理、空间释放的类模板。</li></ul><h3 id="容器的基本概念"><a href="#容器的基本概念" class="headerlink" title="容器的基本概念"></a>容器的基本概念</h3><p>在实际的开发过程中，数据结构本身的重要性不会逊于操作数据结构的算法的重要性，当程序中存在着对执行效率要求很高的部分时，数据结构的选择就显得更加重要。经典的数据结构数量有限，但是常常重复着一些为了实现向量、链表等结构而编写的代码，这些代码都十分相似，只是为了适应不同数据的变化而在细节上有所不同。STL 容器为此提供了这样的方便，它允许重复利用已有的实现构造自己的特定类型下的数据结构，通过设置一些模板，STL 容器对最常用的数据结构提供了支持，这些模板的参数允许指定容器中元素的数据类型，可以将许多重复而乏味的工作简化。容器部分主要由头文件 <code>&lt;vector&gt;</code>、<code>&lt;list&gt;</code>、<code>&lt;deque&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;map&gt;</code>、<code>&lt;stack&gt;</code>、<code>&lt;queue&gt;</code> 组成。对于常用的一些容器和容器适配器（可以看作由其它容器实现的容器），可以通过下表总结不同容器与相应头文件的对应关系。</p><table><thead><tr><th>容器</th><th>描述</th><th>实现头文件</th></tr></thead><tbody><tr><td>向量 (vector)</td><td> 连续内存的元素</td><td><code>&lt;vector&gt;</code></td></tr><tr><td>列表 (list)</td><td> 由节点组成的双向链表，每个结点包含着一个元素</td><td><code>&lt;list&gt;</code></td></tr><tr><td>双队列 (deque)</td><td> 连续内存的指向不同元素的指针所组成的数组</td><td><code>&lt;deque&gt;</code></td></tr><tr><td>集合 (set)</td><td> 由节点组成的红黑树，每个节点都包含着一个元素，节点之间以某种作用于元素对的谓词排列，没有两个不同的元素能够拥有相同的次序</td><td><code>&lt;set&gt;</code></td></tr><tr><td>多重集合 (multiset)</td><td> 允许存在两个次序相等的元素的集合</td><td><code>&lt;set&gt;</code></td></tr><tr><td>栈 (stack)</td><td> 先进后出的值的排列</td><td><code>&lt;stack&gt;</code></td></tr><tr><td>队列 (queue)</td><td> 先进先出的执的排列</td><td><code>&lt;queue&gt;</code></td></tr><tr><td>优先队列 (priority_queue)</td><td> 元素的次序是由作用于所内存的值对上的某种谓词决定的一种队列</td><td><code>&lt;queue&gt;</code></td></tr><tr><td>映射 (map)</td><td> 由 {键，值} 对组成的集合，以某种作用于键对上的谓词排列</td><td><code>&lt;map&gt;</code></td></tr><tr><td>多重映射 (multimap)</td><td> 允许键对有相等的次序的映射</td><td><code>&lt;map&gt;</code></td></tr></tbody></table><h4 id="容器的简介"><a href="#容器的简介" class="headerlink" title="容器的简介"></a>容器的简介</h4><p>容器可以用来管理一组元素，如下图所示：</p><p><img data-src="../../../asset/2021/12/c-plus-plus-stl-1.png" alt="c-plus-plus-stl-1"></p><h4 id="容器的分类"><a href="#容器的分类" class="headerlink" title="容器的分类"></a>容器的分类</h4><ul><li><code>序列式容器（Sequence Containers）</code>：每个元素都有固定的位置，取决于插入时机和地点，与元素的值无关，如 <code>vector</code>、<code>deque</code>、<code>list</code></li><li><code>关联式容器（Associated Containers）</code>：元素位置取决于特定的排序规则，与插入的顺序无关，如 <code>set</code>、<code>multiset</code>、<code>map</code>、<code>multimap</code></li></ul><h3 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h3><h4 id="算法的简介"><a href="#算法的简介" class="headerlink" title="算法的简介"></a>算法的简介</h4><p>函数库对数据类型的选择对其可重用性起着至关重要的作用。举例来说，一个求方根的函数，在使用浮点数作为其参数类型的情况下的可重用性肯定比使用整型作为它的参数类性要高。而 C++ 通过模板的机制允许推迟对某些类型的选择，直到真正想使用模板或者说对模板进行特化的时候，STL 就利用了这一点提供了相当多的算法。它是在一个有效的框架中完成这些算法的 —— 可以将所有的类型划分为少数的几类，然后就可以在模板的参数中使用一种类型替换掉同一种类中的其他类型。</p><h4 id="算法的头文件"><a href="#算法的头文件" class="headerlink" title="算法的头文件"></a>算法的头文件</h4><p>STL 提供了大约 100 个实现算法的函数模板，比如算法 <code>for_each</code> 将为指定序列中的每一个元素调用指定的函数，<code>stable_sort</code> 以调用者所指定的规则对序列进行稳定性排序等等。这样一来，只要熟悉了 STL 之后，许多代码可以被大大地简化，只需要通过调用一两个算法模板，就可以完成所需要的功能。算法主要由头文件 <code>&lt;algorithm&gt;</code>、<code>&lt;numeric&gt;</code>、<code>&lt;functional&gt;</code> 组成。<code>&lt;algorithm&gt;</code> 是所有 STL 头文件中最大的一个，它是由一大堆函数模板组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历、复制、修改、移除、反转、排序、合并操作等。<code>&lt;numeric&gt;</code> 的体积很小，只包括几个在序列上面进行简单数学运算的函数模板，包括加法和乘法在序列上的一些操作。<code>&lt;functional&gt;</code> 中则定义了一些类模板，用来声明函数对象。</p><h3 id="迭代器的基本概念"><a href="#迭代器的基本概念" class="headerlink" title="迭代器的基本概念"></a>迭代器的基本概念</h3><p>迭代器从作用上来说是最基本的部分。软件设计有一个基本原则，所有的问题都可以通过引进一个间接层来简化，这种简化在 STL 中就是用迭代器来完成的。概括来说，迭代器在 STL 中用来将算法和容器联系起来，起着一种黏和剂的作用。几乎 STL 提供的所有算法都是通过迭代器存取元素序列进行工作的，每一个容器都定义了其本身所专有的迭代器，用以存取容器中的元素。迭代器主要由头文件 <code>&lt;utility&gt;</code>、<code>&lt;iterator&gt;</code>、<code>&lt;memory&gt;</code> 组成。其中 <code>&lt;utility&gt;</code> 是一个很小的头文件，它包括了贯穿使用在 STL 中的几个模板的声明，<code>&lt;iterator&gt;</code> 中提供了迭代器 使用的许多方法，而对于 <code>&lt;memory&gt;</code> 描述起来则十分的困难，它以不同寻常的方式为容器中的元素分配内存空间，同时也为某些算法在执行期间产生的临时对象提供管理机制，<code>&lt;memory&gt;</code> 中最主要的是类模板 <code>allocator</code>，它负责产生所有容器的默认空间配置器（分配器）。</p><h2 id="初识容器的使用"><a href="#初识容器的使用" class="headerlink" title="初识容器的使用"></a>初识容器的使用</h2><h3 id="指针是一种迭代器"><a href="#指针是一种迭代器" class="headerlink" title="指针是一种迭代器"></a>指针是一种迭代器</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> array[<span class="number">5</span>] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};</span><br><span class="line">    <span class="keyword">int</span> length = <span class="built_in"><span class="keyword">sizeof</span></span>(array) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> *p = array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">        cout &lt;&lt; *(p++) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 </span><br></pre></td></tr></tbody></table></figure><h3 id="容器存放基础数据类型"><a href="#容器存放基础数据类型" class="headerlink" title="容器存放基础数据类型"></a>容器存放基础数据类型</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m_print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 定义容器</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">12</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">13</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">14</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一种方式：遍历容器</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itBegin = v.<span class="built_in">begin</span>();</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itEnd = v.<span class="built_in">end</span>();</span><br><span class="line">    <span class="keyword">while</span> (itBegin != itEnd) {</span><br><span class="line">        cout &lt;&lt; *(itBegin++) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种方式：遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三种方式：遍历容器</span></span><br><span class="line">    for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), m_print);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11 12 13 14 15 </span><br><span class="line">11 12 13 14 15 </span><br><span class="line">11 12 13 14 15 </span><br></pre></td></tr></tbody></table></figure><h3 id="容器存放自定义数据类型"><a href="#容器存放自定义数据类型" class="headerlink" title="容器存放自定义数据类型"></a>容器存放自定义数据类型</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> {</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">int</span> age, string name) {</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    string name;</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">23</span>, <span class="string">"Jim"</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">26</span>, <span class="string">"Tom"</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">29</span>, <span class="string">"Peter"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义容器</span></span><br><span class="line">    vector&lt;Person&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"age = "</span> &lt;&lt; it-&gt;<span class="built_in">getAge</span>() &lt;&lt; <span class="string">", name = "</span> &lt;&lt; it-&gt;<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; "age = " &lt;&lt; (*it).getAge() &lt;&lt; ", name = " &lt;&lt; (*it).getName() &lt;&lt; endl;</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = 23, name = Jim</span><br><span class="line">age = 26, name = Tom</span><br><span class="line">age = 29, name = Peter</span><br></pre></td></tr></tbody></table></figure><h3 id="容器存放自定义数据类型的指针"><a href="#容器存放自定义数据类型的指针" class="headerlink" title="容器存放自定义数据类型的指针"></a>容器存放自定义数据类型的指针</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> {</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">int</span> age, string name) {</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    string name;</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 定义容器</span></span><br><span class="line">    vector&lt;Person *&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Person</span>(<span class="number">23</span>, <span class="string">"Jim"</span>));</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Person</span>(<span class="number">26</span>, <span class="string">"Tom"</span>));</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Person</span>(<span class="number">29</span>, <span class="string">"Peter"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person *&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"age = "</span> &lt;&lt; (*it)-&gt;<span class="built_in">getAge</span>() &lt;&lt; <span class="string">", name = "</span> &lt;&lt; (*it)-&gt;<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; "age = " &lt;&lt; (**it).getAge() &lt;&lt; ", name = " &lt;&lt; (**it).getName() &lt;&lt; endl;</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = 23, name = Jim</span><br><span class="line">age = 26, name = Tom</span><br><span class="line">age = 29, name = Peter</span><br></pre></td></tr></tbody></table></figure><h3 id="容器之间的嵌套使用"><a href="#容器之间的嵌套使用" class="headerlink" title="容器之间的嵌套使用"></a>容器之间的嵌套使用</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 定义容器</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v3;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        v2.<span class="built_in">push_back</span>(i + <span class="number">6</span>);</span><br><span class="line">        v3.<span class="built_in">push_back</span>(i + <span class="number">11</span>);</span><br><span class="line">    }</span><br><span class="line">    v.<span class="built_in">push_back</span>(v1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;::iterator it1 = v.<span class="built_in">begin</span>(); it1 != v.<span class="built_in">end</span>(); it1++) {</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it2 = (*it1).<span class="built_in">begin</span>(); it2 != (*it1).<span class="built_in">end</span>(); it2++) {</span><br><span class="line">            cout &lt;&lt; *it2 &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        }</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 </span><br><span class="line">6 7 8 9 10 </span><br><span class="line">11 12 13 14 15 </span><br></pre></td></tr></tbody></table></figure></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 C++ 的进阶基础教程，包括 STL 的简介、六大组件、容器的基础使用等。</summary>
    
    
    
    
    <category term="C++" scheme="https://www.techgrow.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux 屏幕截图和剪贴板命令行工具</title>
    <link href="https://www.techgrow.cn/posts/9eb6789a.html"/>
    <id>https://www.techgrow.cn/posts/9eb6789a.html</id>
    <published>2021-12-15T13:13:21.000Z</published>
    <updated>2021-12-15T13:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><ul><li><code>xclip</code>：0.13</li><li><code>gnome-screenshot</code>：3.26.0</li></ul><span id="more"></span><h2 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h2><p><code>gnome-screenshot</code> 是一款 GNOME 命令行工具，它是一款用来对整个屏幕、一个特定的窗口或者用户所定义一些其他区域进行捕获的工具。该工具提供了几个其他的功能，包括对所捕获的截图的边界进行美化的功能。值得一提的是，<code>gnome-screenshot</code> 不适用于 <code>KDE</code>、<code>Xfce</code> 等 Linux 桌面环境。</p><h3 id="截图工具的使用"><a href="#截图工具的使用" class="headerlink" title="截图工具的使用"></a>截图工具的使用</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 捕捉整个屏幕</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gnome-screenshot</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 捕捉当前Shell窗口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gnome-screenshot -w</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 捕捉指定区域</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gnome-screenshot -a</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 延迟捕捉屏幕</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gnome-screenshot -d 5</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 捕捉当前Shell窗口，并去除窗口的边框</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gnome-screenshot -w -b</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 区域截图，并将截图复制到剪贴板</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gnome-screenshot -acbp</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 区域截图，并将截图输出到指定的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gnome-screenshot -abpf screenshot.png</span></span><br></pre></td></tr></tbody></table></figure><h3 id="截图工具的参数说明"><a href="#截图工具的参数说明" class="headerlink" title="截图工具的参数说明"></a>截图工具的参数说明</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-c, --clipboard              将截图直接发送到剪贴板</span><br><span class="line">-w, --window                 截取窗口，而不是整个屏幕</span><br><span class="line">-a, --area                   截取屏幕的一个区域，而不是整个屏幕</span><br><span class="line">-b, --include-border         在截图中包含窗口边框</span><br><span class="line">-B, --remove-border          去除屏幕截图的窗口边框</span><br><span class="line">-p, --include-pointer        在截图中包含鼠标指针</span><br><span class="line">-d, --delay=秒               在指定延迟后截图[以秒计]</span><br><span class="line">-e, --border-effect=特效     添加到边框的特效（阴影、边框、老照片或无特效）</span><br><span class="line">-i, --interactive            交互设置选项</span><br><span class="line">-f, --file=文件名            将截图直接保存为该文件</span><br><span class="line">--version                    打印版本信息并退出</span><br><span class="line">--display=显示               要使用的 X 显示</span><br></pre></td></tr></tbody></table></figure><h2 id="xclip-的安装"><a href="#xclip-的安装" class="headerlink" title="xclip 的安装"></a>xclip 的安装</h2><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p><a href="https://github.com/astrand/xclip">xclip</a> 是一个剪贴板的命令行实用工具，它可以从标准文件或文件中读取数据（文本、图片）并将其放置在剪贴板里，也可以将剪贴板里的数据（文本、图片）输出到标准文件或文件中。xclip 详细的功能说明如下，适用于 Debian/Ubuntu/CentOS/Arch 等主流的 Linux 发行版。</p><ul><li>Accesses the <code>cut-buffers</code></li><li>Prints contents of selection to standard out</li><li>Waits for selection requests in the background</li><li>Supports the INCR mechanism for large transfers</li><li>Reads data piped to standard in or files given as arguments</li><li>Accesses the <code>XA_PRIMARY</code>, <code>XA_SECONDARY</code> or <code>XA_CLIPBOARD</code> selection</li><li>Connects to the X display in <code>$DISPLAY</code>, or specified with <code>-display host:0</code></li></ul><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p><strong>CentOS/Fedora</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install -y libXmu libXmu-devel</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Debian/Ubuntu</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> apt-get install -y libx11-dev libxmu-headers libxt-dev libxmu-dev</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 克隆代码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/astrand/xclip.git</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入源码目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> xclip</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 预配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> autoreconf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./configure</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make install</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make install.man</span></span><br></pre></td></tr></tbody></table></figure><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看版本号</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xclip -version</span></span><br><span class="line">xclip version 0.13</span><br><span class="line">Copyright (C) 2001-2008 Kim Saunders et al.</span><br><span class="line">Distributed under the terms of the GNU GPL</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看命令手册</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> man xclip</span></span><br></pre></td></tr></tbody></table></figure><h2 id="xclip-的使用示例"><a href="#xclip-的使用示例" class="headerlink" title="xclip 的使用示例"></a>xclip 的使用示例</h2><h3 id="图片的使用示例"><a href="#图片的使用示例" class="headerlink" title="图片的使用示例"></a>图片的使用示例</h3><ul><li>将图片复制到剪贴板 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步：区域截图，将截图输出到指定的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gnome-screenshot -abpf screenshot.png</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：将指定的图片复制到剪贴板</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xclip -selection clipboard -t image/png -i screenshot.png</span></span><br></pre></td></tr></tbody></table></figure><ul><li>将剪贴板的图片输出到指定的文件 </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步：区域截图，并将截图复制到剪贴板</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gnome-screenshot -acbp</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：将剪贴板的图片输出到指定的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xclip -selection clipboard -t image/png -o &gt; clipboard.png</span></span><br></pre></td></tr></tbody></table></figure><h3 id="完整的使用示例"><a href="#完整的使用示例" class="headerlink" title="完整的使用示例"></a>完整的使用示例</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Copy your uptime into the selection for pasting:</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uptime | xclip</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Copy your password file for pasting:</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xclip /etc/passwd</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Save some text you have Edit | Copied in a web browser:</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xclip -o -sel clip &gt; webpage.txt</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Open a URL selected in an email client</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mozilla `xclip -o`</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Copy XA_PRIMARY to XA_CLIPBOARD</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xclip -o | xclip -sel clip</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># In command mode in vim, select some lines of text, then press shift-:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># for an ex prompt, and use this command to copy the selected lines of</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># text to the primary X selection:</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> !xclip -f</span></span><br></pre></td></tr></tbody></table></figure><p>值得一提的是，<code>xclip</code> 自身还提供了 <code>xclip-copyfile</code>、<code>xclip-pastefile</code>、<code>xclip-cutfile</code> 命令行工具，支持在不同的目录和机器之间拷贝和移动文件，详见：<a href="https://github.com/astrand/xclip/blob/master/README">官方文档</a></p><h2 id="VS-Code-使用说明"><a href="#VS-Code-使用说明" class="headerlink" title="VS Code 使用说明"></a>VS Code 使用说明</h2><p>在 Linux 系统下，VS Code 的 MarkDown 粘贴插件，例如 <a href="https://github.com/telesoho/vscode-markdown-paste-image">Markdown Paste</a> 底层使用了 <code>xclip</code>，且版本必须大于等于 <code>0.13.0</code>，否则这类插件无法正常将剪贴板里的图片粘贴到 MarkDown 文件里。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://unix.stackexchange.com/questions/145131/copy-image-from-clipboard-to-file">Copy image from clipboard to file</a></li><li><a href="https://askubuntu.com/questions/1196914/gnome-screenshot-cant-copy-to-clipboard-in-ubuntu-18-04">GNOME Screenshot can’t copy to clipboard in Ubuntu 18.04</a></li><li><a href="https://superuser.com/questions/199285/how-to-copy-image-to-clipboard-to-paste-to-another-application/1098582#1098582">How to copy image to clipboard, to paste to another application</a></li><li><a href="https://askubuntu.com/questions/759651/how-to-copy-an-image-to-the-clipboard-from-a-file-using-command-line">How to copy an image to the clipboard from a file using command line</a></li></ul></div><script src="https://qiniu.techgrow.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "tech","random": "0.8"});} catch(e) {console.warn(e.name + " : " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Linux 如何安装 xclip, 并结合 gnome-screenshot 实现屏幕截图、剪贴板操作、图片粘贴等功能。</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.techgrow.cn/tags/Linux/"/>
    
  </entry>
  
</feed>
