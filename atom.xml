<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clay 的技术博客</title>
  
  <subtitle>用进废退 | 艺不压身</subtitle>
  <link href="https://www.techgrow.cn/atom.xml" rel="self"/>
  
  <link href="https://www.techgrow.cn/"/>
  <updated>2022-08-09T15:12:41.000Z</updated>
  <id>https://www.techgrow.cn/</id>
  
  <author>
    <name>Clay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka 入门教程之一</title>
    <link href="https://www.techgrow.cn/posts/b6be8183.html"/>
    <id>https://www.techgrow.cn/posts/b6be8183.html</id>
    <published>2022-08-09T15:12:41.000Z</published>
    <updated>2022-08-09T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>目前企业中比较常见的消息队列产品主要有 Kafka、ActiveMQ、RabbitMQ、RocketMQ 等。在大数据场景主要采用 Kafka 作为消息队列，而在 JavaEE 开发中主要采用 ActiveMQ、RabbitMQ、RocketMQ。</p><h3 id="消息队列的优势"><a href="#消息队列的优势" class="headerlink" title="消息队列的优势"></a>消息队列的优势</h3><ul><li><code>解耦</code> - 允许独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束</li></ul><p><img data-src="../../../asset/2022/08/kafka-1.png"></p><span id="more"></span><ul><li><code>缓冲</code> - 有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况</li><li><code>消峰</code> - 在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源并随时待命，这无疑是巨大的浪费。使用消息队列<br>能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃</li></ul><p><img data-src="../../../asset/2022/08/kafka-2.png"></p><ul><li><code>异步通信</code> - 很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要<br>的时候再去处理它们</li></ul><p><img data-src="../../../asset/2022/08/kafka-3.png"></p><ul><li><code>可恢复性</code> - 系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理</li></ul><h3 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h3><h4 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h4><p><code>点对点模式</code> 就是一对一，消费者主动拉取数据，消息收到后消息会被清除。消息生产者将消息发送到 Queue 中，然后消息消费者从 Queue 中取出并消费消息。消息被消费以后，Queue 中不再存储它，所以消息消费者不可能消费到已经被消费的消息。Queue 支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p><img data-src="../../../asset/2022/08/kafka-4.png"></p><h4 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布 / 订阅模式</h4><p><code>发布/订阅模式</code> 就是一对多，消费者消费消息之后不会清除消息。消息生产者（发布）将消息发布到 <code>topic</code> 主题（如浏览、点赞、收藏、评论等）中，同时有多个消息消费者（订阅）消费该消息。这和点对点模式不同，每个消费者互相独立，发布到 <code>topic</code> 的消息会被所有订阅者消费。</p><p><img data-src="../../../asset/2022/08/kafka-5.png"></p><h2 id="Kafka-概述"><a href="#Kafka-概述" class="headerlink" title="Kafka 概述"></a>Kafka 概述</h2><ul><li>传统定义：Kafka 是一个分布式的基于发布 / 订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。</li><li>最新定义：Kafka 是一个开源的分布式事件流平台（EventStreaming Platform），被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。</li></ul><h2 id="Kafka-基础架构"><a href="#Kafka-基础架构" class="headerlink" title="Kafka 基础架构"></a>Kafka 基础架构</h2><p><img data-src="../../../asset/2022/08/kafka-6.png"></p><ul><li><code>Producer</code>：消息生产者，就是向 Kafka Broker 发消息的客户端。</li><li><code>Consumer</code>：消息消费者，就是向 Kafka Broker 取消息的客户端。</li><li><code>Consumer Group (CG)</code>：消费者组，由多个 <code>consumer</code> 组成。<strong>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</strong></li><li><code>Broker</code>：一台 Kafka 服务器就是一个 <code>broker</code>。一个 Kafka 集群由多个 <code>broker</code> 组成。一个 <code>broker</code> 可以容纳多个 <code>topic</code>。</li><li><code>Topic</code>：可以理解为一个队列，<strong>生产者和消费者面向的都是一个 <code>topic</code>。</strong></li><li><code>Partition</code>：分区，为了实现扩展性，一个非常大的 <code>topic</code> 可以分布到多个 <code>broker</code>（即 Kafka 服务器）上，<strong>一个 <code>topic</code> 可以分为多个 <code>partition</code>，每个 <code>partition</code> 是一个有序的队列。</strong></li><li><code>Replica</code>：副本，为保证集群中的某个节点发生故障时，该节点上的 <code>partition</code> 数据不丢失，且让 Kafka 仍然能够继续工作，Kafka 为此提供了副本机制。一个 <code>topic</code> 的每个分区都有若干个副本，包括一个 <code>leader</code> 和若干个 <code>follower</code>。</li><li><code>Leader</code>：每个分区多个副本的 <code>主</code>，生产者发送数据的对象，以及消费者消费数据的对象都是 <code>leader</code>。</li><li><code>Follower</code>：每个分区多个副本的 <code>从</code>，实时从 <code>leader</code> 中同步数据，保持和 <code>leader</code> 数据的同步。<code>leader</code> 发生故障时，某个 <code>follower</code> 会成为新的 <code>leader</code>。</li></ul><h2 id="Kafka-快速入门"><a href="#Kafka-快速入门" class="headerlink" title="Kafka 快速入门"></a>Kafka 快速入门</h2></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Kafka 的使用教程。</summary>
    
    
    
    
    <category term="分布式" scheme="https://www.techgrow.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 自动生成数据库文档</title>
    <link href="https://www.techgrow.cn/posts/28df7196.html"/>
    <id>https://www.techgrow.cn/posts/28df7196.html</id>
    <published>2022-07-30T14:18:22.000Z</published>
    <updated>2022-07-30T14:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在企业级开发中，我们经常会有编写数据库文档的时间付出，关于数据库文档的状态：要么没有、要么有但都是手写、后期运维开发都需要手动对文档进行维护，很是繁琐。如果忘记一次维护就会给以后的工作造成很多困扰，这无形中留了很多坑给自己和后人。<a href="https://github.com/pingfangushi/screw/">screw</a> 是一款简洁好用的数据库文档生成工具，专为解决这一开发痛点而生。</p><h2 id="screw-介绍"><a href="#screw-介绍" class="headerlink" title="screw 介绍"></a>screw 介绍</h2><h3 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h3><ul><li>灵活扩展</li><li>支持自定义模板</li><li>支持多种数据库</li><li>支持多种格式的文档</li><li>简洁、轻量、设计良好</li></ul><span id="more"></span><h3 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h3><ul><li><input checked="" disabled="" type="checkbox"> MySQL </li><li><input checked="" disabled="" type="checkbox"> MariaDB </li><li><input checked="" disabled="" type="checkbox"> TIDB </li><li><input checked="" disabled="" type="checkbox"> Oracle </li><li><input checked="" disabled="" type="checkbox"> SqlServer </li><li><input checked="" disabled="" type="checkbox"> PostgreSQL</li><li><input checked="" disabled="" type="checkbox"> Cache DB（2016）</li></ul><h3 id="文档类型支持"><a href="#文档类型支持" class="headerlink" title="文档类型支持"></a>文档类型支持</h3><ul><li><input checked="" disabled="" type="checkbox"> Html</li><li><input checked="" disabled="" type="checkbox"> Word</li><li><input checked="" disabled="" type="checkbox"> Markdown</li></ul><h2 id="screw-使用"><a href="#screw-使用" class="headerlink" title="screw 使用"></a>screw 使用</h2><h3 id="基于-Java-代码"><a href="#基于-Java-代码" class="headerlink" title="基于 Java 代码"></a>基于 Java 代码</h3><p>第一种使用方式是基于 Java 代码，自动生成数据库文档。</p><h4 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Java-代码"><a href="#Java-代码" class="headerlink" title="Java 代码"></a>Java 代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.Configuration;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.engine.EngineConfig;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.engine.EngineFileType;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.engine.EngineTemplateType;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.execute.DocumentationExecute;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.process.ProcessConfig;</span><br><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariConfig;</span><br><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成数据库文档</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrewTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String fileOutputDir = <span class="string">"D:/database/docs"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        documentGeneration();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文档生成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">documentGeneration</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//数据源</span></span><br><span class="line">        HikariConfig hikariConfig = <span class="keyword">new</span> HikariConfig();</span><br><span class="line">        hikariConfig.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        hikariConfig.setJdbcUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/database"</span>);</span><br><span class="line">        hikariConfig.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        hikariConfig.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//设置可以获取tables remarks信息</span></span><br><span class="line">        hikariConfig.addDataSourceProperty(<span class="string">"useInformationSchema"</span>, <span class="string">"true"</span>);</span><br><span class="line">        hikariConfig.setMinimumIdle(<span class="number">2</span>);</span><br><span class="line">        hikariConfig.setMaximumPoolSize(<span class="number">5</span>);</span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> HikariDataSource(hikariConfig);</span><br><span class="line">        <span class="comment">//生成配置</span></span><br><span class="line">        EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">                <span class="comment">//生成文件路径</span></span><br><span class="line">                .fileOutputDir(fileOutputDir)</span><br><span class="line">                <span class="comment">//打开目录</span></span><br><span class="line">                .openOutputDir(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//文件类型</span></span><br><span class="line">                .fileType(EngineFileType.HTML)</span><br><span class="line">                <span class="comment">//生成模板实现</span></span><br><span class="line">                .produceType(EngineTemplateType.freemarker)</span><br><span class="line">                <span class="comment">//自定义文件名称</span></span><br><span class="line">                .fileName(<span class="string">"自定义文件名称"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//忽略表</span></span><br><span class="line">        ArrayList&lt;String&gt; ignoreTableName = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//忽略表前缀</span></span><br><span class="line">        ArrayList&lt;String&gt; ignorePrefix = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//忽略表后缀</span></span><br><span class="line">        ArrayList&lt;String&gt; ignoreSuffix = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ProcessConfig processConfig = ProcessConfig.builder()</span><br><span class="line">                <span class="comment">//指定生成逻辑、当存在指定表、指定表前缀、指定表后缀时，将生成指定表，其余表不生成、并跳过忽略表配置</span></span><br><span class="line">                <span class="comment">//根据名称指定表生成</span></span><br><span class="line">                .designatedTableName(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">                <span class="comment">//根据表前缀生成</span></span><br><span class="line">                .designatedTablePrefix(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">                <span class="comment">//根据表后缀生成</span></span><br><span class="line">                .designatedTableSuffix(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">                <span class="comment">//忽略表名</span></span><br><span class="line">                .ignoreTableName(ignoreTableName)</span><br><span class="line">                <span class="comment">//忽略表前缀</span></span><br><span class="line">                .ignoreTablePrefix(ignorePrefix)</span><br><span class="line">                <span class="comment">//忽略表后缀</span></span><br><span class="line">                .ignoreTableSuffix(ignoreSuffix).build();</span><br><span class="line">        <span class="comment">//配置</span></span><br><span class="line">        Configuration config = Configuration.builder()</span><br><span class="line">                <span class="comment">//版本</span></span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                <span class="comment">//描述</span></span><br><span class="line">                .description(<span class="string">"数据库设计文档生成"</span>)</span><br><span class="line">                <span class="comment">//数据源</span></span><br><span class="line">                .dataSource(dataSource)</span><br><span class="line">                <span class="comment">//生成配置</span></span><br><span class="line">                .engineConfig(engineConfig)</span><br><span class="line">                <span class="comment">//生成配置</span></span><br><span class="line">                .produceConfig(processConfig)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//执行生成</span></span><br><span class="line">        <span class="keyword">new</span> DocumentationExecute(config).execute();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="基于-Maven-插件"><a href="#基于-Maven-插件" class="headerlink" title="基于 Maven 插件"></a>基于 Maven 插件</h3><p>第二种使用方式是基于 Maven 插件，自动生成数据库文档。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${lastVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- HikariCP --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mysql driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--username--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--password--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jdbc url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdbcUrl</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/database<span class="tag">&lt;/<span class="name">jdbcUrl</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成文件类型--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileType</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">fileType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--打开文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">openOutputDir</span>&gt;</span>false<span class="tag">&lt;/<span class="name">openOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成模板--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">produceType</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">produceType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--文档名称 为空时:将采用[数据库名称-描述-版本号]作为文档名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileName</span>&gt;</span>测试文档名称<span class="tag">&lt;/<span class="name">fileName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>数据库文档生成<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${project.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据库文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="扩展模块"><a href="#扩展模块" class="headerlink" title="扩展模块"></a>扩展模块</h2><p>在日常的开发中，经过需求分析、建模之后，往往会先在数据库中建表，其次再进行代码的开发。使用 POJO 生成功能可以直接根据数据库表生成对应的 Java POJO 对象，这可以帮助开发人员节省一些重复劳动。screw 支持 POJO 生成功能，目前处于初步开发的状态，且仅支持 MySQL 数据库。</p><h3 id="POJO-生成模块"><a href="#POJO-生成模块" class="headerlink" title="POJO 生成模块"></a>POJO 生成模块</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${lastVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * POJO 生成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pojoGeneration</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//数据源</span></span><br><span class="line">    HikariConfig hikariConfig = <span class="keyword">new</span> HikariConfig();</span><br><span class="line">    hikariConfig.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">    hikariConfig.setJdbcUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/database"</span>);</span><br><span class="line">    hikariConfig.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    hikariConfig.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">//设置可以获取tables remarks信息</span></span><br><span class="line">    hikariConfig.addDataSourceProperty(<span class="string">"useInformationSchema"</span>, <span class="string">"true"</span>);</span><br><span class="line">    hikariConfig.setMinimumIdle(<span class="number">2</span>);</span><br><span class="line">    hikariConfig.setMaximumPoolSize(<span class="number">5</span>);</span><br><span class="line">    DataSource dataSource = <span class="keyword">new</span> HikariDataSource(hikariConfig);</span><br><span class="line"></span><br><span class="line">    ProcessConfig processConfig = ProcessConfig.builder()</span><br><span class="line">        <span class="comment">//指定生成逻辑、当存在指定表、指定表前缀、指定表后缀时，将生成指定表，其余表不生成、并跳过忽略表配置</span></span><br><span class="line">        <span class="comment">//根据名称指定表生成</span></span><br><span class="line">        .designatedTableName(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">        <span class="comment">//根据表前缀生成</span></span><br><span class="line">        .designatedTablePrefix(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">        <span class="comment">//根据表后缀生成</span></span><br><span class="line">        .designatedTableSuffix(<span class="keyword">new</span> ArrayList&lt;&gt;()).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置生成pojo相关配置</span></span><br><span class="line">    PojoConfiguration config = <span class="keyword">new</span> PojoConfiguration();</span><br><span class="line">    <span class="comment">//设置文件存放路径</span></span><br><span class="line">    config.setPath(<span class="string">"/cn/smallbun/screw/"</span>);</span><br><span class="line">    <span class="comment">//设置包名</span></span><br><span class="line">    config.setPackageName(<span class="string">"cn.smallbun.screw"</span>);</span><br><span class="line">    <span class="comment">//设置是否使用lombok</span></span><br><span class="line">    config.setUseLombok(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//设置数据源</span></span><br><span class="line">    config.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">//设置命名策略</span></span><br><span class="line">    config.setNameStrategy(<span class="keyword">new</span> HumpNameStrategy());</span><br><span class="line">    <span class="comment">//设置表过滤逻辑</span></span><br><span class="line">    config.setProcessConfig(processConfig);</span><br><span class="line">    <span class="comment">//执行生成</span></span><br><span class="line">    <span class="keyword">new</span> PojoExecute(config).execute();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><div class="admonition note"><p class="admonition-title">问题一</p><p>生成的数据库文档出现乱码？</p></div><p>在连接 MySQL 的 URL 中加入 <code>characterEncoding=UTF-8</code> 即可</p><div class="admonition note"><p class="admonition-title">问题二</p><p>MySQL 数据库表和列字段有注释，但生成的数据库文档却没有注释？</p></div><p>在连接 MySQL 的 URL 中加入 <code>useInformationSchema=true</code> 即可</p><div class="admonition note"><p class="admonition-title">问题三</p><p>运行抛出异常： <code>Caused by: java.lang.NoSuchFieldError: VERSION_2_3_30</code></p></div><p>检查项目中 <code>freemarker</code> 的依赖版本，这是由于版本过低造成的，升级版本为 <code>2.3.30</code> 即可</p><div class="admonition note"><p class="admonition-title">问题四</p><p>运行抛出异常： <code>java.lang.AbstractMethodError: com.mysql.jdbc.JDBC4Connection.getSchema()Ljava/lang/String;</code></p></div><p>这是因为 MySQL 驱动的版本过低造成的，升级 MySQL 驱动的版本为最新即可</p><div class="admonition note"><p class="admonition-title">问题五</p><p>运行抛出异常： <code>java.lang.AbstractMethodError: oracle.jdbc.driver.T4CConnection.getSchema()Ljava/lang/String;</code></p></div><p>这是因为 Oracle 驱动版本过低造成的，删除或屏蔽当前的驱动版本，并将驱动升级为以下版本：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle.ojdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.easyproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orai18n<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.1.0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文档生成截图"><a href="#文档生成截图" class="headerlink" title="文档生成截图"></a>文档生成截图</h2><p><img data-src="../../../asset/2022/07/screw-docs-1.png"></p></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要记录如何通过 Java 自动生成数据库文档，包括 screw 工具的使用。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>C++ 进阶基础之八</title>
    <link href="https://www.techgrow.cn/posts/8b87f2be.html"/>
    <id>https://www.techgrow.cn/posts/8b87f2be.html</id>
    <published>2022-07-12T14:55:34.000Z</published>
    <updated>2022-07-12T14:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="stack-容器"><a href="#stack-容器" class="headerlink" title="stack 容器"></a>stack 容器</h2><h3 id="stack-容器的概念"><a href="#stack-容器的概念" class="headerlink" title="stack 容器的概念"></a>stack 容器的概念</h3><p><strong>stack 是一种先进后出（First In Last Out，FILO）的数据结构，它只有一个出口。</strong>stack 容器允许新增元素、移除元素、取得栈顶元素，但是除了最顶端的元素外，没有任何其他方法可以存取 stack 中的其他元素。stack 没有迭代器，容器中所有元素的进出都必须符合 “先进后出” 的规则，只有 stack 最顶端的元素，才有机会被外界取用。换言之，<strong>stack 不提供遍历功能，也不提供迭代器。</strong>deque 是双向开口的数据结构，若以 deque 为底部结构并封闭其头端开口，便轻而易举地形成一个 stack。因此，SGI STL 便以 deque 作为缺省情况下的 stack 底部结构。由于 stack 以底部容器完成其所有工作，而具有这种 “修改某物接口，形成另一种风貌” 的性质者，称为 <code>adapter（配接器）</code>，因此，STL stack 往往不被归类为 <code>container（容器）</code>，而被归类为 <code>container adapter（容器配接器）</code>。</p><p><img data-src="../../../asset/2022/07/cplusplus-stack-1.png"></p><span id="more"></span><h3 id="stack-容器的使用"><a href="#stack-容器的使用" class="headerlink" title="stack 容器的使用"></a>stack 容器的使用</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStack</span><span class="params">(stack&lt;<span class="keyword">int</span>&gt; &amp;s)</span> </span>{</span><br><span class="line">    <span class="comment">// 判断容器是否为空</span></span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="comment">// 获取栈顶元素</span></span><br><span class="line">        cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="comment">// 弹出栈顶元素（弹栈）</span></span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向栈顶添加元素（压栈）</span></span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">12</span>);</span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">24</span>);</span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">35</span>);</span><br><span class="line">    s1.<span class="built_in">push</span>(<span class="number">46</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printStack</span>(s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s2 = s1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">46 35 24 12 5 </span><br></pre></td></tr></tbody></table></figure><h2 id="queue-容器"><a href="#queue-容器" class="headerlink" title="queue 容器"></a>queue 容器</h2><h3 id="queue-容器的概念"><a href="#queue-容器的概念" class="headerlink" title="queue 容器的概念"></a>queue 容器的概念</h3><p><strong>queue 是一种先进先出（First In First Out，FIFO）的数据结构，它有两个出口。</strong>queue 容器允许从一端新增元素，从另一端移除元素。queue 所有元素的进出都必须符合 ” 先进先出” 的规则，只有 queue 的顶端元素，才有机会被外界取用。<strong>queue 不提供遍历功能，也不提供迭代器。</strong>由于 queue 以底部容器完成其所有工作，因此，STL queue 往往也不被归类为 <code>container（容器）</code>，而被归类为 <code>container adapter（容器配接器）</code>。</p><p><img data-src="../../../asset/2022/07/cplusplus-queue-1.png"></p><h3 id="queue-容器的使用"><a href="#queue-容器的使用" class="headerlink" title="queue 容器的使用"></a>queue 容器的使用</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">(queue&lt;<span class="keyword">int</span>&gt; &amp;q)</span> </span>{</span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"大小: "</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">"队头: "</span> &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">"队尾: "</span> &lt;&lt; q.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 弹出（删除）队头元素</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往队尾添加元素</span></span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">    q1.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回队列的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"size = "</span> &lt;&lt; q1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回第一个元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"first = "</span> &lt;&lt; q1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最后一个元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"last = "</span> &lt;&lt; q1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printQueue</span>(q1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q2 = q1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">size = 5</span><br><span class="line">first = 1</span><br><span class="line">last = 9</span><br><span class="line">大小: 5</span><br><span class="line">队头: 1</span><br><span class="line">队尾: 9</span><br><span class="line">大小: 4</span><br><span class="line">队头: 3</span><br><span class="line">队尾: 9</span><br><span class="line">大小: 3</span><br><span class="line">队头: 5</span><br><span class="line">队尾: 9</span><br><span class="line">大小: 2</span><br><span class="line">队头: 7</span><br><span class="line">队尾: 9</span><br><span class="line">大小: 1</span><br><span class="line">队头: 9</span><br><span class="line">队尾: 9</span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 C++ 的进阶基础教程，包括 STL 几大容器的使用等。</summary>
    
    
    
    
    <category term="C++" scheme="https://www.techgrow.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 进阶基础之七</title>
    <link href="https://www.techgrow.cn/posts/9e89901e.html"/>
    <id>https://www.techgrow.cn/posts/9e89901e.html</id>
    <published>2022-07-03T14:55:34.000Z</published>
    <updated>2022-07-03T14:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="vector-容器"><a href="#vector-容器" class="headerlink" title="vector 容器"></a>vector 容器</h2><h3 id="vector-容器的概念"><a href="#vector-容器的概念" class="headerlink" title="vector 容器的概念"></a>vector 容器的概念</h3><p>vector 的数据存储以及操作方式，与 Array 非常相似，两者的唯一差别在于空间运用的灵活性。Array 是静态空间，一旦配置了就不能改变，要换大一点或者小一点的空间，可以，一切琐碎的细节得由自己来实现；首先配置一块新的空间，然后将旧空间的数据搬往新空间，再释放原来的空间。Vector 是动态空间，随着元素的加入，它的内部机制会自动扩充空间以容纳新元素。因此 vector 的运用对于内存的合理利用与运用的灵活性有很大的帮助，我们再也不必害怕空间不足而一开始就初始化一个大的 Array 了。Vector 的实现技术，关键在于其对大小的控制以及重新配置时的数据移动效率，一旦 vector 旧空间满了，如果客户每新增一个元素 vector 内部只是扩充一个元素的空间，实为不智，因为所谓的扩充空间（不论多大），一如刚所说，是 “配置新空间 - 数据移动 - 释放旧空间” 的大工程，时间成本很高，应该加入某种未雨绸缪的考虑。</p><h3 id="vector-容器的数据结构"><a href="#vector-容器的数据结构" class="headerlink" title="vector 容器的数据结构"></a>vector 容器的数据结构</h3><p><img data-src="../../../asset/2022/07/cplusplus-vector-1.png"></p><span id="more"></span><p>vector 所采用的数据结构是线性连续空间（单向开口的连续内存空间），它以两个迭代器（<code>_Myfirst</code> 和 <code>_Mylast</code>）分别指向配置得来的连续空间中目前已被使用的范围，并以迭代器 <code>_Myend</code> 指向整块连续内存空间的尾端。<strong>vector 往尾部添加或移除元素的效率非常高，但是往头部或者中部插入元素或移除元素则比较费时。</strong>为了降低空间配置时的速度成本，vector 实际配置的大小可能比客户端需求大一些，以应付将来可能的扩充，这里是容量的概念。换句话说，一个 vector 的容量永远大于或等于其大小，一旦容量等于大小，便是满载，下次再需要新增元素时，整个 vector 容器就得另觅居所。值得一提的是，所谓动态增加大小，并不是在原空间之后续接新空间（因为无法保证原空间之后尚有可配置的空间），而是申请一块更大的内存空间，然后将原数据拷贝到新空间，并释放原空间。因此，对 vector 的任何操作，一旦引起空间的重新配置，指向原 vector 的所有迭代器就都失效了，这是程序容易出错的地方，务必小心。</p><h3 id="vector-容器的迭代器"><a href="#vector-容器的迭代器" class="headerlink" title="vector 容器的迭代器"></a>vector 容器的迭代器</h3><p>vector 维护了一个线性空间，所以不论元素的类型是什么，普通指针都可以作为 vector 的迭代器，因为 vector 迭代器所需要的操作行为，如 <code>operaroe*, operator-&gt;, operator++, operator--, operator+, operator-, operator+=, operator-=</code> 都是普通指针天生具备的。vector 支持随机存取，而普通指针正有着这样的能力，所以 <strong>vector 提供的是随机访问迭代器（Random Access Iterators），支持随机存取元素。</strong>根据前面的描述，可以写如下的代码：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 声明容器</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入容器数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// vector 的迭代器是随机访问迭代器，支持跳跃式访问（随机存取元素）</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itBegin = v1.<span class="built_in">begin</span>();</span><br><span class="line">    itBegin = itBegin + <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 </span><br><span class="line">2</span><br></pre></td></tr></tbody></table></figure><h3 id="vector-容器的使用"><a href="#vector-容器的使用" class="headerlink" title="vector 容器的使用"></a>vector 容器的使用</h3><h4 id="vector-的构造与赋值"><a href="#vector-的构造与赋值" class="headerlink" title="vector 的构造与赋值"></a>vector 的构造与赋值</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;T&gt; v;                        // 默认构造函数，采用模板实现类实现</span><br><span class="line">vector(v.begin(), v.end());         // 有参构造函数，将 v[begin(), end()] 区间中的元素拷贝给本身</span><br><span class="line">vector(n, elem);                    // 有参构造函数，将 n 个 elem 元素拷贝给本身</span><br><span class="line">vector(const vector &amp;vec);          // 拷贝构造函数</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;v)</span> </span>{</span><br><span class="line">    <span class="comment">// 遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> arr[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"------ vector 构造函数 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造函数，将 v[begin(), end()] 区间中的元素拷贝给本身</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(arr, arr + <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>))</span></span>;</span><br><span class="line">    <span class="built_in">printVector</span>(v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造函数，将 v[begin(), end()] 区间中的元素拷贝给本身</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(v2.begin(), v2.end())</span></span>;</span><br><span class="line">    <span class="built_in">printVector</span>(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造函数，将 n 个 elem 元素拷贝给本身</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v4</span><span class="params">(<span class="number">5</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printVector</span>(v4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v5 = v4;</span><br><span class="line">    <span class="built_in">printVector</span>(v5);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"------ vector 赋值操作 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值操作，将 v[begin(), end()] 区间中的元素拷贝给本身</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v6;</span><br><span class="line">    v6.<span class="built_in">assign</span>(v5.<span class="built_in">begin</span>(), v5.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printVector</span>(v6);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值操作，将 n 个 elem 元素拷贝给本身</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v7;</span><br><span class="line">    v7.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v7);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值操作，重载等号操作符</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v8;</span><br><span class="line">    v8 = v6;</span><br><span class="line">    <span class="built_in">printVector</span>(v8);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值操作，将其他容器与本身的元素互换，利用 swap() 可以收缩空间</span></span><br><span class="line">    v8.<span class="built_in">swap</span>(v7);</span><br><span class="line">    <span class="built_in">printVector</span>(v8);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------ vector 构造函数 ------</span><br><span class="line">1 2 3 4 5 </span><br><span class="line">1 2 3 4 5 </span><br><span class="line">10 10 10 10 10 </span><br><span class="line">10 10 10 10 10 </span><br><span class="line">------ vector 赋值操作 ------</span><br><span class="line">10 10 10 10 10 </span><br><span class="line">8 8 8 8 8 </span><br><span class="line">10 10 10 10 10 </span><br><span class="line">8 8 8 8 8 </span><br></pre></td></tr></tbody></table></figure><h4 id="vector-的常用操作"><a href="#vector-的常用操作" class="headerlink" title="vector 的常用操作"></a>vector 的常用操作</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;v)</span> </span>{</span><br><span class="line">    <span class="comment">// 遍历vector</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">    v1.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"------ vector 大小、容量操作 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取容器中元素的个数</span></span><br><span class="line">    <span class="keyword">size_t</span> size = v1.<span class="built_in">size</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">"size = "</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断容器是否为空</span></span><br><span class="line">    <span class="keyword">bool</span> empty = v1.<span class="built_in">empty</span>();</span><br><span class="line">    cout &lt;&lt; (empty == <span class="number">0</span> ? <span class="string">"true"</span> : <span class="string">"false"</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新指定容器的大小为 num，若容器变大，则以默认值（0）填充新位置。如果容器变小，则末尾超出容器大小的元素会被删除</span></span><br><span class="line">    v1.<span class="built_in">resize</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新指定容器的大小为 num，若容器变大，则以指定值填充新位置。如果容器变小，则末尾超出容器大小的元素会被删除</span></span><br><span class="line">    v1.<span class="built_in">resize</span>(<span class="number">10</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取容器的容量</span></span><br><span class="line">    <span class="keyword">size_t</span> capacity = v1.<span class="built_in">capacity</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">"capacity = "</span> &lt;&lt; capacity &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"------ vector 数据读取操作 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">    v2.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    v2.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">    v2.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">    v2.<span class="built_in">push_back</span>(<span class="number">12</span>);</span><br><span class="line">    v2.<span class="built_in">push_back</span>(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回索引所指向的数据，如果索引越界，抛出 out_of_range 异常</span></span><br><span class="line">    <span class="keyword">int</span> num1 = v2.<span class="built_in">at</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"num1 = "</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回索引所指向的数据，如果索引越界，程序终止运行</span></span><br><span class="line">    <span class="keyword">int</span> num2 = v2[<span class="number">3</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">"num2 = "</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回容器中第一个数据元素</span></span><br><span class="line">    <span class="keyword">int</span> font = v2.<span class="built_in">front</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">"font = "</span> &lt;&lt; font &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回容器中最后一个数据元素</span></span><br><span class="line">    <span class="keyword">int</span> back = v2.<span class="built_in">back</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">"back = "</span> &lt;&lt; back &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"------ vector 插入和删除操作 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往迭代器指向的位置插入 n 个指定的元素，其中元素个数可以省略</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">5</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line">    v3.<span class="built_in">insert</span>(v3.<span class="built_in">begin</span>(), <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往容器的尾部插入元素</span></span><br><span class="line">    v3.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除最后一个元素</span></span><br><span class="line">    v3.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">printVector</span>(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除迭代器指向的元素，迭代器就是指针</span></span><br><span class="line">    v3.<span class="built_in">erase</span>(v3.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="built_in">printVector</span>(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除迭代器从 start 到 end 之间的元素</span></span><br><span class="line">    v3.<span class="built_in">erase</span>(v3.<span class="built_in">begin</span>(), v3.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span> (v3.<span class="built_in">empty</span>()) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"vector is empty"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除容器中的所有元素</span></span><br><span class="line">    v3.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">------ vector 大小、容量操作 ------</span><br><span class="line">size = 5</span><br><span class="line">true</span><br><span class="line">10 10 10 10 10 0 0 </span><br><span class="line">10 10 10 10 10 0 0 8 8 8 </span><br><span class="line">capacity = 10</span><br><span class="line">------ vector 数据存取操作 ------</span><br><span class="line">num1 = 6</span><br><span class="line">num2 = 12</span><br><span class="line">font = 3</span><br><span class="line">back = 15</span><br><span class="line">------ vector 插入和删除操作 ------</span><br><span class="line">10 10 8 8 8 8 8 </span><br><span class="line">10 10 8 8 8 8 8 11 </span><br><span class="line">10 10 8 8 8 8 8 </span><br><span class="line">10 8 8 8 8 8 </span><br><span class="line">vector is empty</span><br></pre></td></tr></tbody></table></figure><h4 id="vector-逆序遍历"><a href="#vector-逆序遍历" class="headerlink" title="vector 逆序遍历"></a>vector 逆序遍历</h4><p>容器迭代器的类型：</p><ul><li><code>iterator</code>：普通迭代器</li><li><code>const_iterator</code>：只读迭代器</li><li><code>reverse_iterator</code>：逆序迭代器 </li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顺序遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v1.<span class="built_in">begin</span>(); it != v1.<span class="built_in">end</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逆序遍历容器（使用逆序迭代器）</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::reverse_iterator it = v1.<span class="built_in">rbegin</span>(); it != v1.<span class="built_in">rend</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// vector 的迭代器是随机访问迭代器，支持跳跃式访问</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itBegin = v1.<span class="built_in">begin</span>();</span><br><span class="line">    itBegin = itBegin + <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 </span><br><span class="line">9 8 7 6 5 4 3 2 1 0 </span><br><span class="line">2</span><br></pre></td></tr></tbody></table></figure><h4 id="vector-收缩空间"><a href="#vector-收缩空间" class="headerlink" title="vector 收缩空间"></a>vector 收缩空间</h4><p>结合 C++ 的匿名对象和 vector 容器的 <code>swap()</code> 函数，可以实现收缩 vector 容器的空间。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入容器数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) {</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"size = "</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"capacity = "</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新指定容器的大小，此时容器的容量不会改变</span></span><br><span class="line">    v1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"size = "</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"capacity = "</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 巧用匿名对象和 swap() 函数收缩 vector 容器的空间</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;(v1).<span class="built_in">swap</span>(v1);</span><br><span class="line">    cout &lt;&lt; <span class="string">"size = "</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"capacity = "</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">size = 100000</span><br><span class="line">capacity = 131072</span><br><span class="line">size = 5</span><br><span class="line">capacity = 131072</span><br><span class="line">size = 5</span><br><span class="line">capacity = 5</span><br></pre></td></tr></tbody></table></figure><h4 id="vector-预留空间"><a href="#vector-预留空间" class="headerlink" title="vector 预留空间"></a>vector 预留空间</h4><p><code>reserve()</code> 函数可以让 vector 容器预留指定的空间，尤其在大数据量插入的情况下，这可以减少 vector 容器频繁扩充容量带来的额外性能开销，从而提升程序的运行效率。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initData</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;v, <span class="keyword">size_t</span> size, <span class="keyword">bool</span> reserve)</span> </span>{</span><br><span class="line">    <span class="comment">// 预留空间</span></span><br><span class="line">    <span class="keyword">if</span> (reserve) {</span><br><span class="line">        v.<span class="built_in">reserve</span>(size);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *pStart = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">        <span class="comment">// 插入容器数据</span></span><br><span class="line">        v.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="comment">// 统计容器改变容量的次数</span></span><br><span class="line">        <span class="keyword">if</span> (pStart != &amp;v[<span class="number">0</span>]) {</span><br><span class="line">            pStart = &amp;v[<span class="number">0</span>];</span><br><span class="line">            count++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; <span class="string">"count : "</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 不申请预览空间</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">    <span class="built_in">initData</span>(v1, <span class="number">100000</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请预览空间</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">    <span class="built_in">initData</span>(v2, <span class="number">100000</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count : 18</span><br><span class="line">count : 1</span><br></pre></td></tr></tbody></table></figure><h2 id="deque-容器"><a href="#deque-容器" class="headerlink" title="deque 容器"></a>deque 容器</h2><h3 id="deque-容器的概念"><a href="#deque-容器的概念" class="headerlink" title="deque 容器的概念"></a>deque 容器的概念</h3><p><strong>vector 是单向开口的连续线性空间，而 deque 则是一种双向开口的连续线性空间。</strong>所谓双向开口，意思是可以在头尾两端分别进行元素的插入和移除操作。虽然 vector 也可以在头尾两端进行操作，但是其头部操作的效率非常低，无法被接受。deque 和 vector 的最大差异，一在于 deque 允许于常数项时间内对头端进行元素的插入或移除操作，二在于 <strong>deque 没有所谓容量 <code>capacity</code> 的观念，因为它是动态地以分段连续空间组合而成，随时可以增加一段新的空间并链接起来。</strong>换句话说，像 vector 那样因旧空间不足而重新配置一块更大的空间，然后拷贝元素，再释放旧空间这样的事情不会发生在 deque 身上，也因此 deque 没有必要提供所谓的空间保留（reserve）功能。虽然 deque 也提供了随机迭代器（Random Access Iterator），但是它的迭代器并不是普通的指针，其复杂度和 vector 不是一个量级，这会影响各个层面的运算效率。因此，除非有必要，应该尽可能的使用 vector，而不是 deque。对 deque 进行的排序操作，为了提高效率，可将 deque 先完整的复制到一个 vector 中，然后对 vector 容器进行排序，再复制回 deque。</p><p><img data-src="../../../asset/2022/07/cplusplus-deque-1.png"></p><h3 id="deque-容器的实现原理"><a href="#deque-容器的实现原理" class="headerlink" title="deque 容器的实现原理"></a>deque 容器的实现原理</h3><p><strong>deque 本质由一段一段的定量连续空间（分段连续内存空间）构造而成，一旦有必要在 deque 的头端或尾端增加新空间，便会配置一段新的定量连续空间，然后串接在整个 deque 的头端或尾端。</strong>deque 最大的工作就是维护这些分段连续的内存空间的整体性的假象，并提供随机存取的接口；这避开了重新配置空间、复制数据、释放空间的轮回，代价就是复杂的迭代器架构。既然 deque 使用的是分段连续内存空间，那么就必须有中央控制器，维持其整体连续的假象，这样也导致了数据结构的设计及迭代器的前进后退操作颇为繁琐，deque 底层实现的代码远比 vector 或 list 都多得多。</p><p><img data-src="../../../asset/2022/07/cpluplus-deque-2.png"></p><p><strong>deque 内部的中控器维护的是每个缓冲区的地址，而缓冲区则存放着真实的数据，目的是让 deque 使用起来像是一片连续的内存空间。</strong>deque 采取一块所谓的 <code>map</code>（注意，不是 STL 的 map 容器）作为主控，这里所谓的 <code>map</code> 是一小块连续的内存空间，其中每一个元素（节点）都是一个指针，指向另一段连续性内存空间，称作缓冲区，缓冲区才是 deque 的存储空间的主体。</p><h3 id="deque-与-vector-的区别"><a href="#deque-与-vector-的区别" class="headerlink" title="deque 与 vector 的区别"></a>deque 与 vector 的区别</h3><ul><li>vector 对于头部的插入效率极低，数据量越大，效率越低</li><li> deque 相对而言，对头部的元素插入、删除速度会比 vector 快</li><li> vector 访问元素时的速度会比 deque 快，这和两者的内部实现有关</li></ul><h3 id="deque-容器的使用"><a href="#deque-容器的使用" class="headerlink" title="deque 容器的使用"></a>deque 容器的使用</h3><h4 id="deque-的构造和赋值"><a href="#deque-的构造和赋值" class="headerlink" title="deque 的构造和赋值"></a>deque 的构造和赋值</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span><span class="params">(<span class="keyword">const</span> deque&lt;<span class="keyword">int</span>&gt; &amp;d)</span> </span>{</span><br><span class="line">    <span class="comment">// 遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="keyword">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    cout &lt;&lt; <span class="string">"------ deque 构造函数 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造函数，将 n 个 elem 元素拷贝给本身</span></span><br><span class="line">    <span class="function">deque&lt;<span class="keyword">int</span>&gt; <span class="title">d2</span><span class="params">(<span class="number">5</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printDeque</span>(d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造函数，将 d[begin(), end()] 区间中的元素拷贝给本身</span></span><br><span class="line">    <span class="function">deque&lt;<span class="keyword">int</span>&gt; <span class="title">d3</span><span class="params">(d2.begin(), d2.end())</span></span>;</span><br><span class="line">    <span class="built_in">printDeque</span>(d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函</span></span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d4 = d3;</span><br><span class="line">    <span class="built_in">printDeque</span>(d4);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"------ deque 赋值操作 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值操作，重载等号操作符</span></span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d5;</span><br><span class="line">    d5 = d4;</span><br><span class="line">    <span class="built_in">printDeque</span>(d5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值操作，将 d[begin(), end()] 区间中的元素拷贝给本身</span></span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d6;</span><br><span class="line">    d6.<span class="built_in">assign</span>(d5.<span class="built_in">begin</span>(), d5.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printDeque</span>(d6);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值操作，将 n 个 elem 元素拷贝给本身</span></span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d7;</span><br><span class="line">    d7.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printDeque</span>(d7);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值操作，将其他容器与本身的元素互换</span></span><br><span class="line">    d7.<span class="built_in">swap</span>(d6);</span><br><span class="line">    <span class="built_in">printDeque</span>(d7);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">------ deque 构造函数 ------</span><br><span class="line">10 10 10 10 10 </span><br><span class="line">10 10 10 10 10 </span><br><span class="line">10 10 10 10 10 </span><br><span class="line">------ deque 赋值操作 ------</span><br><span class="line">10 10 10 10 10 </span><br><span class="line">10 10 10 10 10 </span><br><span class="line">8 8 8 8 8 </span><br><span class="line">10 10 10 10 10 </span><br></pre></td></tr></tbody></table></figure><h4 id="deque-的常用操作"><a href="#deque-的常用操作" class="headerlink" title="deque 的常用操作"></a>deque 的常用操作</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span><span class="params">(<span class="keyword">const</span> deque&lt;<span class="keyword">int</span>&gt; &amp;d)</span> </span>{</span><br><span class="line">    <span class="comment">// 遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="keyword">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    cout &lt;&lt; <span class="string">"------ deque 大小操作 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line">    d1.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断容器是否为空</span></span><br><span class="line">    <span class="keyword">bool</span> empty = d1.<span class="built_in">empty</span>();</span><br><span class="line">    cout &lt;&lt; (empty ? <span class="string">"yes"</span> : <span class="string">"no"</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取容器中元素的个数</span></span><br><span class="line">    <span class="keyword">size_t</span> size = d1.<span class="built_in">size</span>();</span><br><span class="line">    cout &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新指定容器的大小为 num，若容器变大，则以默认值（0）填充新位置。如果容器变小，则末尾超出容器大小的元素会被删除</span></span><br><span class="line">    d1.<span class="built_in">resize</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新指定容器的大小为 num，若容器变大，则以指定值填充新位置。如果容器变小，则末尾超出容器大小的元素会被删除</span></span><br><span class="line">    d1.<span class="built_in">resize</span>(<span class="number">10</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"------ deque 读取操作 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d2;</span><br><span class="line">    d2.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    d2.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    d2.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    d2.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    d2.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回索引所指向的数据，如果索引越界，抛出 out_of_range 异常</span></span><br><span class="line">    <span class="keyword">int</span> num1 = d2.<span class="built_in">at</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"num1 = "</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回索引所指向的数据，如果索引越界，程序终止运行</span></span><br><span class="line">    <span class="keyword">int</span> num2 = d2[<span class="number">3</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">"num2 = "</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回容器中第一个数据元素</span></span><br><span class="line">    <span class="keyword">int</span> font = d2.<span class="built_in">front</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">"font = "</span> &lt;&lt; font &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回容器中最后一个数据元素</span></span><br><span class="line">    <span class="keyword">int</span> back = d2.<span class="built_in">back</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">"back = "</span> &lt;&lt; back &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"------ deque 插入操作 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">deque&lt;<span class="keyword">int</span>&gt; <span class="title">d3</span><span class="params">(<span class="number">3</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printDeque</span>(d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往迭代器指向的位置插入指定的元素</span></span><br><span class="line">    d3.<span class="built_in">insert</span>(d3.<span class="built_in">begin</span>(), <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printDeque</span>(d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往迭代器指向的位置插入 n 个指定的元素</span></span><br><span class="line">    d3.<span class="built_in">insert</span>(d3.<span class="built_in">begin</span>(), <span class="number">2</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="built_in">printDeque</span>(d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往迭代器指向的位置插入 [begin, end) 区间的数据</span></span><br><span class="line">    <span class="function">deque&lt;<span class="keyword">int</span>&gt; <span class="title">d4</span><span class="params">(<span class="number">2</span>, <span class="number">12</span>)</span></span>;</span><br><span class="line">    d3.<span class="built_in">insert</span>(d3.<span class="built_in">begin</span>(), d4.<span class="built_in">begin</span>(), d4.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printDeque</span>(d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在容器头部插入一个数据</span></span><br><span class="line">    d4.<span class="built_in">push_front</span>(<span class="number">13</span>);</span><br><span class="line">    <span class="built_in">printDeque</span>(d4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在容器尾部添加一个数据</span></span><br><span class="line">    d4.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">printDeque</span>(d4);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"------ deque 删除操作 ------"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d5;</span><br><span class="line">    d5.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    d5.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    d5.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    d5.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    d5.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    d5.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定位置的数据，会返回下一个数据的位置</span></span><br><span class="line">    d5.<span class="built_in">erase</span>(d5.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="built_in">printDeque</span>(d5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除容器第一个数据</span></span><br><span class="line">    d5.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="built_in">printDeque</span>(d5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除容器最后一个数据</span></span><br><span class="line">    d5.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">printDeque</span>(d5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空容器的所有数据</span></span><br><span class="line">    d5.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">------ deque 大小操作 ------</span><br><span class="line">10 10 10 10 10 </span><br><span class="line">no</span><br><span class="line">5</span><br><span class="line">10 10 10 10 10 0 0 </span><br><span class="line">10 10 10 10 10 0 0 8 8 8 </span><br><span class="line">------ deque 读取操作 ------</span><br><span class="line">num1 = 3</span><br><span class="line">num2 = 4</span><br><span class="line">font = 1</span><br><span class="line">back = 5</span><br><span class="line">------ deque 插入操作 ------</span><br><span class="line">8 8 8 </span><br><span class="line">10 8 8 8 </span><br><span class="line">11 11 10 8 8 8 </span><br><span class="line">12 12 11 11 10 8 8 8 </span><br><span class="line">13 12 12 </span><br><span class="line">13 12 12 11 </span><br><span class="line">------ deque 删除操作 ------</span><br><span class="line">2 3 4 5 6 </span><br><span class="line">3 4 5 6 </span><br><span class="line">3 4 5 </span><br></pre></td></tr></tbody></table></figure><h4 id="deque-的排序操作"><a href="#deque-的排序操作" class="headerlink" title="deque 的排序操作"></a>deque 的排序操作</h4><p>利用算法可以对 deque 容器进行排序，但需要引入头文件 <code>algorithm</code>。对于支持随机访问的迭代器的容器，都可以利用 <code>sort()</code> 排序，vector 容器也可以用 <code>sort()</code> 排序。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span><span class="params">(<span class="keyword">const</span> deque&lt;<span class="keyword">int</span>&gt; &amp;d)</span> </span>{</span><br><span class="line">    <span class="comment">// 遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="keyword">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++) {</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">descCompare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">asc</span><span class="params">()</span> </span>{</span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"升序排序前："</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 升序排序，默认从小到大排序</span></span><br><span class="line">    <span class="built_in">sort</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"升序排序后："</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printDeque</span>(d1);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desc</span><span class="params">()</span> </span>{</span><br><span class="line">    deque&lt;<span class="keyword">int</span>&gt; d1;</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"降序排序前："</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降序排序，默认从大到小排序</span></span><br><span class="line">    <span class="built_in">sort</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>(), descCompare);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"降序排序后："</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printDeque</span>(d1);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">asc</span>();  <span class="comment">// 升序排序</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">desc</span>(); <span class="comment">// 降序排序后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序运行输出的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">升序排序前：</span><br><span class="line">3 11 8 6 21 </span><br><span class="line">升序排序后：</span><br><span class="line">3 6 8 11 21 </span><br><span class="line"></span><br><span class="line">降序排序前：</span><br><span class="line">3 11 8 6 21 </span><br><span class="line">降序排序后：</span><br><span class="line">21 11 8 6 3 </span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 C++ 的进阶基础教程，包括 STL 几大容器的使用等。</summary>
    
    
    
    
    <category term="C++" scheme="https://www.techgrow.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 常用代码块</title>
    <link href="https://www.techgrow.cn/posts/b69c820e.html"/>
    <id>https://www.techgrow.cn/posts/b69c820e.html</id>
    <published>2022-06-26T13:19:24.000Z</published>
    <updated>2022-06-26T13:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="一、日期处理"><a href="#一、日期处理" class="headerlink" title="一、日期处理"></a>一、日期处理</h2><h3 id="1-时间格式化"><a href="#1-时间格式化" class="headerlink" title="1. 时间格式化"></a>1. 时间格式化</h3><p>该方法可以用于将时间转化为 <code>hour:minutes:seconds</code> 的格式：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeFromDate = <span class="function"><span class="params">date</span> =&gt;</span> date.toTimeString().slice(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">timeFromDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">0</span>));  <span class="comment">// 12:30:00</span></span><br><span class="line">timeFromDate(<span class="keyword">new</span> <span class="built_in">Date</span>());  <span class="comment">// 返回当前时间 09:00:00</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="2-检察日期是否有效"><a href="#2-检察日期是否有效" class="headerlink" title="2. 检察日期是否有效"></a>2. 检察日期是否有效</h3><p>该方法用于检测给出的日期是否有效：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDateValid = <span class="function">(<span class="params">...val</span>) =&gt;</span> !<span class="built_in">Number</span>.isNaN(<span class="keyword">new</span> <span class="built_in">Date</span>(...val).valueOf());</span><br><span class="line"></span><br><span class="line">isDateValid(<span class="string">"December 17, 1995 03:24:00"</span>);  <span class="comment">// true</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="3-计算两个日期之间的间隔"><a href="#3-计算两个日期之间的间隔" class="headerlink" title="3. 计算两个日期之间的间隔"></a>3. 计算两个日期之间的间隔</h3><p>该方法用于计算两个日期之间的间隔时间：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dayDif = <span class="function">(<span class="params">date1, date2</span>) =&gt;</span> <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.abs(date1.getTime() - date2.getTime()) / <span class="number">86400000</span>)</span><br><span class="line"></span><br><span class="line">dayDif(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2021-11-3"</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2022-2-1"</span>))  <span class="comment">// 90</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><p>距离过年还有 90 天～</p><h3 id="4-查找日期位于一年中的第几天"><a href="#4-查找日期位于一年中的第几天" class="headerlink" title="4. 查找日期位于一年中的第几天"></a>4. 查找日期位于一年中的第几天</h3><p>该方法用于检测给出的日期位于今年的第几天：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dayOfYear = <span class="function">(<span class="params">date</span>) =&gt;</span> <span class="built_in">Math</span>.floor((date - <span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), <span class="number">0</span>, <span class="number">0</span>)) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">dayOfYear(<span class="keyword">new</span> <span class="built_in">Date</span>());   <span class="comment">// 307</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><p>2021 年已经过去 300 多天了～</p><h2 id="二、字符串处理"><a href="#二、字符串处理" class="headerlink" title="二、字符串处理"></a>二、字符串处理</h2><h3 id="1-字符串首字母大写"><a href="#1-字符串首字母大写" class="headerlink" title="1. 字符串首字母大写"></a>1. 字符串首字母大写</h3><p>该方法用于将英文字符串的首字母大写处理：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalize = <span class="function"><span class="params">str</span> =&gt;</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">capitalize(<span class="string">"hello world"</span>)  <span class="comment">// Hello world</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="2-翻转字符串"><a href="#2-翻转字符串" class="headerlink" title="2. 翻转字符串"></a>2. 翻转字符串</h3><p>该方法用于将一个字符串进行翻转操作，返回翻转后的字符串：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="params">str</span> =&gt;</span> str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">reverse(<span class="string">'hello world'</span>);   <span class="comment">// 'dlrow olleh'</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="3-随机字符串"><a href="#3-随机字符串" class="headerlink" title="3. 随机字符串"></a>3. 随机字符串</h3><p>该方法用于生成一个随机的字符串：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomString = <span class="function">() =&gt;</span> <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).slice(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">randomString();</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="4-截断字符串"><a href="#4-截断字符串" class="headerlink" title="4. 截断字符串"></a>4. 截断字符串</h3><p>该方法可以从指定长度处截断字符串:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> truncateString = <span class="function">(<span class="params">string, length</span>) =&gt;</span> string.length &lt; length ? string : <span class="string">`<span class="subst">${string.slice(<span class="number">0</span>, length - <span class="number">3</span>)}</span>...`</span>;</span><br><span class="line"></span><br><span class="line">truncateString(<span class="string">'Hi, I should be truncated because I am too loooong!'</span>, <span class="number">36</span>)   <span class="comment">// 'Hi, I should be truncated because...'</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="5-去除字符串中的HTML"><a href="#5-去除字符串中的HTML" class="headerlink" title="5. 去除字符串中的HTML"></a>5. 去除字符串中的 HTML</h3><p>该方法用于去除字符串中的 HTML 元素：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stripHtml = <span class="function"><span class="params">html</span> =&gt;</span> (<span class="keyword">new</span> DOMParser().parseFromString(html, <span class="string">'text/html'</span>)).body.textContent || <span class="string">''</span>;</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h2 id="三、数组处理"><a href="#三、数组处理" class="headerlink" title="三、数组处理"></a>三、数组处理</h2><h3 id="1-从数组中移除重复项"><a href="#1-从数组中移除重复项" class="headerlink" title="1. 从数组中移除重复项"></a>1. 从数组中移除重复项</h3><p>该方法用于移除数组中的重复项：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> removeDuplicates = <span class="function">(<span class="params">arr</span>) =&gt;</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(removeDuplicates([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>]));</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="2-判断数组是否为空"><a href="#2-判断数组是否为空" class="headerlink" title="2. 判断数组是否为空"></a>2. 判断数组是否为空</h3><p>该方法用于判断一个数组是否为空数组，它将返回一个布尔值：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isNotEmpty = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">Array</span>.isArray(arr) &amp;&amp; arr.length &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">isNotEmpty([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);  <span class="comment">// true</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="3-合并两个数组"><a href="#3-合并两个数组" class="headerlink" title="3. 合并两个数组"></a>3. 合并两个数组</h3><p>可以使用下面两个方法来合并两个数组：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.concat(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">a, b</span>) =&gt;</span> [...a, ...b];</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h2 id="四、数字操作"><a href="#四、数字操作" class="headerlink" title="四、数字操作"></a>四、数字操作</h2><h3 id="1-判断一个数是奇数还是偶数"><a href="#1-判断一个数是奇数还是偶数" class="headerlink" title="1. 判断一个数是奇数还是偶数"></a>1. 判断一个数是奇数还是偶数</h3><p>该方法用于判断一个数字是奇数还是偶数：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEven = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">isEven(<span class="number">996</span>);</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="2-获得一组数的平均值"><a href="#2-获得一组数的平均值" class="headerlink" title="2. 获得一组数的平均值"></a>2. 获得一组数的平均值</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> average = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b) / args.length;</span><br><span class="line"></span><br><span class="line">average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);   <span class="comment">// 3</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="3-获取两个整数之间的随机整数"><a href="#3-获取两个整数之间的随机整数" class="headerlink" title="3. 获取两个整数之间的随机整数"></a>3. 获取两个整数之间的随机整数</h3><p>该方法用于获取两个整数之间的随机整数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> random = <span class="function">(<span class="params">min, max</span>) =&gt;</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min);</span><br><span class="line"></span><br><span class="line">random(<span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="4-指定位数四舍五入"><a href="#4-指定位数四舍五入" class="headerlink" title="4. 指定位数四舍五入"></a>4. 指定位数四舍五入</h3><p>该方法用于将一个数字按照指定位进行四舍五入：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> round = <span class="function">(<span class="params">n, d</span>) =&gt;</span> <span class="built_in">Number</span>(<span class="built_in">Math</span>.round(n + <span class="string">"e"</span> + d) + <span class="string">"e-"</span> + d)</span><br><span class="line"></span><br><span class="line">round(<span class="number">1.005</span>, <span class="number">2</span>) <span class="comment">//1.01</span></span><br><span class="line">round(<span class="number">1.555</span>, <span class="number">2</span>) <span class="comment">//1.56</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h2 id="五、颜色操作"><a href="#五、颜色操作" class="headerlink" title="五、颜色操作"></a>五、颜色操作</h2><h3 id="1-将RGB转化为十六机制"><a href="#1-将RGB转化为十六机制" class="headerlink" title="1. 将RGB转化为十六机制"></a>1. 将 RGB 转化为十六机制</h3><p>该方法可以将一个 RGB 的颜色值转化为 16 进制值：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rgbToHex = <span class="function">(<span class="params">r, g, b</span>) =&gt;</span> <span class="string">"#"</span> + ((<span class="number">1</span> &lt;&lt; <span class="number">24</span>) + (r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).toString(<span class="number">16</span>).slice(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">rgbToHex(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);  <span class="comment">// '#ffffff'</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="2-获取随机十六进制颜色"><a href="#2-获取随机十六进制颜色" class="headerlink" title="2. 获取随机十六进制颜色"></a>2. 获取随机十六进制颜色</h3><p>该方法用于获取一个随机的十六进制颜色值：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomHex = <span class="function">() =&gt;</span> <span class="string">`#<span class="subst">${<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>).toString(<span class="number">16</span>).padEnd(<span class="number">6</span>, <span class="string">"0"</span>)}</span>`</span>;</span><br><span class="line"></span><br><span class="line">randomHex();</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h2 id="六、浏览器操作"><a href="#六、浏览器操作" class="headerlink" title="六、浏览器操作"></a>六、浏览器操作</h2><h3 id="1-复制内容到剪切板"><a href="#1-复制内容到剪切板" class="headerlink" title="1. 复制内容到剪切板"></a>1. 复制内容到剪切板</h3><p>该方法使用 navigator.clipboard.writeText 来实现将文本复制到剪贴板：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copyToClipboard = <span class="function">(<span class="params">text</span>) =&gt;</span> navigator.clipboard.writeText(text);</span><br><span class="line"></span><br><span class="line">copyToClipboard(<span class="string">"Hello World"</span>);</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="2-清除所有cookie"><a href="#2-清除所有cookie" class="headerlink" title="2. 清除所有cookie"></a>2. 清除所有 cookie</h3><p>该方法可以通过使用 document.cookie 来访问 cookie 并清除存储在网页中的所有 cookie：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clearCookies = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">cookie</span> =&gt;</span> <span class="built_in">document</span>.cookie = cookie.replace(<span class="regexp">/^ +/</span>, <span class="string">''</span>).replace(<span class="regexp">/=.*/</span>, <span class="string">`=;expires=<span class="subst">${<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>).toUTCString()}</span>;path=/`</span>));</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="3-获取选中的文本"><a href="#3-获取选中的文本" class="headerlink" title="3. 获取选中的文本"></a>3. 获取选中的文本</h3><p>该方法通过内置的 getSelection 属性获取用户选择的文本：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getSelectedText = <span class="function">() =&gt;</span> <span class="built_in">window</span>.getSelection().toString();</span><br><span class="line"></span><br><span class="line">getSelectedText();</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="4-检测是否是黑暗模式"><a href="#4-检测是否是黑暗模式" class="headerlink" title="4. 检测是否是黑暗模式"></a>4. 检测是否是黑暗模式</h3><p>该方法用于检测当前的环境是否是黑暗模式，它是一个布尔值：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDarkMode = <span class="built_in">window</span>.matchMedia &amp;&amp; <span class="built_in">window</span>.matchMedia(<span class="string">'(prefers-color-scheme: dark)'</span>).matches</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isDarkMode)</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="5-滚动到页面顶部"><a href="#5-滚动到页面顶部" class="headerlink" title="5. 滚动到页面顶部"></a>5. 滚动到页面顶部</h3><p>该方法用于在页面中返回顶部：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> goToTop = <span class="function">() =&gt;</span> <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">goToTop();</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="6-判断当前标签页是否激活"><a href="#6-判断当前标签页是否激活" class="headerlink" title="6. 判断当前标签页是否激活"></a>6. 判断当前标签页是否激活</h3><p>该方法用于检测当前标签页是否已经激活：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isTabInView = <span class="function">() =&gt;</span> !<span class="built_in">document</span>.hidden;</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="7-判断当前是否是苹果设备"><a href="#7-判断当前是否是苹果设备" class="headerlink" title="7. 判断当前是否是苹果设备"></a>7. 判断当前是否是苹果设备</h3><p>该方法用于检测当前的设备是否是苹果的设备：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isAppleDevice = <span class="function">() =&gt;</span> <span class="regexp">/Mac|iPod|iPhone|iPad/</span>.test(navigator.platform);</span><br><span class="line"></span><br><span class="line">isAppleDevice();</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="8-是否滚动到页面底部"><a href="#8-是否滚动到页面底部" class="headerlink" title="8. 是否滚动到页面底部"></a>8. 是否滚动到页面底部</h3><p>该方法用于判断页面是否已经底部：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scrolledToBottom = <span class="function">() =&gt;</span> <span class="built_in">document</span>.documentElement.clientHeight + <span class="built_in">window</span>.scrollY &gt;= <span class="built_in">document</span>.documentElement.scrollHeight;</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="9-重定向到一个URL"><a href="#9-重定向到一个URL" class="headerlink" title="9. 重定向到一个URL"></a>9. 重定向到一个 URL</h3><p>该方法用于重定向到一个新的 URL：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> redirect = <span class="function"><span class="params">url</span> =&gt;</span> location.href = url</span><br><span class="line"></span><br><span class="line">redirect(<span class="string">"https://www.google.com/"</span>)</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="10-打开浏览器打印框"><a href="#10-打开浏览器打印框" class="headerlink" title="10. 打开浏览器打印框"></a>10. 打开浏览器打印框</h3><p>该方法用于打开浏览器的打印框：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> showPrintDialog = <span class="function">() =&gt;</span> <span class="built_in">window</span>.print()</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h2 id="七、其他操作"><a href="#七、其他操作" class="headerlink" title="七、其他操作"></a>七、其他操作</h2><h3 id="1-随机布尔值"><a href="#1-随机布尔值" class="headerlink" title="1. 随机布尔值"></a>1. 随机布尔值</h3><p>该方法可以返回一个随机的布尔值，使用 Math.random () 可以获得 0-1 的随机数，与 0.5 进行比较，就有一半的概率获得真值或者假值。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomBoolean = <span class="function">() =&gt;</span> <span class="built_in">Math</span>.random() &gt;= <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">randomBoolean();</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="2-变量交换"><a href="#2-变量交换" class="headerlink" title="2. 变量交换"></a>2. 变量交换</h3><p>可以使用以下形式在不适用第三个变量的情况下，交换两个变量的值：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[foo, bar] = [bar, foo];</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="3-获取变量的类型"><a href="#3-获取变量的类型" class="headerlink" title="3. 获取变量的类型"></a>3. 获取变量的类型</h3><p>该方法用于获取一个变量的类型：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trueTypeOf = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>, -<span class="number">1</span>).toLowerCase();</span><br><span class="line"></span><br><span class="line">trueTypeOf(<span class="string">''</span>);     <span class="comment">// string</span></span><br><span class="line">trueTypeOf(<span class="number">0</span>);      <span class="comment">// number</span></span><br><span class="line">trueTypeOf();       <span class="comment">// undefined</span></span><br><span class="line">trueTypeOf(<span class="literal">null</span>);   <span class="comment">// null</span></span><br><span class="line">trueTypeOf({});     <span class="comment">// object</span></span><br><span class="line">trueTypeOf([]);     <span class="comment">// array</span></span><br><span class="line">trueTypeOf(<span class="number">0</span>);      <span class="comment">// number</span></span><br><span class="line">trueTypeOf(<span class="function">() =&gt;</span> {});  <span class="comment">// function</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="4-华氏度和摄氏度之间的转化"><a href="#4-华氏度和摄氏度之间的转化" class="headerlink" title="4. 华氏度和摄氏度之间的转化"></a>4. 华氏度和摄氏度之间的转化</h3><p>该方法用于摄氏度和华氏度之间的转化：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> celsiusToFahrenheit = <span class="function">(<span class="params">celsius</span>) =&gt;</span> celsius * <span class="number">9</span>/<span class="number">5</span> + <span class="number">32</span>;</span><br><span class="line"><span class="keyword">const</span> fahrenheitToCelsius = <span class="function">(<span class="params">fahrenheit</span>) =&gt;</span> (fahrenheit - <span class="number">32</span>) * <span class="number">5</span>/<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">celsiusToFahrenheit(<span class="number">15</span>);    <span class="comment">// 59</span></span><br><span class="line">celsiusToFahrenheit(<span class="number">0</span>);     <span class="comment">// 32</span></span><br><span class="line">celsiusToFahrenheit(-<span class="number">20</span>);   <span class="comment">// -4</span></span><br><span class="line">fahrenheitToCelsius(<span class="number">59</span>);    <span class="comment">// 15</span></span><br><span class="line">fahrenheitToCelsius(<span class="number">32</span>);    <span class="comment">// 0</span></span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="5-检测对象是否为空"><a href="#5-检测对象是否为空" class="headerlink" title="5. 检测对象是否为空"></a>5. 检测对象是否为空</h3><p>该方法用于检测一个 JavaScript 对象是否为空：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEmpty = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Reflect</span>.ownKeys(obj).length === <span class="number">0</span> &amp;&amp; obj.constructor === <span class="built_in">Object</span>;</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要记录 JavaScript 常用的代码块。</summary>
    
    
    
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>VuePress 整合百度统计</title>
    <link href="https://www.techgrow.cn/posts/b23e0b9c.html"/>
    <id>https://www.techgrow.cn/posts/b23e0b9c.html</id>
    <published>2022-06-18T14:13:22.000Z</published>
    <updated>2022-06-18T14:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 VuePress 如何整合百度统计，适用于 VuePress 1.x 和 VuePress 2.x 版本。</p><h2 id="VuePress-v1-x"><a href="#VuePress-v1-x" class="headerlink" title="VuePress v1.x"></a>VuePress v1.x</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D vuepress-plugin-baidu-seo</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">'vuepress-plugin-baidu-seo'</span>, {</span><br><span class="line">      <span class="attr">hm</span>: <span class="string">'xxxxxxxx'</span>,</span><br><span class="line">      <span class="attr">ignoreLocal</span>: <span class="literal">true</span></span><br><span class="line">    }]</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td> hm</td><td>String</td><td> 是</td><td></td><td>已申请的百度统计 Key</td></tr><tr><td>ignoreLocal</td><td>Boolean</td><td> 否</td><td><code>false</code></td><td>忽略本地的访问记录</td></tr></tbody></table><h2 id="VuePress-v2-x"><a href="#VuePress-v2-x" class="headerlink" title="VuePress v2.x"></a>VuePress v2.x</h2><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><div class="admonition note"><p class="admonition-title">提示</p><p>下述插件要求 VuePress 的版本号大于等于 <code>2.0.0-beta.48</code>，若不满足要求，请务必手动升级 VuePress 的版本，否则插件可能无法生效。</p></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D vuepress-plugin-baidu-seo-next</span><br></pre></td></tr></tbody></table></figure><h3 id="配置插件-1"><a href="#配置插件-1" class="headerlink" title="配置插件"></a>配置插件</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { baiduSeoPlugin } = <span class="built_in">require</span>(<span class="string">'vuepress-plugin-baidu-seo-next'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    baiduSeoPlugin({</span><br><span class="line">      <span class="attr">hm</span>: <span class="string">'xxxxxxxx'</span>,</span><br><span class="line">      <span class="attr">ignoreLocal</span>: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="配置参数-1"><a href="#配置参数-1" class="headerlink" title="配置参数"></a>配置参数</h3><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td> hm</td><td>String</td><td> 是</td><td></td><td>已申请的百度统计 Key</td></tr><tr><td>ignoreLocal</td><td>Boolean</td><td> 否</td><td><code>false</code></td><td>忽略本地的访问记录</td></tr></tbody></table></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 VuePress 如何整合百度统计，适用于 VuePress1 和 VuePress2。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>解决 GitHub DNS 被污染的问题</title>
    <link href="https://www.techgrow.cn/posts/b7c0261d.html"/>
    <id>https://www.techgrow.cn/posts/b7c0261d.html</id>
    <published>2022-05-29T12:23:33.000Z</published>
    <updated>2022-05-29T12:23:33.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>访问 <a href="https://www.ipaddress.com/">IP 查询网站</a>，查询以下域名对应的 IP：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">github.com</span><br><span class="line">raw.githubusercontent.com</span><br><span class="line">camo.githubusercontent.com</span><br><span class="line">github.global.ssl.fastly.net</span><br></pre></td></tr></tbody></table></figure><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><h3 id="Linux-系统"><a href="#Linux-系统" class="headerlink" title="Linux 系统"></a>Linux 系统</h3><p>编辑系统配置文件 <code>/etc/hosts</code>，新增以下两行内容：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">140.82.112.4 github.com</span><br><span class="line">185.199.108.133  raw.githubusercontent.com</span><br><span class="line">185.199.108.133 camo.githubusercontent.com</span><br><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br></pre></td></tr></tbody></table></figure><h3 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h3><p>编辑系统配置文件 <code>c:\windows\system32\drivers\etc\hosts</code>，新增以下两行内容：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">140.82.112.4 github.com</span><br><span class="line">185.199.108.133  raw.githubusercontent.com</span><br><span class="line">185.199.108.133 camo.githubusercontent.com</span><br><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br></pre></td></tr></tbody></table></figure><p>执行以下命令刷新 DNS 解析的缓存：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ipconfig /flushdns</span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何解决 GitHub DNS 被污染问题，加快 GitHub 的访问速度。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Vurepress v1.x 博客导流微信公众号</title>
    <link href="https://www.techgrow.cn/posts/92228e7b.html"/>
    <id>https://www.techgrow.cn/posts/92228e7b.html</id>
    <published>2022-05-16T14:13:23.000Z</published>
    <updated>2022-07-06T14:13:23.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>VuePress v1.x 博客建议安装 <a href="https://github.com/rqh656418510/vuepress-plugin-readmore-popular">vuepress-plugin-readmore-popular</a> 插件，将 <a href="https://open.techgrow.cn/">TechGrow</a> 的免费微信公众号导流工具整合到博客中，用户扫码关注微信公众号后可以解锁全站文章，让微信公众号的粉丝数躺着增长。</p><div class="admonition note"><p class="admonition-title">提示</p><ol><li>TechGrow 开放平台的 <a href="https://docs.techgrow.cn/v1/wechat/vuepress/">官方文档</a></li><li><code>vuepress-plugin-readmore-popular</code> 插件只支持 VuePress v1.x，不支持 VuePress v2.x</li><li> 若希望实现 VuePress v2.x 的公众号导流，建议使用 <a href="https://github.com/rqh656418510/vuepress-plugin-readmore-popular-next">vuepress-plugin-readmore-popular-next</a> 插件</li></ol></div><h2 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h2><ul><li><input checked="" disabled="" type="checkbox"> 支持随机为博客添加导流功能</li><li><input checked="" disabled="" type="checkbox"> 支持关闭某篇文章的导流功能</li><li><input checked="" disabled="" type="checkbox"> 支持查询用户解锁文章的历史记录</li><li><input checked="" disabled="" type="checkbox"> 支持自定义或者动态计算文章内容的预览高度</li><li><input checked="" disabled="" type="checkbox"> 支持自定义 CSS 样式，轻松适配不同风格的博客</li></ul><span id="more"></span><h2 id="注册博客"><a href="#注册博客" class="headerlink" title="注册博客"></a>注册博客</h2><p>浏览器访问 <a href="https://open.techgrow.cn/">TechGrow</a> 的官网 ，注册并登录账号后，进入博客的后台管理页面。首先点击左侧的菜单 <code>博客注册</code>，然后点击 <code>新增</code> 按钮，添加自己博客的信息。博客注册成功后，记录下 <code>博客 ID</code>，后面的步骤会使用到</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/717e14eb59dd44dea62d6a0b7549abfd.png"></p><h2 id="设置公众号"><a href="#设置公众号" class="headerlink" title="设置公众号"></a>设置公众号</h2><p>在微信公众号的后台管理页面，菜单栏里选择 <code>自动回复</code> - <code>关键词回复</code>，启用 <code>自动回复</code>，然后点击 <code>添加回复</code> 按钮：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/em64p7w8wlqtt0rsjop0jjeywx29m25w.png"></p><p>填写 <code>规则名称</code>、<code>关键词（当初你在 TechGrow 中设置的）</code>、<code>回复内容</code> 选择 <code>文字</code>，然后 <code>回复文字</code> 的内容填写获取博客解锁验证码的链接，如下所示（请自行更改 <code>xxxxx-xxxxxxxxx-xxx</code> 为你申请到的博客 ID）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://open.techgrow.cn/#/readmore/captcha/generate?blogId=xxxxx-xxxxxxxxx-xxx"</span>&gt;</span>点击链接，获取博客解锁验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/yd89wbdji196ixtwzgzamw37fbein1ia.png"></p><p>此时，当读者关注你的微信公众号，并输入关键词后（比如我设置的关键词就是 <code>tech</code>），那么读者就会自动接收到获取博客解锁验证码的链接</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul><li>运行 <code>npm install</code> 命令安装插件到本地博客 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D vuepress-plugin-readmore-popular</span><br></pre></td></tr></tbody></table></figure><h2 id="配置-VuePress"><a href="#配置-VuePress" class="headerlink" title="配置 VuePress"></a>配置 VuePress</h2><p>编辑 VuePress 的主配置文件（例如 <code>.vuepress/config.js</code>），新增插件的配置信息（请自行更改博客相关的信息），如下所示：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">'vuepress-plugin-readmore-popular'</span>, {</span><br><span class="line">      <span class="comment">// 已申请的博客 ID</span></span><br><span class="line">      <span class="attr">blogId</span>: <span class="string">'18762-1609305354821-257'</span>,</span><br><span class="line">      <span class="comment">// 已申请的微信公众号名称</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">'全栈技术驿站'</span>,</span><br><span class="line">      <span class="comment">// 已申请的微信公众号回复关键词</span></span><br><span class="line">      <span class="attr">keyword</span>: <span class="string">'Tech'</span>,                    </span><br><span class="line">      <span class="comment">// 已申请的微信公众号二维码图片</span></span><br><span class="line">      <span class="attr">qrcode</span>: <span class="string">'https://www.techgrow.cn/img/wx_mp_qr.png'</span>,</span><br><span class="line">      <span class="comment">// 文章内容的 JS 选择器，若使用的不是官方默认主题，则需要根据第三方的主题来设置</span></span><br><span class="line">      <span class="attr">selector</span>: <span class="string">'div.theme-default-content'</span>,</span><br><span class="line">      <span class="comment">// 自定义的 JS 资源链接，可用于 CDN 加速</span></span><br><span class="line">      <span class="attr">libUrl</span>: <span class="string">'https://qiniu.techgrow.cn/readmore/dist/readmore.js'</span>,</span><br><span class="line">      <span class="comment">// 自定义的 CSS 资源链接，可用于适配不同风格的博客</span></span><br><span class="line">      <span class="attr">cssUrl</span>: <span class="string">'https://qiniu.techgrow.cn/readmore/dist/vuepress.css'</span>,</span><br><span class="line">      <span class="comment">// 文章排除添加引流工具的 URL 规则，支持使用路径、通配符、正则表达式的匹配规则</span></span><br><span class="line">      <span class="attr">excludes</span>: { <span class="attr">strExp</span>: [], <span class="attr">regExp</span>: [] },</span><br><span class="line">      <span class="comment">// 是否反转 URL 排除规则的配置，即只有符合排除规则的文章才会添加引流工具</span></span><br><span class="line">      <span class="attr">reverse</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// 文章内容的预览高度</span></span><br><span class="line">      <span class="attr">height</span>: <span class="string">'auto'</span>,</span><br><span class="line">      <span class="comment">// 文章解锁后凭证的有效天数</span></span><br><span class="line">      <span class="attr">expires</span>: <span class="number">365</span>,</span><br><span class="line">      <span class="comment">// 定时校验凭证有效性的时间间隔（秒）</span></span><br><span class="line">      <span class="attr">interval</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="comment">// 每篇文章随机添加引流工具的概率，有效范围在 0.1 ~ 1 之间，1 则表示所有文章默认都自动添加引流工具</span></span><br><span class="line">      <span class="attr">random</span>: <span class="number">1</span></span><br><span class="line">    }]</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="插件参数说明"><a href="#插件参数说明" class="headerlink" title="插件参数说明"></a>插件参数说明</h2><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td> blogId</td><td>String</td><td> 是</td><td>无</td><td> -</td></tr><tr><td>name</td><td>String</td><td> 是</td><td>无</td><td> -</td></tr><tr><td>keyword</td><td>String</td><td> 是</td><td>无</td><td> -</td></tr><tr><td>qrcode</td><td>String</td><td> 是</td><td>无</td><td> -</td></tr><tr><td>selector</td><td>String</td><td> 否</td><td><code>div.theme-default-content</code></td><td>-</td></tr><tr><td>libUrl</td><td>String</td><td> 否 </td><td><a href="https://qiniu.techgrow.cn/readmore/dist/readmore.js">https://qiniu.techgrow.cn/readmore/dist/readmore.js</a></td><td>-</td></tr><tr><td>cssUrl</td><td>String</td><td> 否 </td><td><a href="https://qiniu.techgrow.cn/readmore/dist/vuepress.css">https://qiniu.techgrow.cn/readmore/dist/vuepress.css</a></td><td>-</td></tr><tr><td>excludes</td><td>Json Object</td><td> 否</td><td><code>{ strExp: [ ], regExp: [ ] }</code></td><td>-</td></tr><tr><td>reverse</td><td>Boolean</td><td> 否</td><td><code>false</code></td><td>-</td></tr><tr><td>height</td><td>String / Number</td><td> 否</td><td><code>auto</code></td><td>-</td></tr><tr><td>expires</td><td>Number</td><td> 否</td><td><code>365</code></td><td>-</td></tr><tr><td>interval</td><td>Number</td><td> 否</td><td><code>60</code></td><td>-</td></tr><tr><td>random</td><td>Number</td><td> 否</td><td><code>1</code></td><td>-</td></tr></tbody></table><p><code>selector</code> 参数的作用是指定 JS 选择器来获取文章的主体内容，若 VuePress 使用了第三方主题，则一般需要根据第三方主题来配置该参数，否则可能会导致引流工具无法生效。其中 VuePress 不同主题的配置示例如下：</p><table><thead><tr><th>主题</th><th>插件配置</th><th>备注 </th></tr></thead><tbody><tr><td><a href="https://github.com/vuejs/vuepress/tree/master/packages/@vuepress/theme-vue">@vuepress/theme-vue</a></td><td><code>selector: 'div.theme-default-content'</code></td><td>官方默认主题 </td></tr><tr><td><a href="https://github.com/vuepress-reco/vuepress-theme-reco-1.x">vuepress-theme-reco</a></td><td><code>selector: 'div.theme-reco-content'</code></td><td>第三方主题 </td></tr><tr><td><a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope-v1">vuepress-theme-hope</a></td><td><code>selector: 'div.theme-hope-content'</code></td><td>第三方主题 </td></tr><tr><td><a href="https://github.com/xugaoyi/vuepress-theme-vdoing">vuepress-theme-vdoing</a></td><td><code>selector: 'div.theme-vdoing-content'</code></td><td>第三方主题</td></tr></tbody></table><div class="admonition note"><p class="admonition-title">提示</p><p>若不清楚如何指定 JS 选择器，则可以打开博客的任意一篇文章，利用 Chrome 等浏览器的元素审查功能，找到文章页面中文章主体的 <code>div</code> 标签，最后定位得到 <code>div</code> 标签的 CSS 类即可（例如 <code>theme-default-content</code>），<a href="https://www.techgrow.cn/uploads/2022/02/28/ggmr7dg23fjj3mqndyays04ok93adj3n.png">点击查看</a>详细的操作图解。</p></div><h2 id="验证插件效果"><a href="#验证插件效果" class="headerlink" title="验证插件效果"></a>验证插件效果</h2><p>打开文章页面，若文章自动隐藏了部分内容，并且出现了 <code>阅读全文</code> 按钮，则说明导流插件正常运行，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/g7v4su56sx5g95qipmzh0k1hknj6fsa7.png"></p><p>点击 <code>阅读全文</code> 按钮，会弹出微信公众号的二维码窗口，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/77o3g5fhjovtu725vm8z42lemqt8zwli.png"></p><h2 id="取消阅读限制"><a href="#取消阅读限制" class="headerlink" title="取消阅读限制"></a>取消阅读限制</h2><p>若希望关闭部分文章的微信公众号导流功能，可以使用插件的 <code>excludes</code> 参数来实现。值得一提的是，<code>excludes</code> 的参数值是一个 JSON 对象，其中的 <code>strExp</code> 属性是路径和通配符规则的字符串数组，而 <code>regExp</code> 属性是正则表达式的字符串数组。</p><ul><li>根据 URL 路径，关闭某篇文章的导流功能 </li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">'vuepress-plugin-readmore-popular'</span>, {</span><br><span class="line">      <span class="comment">// 排除 URL 为 `/fontend/webpack` 的文章</span></span><br><span class="line">      <span class="attr">excludes</span>: { <span class="attr">strExp</span>: [<span class="string">'/fontend/webpack'</span>] },</span><br><span class="line">    }]</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>根据 URL 通配符，关闭某个目录下的所有文章的导流功能 </li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">'vuepress-plugin-readmore-popular'</span>, {</span><br><span class="line">      <span class="comment">// 排除 URL 以 `/fontend` 开头的文章</span></span><br><span class="line">      <span class="comment">// 排除 URL 为 `/backend/python/io` 的文章</span></span><br><span class="line">      <span class="attr">excludes</span>: { <span class="attr">strExp</span>: [<span class="string">'/fontend/*'</span>, <span class="string">'/backend/*/io'</span>] },</span><br><span class="line">    }]</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>根据 URL 正则表达式，关闭符合规则的所有文章的导流功能 </li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">'vuepress-plugin-readmore-popular'</span>, {</span><br><span class="line">      <span class="comment">// 排除 URL 不以 `/fontend` 开头的文章</span></span><br><span class="line">      <span class="attr">excludes</span>: { <span class="attr">regExp</span>: [<span class="string">'^(?!\/fontend).*'</span>] },</span><br><span class="line">    }]</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>混合使用 </li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">'vuepress-plugin-readmore-popular'</span>, {</span><br><span class="line">      <span class="attr">excludes</span>: { <span class="attr">strExp</span>: [<span class="string">'/webpack'</span>, <span class="string">'/fontend/*'</span>, <span class="string">'/backend/*/io'</span>], <span class="attr">regExp</span>: [<span class="string">'^(?!\/php).*'</span>] },</span><br><span class="line">    }]</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><ul><li>文章 URL 优先匹配 <code>strExp</code> 规则，然后再匹配 <code>regExp</code> 规则</li><li>文章 URL 一旦满足 <code>strExp</code> 规则，则不会再匹配 <code>regExp</code> 规则</li><li>如果希望符合 URL 排除规则的文章才添加导流工具，则可以使用 <code>reverse : true</code> 配置参数实现</li></ul></div><h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p>插件默认使用了定义在 <a href="https://qiniu.techgrow.cn/readmore/dist/vuepress.css">vuepress.css</a> 的 CSS 样式，你可以使用以下两种方式自定义自己的样式：</p><ul><li>第一种方式：更改博客主题的 CSS 源码文件，将自定义的那部分 CSS 样式添加到里面</li><li>第二种方式：根据 <a href="https://qiniu.techgrow.cn/readmore/dist/vuepress.css">vuepress.css</a> 创建自己的 CSS 文件（完整的），并将其存放在自己的博客里，同时通过插件的 <code>cssUrl</code> 配置参数来指定其访问的 URL 路径</li></ul><blockquote><p>提示：为了方便日后维护，强烈建议使用第二种方式来添加自定义样式</p></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><div class="admonition note"><p class="admonition-title">问题一</p><p>VuePress 安装插件后，引流工具无法生效。</p></div><p>若引流工具无法生效，此时需要留意 VuePress 使用的是不是第三方主题。在使用第三方主题的情况下，一般需要根据第三方主题来配置插件的 <code>selector</code> 参数，该参数的作用是指定 JS 选择器来获取文章的主体内容，详细说明请看<a href="/posts/92228e7b.html#%E6%8F%92%E4%BB%B6%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">这里</a>。</p><blockquote><p>值得一提的是，若由于 <code>selector</code> 参数配置不正确导致引流工具无效，那么引流工具会在浏览器的控制台输出如下的警告信息：</p></blockquote><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/8i4J9HpUUelLo43KLdHphgMHIFQwleNg.png"></p><div class="admonition note"><p class="admonition-title">问题二</p><p>VuePress 安装插件后，浏览器的控制台输出警告或者错误信息，且引流工具无法生效</p></div><p>浏览器访问 VuePress 博客后，按下 <code>F12</code> 快捷键调出调试工具，然后切换到 <code>控制台</code>，最后将警告或者错误信息截图，并发送到 <a href="https://www.techgrow.cn/img/wx-group-qr-techgrow.png">官方微信群</a>，建议留言备注 VuePress 与 VuePress 主题的版本号。</p><div class="admonition note"><p class="admonition-title">问题三</p><p>VuePress 安装插件后，移动端的引流工具无法生效，而 PC 端却生效</p></div><p>考虑到用户体验的问题，在移动端默认是关闭引流功能的，请知悉。</p><h2 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h2><ul><li><a href="https://docs.techgrow.cn/v1/demo/">官方 Demo</a></li></ul><h2 id="官方微信群"><a href="#官方微信群" class="headerlink" title="官方微信群"></a>官方微信群</h2><p><img data-src="/img/wx-group-qr-techgrow.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍 VuePress v1.x 博客如何将网站的流量导向微信公众号，比 OpenWrite 的导流工具更强大。</summary>
    
    
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>VuePress 插件开发</title>
    <link href="https://www.techgrow.cn/posts/2f4cff19.html"/>
    <id>https://www.techgrow.cn/posts/2f4cff19.html</id>
    <published>2022-05-12T12:23:33.000Z</published>
    <updated>2022-05-12T12:23:33.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="admonition note"><p class="admonition-title">博主已开发的插件</p><ul><li><a href="https://github.com/rqh656418510/vuepress-plugin-baidu-seo">vuepress-plugin-baidu-seo</a> | VuePress v1 百度 SEO 插件 </li><li><a href="https://github.com/rqh656418510/vuepress-plugin-baidu-seo-next">vuepress-plugin-baidu-seo-next</a> | VuePress v2 百度 SEO 插件 </li><li><a href="https://github.com/rqh656418510/vuepress-plugin-readmore-popular">vuepress-plugin-readmore-popular</a> | VuePress v1 公众号引流插件 </li><li><a href="https://github.com/rqh656418510/vuepress-plugin-readmore-popular-next">vuepress-plugin-readmore-popular-next</a> | VuePress v2 公众号引流插件</li></ul></div><span id="more"></span><h2 id="VuePress-官方插件"><a href="#VuePress-官方插件" class="headerlink" title="VuePress 官方插件"></a>VuePress 官方插件</h2><h3 id="VuePress-v1-x"><a href="#VuePress-v1-x" class="headerlink" title="VuePress v1.x"></a>VuePress v1.x</h3><ul><li><a href="https://v1.vuepress.vuejs.org/zh/plugin/">VuePress v1.x 官方中文文档</a></li><li><a href="https://github.com/vuejs/vuepress/tree/master/packages/@vuepress">VuePress v1.x 官方插件的代码仓库</a></li></ul><h3 id="VuePress-v2-x"><a href="#VuePress-v2-x" class="headerlink" title="VuePress v2.x"></a>VuePress v2.x</h3><ul><li><a href="https://v2.vuepress.vuejs.org/zh/advanced/plugin.html">VuePress v2.x 官方中文文档</a></li><li><a href="https://github.com/vuepress/vuepress-next/tree/main/packages/@vuepress">VuePress v2.x 官方插件的代码仓库</a></li></ul><h2 id="VuePress-v1-插件开发"><a href="#VuePress-v1-插件开发" class="headerlink" title="VuePress v1 插件开发"></a>VuePress v1 插件开发</h2><h3 id="Vue-组件引入内部-JS-文件"><a href="#Vue-组件引入内部-JS-文件" class="headerlink" title="Vue 组件引入内部 JS 文件"></a>Vue 组件引入内部 JS 文件</h3><p>第一步：在项目内定义 JS 文件，例如这里定义 <code>loadResources.js</code> 文件，同时通过 <code>export</code> 暴露 JS 函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Q</span></span><br><span class="line"><span class="keyword">const</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步加载js文件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 导入js的url地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>id  script标签的id（必须唯一）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">{*}</span> </span>export此函数方便全局调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncLoadJs</span>(<span class="params">url, id</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> Q.Promise(<span class="function">(<span class="params">resovle, reject</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">let</span> srcArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>);</span><br><span class="line">        <span class="keyword">let</span> hasLoaded = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; srcArr.length; i++) {</span><br><span class="line">            hasLoaded = srcArr[i].id === id;</span><br><span class="line">            <span class="keyword">if</span> (hasLoaded) {</span><br><span class="line">                <span class="built_in">document</span>.getElementById(id).remove();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">        script.src = url;</span><br><span class="line">        script.id = id;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line"></span><br><span class="line">        script.onload = <span class="function">() =&gt;</span> {</span><br><span class="line">            resovle();</span><br><span class="line">        };</span><br><span class="line">        script.onerror = <span class="function">() =&gt;</span> {</span><br><span class="line">            reject();</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二步：在项目里定义 Vue 组件，例如这里定义 <code>example.vue</code>，同时通过 <code>import</code> 引入上面定义的 JS 文件即可：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> { asyncLoadJs } <span class="keyword">from</span> <span class="string">"../js/loadResources.js"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">"example"</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> {};</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">    asyncLoadJs(<span class="string">"https://www.example/js/example.js"</span>, <span class="string">"example"</span>);</span></span><br><span class="line"><span class="javascript">  },</span></span><br><span class="line"><span class="javascript">};</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/250">从零实现一个 VuePress 插件</a></li><li><a href="https://developer.aliyun.com/article/898487">VuePress 博客优化之拓展 Markdown 语法</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍如何开发 VuePress 插件。</summary>
    
    
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言入门基础之一</title>
    <link href="https://www.techgrow.cn/posts/42f8c3d7.html"/>
    <id>https://www.techgrow.cn/posts/42f8c3d7.html</id>
    <published>2022-04-19T12:23:35.000Z</published>
    <updated>2022-04-19T12:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->]]></content>
    
    
    <summary type="html">本文主要介绍 Go 语言的基础教程。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Go语言" scheme="https://www.techgrow.cn/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>项目开发计划</title>
    <link href="https://www.techgrow.cn/posts/29d74d90.html"/>
    <id>https://www.techgrow.cn/posts/29d74d90.html</id>
    <published>2022-03-23T14:38:21.000Z</published>
    <updated>2022-08-07T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误, 请重新输入." data-whm="文章校验失败, 但不影响阅读解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="23d9649fe997b785dcdcf3ee51848da4a076d0a0396f87dcaffa968edd678a07">4cfab7e4fdfd9afdbf1592f9652b8a194263aa6a7e6b4c103fbd9ff49c09b0448cdca81362464dc5686f95504da6299b6490ac25c35cdeb830b4ba7a9cf2685b33fc39e79fb8f4428211a3627c1ec7a0cbbf24dada87cb794a94c4848262ef48357c8d73a5bf83d40948261328d66e0bff17ffd38d41bcd0d1fc683fc31dd3c80e71868c7bf52ab01e12be51f74475299f4ac9540a69a67d78f5e7c10d4c0b764a171047a5eaf857aa307673cc4c870e17499b5c62dccb724834333eb82019590ad2374fbd15ce6c9c7b5d1dba92e43554f32d1c73942822adecdef87379cbac9e9349bd85119796d6a5c6631f5e516f0478907db61af4f983aa6ad2b5393cf975687eb140a1e9fbb2292575ea2aedd7553199ac383d191771bd23715e460a04bf468193f6e2071f64e22ed4c65c2ac7d8b8639d9771ee6e2498836a50c2cdcc137a9101754df3b9d9b71ae22b063068988f7b452b687a3ca86f1225e78aea53ae9375d1ba81ed8c51c939b3dde59d3e8aefca60992d4c3b0403027a8d42fcf983c2a28e783d128345be7644aa8d307e910d3243bbf5eb15536f73a261eb53d9b3988aa2d107e8ce57128cbeeab9f603f34ed98a0344711549d8dfc12ee7e4f523e9331bbd2fe1b96e28595c8c35d3b74eb5331a584aed77b4b8622ce0ca8e750848cb4a8040e86ff2225802c7a60fd8dc8583da9b1c93ab90607816e3e2d6161fe10290b99286ccaadbe693931db26627ddb0785342c72e70b84d3b14063fbc433c89dc272bb1805a6afbefa59b5c364ca7236c13e24859bc56b7592c597ab88c8e7ba3325fdb35fa868320770c4f2a9970fdde3b8d880f62481faf009a9a609b29577e316fcef1a05f05a5b98e153b8f5f70b17a83238434f9913be36c1d75d46788c69be844d11db6d1ef9d8c21a1ee46cd3f66ba08f208326cbef8cff85cc761e96d9d2f4038f7da668fe21cd2c7cb762efdfda37d57db491b817ce5e1913781f5a89b768ff1fa4c940e9eb181c735455355ece547985cc6eb85c2ce8762dd1f08a584c6e263aebb49e080d562afa87acfd37f2c4c6e8df2102b83260c1c1e807af8022317710d1a0ab961e3515dad4d8b8f76f364fa5118cd4b4beff058955e587d31f284800745aa0223f543ceea88746733a02cbbec8d16f9847357f64f0c48e22c617e7097b322120bb9d8eed8dc2f78aeedf44976607f15413fa1540e75befbcaefe3f390b9c0c29d8b3e544758561a9603181001fbdbe32d813f3627246b2c8605326a702e7cb1ead44fec4cd01f3510e952400d928571e4677ca15e5a6365318fd8d550ea26c5594c9d1fab911270f7a1f95bfcf368bb28ea7059d33329dfc48c44427bbc86975c9f1a1c437001107f3d5976a77821dbbc28e503a5ab937681820f226296600f71e39b894b3e149b62601683800574527e704711b63626cbc2b24103229bd3cf2af35d6e87234c228eacb0c6870c739a486efdccd24f74467bde3f889bdc7f6024f7591f0885b312bccae928351de2d1a0880dd72a3b5e89ec2da0bae15b92ee6055fd37047a52cbd2f31675c0e298f620848b7b94ee1fd086207456de4e191bed6ce4207ef567ae7d2bbf26578c8af91623c6318badb1a4091497f8c3f9c604b49817d2eec38cea8d6c3efcee3b3594dc52d8930cfc758e297de6fbf087c0df84df1de920a84cb129a7bb8cfa6a68b938307d4a7e93ae1f03ce5605e3fce71afbfc5e562a727dfb9069fe0dfd0ad019fb4c91724c89af86caafb1a6b508831c6df3a64bf795c1dc72e507f69cb37566cff77899cbd899ddbe626c6bd952db75b3c0e3639f5fb1c1d19ed5c3548e68a1cbfca1f80c91452aee5a8dbfc0d30c848bc880a88be0d6446537e42de4400a5d5b64bb57d0015f1e5fa10b23a8b70d0c1a41dbb9d20348cbc68f1d65d997d9852cfca10aefa13da27cc7b0f6a3653024bd33b6729090c4fb4be980f0425598092cc6e659c017e61f644eb1a80fa0bc5dd1aae99a51445e0f55e853748ac793d53e0033673d62072c08e64b9642f9d99a5f0f23b0a1073dde8dd7e76cb0995722928a0ef6a71b3b59ea40b341bc6a4c36695bb727f3750d47f1a203deba8f3d4f620df41395c5f120ac488962f5fd3db4f372e2f17682d264ebef75dc8b596acd6bd54c6fb4a8c1119166bc85444e491b1cc17b0f81547f4796b8007254f5a895df434e830fdb2d1d95c732b3231f1f8c2e60c24977f876bf299e90269905dec1ea004a71d1ed82c851972cc2b87fee07bb7a3ea05199b949a753f7990c59cdf21d83e1bea50e6c59a2f8658ac70722d4bc2b72435054c63ce46c03dea67b5430fd7a5c91c71ebd902a7e949c8f063303ac110a20191b246df42dfd10d2eec37c8a891d1ca8b97f6ffcf776531dbd156effd631f428e23ea4ad8f5b6521bfb61c37837377bd6c178047b2971c8e1fe4ed143a1f8cbca9b9a2058b42df1fa282b63b9fbb240de487e3d647c8e56066f1d46b10cbcc7fcd6d7a63a14b88d9b946b313890343ebfcbd1bf1f7dc78f94f6e04591ab5021846f41ae1dcde6e7a81c0dc1638b1ae0235b5f7506b1d81d89ced8d80356e58221d8d3f05dbf072e513cd2454bff7bd8e22dca397753afa6ee4a609c16afd34e44d45911484e32079c7b683b9b3814f2a5e76a42d88ff3fcda41a8645d670a36b56ce53d9b2d2fe13a3f750d76939c7366cd224201e04c2198df501ca101e3c706f4fe19ad42cf7f4e6a6f755b0431b3f7e7c189427c576234e068e461c84d7bba04c1c3a308482305761869d66752cd1490f66b6b53d570b9aac11be2de7ac29c50aab942375e39ff176ace19cea25783df8c9435dfd9c3df299a73db5c745b7d3acb7970f87906cf8ea3a9ce79fb035f789649678de5d3dfc2221bc7e486575d0a5f2d558e93ae255ded8f29bf5a7c9d90dee719e525816826bc85024ca6443961956a743ad20648472c1ad850ea4d34e71ebfb4736c3e1028fd578cdff195319b05ec5806be65a8865f4a634c42175c99944f87248aa5d122c159396bf40d579033c02be840305d2371fcad71cc2fc33cf787f947fb37b3259225ffff068011a0c5d2bbb1333f244026b315710b2bf1ec8ff111ef93fa3d843cd6b0a1ef945cb35f73711391061d148be99917c9c84856b9e383942039e77973dcecc9808c36884679ace8bb5d8b64e1ab273d18d0f5362045176f6f74f7b1ff64ed65ca0692b21839435304810bfd14f9ff2ec035b99bf0c1b3a7393c4c9978acd69bda7a9b7c551a464b3a2791591acd71f6dab219096386d8abcbfb5dd1c4dd5ceac20e0073e54875f80108368e0a5256eee80ea2fe1092a9cf04cf5a2ac6b9cd2f1d1c2a88fd6cdafeb3ba798f1631752b2acc9f69a097f39daffe816a082d324c96f3793145517c1537e667ff9bd6d31b5213a7902093c9aa111bb95b882b0d00c3b4233d8d4718c2c1f546aacc9ff214bbe298cc97280b9faaf1f226efdf14ba4de4c7beeeb8182339f6e82e7a262fe7150ee81e0ce7f2517fc13e2cb72c30a8b590a9d3effc0a0bc0204fc42ce61b240cf597b1734aa9fa6ce5da171f203f3cbf067c8755a072a1a2bafcacb81e2897de260c25710f452554098573d5e6a35c6fe22bb48a270a2d2b0c516dc5096572685284b55cd4bd951a53f30917d29a06f765ccb669f0f735efde450d0a9a2b720d993a6a0cd436de0f1a2e03c32e7d2edf555024e30cae08f3380970ee3c26e51985748d86f7ad1868d0429f9df0b3e359f8001278d07cf8e08154612f3202757d4fc0d85a7f40bd86e21de9c29ca0b8604113f8cb3d4b5c67c96dbed485b7ac6036cbe276c591b716c37ebe2a757727c91c3bd04b31818c40009df81a4d12552c2a174113b3686a91ac72ff2b3e205cd19c752a84353b24f803e30818fc14817b3eca0f11a17e0aceff8a374f68d757c471e8c7a874563a2b28845431ea4c27cf4eae976f2deeee437d1dcb842ea0b9184ced4d1269e4dda2e76b12cbb48c88684fc1b5375eb520d679104dc4a8b1e29c955c42e85820f5a4e1fc35da35fa9e2e5033aa33cae1d031ac45f9a099881a3d57d1cafbb3680b7f46098e4062d8383a2a3d616b6886dd75420eff38c1f658cf958a87a2216988460569a769ff7f03121c06c5e75d4a618162a6ba6502723340889743f3b54119821b8901c97131924d010c6979851900fe3fd64a85a9044cd8508faa41d64b7f6c2ed3c65335bc7626bb26477565d638b6e3bf832098553c788155560839dfd86a413b2b7b26f9b05d941211df8b51e1778c3820d57f17f7b9d5c7c076706cc0bd4c127f9b83d66a93cc3e7e3dcf14d4d2729b7feb6b8acfa0fb3db7d8e2ac20e876f6707e1ed4660f86d144e74f3dde69ba9ed73208c98e2f3af254b534063c252d606e97f82d985785ab29c80185f141fecb3b3f23de72f6e954a7c507de364db9260bcac0f603385cf0318e9f20e30673bbd9cc49ba807ec1153496fec33be67c1a5441388e127c34d22744d3af8564616c101ff605b9dbc809f79b5fb228e9495b023b925369977e5ecd9f95e5e1da012da90ad19cd689676ef15a592d13c9b6703363d90870a693f460767a5612f3482a0392fde04e07aef79053f9bd73fadd965964e5f84f99f03fa41962bc3089402b47b3bdb755bcc4a6b2732b227d4fdfd1d2f2ccf87f0939f1308da381f116a19f25f2931c1ee6c418fad062ea91bfa4b6747a68e8c9ee6972e90c2cb3bf8d01b342d780df520a457d616cd88f48e35d41ec2baaa3121525bd03c98daa28cdad46b7e7ab3a02021c5cf6abce6500e541619a1f21f4283c291c9835bedbe37d74c2dc3490a61b7e7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="请 输 入 阅 读 密 码.">请 输 入 阅 读 密 码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文主要记录近期的项目开发计划。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="加密博客" scheme="https://www.techgrow.cn/tags/%E5%8A%A0%E5%AF%86%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 使用 Rsync 同步文件</title>
    <link href="https://www.techgrow.cn/posts/a8ab361e.html"/>
    <id>https://www.techgrow.cn/posts/a8ab361e.html</id>
    <published>2022-03-19T13:48:23.000Z</published>
    <updated>2022-03-19T13:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Rsync 是一个增量备份工具，可压缩数据传输，速度快且增量备份，占用流量少。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line"><span class="keyword"># groupadd</span> www</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line"><span class="keyword"># useradd</span><span class="params"> -g</span> www www<span class="params">  -s</span> /bin/<span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Rsync服务器信息提示文件</span></span><br><span class="line"><span class="keyword"># echo</span> <span class="string">"Welcome To Access"</span> &gt; /etc/rsyncd.motd</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Rsync服务器密码文件，其中 RsyncUser 是用户名，123456 是密码</span></span><br><span class="line"><span class="keyword"># echo</span> <span class="string">"RsyncUser:123456"</span> &gt; /etc/rsyncd.secrets</span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># Rsync</span>服务器密码文件授权，所属的用户和用户组必须都是 root，同时权限必须为 600</span><br><span class="line"><span class="keyword"># chown</span> root:root /etc/rsyncd.secrets</span><br><span class="line"><span class="keyword"># chmod</span> 600 /etc/rsyncd.secrets</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-Rsync"><a href="#安装-Rsync" class="headerlink" title="安装 Rsync"></a>安装 Rsync</h2><h3 id="安装-Rsync-服务"><a href="#安装-Rsync-服务" class="headerlink" title="安装 Rsync 服务"></a>安装 Rsync 服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="keyword">#&nbsp;yum</span> install rsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line"><span class="keyword"># systemctl</span> <span class="built_in">enable</span> rsyncd</span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">注意</p><p>这里还需要更改 systemd 的配置文件，加入以下内容，否则 Rsync 服务开机无法正常自启动。</p></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改systemd的配置文件，加入以下内容</span></span><br><span class="line"><span class="keyword"># vim</span> /usr/lib/systemd/system/rsyncd.service</span><br><span class="line">[Unit]</span><br><span class="line">...</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让配置文件生效</span></span><br><span class="line"><span class="keyword"># systemctl</span> daemon-reload</span><br></pre></td></tr></tbody></table></figure><h3 id="配置-Rsync-服务"><a href="#配置-Rsync-服务" class="headerlink" title="配置 Rsync 服务"></a>配置 Rsync 服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份默认的配置文件</span></span><br><span class="line"><span class="keyword"># cp</span> /etc/rsyncd.conf /etc/rsyncd.conf.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件，添加以下内容（请自行根据实际情况更改对应的配置内容）</span></span><br><span class="line"><span class="keyword"># vim</span> /etc/rsyncd.conf</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 设置服务器信息提示文件名称，在该文件中编写提示信息</span><br><span class="line">motd file = /etc/rsyncd.motd</span><br><span class="line"># 开启Rsync数据传输日志功能</span><br><span class="line">transfer logging = yes</span><br><span class="line"># 设置日志文件名称，可以通过log format参数设置日志格式</span><br><span class="line">log file =/var/log/rsyncd.log</span><br><span class="line"># 设置Rsync进程号保存文件名称</span><br><span class="line">pid file =/var/run/rsyncd.pid</span><br><span class="line"># 设置锁文件名称</span><br><span class="line">lock file =/var/run/rsync.lock</span><br><span class="line"># 设置服务器监听的端口号，默认为873 </span><br><span class="line">port = 873</span><br><span class="line"># 设置服务器所监听网卡接口的IP地址（内网IP）</span><br><span class="line">address = 172.0.25.18</span><br><span class="line"># 设置进行数据传输时所使用的账户名称或ID号，默认使用nobody </span><br><span class="line">uid = www</span><br><span class="line"># 设置进行数据传输时所使用的组名称或GID号，默认使用nobody </span><br><span class="line">gid = www</span><br><span class="line"># 设置user chroot为yes后，rsync会首先进行chroot设置，将根映射到path参数路径下，对客户端而言，系统的根就是path参数所指定的路径。但这样做需要root权限，并且在同步符号连接资料时仅会同步名称，而内容将不会同步。 </span><br><span class="line">use chroot = no</span><br><span class="line"># 是否允许客户端上传数据，这里设置不为只读。 </span><br><span class="line">read only = no</span><br><span class="line"># 设置并发连接数，0代表无限制。超出并发数后，如果依然有客户端连接请求，则将会收到稍后重试的提示消息 </span><br><span class="line">max connections = 10</span><br><span class="line"># 模块，Rsync通过模块定义同步的目录，模块以[name]的形式定义，这与Samba定义共享目录是一样的效果，在Rsync中也可以定义多个模块</span><br><span class="line">[blog]</span><br><span class="line"># comment定义注释说明字串 </span><br><span class="line">comment = rsync blog files</span><br><span class="line"># 同步目录的真实路径通过path指定 </span><br><span class="line">path = /home/www/blog</span><br><span class="line"># 忽略一些IO错误 </span><br><span class="line">ignore errors</span><br><span class="line"># exclude可以指定例外的目录，即将common目录下的某个目录设置为不同步数据 </span><br><span class="line"># exclude = test/ </span><br><span class="line"># 设置允许连接服务器的账户，账户可以是系统中不存在的用户 </span><br><span class="line">auth users = RsyncUser</span><br><span class="line"># 设置密码文件名称，注意该文件的权限要求为只读，建议权限为600，仅在设置auth users参数后有效 </span><br><span class="line">secrets file = /etc/rsyncd.secrets</span><br><span class="line"># 设置允许哪些主机可以同步数据，可以是单个IP，也可以是网段，多个IP与网段之间使用空格分隔 </span><br><span class="line">hosts allow = *</span><br><span class="line"># 设置拒绝所有（除hosts allow定义的主机外） </span><br><span class="line"># hosts deny = *</span><br><span class="line"># 客户端请求显示模块列表时，本模块名称是否显示，默认为true </span><br><span class="line">list = true</span><br></pre></td></tr></tbody></table></figure><h3 id="启动-Rsync-服务"><a href="#启动-Rsync-服务" class="headerlink" title="启动 Rsync 服务"></a>启动 Rsync 服务</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="keyword"># systemctl</span> start rsyncd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务的运行状态</span></span><br><span class="line"><span class="keyword"># systemctl</span> status rsyncd</span><br></pre></td></tr></tbody></table></figure><p>值得一提的是，还可以使用以下命令管理 Rsync 服务：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line"><span class="keyword"># systemctl</span> stop rsyncd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line"><span class="keyword"># systemctl</span> restart rsyncd</span><br></pre></td></tr></tbody></table></figure><h3 id="配置系统防火墙"><a href="#配置系统防火墙" class="headerlink" title="配置系统防火墙"></a>配置系统防火墙</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放Rsync监听的端口（默认端口是873）</span></span><br><span class="line"><span class="keyword"># firewall</span>-cmd<span class="params"> --permanent</span><span class="params"> --add</span>-port=873/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让防火墙规则生效</span></span><br><span class="line"><span class="keyword"># firewall</span>-cmd<span class="params"> --reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有开放的端口</span></span><br><span class="line"><span class="keyword"># firewall</span>-cmd<span class="params"> --list</span>-ports</span><br></pre></td></tr></tbody></table></figure><h2 id="测试文件同步服务"><a href="#测试文件同步服务" class="headerlink" title="测试文件同步服务"></a>测试文件同步服务</h2><div class="admonition note"><p class="admonition-title">提示</p><p>在下述的案例里，各命令参数的说明如下：</p><ul><li><code>183.242.11.186</code>：服务器的 IP 地址</li><li><code>blog</code>：在 <code>/etc/rsyncd.conf</code> 配置文件中定义的模块名称</li><li><code>RsyncUser</code>：在 <code>/etc/rsyncd.secrets</code> 配置文件中定义的用户名</li><li><code>--delete</code>：表示同步文件时，删除目标目录比源目录多余的文件</li></ul></div><h3 id="同步目录授权"><a href="#同步目录授权" class="headerlink" title="同步目录授权"></a>同步目录授权</h3><p>在服务器上，确保用户拥有在 <code>/etc/rsyncd.conf</code> 配置文件中定义的 <code>path</code> 同步目录的访问权限。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同步目录授权</span></span><br><span class="line"><span class="keyword"># chown</span><span class="params"> -R</span> www:www /home/www/blog</span><br></pre></td></tr></tbody></table></figure><h3 id="客户端同步服务器文件到本地"><a href="#客户端同步服务器文件到本地" class="headerlink" title="客户端同步服务器文件到本地"></a>客户端同步服务器文件到本地</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端同步服务器的某个文件到本地</span></span><br><span class="line"><span class="keyword">$ rsync</span><span class="params"> -vzrtopg</span><span class="params"> --progress</span> RsyncUser@183.242.11.186::blog/index.html ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端同步服务器的某个目录到本地</span></span><br><span class="line"><span class="keyword">$ rsync</span><span class="params"> -vzrtopg</span><span class="params"> --progress</span> RsyncUser@183.242.11.186::blog/posts/ ./posts/</span><br></pre></td></tr></tbody></table></figure><h3 id="客户端同步本地文件到服务器"><a href="#客户端同步本地文件到服务器" class="headerlink" title="客户端同步本地文件到服务器"></a>客户端同步本地文件到服务器</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端同步本地的某个文件到服务器</span></span><br><span class="line"><span class="keyword">$ rsync</span><span class="params"> -rlptDv</span> index.html RsyncUser@183.242.11.186::blog/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端同步本地的某个目录到服务器（本地的目录路径必须不以'/'结尾）</span></span><br><span class="line"><span class="keyword">$ rsync</span><span class="params"> -avzP</span><span class="params"> --delete</span> ./posts RsyncUser@183.242.11.186::blog/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端同步本地某个目录下的所有文件到服务器（本地的目录路径必须以'/'结尾）</span></span><br><span class="line"><span class="keyword">$ rsync</span><span class="params"> -avzP</span><span class="params"> --delete</span> ./posts/ RsyncUser@183.242.11.186::blog/</span><br></pre></td></tr></tbody></table></figure><h2 id="设置同步时不手动输入密码"><a href="#设置同步时不手动输入密码" class="headerlink" title="设置同步时不手动输入密码"></a>设置同步时不手动输入密码</h2><p>在客户端同步文件时指定密码文件，这样可以避免每次都手动输入密码。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在本地创建密码文件，其中 123456 是密码，这里不需要指定用户名</span></span><br><span class="line"><span class="keyword"># echo</span> <span class="string">"123456"</span> &gt; /etc/rsyncd.password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码文件授权，所属的用户和用户组必须都是 root，同时权限必须为 600</span></span><br><span class="line"><span class="keyword"># chown</span> root:root /etc/rsyncd.password</span><br><span class="line"><span class="keyword"># chmod</span> 600 /etc/rsyncd.password</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端同步服务器的某个文件到本地（指定密码文件）</span></span><br><span class="line"><span class="keyword"># rsync</span><span class="params"> -vzrtopg</span><span class="params"> --progress</span> RsyncUser@183.242.11.186::blog/index.html ./<span class="params"> --password</span>-file=/etc/rsyncd.password</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>除了上述的方法之外，还可通过设置环境变量的方式，避免每次都手动输入密码。</p></div><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过环境变量设置密码</span></span><br><span class="line"><span class="keyword"># export</span> RSYNC_PASSWORD=<span class="string">"123456"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端同步服务器的某个文件到本地</span></span><br><span class="line"><span class="keyword"># rsync</span><span class="params"> -vzrtopg</span><span class="params"> --progress</span> RsyncUser@183.242.11.186::blog/index.html ./</span><br></pre></td></tr></tbody></table></figure><h2 id="不同步文件的所有者和用户组信息"><a href="#不同步文件的所有者和用户组信息" class="headerlink" title="不同步文件的所有者和用户组信息"></a>不同步文件的所有者和用户组信息</h2><p>在 <code>rsync -a dir/ remote:/dir/</code> 命令中，<code>-a</code> 相当于 <code>-rlptgoD</code>，各参数选项的说明如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-o, --owner                 preserve owner (super-user only)</span><br><span class="line">-g, --group                 preserve group</span><br><span class="line">-r, --recursive             recurse into directories</span><br><span class="line">-l, --links                 copy symlinks as symlinks</span><br><span class="line">-p, --perms                 preserve permissions</span><br><span class="line">-t, --times                 preserve modification times</span><br><span class="line">-D                          same as --devices --specials</span><br><span class="line">    --devices               preserve device files (super-user only)</span><br><span class="line">    --specials              preserve special files</span><br></pre></td></tr></tbody></table></figure><p>若希望不同步文件的所有者和用户组信息，那么可以通过移除 <code>-o</code> 和 <code>-g</code> 参数选项来实现，示例命令如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ rsync</span><span class="params"> -a</span><span class="params"> --no</span>-o<span class="params"> --no</span>-g dir/ remote:/dir/</span><br></pre></td></tr></tbody></table></figure><h2 id="用参数控制-Rsync-同步时的比较算法"><a href="#用参数控制-Rsync-同步时的比较算法" class="headerlink" title="用参数控制 Rsync 同步时的比较算法"></a>用参数控制 Rsync 同步时的比较算法</h2><p>Rsync 默认只会比较文件大小和最后修改时间，只要这两者一样，Rsync 就认为文件相同；此时如果其它属性（包括文件内容）的不同，并不会让 Rsync 同步该文件。所以，如果本地文件与远程文件大小一样，修改时间也一样，那么默认情况下，即使文件内容不一样的文件也不同被同步。通过设置合适的参数，可以控制 Rsync 的比较算法，其中 Rsync 使用以下三个步骤来比较文件：</p><ul><li>a) 比较文件大小</li><li> b) 比较文件最后修改日期</li><li> c) 比较文件内容，通过 <code>checksum</code>，例如使用 <code>md5sum</code></li></ul><p>可以用参数来控制 Rsync 执行上面的哪些步骤：</p><ul><li>默认的比较算法只执行 a 和 b</li><li> 参数 <code>--size-only</code> 只检查 a ，即只要文件大小一样，即使修改日期不一样，就认为文件一样，更不会去检查文件内容</li><li>参数 <code>--ignore-times</code> 是忽略所有检查，直接认为文件都不一样，然后总是复制文件</li><li>参数 <code>--checksum</code> 是在 a 的基础上执行 c ，比较文件内容。如果文件大小不一样，可以确保内容不一样。如果文件大小一样，那么直接比较文件内容，不会执行 b 中的比较最后修改时间。该方法最安全，但需要读取两边的文件内容，某些情况下要慢很多（尤其是最后比较出来的文件内容一样的情况）</li></ul><p>命令参数的使用示例如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ rsync</span><span class="params"> -avzP</span><span class="params"> --delete</span><span class="params"> --checksum</span> dir/ remote:/dir/</span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="delete-参数不生效"><a href="#delete-参数不生效" class="headerlink" title="delete 参数不生效"></a>delete 参数不生效</h3><ul><li><a href="https://askubuntu.com/questions/609968/rsync-delete-option-doesnt-delete-files-in-target-directory">Rsync –delete option doesn’t delete files in target directory</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Centos7 如何使用 Rsync 同步文件。</summary>
    
    
    
    
    <category term="Centos" scheme="https://www.techgrow.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 安装 Edge 浏览器</title>
    <link href="https://www.techgrow.cn/posts/350db602.html"/>
    <id>https://www.techgrow.cn/posts/350db602.html</id>
    <published>2022-03-08T13:48:23.000Z</published>
    <updated>2022-03-08T13:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在 Edge 的 <a href="https://www.microsoftedgeinsider.com/zh-cn/download/?platform=linux">官网</a>，手动下载最新版的 RPM 安装包，或者使用以下命令进行下载：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ wget</span> https://packages.microsoft.com/yumrepos/edge/microsoft-edge-dev-101.0.1193.0-1.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"># yum</span> install libatomic</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>若不提前安装 <code>libatomic</code> 库，则安装 Edge 时会出现以下错误信息。</p></div><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：依赖检测失败：</span><br><span class="line">libatomic.so.1()(64bit) 被 microsoft-edge-dev-101.0.1193.0-1.x86_64 需要</span><br><span class="line">libatomic.so.1(LIBATOMIC_1.0)(64bit) 被 microsoft-edge-dev-101.0.1193.0-1.x86_64 需要</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-Edge-浏览器"><a href="#安装-Edge-浏览器" class="headerlink" title="安装 Edge 浏览器"></a>安装 Edge 浏览器</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"># rpm</span><span class="params"> -ivh</span> microsoft-edge-dev-101.0.1193.0-1.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍Centos7如何安装Edge浏览器。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Centos" scheme="https://www.techgrow.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客导流微信公众号</title>
    <link href="https://www.techgrow.cn/posts/c86372a2.html"/>
    <id>https://www.techgrow.cn/posts/c86372a2.html</id>
    <published>2022-03-04T14:13:21.000Z</published>
    <updated>2022-03-04T14:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 博客建议安装 <a href="https://github.com/rqh656418510/hexo-readmore">hexo-readmore</a> 插件，将 <a href="https://open.techgrow.cn/">TechGrow</a> 的免费微信公众号导流工具整合到博客中，用户扫码关注微信公众号后可以解锁全站文章，让微信公众号的粉丝数躺着增长。</p><div class="admonition note"><p class="admonition-title">提示</p><p>TechGrow 开放平台的 <a href="https://docs.techgrow.cn/v1/wechat/hexo/">官方文档</a></p></div><h2 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h2><ul><li><input checked="" disabled="" type="checkbox"> 兼容主流的 Hexo 主题</li><li><input checked="" disabled="" type="checkbox"> 支持随机为博客添加引流功能</li><li><input checked="" disabled="" type="checkbox"> 支持关闭某篇文章的引流功能</li><li><input checked="" disabled="" type="checkbox"> 支持查询用户解锁文章的历史记录</li><li><input checked="" disabled="" type="checkbox"> 支持自定义或者动态计算文章内容的预览高度</li><li><input checked="" disabled="" type="checkbox"> 支持自定义 CSS 样式，轻松适配不同风格的博客</li></ul><span id="more"></span><h2 id="注册博客"><a href="#注册博客" class="headerlink" title="注册博客"></a>注册博客</h2><p>浏览器访问 <a href="https://open.techgrow.cn/">TechGrow</a> 的官网 ，注册并登录账号后，进入博客的后台管理页面。首先点击左侧的菜单 <code>博客注册</code>，然后点击 <code>新增</code> 按钮，添加自己博客的信息。博客注册成功后，记录下 <code>博客 ID</code>，后面的步骤会使用到</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/717e14eb59dd44dea62d6a0b7549abfd.png"></p><h2 id="设置公众号"><a href="#设置公众号" class="headerlink" title="设置公众号"></a>设置公众号</h2><p>在微信公众号的后台管理页面，菜单栏里选择 <code>自动回复</code> - <code>关键词回复</code>，启用 <code>自动回复</code>，然后点击 <code>添加回复</code> 按钮：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/em64p7w8wlqtt0rsjop0jjeywx29m25w.png"></p><p>填写 <code>规则名称</code>、<code>关键词（当初你在 TechGrow 中设置的）</code>、<code>回复内容</code> 选择 <code>文字</code>，然后 <code>回复文字</code> 的内容填写获取博客解锁验证码的链接，如下所示（请自行更改 <code>xxxxx-xxxxxxxxx-xxx</code> 为你申请到的博客 ID）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://open.techgrow.cn/#/readmore/captcha/generate?blogId=xxxxx-xxxxxxxxx-xxx"</span>&gt;</span>点击链接，获取博客解锁验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/yd89wbdji196ixtwzgzamw37fbein1ia.png"></p><p>此时，当读者关注你的微信公众号，并输入关键词后（比如我设置的关键词就是 <code>tech</code>），那么读者就会自动接收到获取博客解锁验证码的链接</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul><li>运行 <code>npm install</code> 命令安装插件到本地项目 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-readmore --save</span><br></pre></td></tr></tbody></table></figure><h2 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h2><p>编辑 Hexo 自身的 <code>_config.yml</code> 配置文件，新增插件的配置信息（请自行更改博客相关的信息），如下所示：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readmore:</span></span><br><span class="line">  <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 已申请的博客 ID</span></span><br><span class="line">  <span class="attr">blogId:</span> <span class="string">'18762-1609305354821-257'</span></span><br><span class="line">  <span class="comment"># 已申请的微信公众号名称</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">'全栈技术驿站'</span></span><br><span class="line">  <span class="comment"># 已申请的微信公众号回复关键词</span></span><br><span class="line">  <span class="attr">keyword:</span> <span class="string">'tech'</span></span><br><span class="line">  <span class="comment"># 已申请的微信公众号二维码图片</span></span><br><span class="line">  <span class="attr">qrcode:</span> <span class="string">'https://www.techgrow.cn/img/wx_mp_qr.png'</span></span><br><span class="line">  <span class="comment"># 自定义的 JS 资源链接，可用于 CDN 加速</span></span><br><span class="line">  <span class="attr">libUrl:</span> <span class="string">'https://qiniu.techgrow.cn/readmore/dist/readmore.js'</span></span><br><span class="line">  <span class="comment"># 自定义的 CSS 资源链接，可用于适配不同风格的博客</span></span><br><span class="line">  <span class="attr">cssUrl:</span> <span class="string">'https://qiniu.techgrow.cn/readmore/dist/hexo.css'</span></span><br><span class="line">  <span class="comment"># 文章内容的预览高度</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">'auto'</span></span><br><span class="line">  <span class="comment"># 文章解锁后凭证的有效天数</span></span><br><span class="line">  <span class="attr">expires:</span> <span class="number">365</span></span><br><span class="line">  <span class="comment"># 定时校验凭证有效性的时间间隔（秒）</span></span><br><span class="line">  <span class="attr">interval:</span> <span class="number">60</span></span><br><span class="line">  <span class="comment"># 每篇文章随机添加微信公众号引流工具的概率，有效范围在 0.1 ~ 1 之间，1 则表示所有文章默认都自动添加引流工具</span></span><br><span class="line">  <span class="attr">random:</span> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>或者打开 TechGrow 的<a href="https://open.techgrow.cn/#/readmore/website/register">博客后台管理页面</a>，点击博客列表中右侧的 <code>使用</code> 链接，将窗口里的 YAML 配置内容复制到 Hexo 自身的 <code>_config.yml</code> 配置文件即可</p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td> enable</td><td>Boolean</td><td> 是</td><td><code>false</code></td><td>-</td></tr><tr><td>blogId</td><td>String</td><td> 是</td><td></td><td> -</td></tr><tr><td>name</td><td>String</td><td> 是</td><td></td><td> -</td></tr><tr><td>keyword</td><td>String</td><td> 是</td><td></td><td> -</td></tr><tr><td>qrcode</td><td>String</td><td> 是</td><td></td><td> -</td></tr><tr><td>libUrl</td><td>String</td><td> 否</td><td><code>https://qiniu.techgrow.cn/readmore/dist/readmore.js</code></td><td>-</td></tr><tr><td>cssUrl</td><td>String</td><td> 否</td><td><code>https://qiniu.techgrow.cn/readmore/dist/hexo.css</code></td><td>-</td></tr><tr><td>height</td><td>String / Number</td><td> 否</td><td><code>auto</code></td><td>-</td></tr><tr><td>expires</td><td>Number</td><td> 否</td><td><code>365</code></td><td>-</td></tr><tr><td>interval</td><td>Number</td><td> 否</td><td><code>60</code></td><td>-</td></tr><tr><td>random</td><td>Number</td><td> 否</td><td><code>1</code></td><td>-</td></tr></tbody></table><h2 id="构建-Hexo"><a href="#构建-Hexo" class="headerlink" title="构建 Hexo"></a>构建 Hexo</h2><ul><li>运行 <code>hexo clean</code> 命令清理本地博客 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></tbody></table></figure><ul><li>运行 <code>hexo generate</code> 命令构建本地博客 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><ul><li>运行 <code>hexo server</code> 命令启动本地博客服务 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><h2 id="验证插件效果"><a href="#验证插件效果" class="headerlink" title="验证插件效果"></a>验证插件效果</h2><p>打开文章页面，若文章自动隐藏了部分内容，并且出现了 <code>阅读全文</code> 按钮，则说明导流插件正常运行，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/3f53ab36dfa84fb99a6508ae46e5373a.png"></p><p>点击 <code>阅读全文</code> 按钮，会弹出微信公众号的二维码窗口，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/202980a480fd463c814a31d5cc3fb2a1.png"></p><h2 id="取消阅读限制"><a href="#取消阅读限制" class="headerlink" title="取消阅读限制"></a>取消阅读限制</h2><p>若希望关闭某篇文章的微信公众号导流功能，可以在文章的头模板中使用 <code>readmore: false</code> 配置属性，如下所示：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:  Hexo版本升级教程</span><br><span class="line">tags: [Hexo]</span><br><span class="line">readmore: false</span><br><span class="line">keywords: [Hexo, 版本升级]</span><br><span class="line">date: 2022-01-12 22:25:49</span><br><span class="line">updated: 2022-01-12 22:25:49</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p>插件默认使用了定义在 <a href="https://qiniu.techgrow.cn/readmore/dist/hexo.css">hexo.css</a> 的 CSS 样式，你可以使用以下两种方式自定义自己的样式：</p><ul><li>第一种方式：更改博客主题的 CSS 源码文件，将自定义的那部分 CSS 样式添加到里面</li><li>第二种方式：根据 <a href="https://qiniu.techgrow.cn/readmore/dist/hexo.css">hexo.css</a> 创建自己的 CSS 文件（完整的），并将其存放在自己的博客里，同时通过插件的 <code>cssUrl</code> 配置参数来指定其访问的 URL 路径</li></ul><h2 id="已兼容的主题"><a href="#已兼容的主题" class="headerlink" title="已兼容的主题"></a>已兼容的主题</h2><ul><li><a href="https://github.com/next-theme/hexo-theme-next">NexT</a></li><li><a href="https://github.com/litten/hexo-theme-yilia">Yilia</a></li><li><a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a></li><li><a href="https://github.com/liuyib/hexo-theme-stun">Stun</a></li></ul><h2 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h2><ul><li><a href="/posts/52f22f9b.html">官方博客</a></li></ul><h2 id="官方微信群"><a href="#官方微信群" class="headerlink" title="官方微信群"></a>官方微信群</h2><p><img data-src="/img/wx-group-qr-techgrow.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍 Hexo 博客如何将网站的流量导向微信公众号，比 OpenWrite 的导流工具更强大。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>博客导流微信公众号</title>
    <link href="https://www.techgrow.cn/posts/48b470db.html"/>
    <id>https://www.techgrow.cn/posts/48b470db.html</id>
    <published>2022-03-02T14:13:21.000Z</published>
    <updated>2022-03-02T14:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博客将流量导向微信公众号很简单，可以使用 <a href="https://open.techgrow.cn/">TechGrow</a> 的免费导流工具实现，用户扫码关注微信公众号后可以解锁全站文章，让微信公众号的粉丝数躺着增长。整个过程只需六步就可以搞定，适用于各类主流的博客，本文以 Hexo 的 NexT 主题博客举例。</p><div class="admonition note"><p class="admonition-title">提示</p><ol><li>TechGrow 开放平台的 <a href="https://docs.techgrow.cn/v1/wechat/common/">官方文档</a></li><li>若使用的是 Hexo 静态博客，建议直接安装 <a href="https://github.com/rqh656418510/hexo-readmore">hexo-readmore</a> 插件，详细教程可点击<a href="/posts/c86372a2.html">这里</a></li><li>若使用的是 VuePress v1.x 静态博客，建议直接安装 <a href="https://github.com/rqh656418510/vuepress-plugin-readmore-popular">vuepress-plugin-readmore-popular</a> 插件，详细教程可点击<a href="/posts/92228e7b.html">这里</a></li></ol></div><h2 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h2><ul><li><input checked="" disabled="" type="checkbox"> 兼容主流的博客框架</li><li><input checked="" disabled="" type="checkbox"> 支持随机为博客添加引流功能</li><li><input checked="" disabled="" type="checkbox"> 支持查询用户解锁文章的历史记录</li><li><input checked="" disabled="" type="checkbox"> 支持自定义或者动态计算文章内容的预览高度</li><li><input checked="" disabled="" type="checkbox"> 支持自定义 CSS 样式，轻松适配不同风格的博客</li></ul><h2 id="第一步：注册博客"><a href="#第一步：注册博客" class="headerlink" title="第一步：注册博客"></a>第一步：注册博客</h2><p>浏览器访问 <a href="https://open.techgrow.cn/">TechGrow</a> 的官网 ，注册并登录账号后，进入博客的后台管理页面。首先点击左侧的菜单 <code>博客注册</code>，然后点击 <code>新增</code> 按钮，添加自己博客的信息。博客注册成功后，记录下 <code>博客 ID</code>，后面的步骤会使用到</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/717e14eb59dd44dea62d6a0b7549abfd.png"></p><span id="more"></span><h2 id="第二步：设置公众号"><a href="#第二步：设置公众号" class="headerlink" title="第二步：设置公众号"></a>第二步：设置公众号</h2><p>在微信公众号的后台管理页面，菜单栏里选择 <code>自动回复</code> - <code>关键词回复</code>，启用 <code>自动回复</code>，然后点击 <code>添加回复</code> 按钮：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/em64p7w8wlqtt0rsjop0jjeywx29m25w.png"></p><p>填写 <code>规则名称</code>、<code>关键词（当初你在 TechGrow 中设置的）</code>、<code>回复内容</code> 选择 <code>文字</code>，然后 <code>回复文字</code> 的内容填写获取博客解锁验证码的链接，如下所示（请自行更改 <code>xxxxx-xxxxxxxxx-xxx</code> 为你申请到的博客 ID）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://open.techgrow.cn/#/readmore/captcha/generate?blogId=xxxxx-xxxxxxxxx-xxx"</span>&gt;</span>点击链接，获取博客解锁验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/yd89wbdji196ixtwzgzamw37fbein1ia.png"></p><p>此时，当读者关注你的微信公众号，并输入关键词后（比如我设置的关键词就是 <code>tech</code>），那么读者就会自动接收到获取博客解锁验证码的链接</p><h2 id="第三步：定位文章主体的标签元素"><a href="#第三步：定位文章主体的标签元素" class="headerlink" title="第三步：定位文章主体的标签元素"></a>第三步：定位文章主体的标签元素</h2><p>在 Hexo 博客的 <code>themes</code> 目录下，找到你正在使用的主题目录，比如：<code>next</code> 等，具体根据你选择的主题来判断。进入主题源码的 <code>layout</code> 目录，找到 <code>_macro/post.njk</code> 模板文件，若这里有一大段与文章主体内容相关的 HTML 代码，那就说明文章主体标签元素的模板定义就在这里，示例模板代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-block"</span>&gt;</span><br><span class="line">  {# Gallery support #}</span><br><span class="line">  {{ post_gallery(post.photos) }}</span><br><span class="line"></span><br><span class="line">  &lt;!-- 文章主体的标签元素 --&gt;</span><br><span class="line">  &lt;article itemscope itemtype="http://schema.org/Article" class="post-content" lang="{{ post.lang }}"&gt;</span><br><span class="line">    &lt;link itemprop="mainEntityOfPage" href="{{ post.permalink }}"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"&gt;</span><br><span class="line">      &lt;meta itemprop="image" content="{{ url_for(theme.avatar.url or theme.images + '/avatar.gif') }}"&gt;</span><br><span class="line">      &lt;meta itemprop="name" content="{{ author }}"&gt;</span><br><span class="line">      &lt;meta itemprop="description" content="{{ description }}"&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    ...（省略）</span><br><span class="line"></span><br><span class="line">  &lt;/article&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>另一种定位方式是打开你博客的任意一篇文章，利用 Chrome 等浏览器的元素审查功能，找到文章页面中文章主体的标签元素，比如下图中的 <code>article</code> 就是文章主体的标签元素：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/5562a8e4868843e0868a4bdfd67c530e.png"></p><h2 id="第四步：新增文章内容-DIV-标签"><a href="#第四步：新增文章内容-DIV-标签" class="headerlink" title="第四步：新增文章内容 DIV 标签"></a>第四步：新增文章内容 DIV 标签</h2><p>在文章模板文件中找到文章主体的标签元素之后，在其上一层包一层 <code>div</code> 标签，并将 <code>div</code> 标签的 <code>id</code> 属性设置为 <code>readmore-container</code>，即添加的 HTML 标签为 <code>&lt;div id="readmore-container"&gt;</code>，示例模板代码如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-block"</span>&gt;</span></span><br><span class="line">  {# Gallery support #}</span><br><span class="line">  {{ post_gallery(post.photos) }}</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 新增的DIV标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"readmore-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Article"</span> <span class="attr">class</span>=<span class="string">"post-content"</span> <span class="attr">lang</span>=<span class="string">"{{ post.lang }}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">itemprop</span>=<span class="string">"mainEntityOfPage"</span> <span class="attr">href</span>=<span class="string">"{{ post.permalink }}"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">hidden</span> <span class="attr">itemprop</span>=<span class="string">"author"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"image"</span> <span class="attr">content</span>=<span class="string">"{{ url_for(theme.avatar.url or theme.images + '/avatar.gif') }}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"name"</span> <span class="attr">content</span>=<span class="string">"{{ author }}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"{{ description }}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        ...（省略）</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="第五步：新增导流工具的-HTML-代码"><a href="#第五步：新增导流工具的-HTML-代码" class="headerlink" title="第五步：新增导流工具的 HTML 代码"></a>第五步：新增导流工具的 HTML 代码</h2><p>打开 TechGrow 的<a href="https://open.techgrow.cn/#/readmore/website/register">博客后台管理页面</a>，点击博客列表中右侧的 <code>使用</code> 链接，将窗口里的 HTML 代码复制到第三步中找到的文章模板文件的末尾，也可以添加到主题的 <code>footer</code> 模板文件中，示例 HTML 代码如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/ad963a38752743169e8f351983cc6cc1.png"></p><table><thead><tr><th>参数</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td> id</td><td> 是</td><td></td><td> DIV 标签的 ID</td></tr><tr><td>blogId</td><td> 是</td><td></td><td>已申请的博客 ID</td></tr><tr><td>name</td><td> 是</td><td></td><td>已申请的微信公众号名称</td></tr><tr><td> qrcode</td><td> 是</td><td></td><td>已申请的微信公众号二维码图片</td></tr><tr><td> keyword</td><td> 是</td><td></td><td>已申请的微信公众号回复关键词</td></tr><tr><td> height</td><td> 否</td><td><code>auto</code></td><td>文章内容的预览高度</td></tr><tr><td> expires</td><td> 否</td><td><code>365</code></td><td>文章解锁后凭证的有效天数</td></tr><tr><td> interval</td><td> 否</td><td><code>60</code></td><td>定时校验凭证有效性的时间间隔（秒）</td></tr><tr><td>type</td><td> 否</td><td><code>other</code></td><td>博客类型，包括：<code>hexo</code>、<code>vuepress</code>、<code>vuepress2</code>、<code>hugo</code>、<code>gatsby</code>、<code>jekyll</code>、<code>docsify</code>、<code>typecho</code>、<code>wordpress</code>、<code>other</code></td></tr><tr><td>random</td><td> 否</td><td><code>1</code></td><td>每篇文章随机添加微信公众号引流工具的概率，有效范围在 0.1 ~ 1 之间，1 则表示所有文章默认都自动添加引流工具</td></tr></tbody></table><h2 id="第六步：验证导流工具是否整合成功"><a href="#第六步：验证导流工具是否整合成功" class="headerlink" title="第六步：验证导流工具是否整合成功"></a>第六步：验证导流工具是否整合成功</h2><p>重新构建并运行博客服务后，打开文章页面，若文章自动隐藏了部分内容，并且出现了 <code>阅读全文</code> 按钮，则说明导流工具整合成功，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/3f53ab36dfa84fb99a6508ae46e5373a.png"></p><p>点击 <code>阅读全文</code> 按钮，会弹出微信公众号的二维码窗口，如下图所示：</p><p><img data-src="https://www.techgrow.cn/uploads/2022/02/28/202980a480fd463c814a31d5cc3fb2a1.png"></p><div class="admonition note"><p class="admonition-title">使用总结</p><p>博客整合引流工具，其本质原理就是先在博客的主题源码里，找到文章的主体内容，然后在其外面包裹一层 DIV 标签（<code>&lt;div id="readmore-container"&gt;</code>），最后再将引流工具的 HTML 代码添加到博客文章的末尾即可。</p></div><h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p>引流工具默认使用了定义在 <a href="https://qiniu.techgrow.cn/readmore/dist/readmore.css">readmore.css</a> 的 CSS 样式，你可以使用以下两种方式自定义自己的样式：</p><ul><li>第一种方式：更改博客主题的 CSS 源码文件，将自定义的那部分 CSS 样式添加到里面</li><li>第二种方式：根据 <a href="https://qiniu.techgrow.cn/readmore/dist/readmore.css">readmore.css</a> 创建自己的 CSS 文件（完整的），并将其存放在自己的博客里，同时通过引流工具的 <code>cssUrl</code> 配置参数来指定其访问的 URL 路径</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><div class="admonition note"><p class="admonition-title">问题一</p><p>博客整合引流工具后，浏览器的控制台输出警告或者错误信息，且引流工具无法生效</p></div><p>浏览器访问博客后，按下 <code>F12</code> 快捷键调出调试工具，然后切换到 <code>控制台</code>，最后将警告或者错误信息截图，并发送到 <a href="https://www.techgrow.cn/img/wx-group-qr-techgrow.png">官方微信群</a> 或者 <code>656418510@qq.com</code> 邮箱，建议留言备注博客与博客主题的类型。</p><div class="admonition note"><p class="admonition-title">问题二</p><p>博客整合引流工具后，移动端的引流工具无法生效，而 PC 端却生效</p></div><p>考虑到用户体验的问题，在移动端默认是关闭引流功能的，请知悉。</p><h2 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h2><ul><li><a href="/posts/52f22f9b.html">官方博客</a></li></ul><h2 id="官方微信群"><a href="#官方微信群" class="headerlink" title="官方微信群"></a>官方微信群</h2><p><img data-src="/img/wx-group-qr-techgrow.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍博客如何将网站的流量导向微信公众号，比 OpenWrite 的导流工具更强大。</summary>
    
    
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Vue 页面高亮显示代码块</title>
    <link href="https://www.techgrow.cn/posts/5cf75f16.html"/>
    <id>https://www.techgrow.cn/posts/5cf75f16.html</id>
    <published>2022-03-01T12:23:32.000Z</published>
    <updated>2022-03-01T12:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue 页面可以基于 <a href="https://github.com/koca/vue-prism-editor">vue-prism-editor</a> 实现高亮显示代码块，支持 Vue 2.x 和 Vue 3.x。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li><code>vue-prism-editor</code> 要求 Vue 的版本高于 <code>2.6.11</code></li><li>若 Vue 的版本为 3.x，则需要使用 <code>vue-prism-editor</code> 的 <a href="https://github.com/koca/vue-prism-editor/tree/feature/next">feature/next</a> 分支代码</li></ul></div><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ npm</span> install vue-prism-editor<span class="params"> --save</span></span><br></pre></td></tr></tbody></table></figure><p>由于 <code>vue-prism-editor</code> 依赖了 <code>prismjs</code>，所以还需要安装 <code>prismjs</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ npm</span> install prismjs<span class="params"> --save</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="Vue-代码"><a href="#Vue-代码" class="headerlink" title="Vue 代码"></a>Vue 代码</h2><p>在 Vue 页面中引入 <code>vue-prism-editor</code> 组件，完整的示例代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">prism-editor</span> <span class="attr">class</span>=<span class="string">"my-editor height-300"</span> <span class="attr">v-model</span>=<span class="string">"code"</span> <span class="attr">:highlight</span>=<span class="string">"highlighter"</span> <span class="attr">readonly</span> <span class="attr">line-numbers</span>&gt;</span><span class="tag">&lt;/<span class="name">prism-editor</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// import Prism Editor</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> { PrismEditor } <span class="keyword">from</span> <span class="string">'vue-prism-editor'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> <span class="string">'vue-prism-editor/dist/prismeditor.min.css'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// import highlighting library</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> { highlight, languages } <span class="keyword">from</span> <span class="string">'prismjs/components/prism-core'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> <span class="string">'prismjs/components/prism-clike'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> <span class="string">'prismjs/components/prism-javascript'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> <span class="string">'prismjs/themes/prism-tomorrow.css'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>: {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      PrismEditor</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    },</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">data</span>: <span class="function">() =&gt;</span> ({</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">code</span>: <span class="string">'console.log("Hello World")'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    }),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      highlighter (code) {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> highlight(code, languages.js)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  }</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="comment">/* required class */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.my-editor</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/* we dont use `language-` classes anymore so thats why we need to add background and text color manually */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">background</span>: <span class="number">#2d2d2d</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/* you must provide font-family font-size line-height. Example: */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">font-family</span>: Fira code, Fira Mono, Consolas, Menlo, Courier, monospace;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="comment">/* optional class for removing the outline */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.prism-editor__textarea</span><span class="selector-pseudo">:focus</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">  }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="comment">/* not required: */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.height-300</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><ul><li><code>highlighter</code>：定义在 <code>methods</code> 中的一个方法，用于将代码高亮显示</li><li><code>readonly</code>：代码块是否只读（不可编辑）</li><li><code>code</code>：需要高亮显示的代码内容</li><li><code>lineNumbers</code>：是否显示行号</li></ul></div><h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><p><img data-src="../../../asset/2022/03/vue-highlighter-code-2.png"></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>如果安装 NPM 模块失败，且错误信息中有提示升级 <code>vue@^2.6.11</code> 版本，则根据提示升级 Vue 的版本即可：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ npm</span> install vue@^2.6.11</span><br></pre></td></tr></tbody></table></figure><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p><code>vue</code> 与 <code>vue-template-compiler</code> 的版本不一致，导致 Vue 项目编译失败</p><p><img data-src="../../../asset/2022/03/vue-highlighter-code-1.png"></p><p>首先卸载低版本的 <code>vue-template-compiler</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ npm</span> uninstall vue-template-compiler</span><br></pre></td></tr></tbody></table></figure><p>然后安装跟 <code>vue</code> 相同版本的 <code>vue-template-compiler</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ npm</span> install vue-template-compiler@2.6.11</span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Vue 页面如果高亮显示代码块，包括 vue-prism-editor 组件的使用。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue 页面读取并展示 Markdown 文件</title>
    <link href="https://www.techgrow.cn/posts/df920f01.html"/>
    <id>https://www.techgrow.cn/posts/df920f01.html</id>
    <published>2022-02-26T12:23:30.000Z</published>
    <updated>2022-02-26T12:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如何在 Vue 中读取项目本地的 MarkDown 文件并展示在网页上呢？查阅资料后发现，一般的方案是在 Vue 页面中引入 Markdown 编辑器，然后利用编辑器的预览功能来展示 MarkDown 文件的内容。推荐使用开源的 MarkDown 编辑器 <a href="https://github.com/hinesboy/mavonEditor">mavonEditor</a> 或者 <a href="https://github.com/zhaoxuhui1122/vue-markdown">vue-meditor</a>。</p><h2 id="vue-meditor-介绍"><a href="#vue-meditor-介绍" class="headerlink" title="vue-meditor 介绍"></a>vue-meditor 介绍</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://zhaoxuhui1122.github.io/vue-markdown-docs/">vue-meditor 官方文档</a></li><li><a href="https://github.com/zhaoxuhui1122/vue-markdown">vue-meditor Github 仓库</a></li></ul></div><span id="more"></span><p><code>vue-markdown</code> 是一款使用 <code>marked</code> 和 <code>highlight.js</code> 开发的一款 MarkDown 编辑器，主要包括三个部分：</p><ul><li>简单版编辑器，左侧文本输入框使用 <code>textarea</code> 实现</li><li>专业版编辑器，左侧输入框使用 <code>codemirror</code> 实现</li><li> MarkDown 预览组件，可单独使用</li></ul><h3 id="显示效果图"><a href="#显示效果图" class="headerlink" title="显示效果图"></a>显示效果图</h3><p><img data-src="../../../asset/2022/02/vue-meditor-preview-1.png"><br><img data-src="../../../asset/2022/02/vue-meditor-preview-2.png"><br><img data-src="../../../asset/2022/02/vue-meditor-preview-3.png"></p><h2 id="vue-meditor-使用"><a href="#vue-meditor-使用" class="headerlink" title="vue-meditor 使用"></a>vue-meditor 使用</h2><h3 id="使用-NPM-安装"><a href="#使用-NPM-安装" class="headerlink" title="使用 NPM 安装"></a>使用 NPM 安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$ npm</span> i<span class="params"> -S</span> vue-meditor</span><br></pre></td></tr></tbody></table></figure><h3 id="在项目中引入组件"><a href="#在项目中引入组件" class="headerlink" title="在项目中引入组件"></a>在项目中引入组件</h3><p>在 Vue 页面中引入 <code>vue-meditor</code> 的预览组件 <code>MarkdownPreview</code>，完整示例代码如下，编辑器的完整基本属性可查阅 <a href="https://zhaoxuhui1122.github.io/vue-markdown-docs/props.html">官方文档</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"markdown"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MarkdownPreview</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">v-model</span>=<span class="string">"content"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:height</span>=<span class="string">"1024"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:isPreview</span>=<span class="string">true</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:bordered</span>=<span class="string">false</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:copyCode</span>=<span class="string">true</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">theme</span>=<span class="string">"oneDark"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> MarkdownPreview <span class="keyword">from</span> <span class="string">'vue-meditor'</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>: <span class="string">'markdown'</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    data () {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">content</span>: <span class="string">''</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    },</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>: {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      MarkdownPreview</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    },</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    created () {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 读取本地的Markdown文件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$http.get(<span class="string">'/static/guide/start.md'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (response.data) {</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.content = response.data</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      })</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    }</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  }</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>值得一提的是，<code>/static/guide/start.md</code> 是 Vue 项目根目录下 MarkDown 文件的路径，上面的代码通过 HTTP 请求去读取 Markdown 文件，这样的优势是可以实时预览 MarDown 文件的内容。</p><h3 id="最终实现的效果图"><a href="#最终实现的效果图" class="headerlink" title="最终实现的效果图"></a>最终实现的效果图</h3><p><img data-src="../../../asset/2022/02/vue-meditor-preview-4.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/xingmeiok/article/details/103862369">Vue 使用 MarkDown</a></li><li><a href="https://www.appblog.cn/2018/06/12/Vue%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0md%E6%96%87%E4%BB%B6/">Vue 读取本地 MarkDown 文件</a></li><li><a href="https://www.cnblogs.com/ChineseLiao/p/11079080.html">Vue 读取展示 MarkDown 文件</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 Vue 页面如何读取并展示 MarkDown 文件，包括 MarkDown 编辑器 vue-meditor 的使用。</summary>
    
    
    
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>近期学习计划</title>
    <link href="https://www.techgrow.cn/posts/860c6c02.html"/>
    <id>https://www.techgrow.cn/posts/860c6c02.html</id>
    <published>2022-02-16T14:38:21.000Z</published>
    <updated>2022-08-07T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误, 请重新输入." data-whm="文章校验失败, 但不影响阅读解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d18890314f6ef8b8acb70d49070c282d6c5af04754c14516dafebe18d5b1ba8a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="请 输 入 阅 读 密 码.">请 输 入 阅 读 密 码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文主要记录近期开发相关的学习计划。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="加密博客" scheme="https://www.techgrow.cn/tags/%E5%8A%A0%E5%AF%86%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>CTP 开发随笔</title>
    <link href="https://www.techgrow.cn/posts/790d6d80.html"/>
    <id>https://www.techgrow.cn/posts/790d6d80.html</id>
    <published>2022-02-09T13:55:35.000Z</published>
    <updated>2022-02-09T13:55:35.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="API-版本升级"><a href="#API-版本升级" class="headerlink" title="API 版本升级"></a>API 版本升级</h2><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://blog.csdn.net/pjjing/article/details/101260440">CTP API 版本说明</a></li><li><a href="http://www.sfit.com.cn/5_2_DocumentDown_2.htm">CTP API 各版本官方下载</a></li><li>下面将以 v6.3.15 版本升级到 v6.6.1_P1 版本举例，同样适用于将 v6.3.19_P1 版本升级到 v6.6.1_P1</li></ul></div><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>从官网下载 <a href="http://www.sfit.com.cn/5_2_DocumentDown_2.htm">v6.6.1_P1_20210406</a> 版本的 API，然后解压并将 <code>.h</code> 头文件和 <code>.DLL</code> 文件拷贝到 C/C++ 项目里；也就是说，将原有的 API 文件替换掉即可。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p><code>v6.6.1_P1</code> 相比 <code>v6.3.15</code>，其中一个不同的地方，就是函数里的结构体名称更改了。因此需要在 IDE 里全局将 <code>CThostFtdcQueryMaxOrderVolumeField</code> 替换为 <code>CThostFtdcQryMaxOrderVolumeField</code>，同时将 <code>ReqQueryMaxOrderVolume</code> 替换为 <code>ReqQryMaxOrderVolume</code>。</p><span id="more"></span><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>由于 <code>v6.6.1_P1</code> 版本新增了一些函数，若项目的代码是基于官方的 Demo 进行二次开发的，那么则需要在下述的 C++ 源文件末尾追加以下代码：</p><ul><li>traderApi.h</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///请求查询分类合约</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">ReqQryClassifiedInstrument</span><span class="params">(CThostFtdcQryClassifiedInstrumentField *pQryClassifiedInstrument, <span class="keyword">int</span> nRequestID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///请求组合优惠比例</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">ReqQryCombPromotionParam</span><span class="params">(CThostFtdcQryCombPromotionParamField *pQryCombPromotionParam, <span class="keyword">int</span> nRequestID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///投资者风险结算持仓查询</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">ReqQryRiskSettleInvstPosition</span><span class="params">(CThostFtdcQryRiskSettleInvstPositionField *pQryRiskSettleInvstPosition, <span class="keyword">int</span> nRequestID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///风险结算产品查询</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">ReqQryRiskSettleProductStatus</span><span class="params">(CThostFtdcQryRiskSettleProductStatusField *pQryRiskSettleProductStatus, <span class="keyword">int</span> nRequestID)</span></span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>traderApi.cpp</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CTraderApi::ReqQryClassifiedInstrument</span><span class="params">(CThostFtdcQryClassifiedInstrumentField *pQryClassifiedInstrument, <span class="keyword">int</span> nRequestID)</span> </span>{</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CTraderApi::ReqQryCombPromotionParam</span><span class="params">(CThostFtdcQryCombPromotionParamField *pQryCombPromotionParam, <span class="keyword">int</span> nRequestID)</span> </span>{</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CTraderApi::ReqQryRiskSettleInvstPosition</span><span class="params">(CThostFtdcQryRiskSettleInvstPositionField *pQryRiskSettleInvstPosition, <span class="keyword">int</span> nRequestID)</span> </span>{</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CTraderApi::ReqQryRiskSettleProductStatus</span><span class="params">(CThostFtdcQryRiskSettleProductStatusField *pQryRiskSettleProductStatus, <span class="keyword">int</span> nRequestID)</span> </span>{</span><br><span class="line"></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要介绍 CTP 开发中常遇到的问题。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    <category term="量化交易" scheme="https://www.techgrow.cn/tags/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
  </entry>
  
  <entry>
    <title>初探最流行的前端低代码平台</title>
    <link href="https://www.techgrow.cn/posts/65ee20c1.html"/>
    <id>https://www.techgrow.cn/posts/65ee20c1.html</id>
    <published>2022-01-25T12:23:30.000Z</published>
    <updated>2022-01-25T12:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="readmore-container"><!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2022 年，“低代码” 成了热门的话题，各大云厂商都在这个领域发力。那么作为普通的企业，是否也可以深度定制一套自己的 “低代码” 平台呢？</p><h2 id="云厂商的低代码平台"><a href="#云厂商的低代码平台" class="headerlink" title="云厂商的低代码平台"></a>云厂商的低代码平台</h2><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p>阿里云推出了易搭，通过简单的拖拽、配置，即可完成业务应用的搭建。旨在为广大中小企业提供一套低成本的企业应用搭建解决方案。应用无缝植入钉钉企业工作台，随时随地、高效协同。</p><span id="more"></span><p><img data-src="../../../asset/2022/01/frontend-low-code-1.png" alt="frontend-low-code-1"></p><h3 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h3><p>腾讯云则是推出了微搭，通过行业化模板、拖放式组件和可视化配置快速构建多端应用（小程序、H5 应用、Web 应用等），打通了小程序、云函数。</p><p><img data-src="../../../asset/2022/01/frontend-low-code-2.png" alt="frontend-low-code-2"></p><h2 id="开源的低代码平台"><a href="#开源的低代码平台" class="headerlink" title="开源的低代码平台"></a>开源的低代码平台</h2><h3 id="基础平台"><a href="#基础平台" class="headerlink" title="基础平台"></a>基础平台</h3><h4 id="amis"><a href="#amis" class="headerlink" title="amis"></a>amis</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/baidu/amis">amis GitHub 仓库</a></li><li><a href="https://baidu.gitee.io/amis/zh-CN/docs/index">amis 官方中文文档</a></li></ul></div><p>amis 是一个低代码前端框架，它使用 JSON 配置来生成页面，可以减少页面开发工作量，极大提升效率，由百度团队开源。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-3.png" alt="frontend-low-coder-3"></p><p><strong>用 JSON 写页面的好处</strong></p><p>为了实现用最简单方式来生成大部分页面，amis 的解决方案是基于 JSON 来配置，它的独特好处是：</p><ul><li>不需要懂前端：在百度内部，大部分 amis 用户之前从来没写过前端页面，也不会 <code>JavaScript</code>，却能做出专业且复杂的后台界面，这是所有其他前端 UI 库都无法做到的；</li><li>不受前端技术更新的影响：百度内部最老的 amis 页面是 6 年多前创建的，至今还在使用，而当年的 <code>Angular/Vue/React</code> 版本现在都废弃了，当年流行的 <code>Gulp</code> 也被 <code>Webpack</code> 取代了，如果这些页面不是用 amis，现在的维护成本会很高；</li><li>享受 amis 的不断升级：amis 一直在提升细节交互体验，比如表格首行冻结、下拉框大数据下不卡顿等，之前的 JSON 配置完全不需要修改；</li><li>可以完全使用 <a href="https://aisuda.github.io/amis-editor-demo/">可视化页面编辑器</a> 来制作页面；一般前端可视化编辑器只能用来做静态原型，而 amis 可视化编辑器做出的页面是可以直接上线的。</li></ul><p><strong>amis 的其它亮点</strong></p><ul><li>提供完整的界面解决方案：其它 UI 框架必须使用 JavaScript 来组装业务逻辑，而 amis 只需 JSON 配置就能完成完整功能开发，包括数据获取、表单提交及验证等功能，做出来的页面不需要经过二次开发就能直接上线；</li><li>大量内置组件（120+），一站式解决：其它 UI 框架大部分都只有最通用的组件，如果遇到一些稍微不常用的组件就得自己找第三方，而这些第三方组件往往在展现和交互上不一致，整合起来效果不好，而 amis 则内置大量组件，包括了富文本编辑器、代码编辑器、diff、条件组合、实时日志等业务组件，绝大部分中后台页面开发只需要了解 amis 就足够了；</li><li>支持扩展：除了低代码模式，还可以通过 <a href="./extend/internal">自定义组件</a> 来扩充组件，实际上 amis 可以当成普通 UI 库来使用，实现 90% 低代码，10% 代码开发的混合模式，既提升了效率，又不失灵活性；</li><li>容器支持无限级嵌套：可以通过嵌套来满足各种布局及展现需求；</li><li>经历了长时间的实战考验：amis 在百度内部得到了广泛使用，在 6 年多的时间里创建了 5 万页面，从内容审核到机器管理，从数据分析到模型训练，amis 满足了各种各样的页面需求，最复杂的页面有超过 1 万行 JSON 配置。</li></ul><p><strong>amis 不适合做什么</strong></p><p>使用 JSON 有优点但也有明显缺点，在以下场合并不适合 amis：</p><ul><li>大量定制 UI：JSON 配置使得 amis 更适合做有大量常见 UI 组件的页面，但对于面向普通客户（toC）的页面，往往追求个性化的视觉效果，这种情况下用 amis 就不合适，实际上绝大部分前端 UI 组件库也都不适合，只能定制开发。</li><li>极为复杂或特殊的交互：<ul><li>有些复杂的前端功能，比如 可视化编辑器，其中有大量定制的拖拽操作，这种需要依赖原生 DOM 实现的功能无法使用 amis。</li><li>但对于某些交互固定的领域，比如图连线，amis 后续会有专门的组件来实现。</li></ul></li></ul><h4 id="mometa"><a href="#mometa" class="headerlink" title="mometa"></a>mometa</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/imcuttle/mometa">mometa GitHub 仓库</a></li></ul></div><p>mometa 是一款面向研发的低代码元编程，代码可视编辑，辅助编码工具。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-5.png" alt="frontend-low-coder-5"></p><p><strong>背景</strong></p><p>mometa 不是传统主流的低代码平台（如 amis / 云凤蝶），mometa 是面向研发的、代码可视设计编辑平台，它更像是 dreamweaver、gui 可视编辑之于程序员。</p><p><strong>特性</strong></p><ul><li>面向研发的代码可视化编辑，直接作用于源码<ul><li>响应式布局、路由模拟、物料预览</li><li>反向定位（视图定位源码）</li><li>拖拽插入物料</li><li>拖拽移动</li><li>上下移动</li><li>删除</li><li>替换</li><li>层级选择</li></ul></li><li>接入友好，Webpack&gt;=4 插件化接入</li><li>开发友好，物料库支持热更新，不破坏已有开发模式</li><li>开放物料生态，可定制团队内物料库，见 <a href="https://github.com/imcuttle/mometa-mat">mometa-mat</a></li><li> 多语言、多生态支持，目前暂只支持 React，后续有计划支持 Vue</li></ul><p><strong>解决的问题</strong></p><ul><li>对低代码平台不形成依赖，二次开发可以无缝进入代码开发模式</li><li>同时支持所见即所得的可视编辑，用于提效，提升开发体验</li><li>提供物料生态，可自定义物料，提升物料使用体验，提升复用率</li></ul><p>mometa 定位更多是基于程序员本地开发的模式，新增了可视化编码的能力（修改的也是本地的代码文件本身）。它更像是辅助编码工具，而不是 No-Code (amis / 云凤蝶) 的平台方案。</p><h4 id="Sortable"><a href="#Sortable" class="headerlink" title="Sortable"></a>Sortable</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/SortableJS/Sortable">Sortable GitHub 仓库</a></li></ul></div><p>Sortable 是一个用于可重新排序的拖放列表的 JavaScript 库，可实现适用于现代浏览器和触摸设备的可重新排序的拖放列表，不需要依赖 jQuery 或框架。</p><h3 id="H5-开发"><a href="#H5-开发" class="headerlink" title="H5 开发"></a>H5 开发</h3><h4 id="H5-Dooring"><a href="#H5-Dooring" class="headerlink" title="H5-Dooring"></a>H5-Dooring</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/MrXujiang/h5-Dooring">H5-Dooring GitHub 仓库</a></li><li><a href="https://github.com/MrXujiang/h5-Dooring/wiki">H5-Dooring 官方 Wiki</a></li></ul></div><p>H5-Dooring 是一款功能强大，专业可靠的 H5 可视化页面配置解决方案，致力于提供一套简单方便、专业可靠、无限可能的 H5 落地页最佳实践。技术栈以 React 和 Typescript 为主， 后台采用 Nodejs 开发，正在探索 h5-lowcode 解决方案。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-4.png" alt="frontend-low-coder-4"></p><h4 id="luban-h5"><a href="#luban-h5" class="headerlink" title="luban-h5"></a>luban-h5</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/ly525/luban-h5">luban-h5 GitHub 仓库</a></li><li><a href="https://ly525.github.io/luban-h5/zh/">luban-h5 官方中文文档</a></li><li><a href="https://h5.luban-h5.com/">luban-h5 在线 Demo 演示</a></li></ul></div><p>鲁班 H5 是基于 Vue2.0 开发，通过拖拽快速生成页面的平台，类似 <a href="http://www.eqxiu.com/">易企秀</a>、<a href="http://maka.im/">Maka</a>、<a href="https://h5.baidu.com/">百度 H5</a> 等平台。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-6.png" alt="frontend-low-coder-6"></p><h4 id="quark-h5"><a href="#quark-h5" class="headerlink" title="quark-h5"></a>quark-h5</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li><a href="https://github.com/huangwei9527/quark-h5">quark-h5 GitHub 仓库</a></li></ul></div><p>quark-h5 是一款基于 Vue2 + Koa2 的 H5 页面可视化制作工具，让不会写代码的人也能轻松快速上手制作 H5 页面。类似易企秀、百度 H5 等 H5 制作、建站工具。</p><p><img data-src="../../../asset/2022/01/frontend-low-coder-7.png" alt="frontend-low-coder7"></p><h4 id="其他开源项目"><a href="#其他开源项目" class="headerlink" title="其他开源项目"></a>其他开源项目</h4><ul><li><a href="https://github.com/yangyuji/h5-factory">h5-factory</a>：H5 页面制作，移动端专题活动页面可视化编辑 </li><li><a href="https://github.com/lzuntalented/lz-h5-edit">lz-h5-edit</a>：随心秀（React 版 H5 微场景编辑器)，一款类似易企秀、兔展的 H5 微场景编辑器 </li><li><a href="https://github.com/buqiyuan/vite-vue3-lowcode">vite-vue3-lowcode</a>：移动端低代码平台，实现了可视化拖拽、可视化编辑器，类似易企秀的 H5 制作、建站工具、可视化搭建工具；</li></ul><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul><li><a href="https://mp.weixin.qq.com/s/uWLwjJ-fjDL2BR2i7aebVw">云凤蝶低代码之路</a></li><li><a href="https://www.cnblogs.com/caicz/p/15189383.html">搭建自己的低代码平台</a></li><li><a href="https://zhuanlan.zhihu.com/p/90746742">云凤蝶可视化搭建的推导与实现</a></li><li><a href="https://juejin.im/post/6844903992426758152">Vue + Koa 从零打造一个 H5 页面可视化编辑器 - quark-h5</a></li><li><a href="https://juejin.cn/post/6895715094257205261">基于 Koa2 打造属于自己的 MVC 框架，仿 Egg 的简易版本</a></li></ul></div><link rel="stylesheet" type="text/css" href="https://qiniu.techgrow.cn/readmore/dist/hexo.css"><script src="https://qiniu.techgrow.cn/readmore/dist/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {try {var plugin = new ReadmorePlugin();plugin.init({"id": "readmore-container","blogId": "96641-5333172926158-056","name": "全栈技术驿站","qrcode": "https://www.techgrow.cn/img/wx_mp_qr.png","keyword": "Tech","lockToc": "yes","type": "hexo","random": "0.9","interval": "30","expires": "365","height": "auto"});} catch(e) {console.warn("readmore plugin occurred error: " + e.name + " | " + e.message);}}</script>]]></content>
    
    
    <summary type="html">本文主要推荐流行的前端低代码平台，包括云厂商和开源的前端低代码平台。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="开源" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
