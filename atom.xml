<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clay 的技术空间</title>
  
  <subtitle>用进废退 | 艺不压身</subtitle>
  <link href="https://www.techgrow.cn/atom.xml" rel="self"/>
  
  <link href="https://www.techgrow.cn/"/>
  <updated>2023-08-01T15:12:42.000Z</updated>
  <id>https://www.techgrow.cn/</id>
  
  <author>
    <name>Clay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot3 基础教程之七基础特性</title>
    <link href="https://www.techgrow.cn/posts/6bcf09.html"/>
    <id>https://www.techgrow.cn/posts/6bcf09.html</id>
    <published>2023-08-01T15:12:42.000Z</published>
    <updated>2023-08-01T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h2><h3 id="自定义-banner"><a href="#自定义-banner" class="headerlink" title="自定义 banner"></a>自定义 banner</h3><p>推荐使用 <a href="https://www.bootschool.net/ascii">Spring Boot Banner 在线生成工具</a>，制作并下载英文 <code>banner.txt</code> 文件，然后将它放到项目的 <code>/src/main/resources</code> 目录下，这样就可以实现应用的个性化启动。</p><h3 id="自定义-SpringApplication"><a href="#自定义-SpringApplication" class="headerlink" title="自定义 SpringApplication"></a>自定义 SpringApplication</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.Banner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication application = <span class="keyword">new</span> SpringApplication(MyApplication.class);</span><br><span class="line">        <span class="comment">// 关闭Banner（此方式的配置优先级较低，低于配置文件）</span></span><br><span class="line">        application.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">        application.run(args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>上面的代码等同于以下配置内容，值得一提的是，配置文件的优先级更高</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭Banner</span></span><br><span class="line"><span class="meta">spring.main.banner-mode</span>=<span class="string">off</span></span><br></pre></td></tr></tbody></table></figure><h3 id="FluentBuilder-API"><a href="#FluentBuilder-API" class="headerlink" title="FluentBuilder API"></a>FluentBuilder API</h3><p>SpringBoot 支持以 Builder 方式构建 <code>SpringApplication</code>，通过 FluentBuilder API 设置应用属性。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.Banner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder()</span><br><span class="line">            .main(MainApplication.class)</span><br><span class="line">            .sources(MainApplication.class)</span><br><span class="line">            .bannerMode(Banner.Mode.OFF) <span class="comment">// 关闭Banner（此方式的配置优先级较低，低于配置文件）</span></span><br><span class="line">            .run(args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Profiles-环境隔离"><a href="#Profiles-环境隔离" class="headerlink" title="Profiles 环境隔离"></a>Profiles 环境隔离</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>Profiles 提供环境隔离能力，支持快速切换开发、测试、生产环境，使用步骤如下：</p><ul><li>1、<code>指定环境</code>：指定哪些组件、配置在哪个环境生效</li><li> 2、<code>激活环境</code>：这个环境对应的所有组件和配置就应该生效</li></ul><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><h4 id="指定环境"><a href="#指定环境" class="headerlink" title="指定环境"></a>指定环境</h4><ul><li>Spring Profiles 提供一种隔离配置的方式，使其仅在特定环境生效</li><li>任何 <code>@Component</code>、<code>@Configuration</code> 或 <code>@ConfigurationProperties</code> 都可以使用 <code>@Profile</code> 注解，来指定自身何时被加载。值得一提的是，Spring 容器中的组件都可以被 <code>@Profile</code> 注解标记。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile({"dev"})</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile({"prod", "test"})</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="环境激活"><a href="#环境激活" class="headerlink" title="环境激活"></a>环境激活</h4><p>在 <code>application.properties</code> 配置文件中，指定需要激活的环境</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></tbody></table></figure><p>或者同时激活多个环境</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev,test</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><ul><li>也可以使用命令行激活环境，如 <code>java -jar xxxx.jar --spring.profiles.active=dev,test</code></li><li>还可以配置默认环境，即不标注 <code>@Profile</code> 注解的组件永远都会生效</li><li>以前默认环境叫 <code>default</code></li><li>自定义默认环境 <code>spring.profiles.default=test</code>，</li><li>不推荐使用自定义默认环境的方式，而是推荐使用激活方式激活指定环境</li></ul></div><h4 id="环境包含"><a href="#环境包含" class="headerlink" title="环境包含"></a>环境包含</h4><p>包含指定的环境，即不管激活哪个环境，包含指定的环境都会生效</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.include</span>=<span class="string">dev</span></span><br></pre></td></tr></tbody></table></figure><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><ul><li>生效的环境 = 激活的环境 / 默认环境 + 包含的环境</li><li>企业项目里面的使用规则<ul><li>基础的配置内容，如 MyBatis、Log 写到包含环境中</li><li>需要动态切换变化的配置内容，如 DataBase、Redis 写到激活的环境中</li></ul></li></ul><h3 id="Profiles-分组"><a href="#Profiles-分组" class="headerlink" title="Profiles 分组"></a>Profiles 分组</h3><p>创建 <code>prod</code> 分组，指定包含的 <code>db</code> 和 <code>mq</code> 配置。当使用命令行激活 <code>java -jar xxx.jar --spring.profiles.active=prod</code> ，就会激活 <code>prod</code> 分组，包括激活 <code>db</code>，<code>mq</code> 的配置文件。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.group.prod</span>=<span class="string">db,mq</span></span><br></pre></td></tr></tbody></table></figure><p>或者使用数组的写法</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.group.prod[0]</span>=<span class="string">db</span></span><br><span class="line"><span class="meta">spring.profiles.group.prod[1]</span>=<span class="string">mq</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Profiles-配置文件"><a href="#Profiles-配置文件" class="headerlink" title="Profiles 配置文件"></a>Profiles 配置文件</h3><ul><li><code>application-{profile}.properties</code> 可以作为指定环境的配置文件</li><li>激活这个环境，对应的配置文件就会生效，最终生效的所有配置如下<ul><li><code>application.properties</code> 主配置文件，任意时候都会生效</li><li><code>application-{profile}.properties</code> 指定环境配置文件，激活指定环境时会生效</li><li>如果发生了配置冲突，默认以激活的环境配置文件为准，即 <code>application-{profile}.properties</code> 的优先级高于 <code>application.properties</code></li></ul></li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><p><code>spring.profiles.default</code>、<code>spring.profiles.active</code>、<code>spring.profiles.include</code> 的配置信息只能写在 <code>application.properties</code> 中，如果写在 <code>application-{profile}.properties</code> 是无效的。</p></div>]]></content>
    
    
    <summary type="html">本文主要记录 SpringBoot 3 的基础教程，包括 Banner 自定义 ，Profiles 环境隔离等内容。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 项目将 Logback 日志写入数据库</title>
    <link href="https://www.techgrow.cn/posts/5217ca97.html"/>
    <id>https://www.techgrow.cn/posts/5217ca97.html</id>
    <published>2023-07-29T15:12:42.000Z</published>
    <updated>2023-07-29T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 SpringBoot 项目如何将 Logback 日志写入 MySQL 数据库，使用各组件的版本如下：</p><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td> SpringBoot</td><td>2.2.6</td></tr><tr><td>Logback</td><td>1.2.3</td></tr><tr><td>Druid</td><td>1.1.9</td></tr></tbody></table><span id="more"></span><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><p>首先手动创建 Logback 所需的三张数据库表，分别是 <code>logging_event</code>、<code>logging_event_property</code>、<code>logging_event_exception</code>，可以通过下述的方式找到创建数据库表的 SQL 脚本文件。</p><p><img data-src="../../../asset/2023/07/springboot-logback-db-1.png"></p><h2 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h2><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/demo?characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Logback-配置"><a href="#Logback-配置" class="headerlink" title="Logback 配置"></a>Logback 配置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JMX 支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jmxConfigurator</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志上下文名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件的目录路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"/tmp/log/demo"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库的连接属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"DATA_SOURCE"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.type"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"JDBC_URL"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.url"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"USER_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"PASSWORD"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.password"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"DRIVER_CLASS_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.driver-class-name"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类与彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>${CONSOLE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到日志文件--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出level为DEBUG日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DEBUG_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志归档 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录DEBUG级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出level为INFO日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录INFO级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出level为WARN日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录WARN级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出level为ERROR日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DataSourceConnectionSource"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"${DATA_SOURCE}"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>${JDBC_URL}<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>${USER_NAME}<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>${PASSWORD}<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>${DRIVER_CLASS_NAME}<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DB"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在上面的配置内容中，最重点的是配置 MySQL 数据库的连接信息和 <code>DBAppender</code>，并引用 <code>DBAppender</code>，如下所示 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库的连接属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"DATA_SOURCE"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.type"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"JDBC_URL"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"USER_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"PASSWORD"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"DRIVER_CLASS_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.datasource.druid.driver-class-name"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出到数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DataSourceConnectionSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"${DATA_SOURCE}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>${JDBC_URL}<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>${USER_NAME}<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>${PASSWORD}<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>${DRIVER_CLASS_NAME}<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用 DBAppender --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>如果只希望记录某个包（如 <code>com.clay.demo</code>）的错误日志信息到 MySQL 数据库，可以参考以下配置内容 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出到数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DataSourceConnectionSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"${DATA_SOURCE}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>${JDBC_URL}<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>${USER_NAME}<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>${PASSWORD}<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>${DRIVER_CLASS_NAME}<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库只记录ERROR级别的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定某个包的日志记录方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.clay.demo"</span> <span class="attr">value</span>=<span class="string">"ERROR"</span>  <span class="attr">additivity</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbackTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(LogbackTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogToSql</span><span class="params">()</span></span>{</span><br><span class="line">        logger.debug(<span class="string">"数据库日志 Debug"</span>);</span><br><span class="line">        logger.info(<span class="string">"数据库日志 Info"</span>);</span><br><span class="line">        logger.warn(<span class="string">"数据库日志 Warn"</span>);</span><br><span class="line">        logger.error(<span class="string">"数据库日志 Error"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Logback 成功将日志信息写入 MySQL 数据库后，<code>logging_event</code> 表的数据如下：</p></blockquote><p><img data-src="../../../asset/2023/07/springboot-logback-db-2.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.freesion.com/article/3147233431/">Logback 将日志写到 MySQL 数据库</a><br><a href="https://blog.csdn.net/sinat_38628764/article/details/121748560">SpringBoot 项目将 Logback 写入数据库</a><br><a href="https://blog.csdn.net/philip502/article/details/105268526/">Logback 指定某一包或者类下日志记录到不同文件中</a></p>]]></content>
    
    
    <summary type="html">本文主要介绍 SpringBoot 项目如何将 Logback 日志写入 MySQL 数据库。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 基础教程之六场景整合</title>
    <link href="https://www.techgrow.cn/posts/b6463873.html"/>
    <id>https://www.techgrow.cn/posts/b6463873.html</id>
    <published>2023-07-22T15:12:42.000Z</published>
    <updated>2023-07-22T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/79ae6590.html">SpringBoot3 基础教程之一快速入门</a></li><li><a href="/posts/e7a270a6.html">SpringBoot3 基础教程之二常规配置</a></li><li><a href="/posts/12fb0f17.html">SpringBoot3 基础教程之三 Web 开发</a></li><li><a href="/posts/223fd9f.html">SpringBoot3 基础教程之四 Web 开发</a></li><li><a href="/posts/1dfe3056.html">SpringBoot3 基础教程之五核心原理</a></li><li><a href="/posts/b6463873.html">SpringBoot3 基础教程之六场景整合</a></li><li><a href="/posts/6bcf09.html">SpringBoot3 基础教程之七基础特性</a></li></ul><h2 id="SSM-整合"><a href="#SSM-整合" class="headerlink" title="SSM 整合"></a>SSM 整合</h2><p>SpringBoot 整合 Spring、Spring MVC、MyBatis，实现对 MySQL 数据库的访问。本章节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-05</code>。</p><span id="more"></span><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img data-src="../../../asset/2023/07/spring-boot3-study-19.png"></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `demo` <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 创建数据库表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user`</span><br><span class="line">(</span><br><span class="line">    `id`         <span class="type">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">'编号'</span>,</span><br><span class="line">    `login_name` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户名称'</span> <span class="keyword">COLLATE</span> <span class="string">'utf8_general_ci'</span>,</span><br><span class="line">    `nick_name`  <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户昵称'</span> <span class="keyword">COLLATE</span> <span class="string">'utf8_general_ci'</span>,</span><br><span class="line">    `passwd`     <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户密码'</span> <span class="keyword">COLLATE</span> <span class="string">'utf8_general_ci'</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 插入测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(login_name, nick_name, passwd) <span class="keyword">VALUES</span> (<span class="string">'zhangsan'</span>, <span class="string">'张三'</span>, <span class="string">'123456'</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="引入依赖项"><a href="#引入依赖项" class="headerlink" title="引入依赖项"></a>引入依赖项</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>在项目的 <code>/src/main/resources</code> 目录下，创建 <code>application.properties</code> 配置文件，添加数据源和 MyBatis 的配置信息（如下）。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/demo?characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定映射文件的路径</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 开启驼峰命名映射</span></span><br><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></tbody></table></figure><h4 id="创建映射文件"><a href="#创建映射文件" class="headerlink" title="创建映射文件"></a>创建映射文件</h4><p>在项目的 <code>/src/main/resources/mapper</code> 目录下，创建 <code>UserMapper.xml</code> 映射文件（如下）。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.clay.boot.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getById"</span> <span class="attr">resultType</span>=<span class="string">"com.clay.boot.domain.User"</span>&gt;</span></span><br><span class="line">        select id, login_name, nick_name, passwd</span><br><span class="line">        from `t_user`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String loginName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String passwd;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="创建映射接口"><a href="#创建映射接口" class="headerlink" title="创建映射接口"></a>创建映射接口</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="创建服务类"><a href="#创建服务类" class="headerlink" title="创建服务类"></a>创建服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.getById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="创建控制器类"><a href="#创建控制器类" class="headerlink" title="创建控制器类"></a>创建控制器类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/user/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> userService.getById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="创建主启动类"><a href="#创建主启动类" class="headerlink" title="创建主启动类"></a>创建主启动类</h4><p>这里需要使用 <code>@MapperScan</code> 注解，指定 <code>Mapper</code> 接口的包扫描路径。值得一提的是，也可以创建独立的 MyBatis 配置类（如 <code>MyBatisConfiguration</code>），然后将 <code>@MapperScan</code> 注解标注在配置类上。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = "com.clay.boot.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><h4 id="SSM-整合流程总结"><a href="#SSM-整合流程总结" class="headerlink" title="SSM 整合流程总结"></a>SSM 整合流程总结</h4><ul><li>1、导入 <code>mybatis-spring-boot-starter</code></li><li>2、配置数据源信息</li><li> 3、配置 MyBatis 的 Mapper 接口扫描与 XML 映射文件扫描</li><li> 4、编写 Bean、Mapper，创建 SQL 映射文件（XML），编写 SQL 语句执行 CRUD 操作，事务等操作依然和 Spring 中的用法一样</li><li> 5、实现的效果<br>  i. 所有 SQL 都可以写在 XML 中<br>  ii. 所有 MyBatis 配置可以写在 <code>application.properties</code> 里面</li></ul><h4 id="JDBC-场景的自动配置"><a href="#JDBC-场景的自动配置" class="headerlink" title="JDBC 场景的自动配置"></a>JDBC 场景的自动配置</h4><ul><li>JDBC 场景的自动配置<ul><li><code>mybatis-spring-boot-starter</code> 导入了 <code>spring-boot-starter-jdbc</code>，JDBC 用于操作数据库的场景</li><li> JDBC 场景的几个自动配置<ul><li><code>org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</code><ul><li>支持数据源的自动配置</li><li>所有和数据源相关的配置都绑定在 <code>DataSourceProperties</code> 配置类</li><li>默认使用 <code>HikariDataSource</code> 数据源</li></ul></li><li><code>org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration</code><ul><li>往容器注册 <code>JdbcTemplate</code>，操作数据库</li></ul></li><li><code>org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration</code></li><li><code>org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration</code><ul><li>基于 XA 二阶提交协议的分布式事务数据源</li></ul></li><li><code>org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration</code><ul><li>支持事务的自动配置</li></ul></li></ul></li><li>拥有的底层能力：数据源、JdbcTemplate、事务处理</li></ul></li></ul><h4 id="MyBatisAutoConfiguration"><a href="#MyBatisAutoConfiguration" class="headerlink" title="MyBatisAutoConfiguration"></a>MyBatisAutoConfiguration</h4><ul><li><code>MyBatisAutoConfiguration</code> 配置了 MyBatis 的整合流程<ul><li><code>mybatis-spring-boot-starter</code> 导入 <code>mybatis-spring-boot-autoconfigure</code>（MyBatis 的自动配置包）</li><li>默认加载两个自动配置类<ul><li><code>org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration</code></li><li><code>org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</code><ul><li>必须在数据源配置好之后才配置</li><li>往容器注册 <code>SqlSessionFactory</code> 组件，用于创建访问数据库的一次会话</li><li>往容器注册 <code>SqlSessionTemplate</code> 组件，用于操作数据库</li></ul></li></ul></li><li> MyBatis 的所有配置绑定在 <code>MybatisProperties</code></li><li>每个 <code>Mapper</code> 接口的代理对象是怎么创建并放到容器中，详见 <code>@MapperScan</code> 的底层源码<ul><li>利用 <code>@Import(MapperScannerRegistrar.class)</code> 批量往容器中注册组件。解析指定的包路径下的每一个类，为每一个 <code>Mapper</code> 接口类创建代理对象，并注册到容器中</li></ul></li></ul></li></ul><div class="admonition note"><p class="admonition-title">如何分析哪个场景导入以后，开启了哪些自动配置类？</p><ul><li>在 <code>spring.boot.autoconfigure</code> 包里面找 <code>classpath:/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件中配置的所有值，就是要开启的自动配置类；但是每个类可能有条件注解，基于条件注解判断哪个自动配置类会生效。</li><li>快速定位生效的自动配置，方法如下：</li></ul></div><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启调试模式，可以详细打印开启了哪些自动配置，Positive（生效的自动配置），Negative（不生效的自动配置）</span></span><br><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="整合其他数据源"><a href="#整合其他数据源" class="headerlink" title="整合其他数据源"></a>整合其他数据源</h3><p>SpringBoot 默认使用 <code>Hikari</code> 作为数据源。</p><h4 id="Druid-数据源"><a href="#Druid-数据源" class="headerlink" title="Druid 数据源"></a>Druid 数据源</h4><p>若希望 MyBatis 使用 <a href="https://github.com/alibaba/druid">Druid</a> 数据源，可以参考以下配置内容。值得一提的是，截止目前为止 Druid 暂时不支持 SpringBoot 3。</p><ul><li>引入 Druid 数据源 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${druid-version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>配置 Druid 数据源 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源基本配置</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://192.168.200.100:3306/demo</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置StatFilter监控</span></span><br><span class="line"><span class="meta">spring.datasource.druid.filter.stat.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.datasource.druid.filter.stat.db-type</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.datasource.druid.filter.stat.log-slow-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.datasource.druid.filter.stat.slow-sql-millis</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置WallFilter防火墙</span></span><br><span class="line"><span class="meta">spring.datasource.druid.filter.wall.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.datasource.druid.filter.wall.db-type</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.datasource.druid.filter.wall.config.delete-allow</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.datasource.druid.filter.wall.config.drop-table-allow</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置监控页，内置监控页面的首页是 /druid/index.html</span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.login-username</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.login-password</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.allow</span>=<span class="string">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 其他 Filter 的配置这里不再演示，目前支持以下 Filter 的配置，详细说明请参考官方文档或者根据 IDE 提示（spring.datasource.druid.filter.*）进行配置</span></span><br><span class="line"><span class="comment"># StatFilter</span></span><br><span class="line"><span class="comment"># WallFilter</span></span><br><span class="line"><span class="comment"># ConfigFilter</span></span><br><span class="line"><span class="comment"># EncodingConvertFilter</span></span><br><span class="line"><span class="comment"># Slf4jLogFilter</span></span><br><span class="line"><span class="comment"># Log4jFilter</span></span><br><span class="line"><span class="comment"># Log4j2Filter</span></span><br><span class="line"><span class="comment"># CommonsLogFilter</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要记录 SpringBoot 3 的基础教程，包括 SSM 整合等内容。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>彩票购买攻略</title>
    <link href="https://www.techgrow.cn/posts/3055749e.html"/>
    <id>https://www.techgrow.cn/posts/3055749e.html</id>
    <published>2023-07-05T14:38:22.000Z</published>
    <updated>2023-07-05T14:38:22.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="彩种的选择"><a href="#彩种的选择" class="headerlink" title="彩种的选择"></a>彩种的选择</h2><p>将中奖奖金按不同的级别进行分类，不同彩种之间的中奖概率是有比较大的差异的，通过分析各类中奖奖金与中奖概率，购买彩票时应该优先选择中奖概率较大的彩种。比如，当你希望得到二十万元的奖金时，应该优先选择购买超级大乐透。</p><h3 id="中奖奖金五百万以上"><a href="#中奖奖金五百万以上" class="headerlink" title="中奖奖金五百万以上"></a>中奖奖金五百万以上</h3><table><thead><tr><th>购买优先级</th><th>彩种</th><th>中奖奖金</th><th>中奖概率</th><th>投注金额</th><th>说明</th></tr></thead><tbody><tr><td> 1</td><td> 快乐 8 （选十）</td><td>~ 5000000（浮动，单注封顶）</td><td>1/8911711</td><td>2 元</td><td>福彩</td></tr><tr><td> 2</td><td> 双色球</td><td> ~ 5000000（浮动）</td><td>1/17721088</td><td>2 元</td><td>福彩</td></tr><tr><td> 3</td><td> 超级大乐透</td><td> ~ 5000000（浮动）</td><td>1/21425712</td><td>2 元</td><td>体彩</td></tr></tbody></table><span id="more"></span><h3 id="中奖奖金二十万以上"><a href="#中奖奖金二十万以上" class="headerlink" title="中奖奖金二十万以上"></a>中奖奖金二十万以上</h3><table><thead><tr><th>购买优先级</th><th>彩种</th><th>中奖奖金</th><th>中奖概率</th><th>投注金额</th><th>说明</th></tr></thead><tbody><tr><td> 1</td><td> 超级大乐透</td><td> ~ 200000（浮动）</td><td>1/1071286</td><td>2 元</td><td>体彩</td></tr><tr><td> 2</td><td> 双色球</td><td> ~ 200000（浮动）</td><td>1/1181406</td><td>2 元</td><td>福彩</td></tr><tr><td> 3</td><td> 快乐 8 （选九）</td><td>300000</td><td>1/1380688</td><td>2 元</td><td>福彩</td></tr></tbody></table><h3 id="中奖奖金五万元以上"><a href="#中奖奖金五万元以上" class="headerlink" title="中奖奖金五万元以上"></a>中奖奖金五万元以上</h3><table><thead><tr><th>购买优先级</th><th>彩种</th><th>中奖奖金</th><th>中奖概率</th><th>投注金额</th><th>说明</th></tr></thead><tbody><tr><td> 1</td><td> 排列五</td><td> 100000</td><td>1/100000</td><td>2 元</td><td>体彩</td></tr><tr><td> 2</td><td> 快乐 8 （选八）</td><td>50000</td><td>1/230115</td><td>2 元</td><td>福彩</td></tr></tbody></table><h3 id="中奖奖金一万元以上"><a href="#中奖奖金一万元以上" class="headerlink" title="中奖奖金一万元以上"></a>中奖奖金一万元以上</h3><table><thead><tr><th>购买优先级</th><th>彩种</th><th>中奖奖金</th><th>中奖概率</th><th>投注金额</th><th>说明</th></tr></thead><tbody><tr><td> 1</td><td> 快乐 8 （选七）</td><td>10000</td><td>1/40979</td><td>2 元</td><td>福彩</td></tr></tbody></table><h3 id="中奖奖金一千元以上"><a href="#中奖奖金一千元以上" class="headerlink" title="中奖奖金一千元以上"></a>中奖奖金一千元以上</h3><table><thead><tr><th>购买优先级</th><th>彩种</th><th>中奖奖金</th><th>中奖概率</th><th>投注金额</th><th>说明</th></tr></thead><tbody><tr><td> 1</td><td> 排列三</td><td> 1040</td><td>1/1000</td><td>2 元</td><td>体彩</td></tr><tr><td> 2</td><td> 快乐 8 （选五）</td><td>1000</td><td>1/1551</td><td>2 元</td><td>福彩</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">本文主要介绍彩票的购买攻略。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="彩票竞猜" scheme="https://www.techgrow.cn/tags/%E5%BD%A9%E7%A5%A8%E7%AB%9E%E7%8C%9C/"/>
    
  </entry>
  
  <entry>
    <title>排列 5 购买攻略</title>
    <link href="https://www.techgrow.cn/posts/50a483da.html"/>
    <id>https://www.techgrow.cn/posts/50a483da.html</id>
    <published>2023-07-03T14:38:21.000Z</published>
    <updated>2023-07-03T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="开奖日期"><a href="#开奖日期" class="headerlink" title="开奖日期"></a>开奖日期</h2><ul><li>开奖时间： 21:25</li><li> 开奖日期： 每天</li><li>截止停售时间： 开奖日期的 21:00</li></ul><h2 id="购买规则"><a href="#购买规则" class="headerlink" title="购买规则"></a>购买规则</h2><p>排列 5 是指从 00000 - 99999 的数字中选取一个 5 位数作为一注投注号码进行投注。每注基本投注金额人民币为 2 元。</p><div class="admonition note"><p class="admonition-title">提示</p><p>体彩排列 5 可以进行多倍投注，投注倍数范围为 2 - 99 倍，单张彩票的投注金额最高不超过 20000 元。</p></div><span id="more"></span><h2 id="购买攻略"><a href="#购买攻略" class="headerlink" title="购买攻略"></a>购买攻略</h2><ul><li>1、购买更多的彩票：这会增加中奖的机会，但是也意味着需要投入更多的资金。</li><li>2、选择冷门号码：冷门号码是指在过去的开奖中出现频率较低的号码，虽然中奖概率较低，但如果中奖可以获得较高的奖金。</li><li>3、使用统计学方法：通过分析历史开奖数据，利用统计学方法预测下一期的中奖号码，例如数学公式、遗漏数据、走势图等。</li><li>4、参加合买：合买是指多人共同购买彩票，增加了中奖的机会，但中奖奖金需要分配给所有参与者。</li><li>5、选择热门号码：热门号码是指在过去的开奖中出现频率较高的号码，可以通过分析历史开奖数据来选择热门号码，但这样的号码也会有很多人选择，导致最终的奖金分配比较平均。</li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><p>彩票是一种纯粹的随机游戏，没有任何策略可以保证中奖。所以，玩彩票应该理性看待，量力而行。</p></div><h2 id="中奖规则"><a href="#中奖规则" class="headerlink" title="中奖规则"></a>中奖规则</h2><p><img data-src="../../../asset/2023/07/ticks_buy_rule_11.png"></p><h2 id="中奖概率"><a href="#中奖概率" class="headerlink" title="中奖概率"></a>中奖概率</h2><p>排列 5 的中奖概率是 1/100000。</p>]]></content>
    
    
    <summary type="html">本文主要介绍排列 5 的购买攻略。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="彩票竞猜" scheme="https://www.techgrow.cn/tags/%E5%BD%A9%E7%A5%A8%E7%AB%9E%E7%8C%9C/"/>
    
  </entry>
  
  <entry>
    <title>排列 3 购买攻略</title>
    <link href="https://www.techgrow.cn/posts/301483de.html"/>
    <id>https://www.techgrow.cn/posts/301483de.html</id>
    <published>2023-07-01T14:38:21.000Z</published>
    <updated>2023-07-01T14:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="开奖日期"><a href="#开奖日期" class="headerlink" title="开奖日期"></a>开奖日期</h2><ul><li>开奖时间： 21:25</li><li> 开奖日期： 每天</li><li>截止停售时间： 开奖日期的 21:00</li></ul><h2 id="购买规则"><a href="#购买规则" class="headerlink" title="购买规则"></a>购买规则</h2><p>排列 3 的投注区分为百位、十位和个位，每一位号码范围为 0 - 9，购彩者需从各位上选出 1 个号码进行投注，也就是从 000 - 999 的数字中选取一个三位数作为一注投注号码进行投注。排列 3 有三种投注方式，分别是 <code>直选</code>、<code>组选 3</code> 和 <code>组选 6</code>。每注基本投注金额人民币为 2 元。</p><span id="more"></span><p><img data-src="../../../asset/2023/07/ticks_buy_rule_8.png"></p><div class="admonition note"><p class="admonition-title">提示</p><p>体彩排列 3 可以进行多倍投注，投注倍数范围为 2 - 99 倍，单张彩票的投注金额最高不超过 20000 元。</p></div><h2 id="购买攻略"><a href="#购买攻略" class="headerlink" title="购买攻略"></a>购买攻略</h2><ul><li>1、购买更多的彩票：这会增加中奖的机会，但是也意味着需要投入更多的资金。</li><li>2、选择冷门号码：冷门号码是指在过去的开奖中出现频率较低的号码，虽然中奖概率较低，但如果中奖可以获得较高的奖金。</li><li>3、使用统计学方法：通过分析历史开奖数据，利用统计学方法预测下一期的中奖号码，例如数学公式、遗漏数据、走势图等。</li><li>4、参加合买：合买是指多人共同购买彩票，增加了中奖的机会，但中奖奖金需要分配给所有参与者。</li><li>5、选择热门号码：热门号码是指在过去的开奖中出现频率较高的号码，可以通过分析历史开奖数据来选择热门号码，但这样的号码也会有很多人选择，导致最终的奖金分配比较平均。</li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><p>彩票是一种纯粹的随机游戏，没有任何策略可以保证中奖。所以，玩彩票应该理性看待，量力而行。</p></div><h2 id="中奖规则"><a href="#中奖规则" class="headerlink" title="中奖规则"></a>中奖规则</h2><p><img data-src="../../../asset/2023/07/ticks_buy_rule_9.png"></p><h2 id="中奖概率"><a href="#中奖概率" class="headerlink" title="中奖概率"></a>中奖概率</h2><p><img data-src="../../../asset/2023/07/ticks_buy_rule_10.png"></p>]]></content>
    
    
    <summary type="html">本文主要介绍排列 3 的购买攻略。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="彩票竞猜" scheme="https://www.techgrow.cn/tags/%E5%BD%A9%E7%A5%A8%E7%AB%9E%E7%8C%9C/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 基础教程之五核心原理</title>
    <link href="https://www.techgrow.cn/posts/1dfe3056.html"/>
    <id>https://www.techgrow.cn/posts/1dfe3056.html</id>
    <published>2023-06-25T15:12:42.000Z</published>
    <updated>2023-06-25T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/79ae6590.html">SpringBoot3 基础教程之一快速入门</a></li><li><a href="/posts/e7a270a6.html">SpringBoot3 基础教程之二常规配置</a></li><li><a href="/posts/12fb0f17.html">SpringBoot3 基础教程之三 Web 开发</a></li><li><a href="/posts/223fd9f.html">SpringBoot3 基础教程之四 Web 开发</a></li><li><a href="/posts/1dfe3056.html">SpringBoot3 基础教程之五核心原理</a></li><li><a href="/posts/b6463873.html">SpringBoot3 基础教程之六场景整合</a></li><li><a href="/posts/6bcf09.html">SpringBoot3 基础教程之七基础特性</a></li></ul><h2 id="依赖管理机制"><a href="#依赖管理机制" class="headerlink" title="依赖管理机制"></a>依赖管理机制</h2><p><img data-src="../../../asset/2023/06/spring-boot3-study-1.png"></p><span id="more"></span><div class="admonition note"><p class="admonition-title">为什么导入 spring-boot-starter-web 后，所有相关的依赖都导入进来了？</p><ul><li>开发什么场景，导入什么场景启动器</li><li> Maven 依赖的传递原则。A -&gt; B -&gt; C，那么 A 就拥有 B 和 C</li><li> 导入场景启动器后，会自动把这个场景的所有核心依赖全部导入进来</li></ul></div><div class="admonition note"><p class="admonition-title">为什么版本号都不用写？</p><ul><li>每个 SpringBoot 项目都有一个父项目 <code>spring-boot-starter-parent</code></li><li><code>parent</code> 的父项目是 <code>spring-boot-dependencies</code></li><li>父项目是版本仲裁中心，会将所有常见 Jar 包的依赖版本都声明好了，比如 <code>mysql-connector-j</code></li></ul></div><div class="admonition note"><p class="admonition-title">如何自定义依赖的版本号？</p><ul><li>第一种方式：直接在当前 Maven 配置文件的 <code>&lt;properties&gt;&lt;/properties&gt;</code> 标签中声明父项目用的版本属性的 Key</li><li> 第二种方式：直接在导入依赖的时候声明版本</li><li>上述两种方式都是利用 Maven 的就近原则特性</li></ul></div><div class="admonition note"><p class="admonition-title">如何导入第三方的 Jar 包</p><ul><li>对于 <code>spring-boot-starter-parent</code> 没有管理的 Jar 包依赖，直接在 Maven 的配置文件中自行声明就可以</li></ul></div><h2 id="自动配置机制"><a href="#自动配置机制" class="headerlink" title="自动配置机制"></a>自动配置机制</h2><h3 id="初步理解"><a href="#初步理解" class="headerlink" title="初步理解"></a>初步理解</h3><ul><li>自动配置 SpringMVC、Tomcat 等<ul><li>导入场景，容器中就会自动配置好这个场景的核心组件</li><li>以前：DispatcherServlet、ViewResolver、CharacterEncodingFilter ….</li><li> 现在：自动配置好的这些组件</li><li>验证：容器中有了什么组件，就具有什么功能 </li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// JDK 10 的新特性，局部变量类型的自动推断</span></span><br><span class="line">        <span class="keyword">var</span> ioc = SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        <span class="comment">// 获取容器中所有组件的名称</span></span><br><span class="line">        String[] names = ioc.getBeanDefinitionNames();</span><br><span class="line">        <span class="comment">// 遍历容器中的所有组件，SpringBoot 把以前需要手动配置的核心组件现在都给自动配置好</span></span><br><span class="line">        <span class="keyword">for</span> (String name : names) {</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>默认的包扫描规则</p><ul><li><code>@SpringBootApplication</code> 注解标注的类就是主程序类</li><li> SpringBoot 只会扫描主程序类所在的包及其下面的子包，即自动的 <code>component-scan</code> 功能</li><li>自定义包的扫描路径<ul><li>第一种方式：<code>@SpringBootApplication(scanBasePackages = "com.clay")</code></li><li>第二种方式：<code>@ComponentScan("com.clay")</code> 直接指定扫描的包路径</li></ul></li></ul></li><li><p>配置默认值</p><ul><li>配置文件的所有配置项是和某个类的对象值进行一一绑定的</li><li>绑定了配置文件中每一项值的类，称为配置属性类</li><li>比如：<ul><li><code>ServerProperties</code> 绑定了所有 Tomcat 服务器有关的配置</li><li><code>MultipartProperties</code> 绑定了所有文件上传相关的配置</li><li>….. 参照 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html">官方文档</a> 或者参照绑定的配置属性类</li></ul></li></ul></li><li><p>按需加载自动配置</p><ul><li>导入场景启动器 <code>spring-boot-starter-web</code></li><li>场景启动器除了会导入相关功能的依赖，还会导入 <code>spring-boot-starter</code>，它是所有 <code>starter</code> 的 <code>starter</code>，是基础核心 <code>starter</code></li><li><code>spring-boot-starter</code> 导入了一个包 <code>spring-boot-autoconfigure</code>，里面都是各种场景的 <code>AutoConfiguration</code> 自动配置类</li><li>虽然全场景的自动配置都在 <code>spring-boot-autoconfigure</code> 这个包中，但并不是全部都默认开启的，导入哪个场景启动器才会开启哪个场景的自动配置</li></ul></li></ul><div class="admonition note"><p class="admonition-title">总结</p><p>导入场景启动器会触发 <code>spring-boot-autoconfigure</code> 这个包的自动配置生效，Spring 的 IOC 容器中就会具有相关场景的功能。</p></div><h3 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h3><div class="admonition note"><p class="admonition-title">思考以下问题</p><ul><li>1、SpringBoot 是怎么实现导一个 <code>starter</code>，写一些简单配置，开发者无需关心整合，应用就能跑起来的？</li><li>2、为什么 Tomcat 的端口号可以配置在 <code>application.properties</code> 中，并且 Tomcat 能启动成功？</li><li>3、导入场景启动器后，哪些自动配置能生效？</li></ul></div><p><img data-src="../../../asset/2023/06/spring-boot3-study-2.png"></p><ul><li><p>导入 Web 开发场景 <code>spring-boot-starter-web</code></p><ul><li>1、场景启动器导入了相关场景的所有依赖，如 <code>spring-boot-starter-json</code>、<code>spring-boot-starter-tomcat</code>、<code>spring-webmvc</code>。</li><li>2、每个场景启动器都引入了一个 <code>spring-boot-starter</code>，即核心场景启动器。</li><li>3、核心场景启动器引入了 <code>spring-boot-autoconfigure</code> 包。</li><li>4、<code>spring-boot-autoconfigure</code> 里面囊括了所有场景的自动配置。</li><li>5、只要 <code>spring-boot-autoconfigure</code> 这个包下的所有类都能生效，那么相当于 SpringBoot 官方写好的整合功能就生效了。</li><li>6、SpringBoot 默认是扫描不到 <code>spring-boot-autoconfigure</code> 下写好的所有配置类（这些配置类给我们做了整合操作），默认只扫描主程序类所在的包及其下面的子包。</li></ul></li><li><p>主程序注解 <code>@SpringBootApplication</code></p><ul><li>1、<code>@SpringBootApplication</code> 由三个注解组成，分别是 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>。</li><li>2、SpringBoot 默认只能扫描自己主程序所在的包及其下面的子包，扫描不到 <code>spring-boot-autoconfigure</code> 包中官方写好的配置类。</li><li>3、<code>@EnableAutoConfiguration</code> 是 SpringBoot 开启自动配置的核心。<ul><li>1、是由 <code>@Import(AutoConfigurationImportSelector.class)</code> 提供核心功能，批量往容器中导入组件。</li><li>2、SpringBoot 启动时会默认加载 142 个配置类，这 142 个配置类是由 <code>spring-boot-autoconfigure</code> 包下的 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件指定。</li><li>3、项目启动的时候利用 <code>@Import</code> 批量导入组件的机制，将 <code>spring-boot-autoconfigure</code> 包下的 142 个 <code>xxxxAutoConfiguration</code> 类导入进来（自动配置类）。</li><li>4、虽然导入了 142 个自动配置类，但并不是这 142 个自动配置类都能生效；每一个自动配置类，都有条件注解 <code>@ConditionalOnxxx</code>，只有条件成立才能生效。</li></ul></li></ul></li><li><p><code>xxxxAutoConfiguration</code> 自动配置类</p><ul><li>1、往容器中使用 <code>@Bean</code> 注册一堆组件</li><li> 2、每个自动配置类都可能有这个注解 <code>@EnableConfigurationProperties(ServerProperties.class)</code>，用来把配置文件中配的指定前缀的属性值封装到 <code>xxxProperties</code> 属性类中。</li><li>3、以 Tomcat 为例，把服务器的所有配置都是以 <code>server</code> 开头的配置都封装到了属性类中。</li><li>4、往容器中放的所有组件的一些核心参数，都来自于 <code>xxxProperties</code> 属性类，它都是和配置文件绑定的。</li><li>5、只需要更改配置文件的值，核心组件的底层参数就能修改。</li><li>6、将精力都用于写业务，全程无需关心各种框架的整合（底层这些整合都写好了，而且也按需生效了）</li></ul></li></ul><div class="admonition note"><p class="admonition-title">自动配置流程的总结</p><ul><li>1、导入 <code>spring-boot-starter-xxxx</code>，会导入 <code>spring-boot-starter</code>，也就会导入 <code>spring-boot-autoconfigure</code> 包。</li><li>2、<code>spring-boot-autoconfigure</code> 包里面有一个文件 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，里面指定了应用启动时所有要加载的自动配置类。</li><li>3、<code>@EnableAutoConfiguration</code> 会自动地将上面文件里写的所有自动配置类都导入进来，同时 <code>xxxAutoConfiguration</code> 是有声明条件注解的，目的是按需加载。</li><li>4、<code>xxxAutoConfiguration</code> 往容器中导入一堆组件，这些组件都是从 <code>xxxProperties</code> 中获取属性值。</li><li>5、<code>xxxProperties</code> 又是和配置文件进行了绑定。</li></ul></div><blockquote><p>最终效果：导入 <code>starter</code>，修改配置文件，就能修改框架的底层行为。</p></blockquote><h2 id="嵌入式容器"><a href="#嵌入式容器" class="headerlink" title="嵌入式容器"></a>嵌入式容器</h2><p>Servlet 容器指的是管理、运行 Servlet 组件（<code>Servlet</code>、<code>Filter</code>、<code>Listener</code>）的环境，一般指 Web 服务器。</p><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><ul><li>SpringBoot 默认使用嵌入的 Tomcat 作为 Servlet 容器</li><li>嵌入式容器的自动配置类是 <code>ServletWebServerFactoryAutoConfiguration</code>，<code>EmbeddedWebServerFactoryCustomizerAutoConfiguration</code></li><li><code>ServletWebServerFactoryAutoConfiguration</code> 自动配置了嵌入式容器场景</li><li>绑定了 <code>ServerProperties</code> 配置类，所有和服务器相关的配置都使用 <code>server</code> 作为开始前缀</li><li><code>ServletWebServerFactoryAutoConfiguration</code> 默认导入了嵌入式的三大服务器，包括 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code><ul><li>导入 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code> 时都有条件注解，系统中有对应的类才会生效（也就是导了包）</li><li>在默认情况下，Tomcat 的配置会生效，SpringBoot 往容器中放了 <code>TomcatServletWebServerFactory</code> 组件</li><li>往容器中放一个 Web 服务器工厂 <code>ServletWebServerFactory</code> 后，可以创建 Web 服务器</li><li> Web 服务器工厂都有一个功能，可以调用 <code>getWebServer()</code> 获取 Web 服务器</li><li><code>TomcatServletWebServerFactory</code> 创建了 Tomcat Web 服务器</li></ul></li><li><code>ServletWebServerApplicationContext</code> IOC 容器在启动的时候，会调用 <code>ServletWebServerFactory</code> 创建 Web 服务器</li><li> Spring 容器刷新（启动）的时候，会预留一个时机，调用 <code>onRefresh()</code> 刷新子容器</li><li><code>refresh()</code> 容器刷新，十二大步的刷新子容器会调用 <code>onRefresh()</code></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRequest.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class="line"><span class="meta">@Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span></span><br><span class="line"><span class="meta">ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span></span><br><span class="line"><span class="meta">ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span></span><br><span class="line"><span class="meta">ServletWebServerFactoryConfiguration.EmbeddedUndertow.class })</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">super</span>.onRefresh();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        createWebServer();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start web server"</span>, ex);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">总结</p><ul><li>Web 场景的 Spring 容器启动，在调用 <code>onRefresh()</code> 的时候，会调用创建 Web 服务器的方法。</li><li>Web 服务器的创建是通过 <code>WebServerFactory</code> 实现的，容器中又会根据条件注解，启动相关的服务器配置，默认 <code>EmbeddedTomcat</code> 会往容器中放一个 <code>TomcatServletWebServerFactory</code> 组件，导致项目启动后，自动创建出 Tomcat 服务器。</li></ul></div><h2 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h2><h3 id="底层原理分析"><a href="#底层原理分析" class="headerlink" title="底层原理分析"></a>底层原理分析</h3><blockquote><p>1、<code>@ResponseBody</code> 的底层由 <code>HttpMessageConverter</code> 处理数据，即标注了 <code>@ResponseBody</code> 的返回值，将会由支持它的 <code>HttpMessageConverter</code> 将数据返回给浏览器。</p></blockquote><ul><li><p>如果 <code>Controller</code> 方法的返回值标注了 <code>@ResponseBody</code> 注解</p><ul><li>请求进来先来到 <code>DispatcherServlet</code> 的 <code>doDispatch()</code> 进行处理</li><li>找到一个 <code>HandlerAdapter</code> 适配器，利用适配器执行目标方法</li><li><code>RequestMappingHandlerAdapter</code> 会执行，调用 <code>invokeHandlerMethod()</code> 来执行目标方法</li><li>在目标方法执行之前，需要准备好两样东西<ul><li><code>HandlerMethodArgumentResolver</code>：参数解析器，确定目标方法的每个参数值</li><li><code>HandlerMethodReturnValueHandler</code>：返回值处理器，确定目标方法的返回值该怎么处理</li></ul></li><li><code>RequestMappingHandlerAdapter</code> 里面的 <code>invokeAndHandle()</code> 真正执行目标方法</li><li>目标方法执行完成，会返回返回值的对象</li><li>去找一个合适的返回值处理器 <code>HandlerMethodReturnValueHandler</code></li><li>最终找到 <code>RequestResponseBodyMethodProcessor</code>，它能处理标注了 <code>@ResponseBody</code> 注解的方法</li><li><code>RequestResponseBodyMethodProcessor</code> 调用 <code>writeWithMessageConverters()</code>，利用 <code>MessageConverter</code> 把返回值输出给浏览器</li></ul></li><li><p><code>HttpMessageConverter</code> 会先进行内容协商</p><ul><li>遍历所有的 <code>MessageConverter</code>，看哪个支持这种内容类型的数据</li><li>默认的 <code>MessageConverter</code> 有<a href="../../../asset/2023/06/spring-boot3-study-10.png">这些</a></li><li>最终因为需要返回 JSON 数据，所以通过 <code>MappingJackson2HttpMessageConverter</code> 输出 JSON 数据</li><li> Jackson 利用 <code>ObjectMapper</code> 把返回值对象写出去</li></ul></li></ul><blockquote><p>2、<code>WebMvcAutoConfiguration</code> 提供了 <a href="../../../asset/2023/06/spring-boot3-study-11.png">6 种</a> 默认的 <code>HttpMessageConverters</code></p></blockquote><ul><li><code>EnableWebMvcConfiguration</code> 通过 <code>addDefaultHttpMessageConverters</code> 添加了默认的 <code>MessageConverter</code>，如下：<ul><li><code>ByteArrayHttpMessageConverter</code>：支持字节数据读写</li><li><code>StringHttpMessageConverter</code>：支持字符串读写</li><li><code>ResourceHttpMessageConverter</code>：支持资源读写</li><li><code>ResourceRegionHttpMessageConverter</code>：支持分区资源写出</li><li><code>AllEncompassingFormHttpMessageConverter</code>：支持表单 XML/JSON 读写</li><li><code>MappingJackson2HttpMessageConverter</code>：支持请求响应体 JSON 读写</li></ul></li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>SpringBoot 提供默认的 <code>MessageConverter</code> 功能有限，仅用于 JSON 或者普通的返回数据。如果需要增加新的内容协商功能，必须添加新的 <code>HttpMessageConverter</code>。</p></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">SpringBoot 3 官方英文文档</a></li><li><a href="https://doc.qzxdp.cn/spring/spring-boot.html">SpringBoot 3 最新中文文档</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要记录 SpringBoot 3 的基础教程，包括核心原理等内容。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 基础教程之四 Web 开发</title>
    <link href="https://www.techgrow.cn/posts/223fd9f.html"/>
    <id>https://www.techgrow.cn/posts/223fd9f.html</id>
    <published>2023-06-21T15:12:42.000Z</published>
    <updated>2023-07-21T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="/posts/79ae6590.html">SpringBoot3 基础教程之一快速入门</a></li><li><a href="/posts/e7a270a6.html">SpringBoot3 基础教程之二常规配置</a></li><li><a href="/posts/12fb0f17.html">SpringBoot3 基础教程之三 Web 开发</a></li><li><a href="/posts/223fd9f.html">SpringBoot3 基础教程之四 Web 开发</a></li><li><a href="/posts/1dfe3056.html">SpringBoot3 基础教程之五核心原理</a></li><li><a href="/posts/b6463873.html">SpringBoot3 基础教程之六场景整合</a></li><li><a href="/posts/6bcf09.html">SpringBoot3 基础教程之七基础特性</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-04</code>。</p><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>国际化的实现步骤如下：</p><ul><li>1、Spring Boot 在类路径根下查找 <code>messages</code> 资源绑定文件，文件名默认为 <code>messages.properties</code></li><li>2、多语言环境可以定义多个资源文件，命名规则为 <code>messages_区域代码.properties</code>，如：<ul><li><code>messages.properties</code>：默认环境</li><li><code>messages_zh_CN.properties</code>：中文环境</li><li><code>messages_en_US.properties</code>：英文环境</li></ul></li><li> 3、在程序中可以自动注入 <code>MessageSource</code> 组件，获取国际化的配置项值</li><li> 4、在页面中可以使用表达式 <code>#{}</code> 获取国际化的配置项值</li></ul><span id="more"></span><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><p>国际化的自动配置可参考 <code>MessageSourceAutoConfiguration</code> 自动配置类。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符集编码</span></span><br><span class="line"><span class="meta">spring.messages.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment"># 资源文件名的前缀</span></span><br><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">messages</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取国际化消息的组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/login")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request)</span> </span>{</span><br><span class="line">        Locale local = request.getLocale();</span><br><span class="line">        <span class="comment">// 通过代码的方式获取国际化配置文件中指定的配置项的值</span></span><br><span class="line">        String login = messageSource.getMessage(<span class="string">"login"</span>, <span class="keyword">null</span>, local);</span><br><span class="line">        log.info(<span class="string">"login: {}"</span>, login);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="路径匹配"><a href="#路径匹配" class="headerlink" title="路径匹配"></a>路径匹配</h2><p>Spring 5.3 之后加入了更多的请求路径匹配的实现策略，以前只支持 <code>AntPathMatcher</code> 策略，现在额外提供了 <code>PathPatternParser</code> 策略（默认），并且支持指定使用哪种策略。</p><h3 id="Ant-风格"><a href="#Ant-风格" class="headerlink" title="Ant 风格"></a>Ant 风格</h3><p>Ant 风格的路径模式语法具有以下规则：</p><ul><li><code>*</code>：表示任意数量的字符。</li><li><code>?</code>：表示任意一个字符。</li><li><code>**</code>：表示任意数量的目录。</li><li><code>{}</code>：表示一个命名的模式占位符。</li><li><code>[]</code>：表示字符集合，例如 <code>[a-z]</code> 表示小写字母。</li></ul><p>Ant 风格的路径模式使用例子：</p><ul><li><code>*.html</code>：匹配任意名称，扩展名为 <code>.html</code> 的文件</li><li><code>/folder1/*/*.java</code>：匹配在 <code>folder1</code> 目录下的任意两级目录下的 <code>.java</code> 文件。</li><li><code>/folder2/**/*.jsp</code>：匹配在 <code>folder2</code> 目录下任意目录深度的 <code>.jsp</code> 文件。</li><li><code>/{type}/{id}.html</code>：匹配任意文件名为 <code>{id}.html</code>，且在任意命名的 <code>{type}</code> 目录下的文件。</li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><ul><li>Ant 风格的路径模式语法中的特殊字符需要转义，如：</li><li>要匹配文件路径中的星号，则需要转义为 <code>\\*</code></li><li>要匹配文件路径中的问号，则需要转义为 <code>\\?</code></li></ul></div><h3 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h3><ul><li><p>AntPathMatcher 与 PathPatternParser</p><ul><li>PathPatternParser 在 jmh 基准测试下，有 6 - 8 倍吞吐量提升，降低了 30% - 40% 空间分配率</li><li> PathPatternParser 兼容 AntPathMatcher 语法，并支持更多类型的路径模式</li><li> PathPatternParser 多段匹配 <code>**</code> 的支持仅允许在模式末尾使用</li></ul></li><li><p> PathPatternParser 路径匹配策略的使用</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/a*/b?/{p1:[a-f]+}/**")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable("p1")</span> String path)</span> </span>{</span><br><span class="line">    log.info(<span class="string">"路径变量： {}"</span>, path);</span><br><span class="line">    <span class="keyword">return</span> request.getRequestURI();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>切换路径匹配策略，<code>ant_path_matcher</code> 是旧版策略，<code>path_pattern_parser</code> 是新版策略 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换路径匹配策略</span></span><br><span class="line"><span class="meta">spring.mvc.pathmatch.matching-strategy</span>=<span class="string">ant_path_matcher</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">总结</p><ul><li>SpringBoot 默认的路径匹配策略是由 PathPatternParser 提供的</li><li>如果路径中间需要有 <code>**</code>，则需要切换为 Ant 风格的路径匹配策略 AntPathMatcher</li></ul></div><h2 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h2><p>内容协商指的是一套系统适配多端数据的返回。</p><p><img data-src="../../../asset/2023/06/spring-boot3-study-8.png"></p><h3 id="多端内容适配"><a href="#多端内容适配" class="headerlink" title="多端内容适配"></a>多端内容适配</h3><h4 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h4><ul><li>基于请求头内容协商（默认开启）<ul><li>客户端向服务端发送请求，携带 HTTP 标准的 Accept 请求头</li><li>客户端的请求头类型：<code>Accept: application/json</code>、<code>Accept: text/xml</code>、<code>Accept: text/yaml</code></li><li>服务端根据客户端请求头期望的数据类型进行动态返回</li></ul></li><li>基于请求参数内容协商（手动开启）<ul><li>发送请求 <code>GET /projects/spring-boot?format=json</code></li><li>匹配到 <code>@GetMapping("/projects/spring-boot")</code></li><li>根据请求参数协商，决定返回哪种数据类型，优先返回 JSON 类型数据</li><li>发送请求 <code>GET /projects/spring-boot?format=xml</code>，优先返回 XML 类型数据</li></ul></li></ul><h4 id="XML-内容协商案例"><a href="#XML-内容协商案例" class="headerlink" title="XML 内容协商案例"></a>XML 内容协商案例</h4><p>这里演示如何在请求同一个接口时，支持根据请求参数返回 JSON 或者 XML 格式的数据。</p><ul><li>引入支持输出 XML 内容的依赖 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>标注 XML 注解 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JacksonXmlRootElement</span>  <span class="comment">// 支持输出 XML 格式的数据</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>编写控制器 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.boot.web.domain.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/person")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加 <span class="doctag">@ResponseBody</span> 注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping("/get")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">get</span><span class="params">()</span> </span>{</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(<span class="number">1L</span>);</span><br><span class="line">        person.setAge(<span class="number">18</span>);</span><br><span class="line">        person.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">        person.setEmail(<span class="string">"aaa@qq.com"</span>);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>开启基于请求参数的内容协商 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启基于请求参数的内容协商功能，此功能默认不开启，默认的参数名为 format</span></span><br><span class="line"><span class="meta">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定内容协商时使用的参数名，默认的参数名为 format</span></span><br><span class="line"><span class="meta">spring.mvc.contentnegotiation.parameter-name</span>=<span class="string">type</span></span><br></pre></td></tr></tbody></table></figure><ul><li>代码测试结果</li></ul><p><img data-src="../../../asset/2023/06/spring-boot3-study-14.png"></p><p><img data-src="../../../asset/2023/06/spring-boot3-study-9.png"></p><div class="admonition note"><p class="admonition-title">提示</p><ul><li>SpringBoot 默认支持接口返回 JSON 数据，因为 Web 场景启动器默认引入了 Jackson 处理 JSON 的包。</li></ul></div><h4 id="配置协商规则与支持类型"><a href="#配置协商规则与支持类型" class="headerlink" title="配置协商规则与支持类型"></a>配置协商规则与支持类型</h4><ul><li>更改内容协商方式 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启基于请求参数的内容协商功能，此功能默认不开启，默认的参数名为 format</span></span><br><span class="line"><span class="meta">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定内容协商时使用的参数名，默认的参数名为 format</span></span><br><span class="line"><span class="meta">spring.mvc.contentnegotiation.parameter-name</span>=<span class="string">type</span></span><br></pre></td></tr></tbody></table></figure><ul><li>大多数 MediaType 都是开箱即用的，也可以自定义内容类型，如：</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mvc.contentnegotiation.media-types.yaml</span>=<span class="string">text/yaml</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自定义内容返回"><a href="#自定义内容返回" class="headerlink" title="自定义内容返回"></a>自定义内容返回</h3><h4 id="YAML-内容协商案例"><a href="#YAML-内容协商案例" class="headerlink" title="YAML 内容协商案例"></a>YAML 内容协商案例</h4><ul><li>引入支持输出 YAML 内容的依赖 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>新增一种媒体类型（MediaType），并开启基于请求参数的内容协商 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增一种媒体类型</span></span><br><span class="line"><span class="meta">spring.mvc.contentnegotiation.media-types.yaml</span>=<span class="string">text/yaml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 开启基于请求参数的内容协商功能，此功能默认不开启，默认的参数名为 format</span></span><br><span class="line"><span class="meta">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定内容协商时使用的参数名，默认的参数名为 format</span></span><br><span class="line"><span class="meta">spring.mvc.contentnegotiation.parameter-name</span>=<span class="string">type</span></span><br></pre></td></tr></tbody></table></figure><ul><li>编写可以支持 YAML 格式数据的 <code>HttpMessageConverter</code></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.yaml.YAMLFactory;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpInputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.AbstractHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotReadableException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotWritableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YamlHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">Object</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">YamlHttpMessageConverter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 指定支持的媒体类型</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> MediaType(<span class="string">"text"</span>, <span class="string">"yaml"</span>, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 初始化YAML工具</span></span><br><span class="line">        YAMLFactory yamlFactory = <span class="keyword">new</span> YAMLFactory().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);</span><br><span class="line">        <span class="keyword">this</span>.objectMapper = <span class="keyword">new</span> ObjectMapper(yamlFactory);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>{</span><br><span class="line">        <span class="comment">// TODO 只处理对象类型，不处理基本类型（如 int）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理方法参数(<span class="doctag">@RequestBody</span>)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">readInternal</span><span class="params">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理方法返回值(<span class="doctag">@ResponseBody</span>)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Object returnValue, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>{</span><br><span class="line">        <span class="keyword">try</span> (OutputStream outputStream = outputMessage.getBody()) {</span><br><span class="line">            <span class="keyword">this</span>.objectMapper.writeValue(outputStream, returnValue);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>添加 <code>HttpMessageConverter</code> 组件，专门负责把返回值对象输出为 YAML 格式的数据 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{</span><br><span class="line">        <span class="comment">// 添加一个支持将返回值对象转为 YAML 格式的 MessageConverter</span></span><br><span class="line">        converters.add(<span class="keyword">new</span> YamlHttpMessageConverter());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>代码测试结果</li></ul><p><img data-src="../../../asset/2023/06/spring-boot3-study-12.png"></p><p><img data-src="../../../asset/2023/06/spring-boot3-study-13.png"></p><h4 id="自定义内容返回总结"><a href="#自定义内容返回总结" class="headerlink" title="自定义内容返回总结"></a>自定义内容返回总结</h4><ul><li>如何自定义内容返回<ul><li> 1、配置媒体类型支持: <code>spring.mvc.contentnegotiation.media-types.yaml=text/yaml</code></li><li>2、编写对应的 <code>HttpMessageConverter</code>，在内部要告诉 SpringBoot 支持的媒体类型</li><li> 3、往容器中放一个 <code>WebMvcConfigurer</code> 组件，并添加自定义的 <code>HttpMessageConverter</code></li></ul></li></ul><h3 id="内容协商原理分析"><a href="#内容协商原理分析" class="headerlink" title="内容协商原理分析"></a>内容协商原理分析</h3><blockquote><p>1、<code>@ResponseBody</code> 的底层由 <code>HttpMessageConverter</code> 处理数据，即标注了 <code>@ResponseBody</code> 的返回值，将会由支持它的 <code>HttpMessageConverter</code> 将数据返回给浏览器。</p></blockquote><ul><li><p>如果 <code>Controller</code> 方法的返回值标注了 <code>@ResponseBody</code> 注解</p><ul><li>请求进来先来到 <code>DispatcherServlet</code> 的 <code>doDispatch()</code> 进行处理</li><li>找到一个 <code>HandlerAdapter</code> 适配器，利用适配器执行目标方法</li><li><code>RequestMappingHandlerAdapter</code> 会执行，调用 <code>invokeHandlerMethod()</code> 来执行目标方法</li><li>在目标方法执行之前，需要准备好两样东西<ul><li><code>HandlerMethodArgumentResolver</code>：参数解析器，确定目标方法的每个参数值</li><li><code>HandlerMethodReturnValueHandler</code>：返回值处理器，确定目标方法的返回值该怎么处理</li></ul></li><li><code>RequestMappingHandlerAdapter</code> 里面的 <code>invokeAndHandle()</code> 真正执行目标方法</li><li>目标方法执行完成，会返回返回值的对象</li><li>去找一个合适的返回值处理器 <code>HandlerMethodReturnValueHandler</code></li><li>最终找到 <code>RequestResponseBodyMethodProcessor</code>，它能处理标注了 <code>@ResponseBody</code> 注解的方法</li><li><code>RequestResponseBodyMethodProcessor</code> 调用 <code>writeWithMessageConverters()</code>，利用 <code>MessageConverter</code> 把返回值输出给浏览器</li></ul></li><li><p><code>HttpMessageConverter</code> 会先进行内容协商</p><ul><li>遍历所有的 <code>MessageConverter</code>，看哪个支持这种内容类型的数据</li><li>默认的 <code>MessageConverter</code> 有<a href="../../../asset/2023/06/spring-boot3-study-10.png">这些</a></li><li>最终因为需要返回 JSON 数据，所以通过 <code>MappingJackson2HttpMessageConverter</code> 输出 JSON 数据</li><li> Jackson 利用 <code>ObjectMapper</code> 把返回值对象写出去</li></ul></li></ul><blockquote><p>2、<code>WebMvcAutoConfiguration</code> 提供了 <a href="../../../asset/2023/06/spring-boot3-study-11.png">6 种</a> 默认的 <code>HttpMessageConverters</code></p></blockquote><ul><li><code>EnableWebMvcConfiguration</code> 通过 <code>addDefaultHttpMessageConverters</code> 添加了默认的 <code>MessageConverter</code>，如下：<ul><li><code>ByteArrayHttpMessageConverter</code>：支持字节数据读写</li><li><code>StringHttpMessageConverter</code>：支持字符串读写</li><li><code>ResourceHttpMessageConverter</code>：支持资源读写</li><li><code>ResourceRegionHttpMessageConverter</code>：支持分区资源写出</li><li><code>AllEncompassingFormHttpMessageConverter</code>：支持表单 XML/JSON 读写</li><li><code>MappingJackson2HttpMessageConverter</code>：支持请求响应体 JSON 读写</li></ul></li></ul><div class="admonition note"><p class="admonition-title">提示</p><p>SpringBoot 提供默认的 <code>MessageConverter</code> 功能有限，仅用于 JSON 或者普通的返回数据。如果需要增加新的内容协商功能，必须添加新的 <code>HttpMessageConverter</code>。</p></div><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><h3 id="模板引擎介绍"><a href="#模板引擎介绍" class="headerlink" title="模板引擎介绍"></a>模板引擎介绍</h3><p>由于 SpringBoot 使用了嵌入式 Servlet 容器，所以 JSP 默认是不能使用的。如果需要服务端页面渲染，优先考虑使用模板引擎技术。</p><p><img data-src="../../../asset/2023/06/spring-boot3-study-15.png"></p><p>SpringBoot 默认包含了以下模板引擎的自动配置，模板引擎的页面默认放在 <code>src/main/resources/templates</code> 目录下。</p><ul><li>FreeMarker</li><li><a href="https://www.thymeleaf.org/">Thymeleaf</a></li><li>Mustache</li><li>Groovy</li></ul><h3 id="Thymeleaf-整合"><a href="#Thymeleaf-整合" class="headerlink" title="Thymeleaf 整合"></a>Thymeleaf 整合</h3><ul><li>引入 Maven 依赖 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>添加配置内容（可选）</li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">check-template-location:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><ul><li>编写 Controller 类，往模板文件中存放值 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">welcome</span><span class="params">(<span class="meta">@RequestParam(name = "name", required = false)</span> String name, Model model)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(name)) {</span><br><span class="line">            name = <span class="string">"Thymeleaf"</span>;</span><br><span class="line">        }</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"welcome"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>编写 HTML 模板页面，显示在 Controller 类中设置的值 </li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${name}"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>浏览器访问 <code>http://127.0.0.1:8080/?name=Peter</code>，显示的页面内容如下：</li></ul><p><img data-src="../../../asset/2023/06/spring-boot3-study-16.png"></p><ul><li>自动配置原理<ul><li>自动配置类是 <code>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration</code></li><li>配置属性绑定在 <code>ThymeleafProperties</code> 中，对应配置文件中以 <code>spring.thymeleaf</code> 开始前缀的内容</li><li>所有的模板页面默认都放在 <code>classpath:/templates</code> 文件夹下</li><li>自动配置实现的默认效果</li><li>所有的模板页面都在 <code>classpath:/templates/</code> 文件夹下面找</li><li>找后缀名为 <code>.html</code> 的模板页面进行渲染</li></ul></li></ul><h3 id="Thymeleaf-基础语法"><a href="#Thymeleaf-基础语法" class="headerlink" title="Thymeleaf 基础语法"></a>Thymeleaf 基础语法</h3><h4 id="核心用法"><a href="#核心用法" class="headerlink" title="核心用法"></a>核心用法</h4><ul><li><code>th:xxx</code>：动态渲染指定的 HTML 标签属性值或者 <code>th</code> 指令（遍历、判断等）<ul><li><code>th:text</code>：渲染 HTML 标签体内的内容</li><li><code>th:utext</code>：渲染 HTML 标签体内的内容，但不会转义，显示为 HTML 原本的样子</li><li><code>th:任意HTML属性</code>：标签指定属性渲染</li><li><code>th:attr</code>：标签任意属性渲染</li><li><code>th:if</code>、<code>th:each</code>：其他 <code>th</code> 指令 </li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"${content}"</span>&gt;</span>原内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"${url}"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"${imgUrl}"</span> <span class="attr">style</span>=<span class="string">"width:300px; height: 200px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:attr</span>=<span class="string">"src=${imgUrl},style=${imgStyle},title=#{logo},alt=#{logo}"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:attr</span>=<span class="string">"src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}"</span> <span class="attr">th:if</span>=<span class="string">"${imgShow}"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>表达式：用来动态取值</p><ul><li><code>${}</code>：变量取值，使用 <code>Model</code> 共享给页面的值都可以直接用 <code>${}</code> 获取</li><li><code>@{}</code>：URL 路径</li><li><code>#{}</code>：国际化消息</li><li><code>~{}</code>：片段引用</li><li><code>*{}</code>：变量选择：需要配合 <code>th:object</code> 绑定对象</li></ul></li><li><p>系统工具 &amp; 内置对象：<a href="https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#appendix-b-expression-utility-objects">官方文档</a></p><ul><li><code>param</code>：请求参数对象</li><li><code>session</code>：Session 对象</li><li><code>application</code>：Application 对象</li><li><code>#execInfo</code>：模板执行信息</li><li><code>#messages</code>：国际化消息</li><li><code>#uris</code>：URI/URL 工具</li><li><code>#conversions</code>：类型转换工具</li><li><code>#dates</code>：日期工具，是 <code>java.util.Date</code> 对象的工具类</li><li><code>#calendars</code>：类似 <code>#dates</code>，只不过是 <code>java.util.Calendar</code> 对象的工具类</li><li><code>#temporals</code>： JDK 8+ 的 <code>java.time API</code> 工具类</li><li><code>#numbers</code>：数字操作工具</li><li><code>#strings</code>：字符串操作</li><li><code>#objects</code>：对象操作</li><li><code>#bools</code>：布尔操作</li><li><code>#arrays</code>：Array 工具</li><li><code>#lists</code>：List 工具</li><li><code>#sets</code>：Set 工具</li><li><code>#maps</code>：Map 工具</li><li><code>#aggregates</code>：集合聚合工具（sum、avg）</li><li><code>#ids</code>：ID 生成工具</li></ul></li></ul><h4 id="语法示例"><a href="#语法示例" class="headerlink" title="语法示例"></a>语法示例</h4><ul><li><p>表达式：</p><ul><li>变量取值：<code>${...}</code></li><li>URL 取值：<code>@{...}</code></li><li>国际化消息：<code>#{...}</code></li><li>变量选择：<code>*{...}</code></li><li>片段引用: <code>~{...}</code></li></ul></li><li><p>常见：</p><ul><li>文本：<code>one text</code>，<code>another one!</code>，…</li><li> 数字：0，34，3.0，12.3，…</li><li> 布尔：<code>true</code>、<code>false</code></li><li>Null：<code>null</code></li><li>变量名：one，sometext，main…</li></ul></li><li><p> 文本操作：</p><ul><li>拼接字符串： <code>+</code></li><li>文本内容替换：<code>| The name is ${name} |</code></li></ul></li><li><p>布尔操作：</p><ul><li>二进制运算： <code>and</code>，<code>or</code></li><li>取反：<code>!</code>，<code>not</code></li></ul></li><li><p>比较运算：</p><ul><li>比较：<code>&gt;</code>，<code>&lt;</code>，<code>&lt;=</code>，<code>&gt;=</code>（<code>gt</code>，<code>lt</code>，<code>ge</code>，<code>le</code>）</li><li>等值运算：<code>==</code>，<code>!=</code>（<code>eq</code>，<code>ne</code>）</li></ul></li><li><p>条件运算：</p><ul><li>if-then： <code>(if)?(then)</code></li><li>if-then-else：<code>(if)?(then):(else)</code></li><li>default：<code>(value)?:(defaultValue)</code></li></ul></li><li><p>特殊语法：</p><ul><li>无操作：<code>_</code></li></ul></li></ul><blockquote><p>以上所有语法都可以嵌套组合</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'User is of type ' + (${user.isAdmin()} ? 'Administrator' : (${user.type} ?: 'Unknown'))</span><br></pre></td></tr></tbody></table></figure><h4 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h4><ul><li>语法：<code>th:each="元素名, 迭代状态 : ${集合}"</code></li><li>迭代状态有以下属性：<ul><li><code>index</code>：当前遍历元素的索引，从 0 开始</li><li><code>count</code>：当前遍历元素的索引，从 1 开始</li><li><code>size</code>：需要遍历元素的总数量</li><li><code>current</code>：当前正在遍历的元素对象</li><li><code>even/odd</code>：是否偶数 / 奇数行</li><li><code>first</code>：是否第一个元素</li><li><code>last</code>：是否最后一个元素 </li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"person : ${persons}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${person.id}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${person.userName}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${person.age}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${person.email}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"person, iterStat : ${persons}"</span> <span class="attr">th:class</span>=<span class="string">"${iterStat.odd} ? 'odd'"</span> <span class="attr">th:index</span>=<span class="string">"${iterStat.index}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${person.id}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${person.userName}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${person.age}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${person.email}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><ul><li>表达式判断 </li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"person : ${persons}"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${person.age &gt;= 18 ? '成年人' : '未成年人'}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>th:if</code> 判断 </li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"@{/comments.html}"</span> <span class="attr">th:if</span>=<span class="string">"${not #lists.isEmpty(prod.comments)}"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>th:switch</code> 判断 </li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"${person.role}"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"pm"</span>&gt;</span>项目经理<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"admin"</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"hr"</span>&gt;</span>HR<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h4><table><thead><tr><th>优先级（值越小优先级越高）</th><th>功能</th><th>属性</th></tr></thead><tbody><tr><td> 1</td><td> 片段包含</td><td><code>th:insert</code>、<code>th:replace</code></td></tr><tr><td>2</td><td> 遍历</td><td><code>th:each</code></td></tr><tr><td>3</td><td> 判断</td><td><code>th:if</code>、<code>th:unless</code>、<code>th:switch</code>、<code>th:case</code></td></tr><tr><td>4</td><td> 定义本地变量</td><td><code>th:object</code>、<code>th:with</code></td></tr><tr><td>5</td><td> 通用方式属性修改</td><td><code>th:attr</code>、<code>th:attrprepend</code>、<code>th:attrappend</code></td></tr><tr><td>6</td><td> 指定属性修改</td><td><code>th:value</code>、<code>th:href</code>、<code>th:src</code> …</td></tr><tr><td>7</td><td> 文本值</td><td><code>th:text</code>、<code>th:utext</code></td></tr><tr><td>8</td><td> 片段指定</td><td><code>th:fragment</code></td></tr><tr><td>9</td><td> 片段移除</td><td><code>th:remove</code></td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"item : ${items}"</span> <span class="attr">th:text</span>=<span class="string">"${item.description}"</span>&gt;</span>Item description here...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="行内写法"><a href="#行内写法" class="headerlink" title="行内写法"></a>行内写法</h4><p>语法：<code>[[...]] or [(...)]</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>[[${session.user.name}]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>等同于</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"${session.user.name}"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="变量选择"><a href="#变量选择" class="headerlink" title="变量选择"></a>变量选择</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"${session.user}"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*{firstName}"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*{lastName}"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*{nationality}"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>等同于</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${session.user.firstName}"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${session.user.lastName}"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${session.user.nationality}"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="模板布局"><a href="#模板布局" class="headerlink" title="模板布局"></a>模板布局</h4><ul><li>模版布局的语法<ul><li>定义模板：<code>th:fragment</code></li><li>引用模板：<code>~{templateName::selector}</code></li><li>插入模板：<code>th:insert</code>、<code>th:replace</code></li></ul></li></ul><div class="admonition note"><p class="admonition-title">提示</p><ul><li>模板布局一般用于实现代码片段的重复使用。</li></ul></div><ul><li>定义模板布局（如 <code>footer.html</code>）</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>引用模板布局（如在 <code>index.html</code> 中引用）</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~{footer :: copy}"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~{footer :: copy}"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>实现的效果（如 <code>index.html</code> 最终的渲染结果）</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Devtools"><a href="#Devtools" class="headerlink" title="Devtools"></a>Devtools</h4><p>SpringBoot 提供了 <code>Devtools</code> 工具用于代码的热加载，首先引入依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>更改 Thymeleaf 的模板页面后，使用快捷键 <code>Ctrl + F9</code> 就可以让页面的更改立即生效。值得一提的是，对于 Java 代码的修改，如果 <code>Devtools</code> 热启动了，可能会引起一些 Bug，且难以排查。</p><h2 id="最新特性"><a href="#最新特性" class="headerlink" title="最新特性"></a>最新特性</h2><h3 id="Problemdetails"><a href="#Problemdetails" class="headerlink" title="Problemdetails"></a>Problemdetails</h3><p><code>Problemdetails</code> 实现了 <a href="https://www.rfc-editor.org/rfc/rfc7807">RFC 7807</a> 规范，用于返回新格式的错误信息。</p><h4 id="源码介绍"><a href="#源码介绍" class="headerlink" title="源码介绍"></a>源码介绍</h4><ul><li><code>ProblemDetailsExceptionHandler</code> 是一个 <code>@ControllerAdvice</code>，用于集中处理系统异常 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "spring.mvc.problemdetails", name = "enabled", havingValue = "true")</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProblemDetailsErrorHandlingConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(ResponseEntityExceptionHandler.class)</span></span><br><span class="line">    <span class="function">ProblemDetailsExceptionHandler <span class="title">problemDetailsExceptionHandler</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProblemDetailsExceptionHandler();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProblemDetailsExceptionHandler</span> <span class="keyword">extends</span> <span class="title">ResponseEntityExceptionHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>ProblemDetailsExceptionHandler</code> 默认可以处理以下异常，如果系统出现以下异常，会被 SpringBoot 以 RFC 7807 规范的方式返回错误数据 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler({</span></span><br><span class="line"><span class="meta">    HttpRequestMethodNotSupportedException.class,</span></span><br><span class="line"><span class="meta">    HttpMediaTypeNotSupportedException.class,</span></span><br><span class="line"><span class="meta">    HttpMediaTypeNotAcceptableException.class,</span></span><br><span class="line"><span class="meta">    MissingPathVariableException.class,</span></span><br><span class="line"><span class="meta">    MissingServletRequestParameterException.class,</span></span><br><span class="line"><span class="meta">    MissingServletRequestPartException.class,</span></span><br><span class="line"><span class="meta">    ServletRequestBindingException.class,</span></span><br><span class="line"><span class="meta">    MethodArgumentNotValidException.class,</span></span><br><span class="line"><span class="meta">    NoHandlerFoundException.class,</span></span><br><span class="line"><span class="meta">    AsyncRequestTimeoutException.class,</span></span><br><span class="line"><span class="meta">    ErrorResponseException.class,</span></span><br><span class="line"><span class="meta">    ConversionNotSupportedException.class,</span></span><br><span class="line"><span class="meta">    TypeMismatchException.class,</span></span><br><span class="line"><span class="meta">    HttpMessageNotReadableException.class,</span></span><br><span class="line"><span class="meta">    HttpMessageNotWritableException.class,</span></span><br><span class="line"><span class="meta">    BindException.class</span></span><br><span class="line"><span class="meta">})</span></span><br></pre></td></tr></tbody></table></figure><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><ul><li>ProblemDetails 功能默认是关闭的，需要手动开启 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mvc.problemdetails.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></tbody></table></figure><ul><li>ProblemDetails 启用后，当 SpringBoot 捕获到异常后，默认会响应 JSON 数据和返回 HTTP 状态码 <code>405</code>，且响应的 Header 是 <code>Content-Type: application/problem+json</code></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"about:blank"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"Method Not Allowed"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">405</span>,</span><br><span class="line">    <span class="attr">"detail"</span>: <span class="string">"Method 'POST' is not supported."</span>,</span><br><span class="line">    <span class="attr">"instance"</span>: <span class="string">"/list"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="函数式-Web"><a href="#函数式-Web" class="headerlink" title="函数式 Web"></a>函数式 Web</h3><p>Spring MVC <code>5.2</code> 以后，允许使用函数式的方式定义 Web 的请求处理流程。</p><div class="admonition note"><p class="admonition-title">Web 请求处理的两种方式</p><ul><li>1、<code>@Controller</code> + <code>@RequestMapping</code>：耦合式（路由和业务耦合）</li><li>2、函数式 Web：分离式（路由和业务分离）</li></ul></div><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>场景：User RESTful - CRUD<ul><li><code>GET /user/1</code>：获取 1 号用户</li><li><code>GET /users</code>：获取所有用户</li><li><code>POST /user</code>：请求体携带 JSON，新增一个用户</li><li><code>PUT /user/1</code>：请求体携带 JSON，修改 1 号用户</li><li><code>DELETE /user/1</code>：删除 1 号用户</li></ul></li></ul><h4 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h4><ul><li><code>RouterFunction</code>：定义路由信息，即发送什么请求，由谁来处理</li><li><code>RequestPredicate</code>：请求方式（如 GET、POST）、请求参数</li><li><code>ServerRequest</code>：封装请求数据</li><li><code>ServerResponse</code>：封装响应数据</li></ul><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><ul><li>实体类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>定义路由信息 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.boot.web.biz.UserBizHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.RequestPredicate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.RequestPredicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.RouterFunction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.RouterFunctions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.ServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestPredicate ACCEPT_ALL = RequestPredicates.accept(MediaType.ALL);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestPredicate ACCEPT_JSON = RequestPredicates.accept(MediaType.APPLICATION_JSON);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">userRoute</span><span class="params">(UserBizHandler userBizHandler)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route()</span><br><span class="line">            .GET(<span class="string">"/user/{id}"</span>, ACCEPT_ALL, userBizHandler::getUser)</span><br><span class="line">            .GET(<span class="string">"/users"</span>, ACCEPT_ALL, userBizHandler::listUser)</span><br><span class="line">            .POST(<span class="string">"/user"</span>, ACCEPT_JSON, userBizHandler::addUser)</span><br><span class="line">            .PUT(<span class="string">"/user/{id}"</span>, ACCEPT_JSON, userBizHandler::updateUser)</span><br><span class="line">            .DELETE(<span class="string">"/user/{id}"</span>, ACCEPT_ALL, userBizHandler::deleteUser)</span><br><span class="line">            .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>业务处理 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.clay.boot.web.domain.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.ServerRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.ServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBizHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse <span class="title">getUser</span><span class="params">(ServerRequest serverRequest)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        Long id = Long.parseLong(serverRequest.pathVariable(<span class="string">"id"</span>));</span><br><span class="line">        User user = <span class="keyword">new</span> User(id, <span class="string">"Peter1"</span>, <span class="string">"peter@gmail.com"</span>, <span class="number">18</span>, <span class="string">"pm"</span>);</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().body(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse <span class="title">listUser</span><span class="params">(ServerRequest serverRequest)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"Peter1"</span>, <span class="string">"peter@gmail.com"</span>, <span class="number">18</span>, <span class="string">"pm"</span>));</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"Peter2"</span>, <span class="string">"peter@gmail.com"</span>, <span class="number">16</span>, <span class="string">"admin"</span>));</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">"Peter3"</span>, <span class="string">"peter@gmail.com"</span>, <span class="number">18</span>, <span class="string">"pm"</span>));</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().body(users);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse <span class="title">addUser</span><span class="params">(ServerRequest serverRequest)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        User user = serverRequest.body(User.class);</span><br><span class="line">        log.info(<span class="string">"user save success, {}"</span>, user.toString());</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse <span class="title">deleteUser</span><span class="params">(ServerRequest serverRequest)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        Long id = Long.parseLong(serverRequest.pathVariable(<span class="string">"id"</span>));</span><br><span class="line">        log.info(<span class="string">"user {} delete success"</span>, id);</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse <span class="title">updateUser</span><span class="params">(ServerRequest serverRequest)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        User user = serverRequest.body(User.class);</span><br><span class="line">        Long id = Long.parseLong(serverRequest.pathVariable(<span class="string">"id"</span>));</span><br><span class="line">        log.info(<span class="string">"user {} update success, {}"</span>, id, user.toString());</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要记录 SpringBoot 3 的基础教程，包括国际化、路径匹配、内容协商、Thymeleaf 模板引擎、Web 开发最新特性等内容。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 基础教程之三 Web 开发</title>
    <link href="https://www.techgrow.cn/posts/12fb0f17.html"/>
    <id>https://www.techgrow.cn/posts/12fb0f17.html</id>
    <published>2023-06-16T15:12:42.000Z</published>
    <updated>2023-07-22T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/79ae6590.html">SpringBoot3 基础教程之一快速入门</a></li><li><a href="/posts/e7a270a6.html">SpringBoot3 基础教程之二常规配置</a></li><li><a href="/posts/12fb0f17.html">SpringBoot3 基础教程之三 Web 开发</a></li><li><a href="/posts/223fd9f.html">SpringBoot3 基础教程之四 Web 开发</a></li><li><a href="/posts/1dfe3056.html">SpringBoot3 基础教程之五核心原理</a></li><li><a href="/posts/b6463873.html">SpringBoot3 基础教程之六场景整合</a></li><li><a href="/posts/6bcf09.html">SpringBoot3 基础教程之七基础特性</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-04</code>。</p><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><h3 id="自动配置的原理"><a href="#自动配置的原理" class="headerlink" title="自动配置的原理"></a>自动配置的原理</h3><ul><li>Web 场景的自动配置原理<ul><li> 1、导入 <code>spring-boot-starter-web</code>，会导入 <code>spring-boot-starter</code>，也就会导入 <code>spring-boot-autoconfigure</code> 包。</li><li>2、<code>spring-boot-autoconfigure</code> 包里面有一个文件 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，里面指定了应用启动时所有要加载的自动配置类。</li><li>3、<code>@EnableAutoConfiguration</code> 会自动地将上面文件里写的所有自动配置类都导入进来，同时 <code>xxxAutoConfiguration</code> 是有声明条件注解的，目的是按需加载。</li><li>4、<code>xxxAutoConfiguration</code> 往容器中导入一堆组件，这些组件都是从 <code>xxxProperties</code> 中获取属性值。</li><li>5、<code>xxxProperties</code> 又是和配置文件进行了绑定。</li></ul></li></ul><span id="more"></span><ul><li>Web 场景的所有自动配置类 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Web 场景下配置文件的前缀配置项说明<ul><li> 1、服务器的配置 <code>server</code></li><li>2、Web 场景通用配置 <code>spring.web</code></li><li>3、Spring MVC 的所有配置 <code>spring.mvc</code></li><li>4、文件上传配置 <code>spring.servlet.multipart</code></li></ul></li></ul><h3 id="自动配置的默认效果"><a href="#自动配置的默认效果" class="headerlink" title="自动配置的默认效果"></a>自动配置的默认效果</h3><p>SpringBoot Web 场景自动配置的效果如下：</p><ul><li>支持静态 <code>index.html</code></li><li>支持默认的静态资源处理机制，静态资源放在 <code>static</code> 文件夹下即可直接访问</li><li>包含了 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewResolver</code> 组件，用于视图解析</li><li>自动注册了 <code>Converter</code>，<code>GenericConverter</code>，<code>Formatter</code> 组件，适配了常见的数据类型转换和格式化需求</li><li>支持 <code>HttpMessageConverters</code>，可以方便返回 JSON 等数据类型</li><li>注册 <code>MessageCodesResolver</code>，方便国际化及错误消息处理</li><li>自动使用 <code>ConfigurableWebBindingInitializer</code> 实现消息处理、数据绑定、类型转化、数据校验等功能</li></ul><div class="admonition note"><p class="admonition-title">重点知识</p><ul><li>如果想保持 SpringBoot MVC 的默认配置，并且自定义更多的 MVC 配置（如 interceptors，formatters，view controllers 等），可以使用 <code>@Configuration</code> 标注一个配置类，让配置类实现 <code>WebMvcConfigurer</code> 接口，并不要使用 <code>@EnableWebMvc</code> 注解。</li><li>如果想保持 SpringBoot MVC 的默认配置，但要自定义核心组件的实例（如 <code>RequestMappingHandlerMapping</code>，<code>RequestMappingHandlerAdapter</code>，<code>ExceptionHandlerExceptionResolver</code>），往容器中放一个 <code>WebMvcRegistrations</code> 组件，并不要使用 <code>@EnableWebMvc</code> 注解。</li><li>如果想全面接管 SpringBoot MVC 的配置，可以使用 <code>@Configuration</code> 标注一个配置类，让配置类实现 <code>WebMvcConfigurer</code> 接口，并加上 <code>@EnableWebMvc</code> 注解即可。</li></ul></div><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><h3 id="默认静态资源规则"><a href="#默认静态资源规则" class="headerlink" title="默认静态资源规则"></a>默认静态资源规则</h3><h4 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h4><p>静态资源映射规则都在 <code>WebMvcAutoConfiguration</code> 自动配置类中进行了定义。</p><ul><li>访问 <code>/webjars/**</code> 路径就会去 <code>classpath:/META-INF/resources/webjars/</code> 下找资源，一般用于访问通过 Maven 引入的第三方前端组件（如 Vue、Bootstrap）</li><li>访问 <code>/**</code> 路径就会去静态资源默认的四个位置找资源，包括 <code>classpath:/META-INF/resources/</code>、<code>classpath:/resources/</code>、<code>classpath:/static/</code>、<code>classpath:/public/</code></li></ul><h4 id="静态资源缓存"><a href="#静态资源缓存" class="headerlink" title="静态资源缓存"></a>静态资源缓存</h4><p>所有静态资源都定义了缓存规则，浏览器访问过一次，就会缓存一段时间，但此功能的参数无默认值。</p><ul><li><code>cachePeriod</code>：缓存周期，多久不用找服务器要新的，默认值 0s，以秒为单位</li><li><code>cacheControl</code>： HTTP 缓存控制，参照 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">Mozilla 文档</a></li><li><code>useLastModified</code>：是否使用 <code>Last-Modified</code> 头，默认值 <code>false</code>，配合 HTTP Cache 规则使用</li><li>所有缓存参数的配置，都可以通过配置文件里的 <code>spring.web</code> 前缀配置项指定（如下）</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存周期（秒）</span></span><br><span class="line"><span class="meta">spring.web.resources.cache.period</span>=<span class="string">3600</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># HTTP 缓存控制（秒），浏览器第一次请求服务器时，服务器会告诉浏览器此资源缓存7200秒，即7200秒以内访问此资源的所有请求都不会发送给服务器</span></span><br><span class="line"><span class="meta">spring.web.resources.cache.cachecontrol.max-age</span>=<span class="string">7200</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否使用 Last-Modified 头，对比服务器和浏览器的资源是否有变化，如果资源没有变化，服务器会返回304码，此时浏览器会使用本地缓存中的资源</span></span><br><span class="line"><span class="meta">spring.web.resources.cache.use-last-modified</span>=<span class="string">true</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Favicon-图标"><a href="#Favicon-图标" class="headerlink" title="Favicon 图标"></a>Favicon 图标</h4><ul><li>在默认的四个静态资源路径下查找 <code>favicon.ico</code></li></ul><h4 id="欢迎页面"><a href="#欢迎页面" class="headerlink" title="欢迎页面"></a>欢迎页面</h4><p>欢迎页面的映射规则在 <code>WebMvcAutoConfiguration</code> 中进行了定义：</p><ul><li>首先会在默认的四个静态资源路径下查找 <code>index.html</code></li><li>如果静态资源路径下找不到，就会在 <code>templates</code> 目录下找 <code>index</code> 模板页面</li></ul><h3 id="自定义静态资源规则"><a href="#自定义静态资源规则" class="headerlink" title="自定义静态资源规则"></a>自定义静态资源规则</h3><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><ul><li><code>spring.mvc</code>：配置静态资源访问路径的前缀</li><li><code>spring.web</code>：配合静态资源目录、静态资源策略 (开启映射、处理链、缓存规则)、国际化的区域信息 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义静态资源访问路径的前缀</span></span><br><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 自定义webjars访问路径的前缀</span></span><br><span class="line"><span class="meta">spring.mvc.webjars-path-pattern</span>=<span class="string">/webjars/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 自定义静态资源文件夹的位置</span></span><br><span class="line"><span class="meta">spring.web.resources.static-locations</span>=<span class="string">classpath:/static/,classpath:/public/,classpath:/asset/</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><ul><li>当不使用 <code>spring.mvc.static-path-pattern</code> 自定义静态资源访问路径的前缀时，静态资源默认的访问路径示例是 <code>http://127.0.0.1:8080/backgrond.png</code></li><li>当使用 <code>spring.mvc.static-path-pattern=/static/**</code> 自定义静态资源访问路径的前缀时，静态资源的访问路径示例是 <code>http://127.0.0.1:8080/static/backgrond.png</code></li></ul></div><h4 id="代码方式"><a href="#代码方式" class="headerlink" title="代码方式"></a>代码方式</h4><div class="admonition note"><p class="admonition-title">提示</p><ul><li>如果希望完全禁用 SpringBoot MVC 的自动配置，可以在配置类上添加 <code>@EnableWebMvc</code> 注解，此时相当于采用全手动的方式配置 MVC。</li></ul></div><ul><li>第一种写法：实现 <code>WebMvcConfigurer</code> 接口，同样可以自定义静态资源规则 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.CacheControl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">        <span class="comment">// 保留默认的配置规则，并添加新的配置规则</span></span><br><span class="line">        registry</span><br><span class="line">            <span class="comment">// 自定义静态资源访问路径的前缀</span></span><br><span class="line">            .addResourceHandler(<span class="string">"/static/**"</span>)</span><br><span class="line">            <span class="comment">// 自定义静态资源文件夹的位置</span></span><br><span class="line">            .addResourceLocations(<span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span>, <span class="string">"classpath:/asset/"</span>)</span><br><span class="line">            <span class="comment">// 自定义HTTP缓存控制</span></span><br><span class="line">            .setCacheControl(CacheControl.maxAge(<span class="number">7200</span>, TimeUnit.SECONDS));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>第二种写法：使用 <code>@Bean</code> 注解，定义 <code>WebMvcConfigurer</code> 组件，同样可以自定义静态资源规则 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.CacheControl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">                <span class="comment">// 保留默认的配置规则，并添加新的配置规则</span></span><br><span class="line">                registry</span><br><span class="line">                    <span class="comment">// 自定义静态资源访问路径的前缀</span></span><br><span class="line">                    .addResourceHandler(<span class="string">"/static/**"</span>)</span><br><span class="line">                    <span class="comment">// 自定义静态资源文件夹的位置</span></span><br><span class="line">                    .addResourceLocations(<span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span>, <span class="string">"classpath:/asset/"</span>)</span><br><span class="line">                    <span class="comment">// 自定义HTTP缓存控制</span></span><br><span class="line">                    .setCacheControl(CacheControl.maxAge(<span class="number">7200</span>, TimeUnit.SECONDS));</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="默认机制"><a href="#默认机制" class="headerlink" title="默认机制"></a>默认机制</h3><p>SpringBoot 错误处理的自动配置都在 <code>ErrorMvcAutoConfiguration</code> 中，两大核心机制：</p><ul><li>1、SpringBoot 会自适应处理错误，响应页面或 JSON 数据给客户端</li><li> 2、SpringMVC 的错误处理机制依然保留，SpringMVC 处理不了的，才会交给 SpringBoot 进行处理</li></ul><p><img data-src="../../../asset/2023/06/spring-boot3-study-17.png"></p><ul><li>发生错误以后，请求转发给 <code>/error</code> 路径，SpringBoot 在底层写好一个 <code>BasicErrorController</code> 组件，专门处理这个请求 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回HTML</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>{</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model = Collections</span><br><span class="line">        .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回 ResponseEntity，JSON</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) {</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">    }</span><br><span class="line">    Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>错误页面是这么解析到的 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析错误的自定义视图地址</span></span><br><span class="line">ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="comment">// 如果解析不到错误页面的地址，默认的错误页就是 error</span></span><br><span class="line"><span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br></pre></td></tr></tbody></table></figure><ul><li>容器中专门有一个错误视图解析器 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(DispatcherServlet.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(ErrorViewResolver.class)</span></span><br><span class="line"><span class="function">DefaultErrorViewResolver <span class="title">conventionErrorViewResolver</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorViewResolver(<span class="keyword">this</span>.applicationContext, <span class="keyword">this</span>.resources);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>SpringBoot 解析自定义错误页的默认规则 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>{</span><br><span class="line">    ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) {</span><br><span class="line">        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>{</span><br><span class="line">    String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolveResource</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (String location : <span class="keyword">this</span>.resources.getStaticLocations()) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Resource resource = <span class="keyword">this</span>.applicationContext.getResource(location);</span><br><span class="line">            resource = resource.createRelative(viewName + <span class="string">".html"</span>);</span><br><span class="line">            <span class="keyword">if</span> (resource.exists()) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> HtmlResourceView(resource), model);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) {</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>容器中有一个默认的名为 <code>error</code> 的 View，提供了默认错误页面的功能 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(name = "error")</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = "error")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">defaultErrorView</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.defaultErrorView;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>封装了 JSON 格式的错误信息 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultErrorAttributes <span class="title">errorAttributes</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorAttributes();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>错误页面的解析规则<ul><li> 1、解析一个错误页<ul><li> a. 如果发生了 500、404、503、403 这些错误<ul><li> ⅰ. 如果有模板引擎，模板文件默认在 <code>classpath:/templates/error/精确码.html</code></li><li>ⅱ. 如果没有模板引擎，在静态资源文件夹下找 <code>精确码.html</code></li></ul></li><li>b. 如果匹配不到 <code>精确码.html</code> 这些精确的错误页，就去找 <code>5xx.html</code>，<code>4xx.html</code> 模糊匹配<ul><li> ⅰ. 如果有模板引擎，模板文件默认在 <code>classpath:/templates/error/5xx.html</code></li><li>ⅱ. 如果没有模板引擎，在静态资源文件夹下找  <code>5xx.html</code></li></ul></li></ul></li><li>2、如果模板引擎路径 <code>templates</code> 下有 <code>error.html</code> 页面，就直接渲染并返回给客户端</li></ul></li></ul><h3 id="自定义错误响应"><a href="#自定义错误响应" class="headerlink" title="自定义错误响应"></a>自定义错误响应</h3><ul><li>自定义 JSON 响应，使用 <code>@ControllerAdvice</code> + <code>@ExceptionHandler</code> 进行统一异常处理 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleException</span><span class="params">(Exception exception)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> R.error(exception.getMessage());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>自定义页面响应，根据 SpringBoot 的错误页面解析规则，自定义错误页面。</li></ul><h3 id="错误处理的最佳实践"><a href="#错误处理的最佳实践" class="headerlink" title="错误处理的最佳实践"></a>错误处理的最佳实践</h3><ul><li>前后端分离开发模式<ul><li>后台发生的所有错误，通过 <code>@ControllerAdvice</code> + <code>@ExceptionHandler</code> 进行统一异常处理</li></ul></li><li>前后端不分离模式（服务端模板页面渲染）<ul><li>一些不可预知的错误，如使用 HTTP 码表示的服务器或客户端错误<ul><li>在 <code>classpath:/templates/error/</code> 下面，存放常用精确的错误码页面，如 <code>500.html</code>、<code>404.html</code></li><li>在 <code>classpath:/templates/error/</code> 下面，存放通用模糊匹配的错误码页面，如 <code>5xx.html</code>、<code>4xx.html</code></li></ul></li><li>发生业务错误<ul><li>核心业务的每一种错误，都应该通过代码控制，跳转到定制的错误页</li><li>通用业务，可以通过 <code>classpath:/templates/error.html</code> 错误页面，显示通用的错误信息</li></ul></li></ul></li><li>在模板页面或者服务端返回的 JSON 数据中，可用的 Model 数据如下：</li></ul><p><img data-src="../../../asset/2023/06/spring-boot3-study-18.png"></p><h2 id="嵌入式容器"><a href="#嵌入式容器" class="headerlink" title="嵌入式容器"></a>嵌入式容器</h2><p>Servlet 容器指的是管理、运行 Servlet 组件（<code>Servlet</code>、<code>Filter</code>、<code>Listener</code>）的环境，一般指 Web 服务器。</p><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><ul><li>SpringBoot 默认使用嵌入的 Tomcat 作为 Servlet 容器</li><li>嵌入式容器的自动配置类是 <code>ServletWebServerFactoryAutoConfiguration</code>，<code>EmbeddedWebServerFactoryCustomizerAutoConfiguration</code></li><li><code>ServletWebServerFactoryAutoConfiguration</code> 自动配置了嵌入式容器场景</li><li>绑定了 <code>ServerProperties</code> 配置类，所有和服务器相关的配置都使用 <code>server</code> 作为开始前缀</li><li><code>ServletWebServerFactoryAutoConfiguration</code> 默认导入了嵌入式的三大服务器，包括 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code><ul><li>导入 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code> 时都有条件注解，系统中有对应的类才会生效（也就是导了包）</li><li>在默认情况下，Tomcat 的配置会生效，SpringBoot 往容器中放了 <code>TomcatServletWebServerFactory</code> 组件</li><li>往容器中放一个 Web 服务器工厂 <code>ServletWebServerFactory</code> 后，可以创建 Web 服务器</li><li> Web 服务器工厂都有一个功能，可以调用 <code>getWebServer()</code> 获取 Web 服务器</li><li><code>TomcatServletWebServerFactory</code> 创建了 Tomcat Web 服务器</li></ul></li><li><code>ServletWebServerApplicationContext</code> IOC 容器在启动的时候，会调用 <code>ServletWebServerFactory</code> 创建 Web 服务器</li><li> Spring 容器刷新（启动）的时候，会预留一个时机，调用 <code>onRefresh()</code> 刷新子容器</li><li><code>refresh()</code> 容器刷新，十二大步的刷新子容器会调用 <code>onRefresh()</code></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRequest.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class="line"><span class="meta">@Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span></span><br><span class="line"><span class="meta">ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span></span><br><span class="line"><span class="meta">ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span></span><br><span class="line"><span class="meta">ServletWebServerFactoryConfiguration.EmbeddedUndertow.class })</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">super</span>.onRefresh();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        createWebServer();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start web server"</span>, ex);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">总结</p><ul><li>Web 场景的 Spring 容器启动，在调用 <code>onRefresh()</code> 的时候，会调用创建 Web 服务器的方法。</li><li>Web 服务器的创建是通过 <code>WebServerFactory</code> 实现的，容器中又会根据条件注解，启动相关的服务器配置，默认 <code>EmbeddedTomcat</code> 会往容器中放一个 <code>TomcatServletWebServerFactory</code> 组件，导致项目启动后，自动创建出 Tomcat 服务器。</li></ul></div><h3 id="自定义嵌入式容器"><a href="#自定义嵌入式容器" class="headerlink" title="自定义嵌入式容器"></a>自定义嵌入式容器</h3><ul><li>嵌入式三大容器有 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code>，SpringBoot 默认使用 Tomcat 作为容器。若希望切换到其他容器，只需要更改 Maven 的配置即可，如下所示：</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义Servlet版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-api.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">servlet-api.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 排除Tomcat依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用Undertow容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>最佳实践<ul><li>修改以 <code>server</code> 为开始前缀的相关配置，这样就可以修改服务器参数</li><li>通过往容器中放一个 <code>ServletWebServerFactory</code> 组件，来禁用掉 SpringBoot 默认引入的 Web 服务器工厂，这样就可以实现自定义任意的嵌入服务器。</li></ul></li></ul><h2 id="底层源码浅析"><a href="#底层源码浅析" class="headerlink" title="底层源码浅析"></a>底层源码浅析</h2><h3 id="Web-MVC-自动配置原理"><a href="#Web-MVC-自动配置原理" class="headerlink" title="Web MVC 自动配置原理"></a>Web MVC 自动配置原理</h3><h4 id="自动配置生效的条件"><a href="#自动配置生效的条件" class="headerlink" title="自动配置生效的条件"></a>自动配置生效的条件</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebMvcAutoConfiguration 的底层源码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoConfiguration(after = { DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class })</span> <span class="comment">// 在这些自动配置之后</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span> <span class="comment">// 如果是 Web 应用就生效，类型： SERVLET、REACTIVE</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span> <span class="comment">// 容器中没有这个 Bean 才生效，默认就是没有</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span> <span class="comment">// 优先级</span></span><br><span class="line"><span class="meta">@ImportRuntimeHints(WebResourcesRuntimeHints.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="自动配置实现的效果"><a href="#自动配置实现的效果" class="headerlink" title="自动配置实现的效果"></a>自动配置实现的效果</h4><p>效果一：往容器中放了两个 Filter</p><ul><li><code>HiddenHttpMethodFilter</code>：页面表单提交 REST 请求（支持 GET、POST、PUT、DELETE 方法）</li><li><code>FormContentFilter</code>： 表单内容 Filter，GET（数据放 URL 后面）、POST（数据放请求体）请求可以携带数据，PUT、DELETE 的请求体数据会被忽略</li></ul><p>效果二：往容器中放了 <code>WebMvcConfigurer</code> 组件，给 Spring MVC 添加各种定制功能，所有功能最终都会和配置文件的内容进行绑定</p><ul><li><code>WebMvcProperties</code>： 绑定了以 <code>spring.mvc</code> 为开始前缀的配置项</li><li><code>WebProperties</code>： 绑定了以 <code>spring.web</code> 为开始前缀的配置项</li></ul><h4 id="WebMvcConfigurer-接口"><a href="#WebMvcConfigurer-接口" class="headerlink" title="WebMvcConfigurer 接口"></a>WebMvcConfigurer 接口</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span> <span class="comment">// 额外导入了其他配置</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties({ WebMvcProperties.class, WebProperties.class })</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span>, <span class="title">ServletContextAware</span></span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/06/spring-boot3-study-7.png"></p><h4 id="静态资源映射规则的源码"><a href="#静态资源映射规则的源码" class="headerlink" title="静态资源映射规则的源码"></a>静态资源映射规则的源码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span>, <span class="title">ServletContextAware</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) {</span><br><span class="line">            logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">this</span>.addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getWebjarsPathPattern(), <span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">            <span class="keyword">this</span>.addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; {</span><br><span class="line">                registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.servletContext != <span class="keyword">null</span>) {</span><br><span class="line">                    ServletContextResource resource = <span class="keyword">new</span> ServletContextResource(<span class="keyword">this</span>.servletContext, <span class="string">"/"</span>);</span><br><span class="line">                    registration.addResourceLocations(<span class="keyword">new</span> Resource[]{resource});</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>规则一：访问 <code>/webjars/**</code> 路径就会去 <code>classpath:/META-INF/resources/webjars/</code> 下找资源，一般用于访问通过 Maven 引入的第三方前端组件（如 Vue、Bootstrap）<br>规则二：访问 <code>/**</code> 路径就会去静态资源默认的四个位置找资源，包括 <code>classpath:/META-INF/resources/</code>、<code>classpath:/resources/</code>、<code>classpath:/static/</code>、<code>classpath:/public/</code><br>规则三：静态资源默认都有缓存规则的设置</p><ul><li>所有缓存参数的配置，都可以通过配置文件里的 <code>spring.web</code> 前缀配置项指定</li><li><code>cachePeriod</code>：缓存周期，多久不用找服务器要新的，默认值 0s，以秒为单位</li><li><code>cacheControl</code>： HTTP 缓存控制，参照 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">Mozilla 文档</a></li><li><code>useLastModified</code>：是否使用 <code>Last-Modified</code> 头，默认值 <code>false</code>，配合 HTTP Cache 规则使用 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">registration.setCachePeriod(getSeconds(<span class="keyword">this</span>.resourceProperties.getCache().getPeriod()));</span><br><span class="line">registration.setUseLastModified(<span class="keyword">this</span>.resourceProperties.getCache().isUseLastModified());</span><br><span class="line">registration.setCacheControl(<span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl());</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>当浏览器访问了一个静态资源文件 <code>index.js</code>，如果在服务器中这个资源文件没有发生变化，那么在用户下次访问的时候，就可以直接让浏览器用本地缓存中的资源文件，而不用给服务器发送请求。</p></div><h4 id="EnableWebMvcConfiguration-的源码"><a href="#EnableWebMvcConfiguration-的源码" class="headerlink" title="EnableWebMvcConfiguration 的源码"></a>EnableWebMvcConfiguration 的源码</h4><p><code>EnableWebMvcConfiguration</code> 继承了 <code>DelegatingWebMvcConfiguration</code>，而 <code>DelegatingWebMvcConfiguration</code> 则继承了 <code>WebMvcConfigurationSupport</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(WebProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SpringBoot 默认会往容器中放入 <code>WebMvcConfigurationSupport</code> 组件，如果开发者注册了 <code>WebMvcConfigurationSupport</code> 组件，那么 SpringBoot 的 <code>WebMvcAutoConfiguration</code> 组件就会失效。这相当于禁用 SpringBoot 的自动配置，采用全手动的方式配置 MVC。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration(after = { DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class })</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span> <span class="comment">// 容器中没有这个 Bean 才生效，默认就是没有</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@ImportRuntimeHints(WebResourcesRuntimeHints.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>欢迎页面的查找规则<ul><li><code>HandlerMapping</code>：根据请求路径找到能处理请求的 Handler</li><li><code>WelcomePageHandlerMapping</code>： <ul><li>访问 <code>/**</code> 路径下的所有请求，都会去默认的四个静态资源路径下查找页面，这也适用于欢迎页面</li><li>只要在任意一个静态资源路径下有一个 <code>index.html</code> 页面，项目启动后就可以正常访问它</li></ul></li></ul></li></ul><h4 id="为什么定义-WebMvcConfigurer-就能配置底层行为"><a href="#为什么定义-WebMvcConfigurer-就能配置底层行为" class="headerlink" title="为什么定义 WebMvcConfigurer 就能配置底层行为"></a>为什么定义 WebMvcConfigurer 就能配置底层行为</h4><ul><li><code>WebMvcAutoConfiguration</code> 是一个自动配置类，它里面有一个 <code>EnableWebMvcConfiguration</code> 配置类</li><li><code>EnableWebMvcConfiguration</code> 继承了 <code>DelegatingWebMvcConfiguration</code>，且两者都会生效</li><li><code>DelegatingWebMvcConfiguration</code> 利用 DI (自动注入) 将容器中所有的 <code>WebMvcConfigurer</code> 都注入进来</li><li>别人调用 <code>DelegatingWebMvcConfiguration</code> 的方法配置底层规则，而它自身则调用所有 <code>WebMvcConfigurer</code> 的底层配置方法。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DelegatingWebMvcConfiguration 的底层源码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) {</span><br><span class="line"><span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.configurers.configurePathMatch(configurer);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.configurers.configureContentNegotiation(configurer);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="全面接管-Spring-MVC"><a href="#全面接管-Spring-MVC" class="headerlink" title="全面接管 Spring MVC"></a>全面接管 Spring MVC</h2><p>SpringBoot 默认配置好了 Spring MVC 的所有常用特性，如果需要全面接管 Spring MVC 的所有配置并禁用默认配置，仅需要编写一个 <code>WebMvcConfigurer</code> 配置类，并标注 <code>@EnableWebMvc</code> 即可。</p><h3 id="WebMvcAutoConfiguration-自动配置了哪些规则"><a href="#WebMvcAutoConfiguration-自动配置了哪些规则" class="headerlink" title="WebMvcAutoConfiguration 自动配置了哪些规则"></a>WebMvcAutoConfiguration 自动配置了哪些规则</h3><p>Spring MVC 自动配置场景给我们配置了如下所有默认行为：</p><ul><li><p><code>WebMvcAutoConfiguration</code> Web 场景的自动配置类</p><ul><li>支持 RESTful 的 Filter：<code>HiddenHttpMethodFilter</code></li><li>支持非 POST 请求体携带数据：<code>FormContentFilter</code></li><li>导入 <code>EnableWebMvcConfiguration</code> 配置类后：<ul><li><code>RequestMappingHandlerAdapter</code></li><li><code>WelcomePageHandlerMapping</code>： 欢迎页功能支持（模板引擎目录、静态资源目录放 <code>index.html</code> 页面），项目访问 <code>/</code> 就默认展示这个页面</li><li><code>RequestMappingHandlerMapping</code>：找每个请求由谁处理的映射关系</li><li><code>ExceptionHandlerExceptionResolver</code>：默认的异常解析器 </li><li><code>LocaleResolver</code>：国际化解析器</li><li><code>ThemeResolver</code>：主题解析器</li><li><code>FlashMapManager</code>：临时数据共享</li><li><code>FormattingConversionService</code>： 数据格式化 、类型转化</li><li><code>Validator</code>：JSR303 提供的数据校验功能</li><li><code>WebBindingInitializer</code>：请求参数的封装与绑定</li><li><code>ContentNegotiationManager</code>：内容协商管理器</li></ul></li></ul></li><li><p><code>WebMvcAutoConfigurationAdapter</code> 配置生效，它是一个 <code>WebMvcConfigurer</code>，定义了 MVC 底层组件</p><ul><li>定义好 <code>WebMvcConfigurer</code>：底层组件的默认功能</li><li>视图解析器：<code>InternalResourceViewResolver</code></li><li>视图解析器：<code>BeanNameViewResolver</code>，视图名（Controller 方法的返回值字符串）就是组件名</li><li>内容协商解析器：<code>ContentNegotiatingViewResolver</code></li><li>请求上下文过滤器：<code>RequestContextFilter</code>，在任意位置直接获取当前请求</li><li>静态资源链规则</li><li>错误详情：<code>ProblemDetailsExceptionHandler</code>，Spring MVC 内部场景的异常都会被它捕获</li></ul></li></ul><h3 id="EnableWebMvc-禁用默认行为"><a href="#EnableWebMvc-禁用默认行为" class="headerlink" title="@EnableWebMvc 禁用默认行为"></a>@EnableWebMvc 禁用默认行为</h3><ul><li><code>@EnableWebMvc</code> 往容器中导入了 <code>DelegatingWebMvcConfiguration</code> 组件，它继承自 <code>WebMvcConfigurationSupport</code></li><li><code>WebMvcAutoConfiguration</code> 有一个核心的条件注解，<code>@ConditionalOnMissingBean (WebMvcConfigurationSupport.class)</code>，当容器中没有 <code>WebMvcConfigurationSupport</code> 组件时，<code>WebMvcAutoConfiguration</code> 才生效</li><li><code>@EnableWebMvc</code> 导入了 <code>WebMvcConfigurationSupport</code>，从而会导致 <code>WebMvcAutoConfiguration</code> 失效，即会导致 SpringBoot 禁用 MVC 自动配置的所有功能</li></ul><h3 id="WebMvcConfigurer-的功能"><a href="#WebMvcConfigurer-的功能" class="headerlink" title="WebMvcConfigurer 的功能"></a>WebMvcConfigurer 的功能</h3><p><code>WebMvcConfigurer</code> 定义并扩展了 Spring MVC 的底层功能，其中的功能列表如下：</p><table><thead><tr><th>提供方法</th><th>核心参数</th><th>功能</th><th>默认</th></tr></thead><tbody><tr><td> addFormatters</td><td>FormatterRegistry</td><td> 格式化器：支持属性上 <code>@NumberFormat</code> 和 <code>@DatetimeFormat</code> 的数据类型转换</td><td> GenericConversionService</td></tr><tr><td>getValidator</td><td> 无</td><td>数据校验：校验 Controller 上使用 <code>@Valid</code> 标注的参数合法性。需要导入 <code>spring-boot-starter-validator</code></td><td>无</td></tr><tr><td> addInterceptors</td><td>InterceptorRegistry</td><td> 拦截器：拦截收到的所有请求</td><td>无</td></tr><tr><td> configureContentNegotiation</td><td>ContentNegotiationConfigurer</td><td> 内容协商：支持多种数据格式返回。需要配合支持这种类型的 <code>HttpMessageConverter</code></td><td>支持 JSON</td></tr><tr><td>configureMessageConverters</td><td>List&lt;HttpMessageConverter&lt;?&gt;&gt;</td><td> 消息转换器：标注 <code>@ResponseBody</code> 的返回值会利用 <code>MessageConverter</code> 直接写出去</td><td>支持 8 种数据类型，包括 <code>byte</code>，<code>string</code>，<code>multipart</code>，<code>resource</code>，<code>json</code></td></tr><tr><td>addViewControllers</td><td>ViewControllerRegistry</td><td> 视图映射：直接将请求路径与物理视图映射。用于无 Java 业务逻辑的直接视图页渲染</td><td>无</td></tr><tr><td> configureViewResolvers</td><td>ViewResolverRegistry</td><td> 视图解析器：逻辑视图转为物理视图</td><td> ViewResolverComposite</td></tr><tr><td>addResourceHandlers</td><td>ResourceHandlerRegistry</td><td> 静态资源处理：静态资源路径映射、缓存控制</td><td> ResourceHandlerRegistry</td></tr><tr><td>configureDefaultServletHandling</td><td>DefaultServletHandlerConfigurer</td><td> 默认 <code>Servlet</code>：可以覆盖 Tomcat 的 <code>DefaultServlet</code>。让 <code>DispatcherServlet</code> 拦截 <code>/</code></td><td>无</td></tr><tr><td> configurePathMatch</td><td>PathMatchConfigurer</td><td> 路径匹配：自定义 URL 路径匹配。可以自动为所有路径加上指定前缀，比如 <code>/api</code></td><td>无</td></tr><tr><td> configureAsyncSupport</td><td>AsyncSupportConfigurer</td><td> 异步支持</td><td> TaskExecutionAutoConfiguration</td></tr><tr><td>addCorsMappings</td><td>CorsRegistry</td><td> 跨域支持</td><td>无</td></tr><tr><td> addArgumentResolvers</td><td>List<handlermethodargumentresolver></handlermethodargumentresolver></td><td> 参数解析器</td><td> MVC 默认提供</td></tr><tr><td> addReturnValueHandlers</td><td>List<handlermethodreturnvaluehandler></handlermethodreturnvaluehandler></td><td> 返回值解析器</td><td> MVC 默认提供</td></tr><tr><td> configureHandlerExceptionResolvers</td><td>List<handlerexceptionresolver></handlerexceptionresolver></td><td> 异常处理器</td><td> 3 个核心类：<code>ExceptionHandlerExceptionResolver</code>，<code>ResponseStatusExceptionResolver</code>，<code>DefaultHandlerExceptionResolver</code></td></tr><tr><td>getMessageCodesResolver</td><td> 无</td><td>消息码解析器：国际化使用</td><td>无</td></tr></tbody></table><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>SpringBoot 已经默认配置好了 Web 开发场景常用的功能，一般情况下直接使用即可。</p><h3 id="三种配置方式"><a href="#三种配置方式" class="headerlink" title="三种配置方式"></a>三种配置方式</h3><p>在 SpringBoot Web 开发场景下，有以下三种方式可以配置 SpringBoot MVC。</p><table><thead><tr><th>方式</th><th>用法</th><th>重点</th><th>效果</th></tr></thead><tbody><tr><td>全自动</td><td>直接编写控制器的业务逻辑</td><td></td><td>全部使用 SpringBoot 自动配置的默认效果</td></tr><tr><td>手自一体</td><td><code>@Configuration</code> + 配置 <code>WebMvcConfigurer</code> 或者配置 <code>WebMvcRegistrations</code></td><td>不要标注 <code>@EnableWebMvc</code> 注解</td><td>保留 SpringBoot 自动配置效果，手动配置部分功能，自定义 MVC 底层组件</td></tr><tr><td>全手动</td><td><code>@Configuration</code> + 配置 <code>WebMvcConfigurer</code></td><td>标注 <code>@EnableWebMvc</code> 注解</td><td>禁用 SpringBoot 自动配置效果，全手动配置</td></tr></tbody></table><h3 id="两种开发模式"><a href="#两种开发模式" class="headerlink" title="两种开发模式"></a>两种开发模式</h3><ul><li>前后端分离模式： <code>@RestController</code> 直接响应 JSON 数据</li><li>前后端不分离模式：<code>@Controller</code> + <code>Thymeleaf</code> 模板引擎</li></ul>]]></content>
    
    
    <summary type="html">本文主要记录 SpringBoot 3 的基础教程，包括 MVC 自动配置、静态资源、错误处理、嵌入式容器、源码分析等内容。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安装 JDK-17</title>
    <link href="https://www.techgrow.cn/posts/ef3088be.html"/>
    <id>https://www.techgrow.cn/posts/ef3088be.html</id>
    <published>2023-06-12T13:48:23.000Z</published>
    <updated>2023-06-12T13:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍 Linux 如何安装 JDK 17，包括 OpenJDK、OracleJDK 的安装，适用于 CentOS、Ubuntu、Debian、SUSE 等 Linux 发行版。</p><h2 id="OpenJDK-安装"><a href="#OpenJDK-安装" class="headerlink" title="OpenJDK 安装"></a>OpenJDK 安装</h2><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换安装目录</span></span><br><span class="line"><span class="comment"># cd /usr/local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载软件包</span></span><br><span class="line"><span class="comment"># wget https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压软件包</span></span><br><span class="line"><span class="comment"># tar -zxvf openjdk-17.0.2_linux-x64_bin.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名目录</span></span><br><span class="line"><span class="comment"># mv jdk-17.0.2 jdk-17</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在配置文件的最下方添加以下内容</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk-17</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin;</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载配置文件</span></span><br><span class="line"><span class="comment"># source /etc/profile</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line"><span class="comment"># java -version</span></span><br></pre></td></tr></tbody></table></figure><h2 id="OracleJDK-安装"><a href="#OracleJDK-安装" class="headerlink" title="OracleJDK 安装"></a>OracleJDK 安装</h2><h3 id="下载软件-1"><a href="#下载软件-1" class="headerlink" title="下载软件"></a>下载软件</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换安装目录</span></span><br><span class="line"><span class="comment"># cd /usr/local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载软件包</span></span><br><span class="line"><span class="comment"># wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压软件包</span></span><br><span class="line"><span class="comment"># tar -zxvf jdk-17_linux-x64_bin.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名目录</span></span><br><span class="line"><span class="comment"># mv jdk-17.0.7 jdk-17</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在配置文件的最下方添加以下内容</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk-17</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin;</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载配置文件</span></span><br><span class="line"><span class="comment"># source /etc/profile</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查看版本号-1"><a href="#查看版本号-1" class="headerlink" title="查看版本号"></a>查看版本号</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line"><span class="comment"># java -version</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍 Linux 如何安装 JDK 17，包括 OpenJDK、OracleJDk 的安装。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Linux" scheme="https://www.techgrow.cn/tags/Linux/"/>
    
    <category term="开发工具" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 基础教程之二常规配置</title>
    <link href="https://www.techgrow.cn/posts/e7a270a6.html"/>
    <id>https://www.techgrow.cn/posts/e7a270a6.html</id>
    <published>2023-06-11T15:12:42.000Z</published>
    <updated>2023-06-11T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/79ae6590.html">SpringBoot3 基础教程之一快速入门</a></li><li><a href="/posts/e7a270a6.html">SpringBoot3 基础教程之二常规配置</a></li><li><a href="/posts/12fb0f17.html">SpringBoot3 基础教程之三 Web 开发</a></li><li><a href="/posts/223fd9f.html">SpringBoot3 基础教程之四 Web 开发</a></li><li><a href="/posts/1dfe3056.html">SpringBoot3 基础教程之五核心原理</a></li><li><a href="/posts/b6463873.html">SpringBoot3 基础教程之六场景整合</a></li><li><a href="/posts/6bcf09.html">SpringBoot3 基础教程之七基础特性</a></li></ul><h2 id="YAML-配置"><a href="#YAML-配置" class="headerlink" title="YAML 配置"></a>YAML 配置</h2><p>YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言）。在开发这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（是另一种标记语言）。</p><div class="admonition note"><p class="admonition-title">YAML 配置方式的优势</p><ul><li>设计目标，就是方便人类读写</li><li>层次分明，更适合做配置文件</li><li>使用 <code>.yml</code> 或 <code>.yaml</code> 作为文件后缀，如 <code>application.yml</code></li></ul></div><div class="admonition note"><p class="admonition-title">Properties 配置方式的弊端</p><ul><li>痛点：SpringBoot 集中化管理配置（<code>application.properties</code>）</li><li>问题：配置内容多了以后，难以阅读和修改，层级结构辨识度不高</li></ul></div><span id="more"></span><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p>基础语法</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系，使用空格分割键值对 <code>k: v</code></li><li>缩进时不允许使用 Tab 键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code> 符号表示注释，从这个字符一直到行尾，都会被解析器忽略</li></ul></li><li><p>支持的写法</p><ul><li>对象：键值对的集合，如映射（map）/ 哈希（hash） / 字典（dictionary）</li><li>数组：一组按次序排列的值，如序列（sequence） / 列表（list）</li><li>纯量：单个的、不可再分的值，如字符串、数字、布尔、日期</li></ul></li></ul><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>Java 配置属性类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "person")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> Boolean like;</span><br><span class="line">    <span class="keyword">private</span> Child child; <span class="comment">// 嵌套对象</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dog&gt; dogs; <span class="comment">// 数组（里面是对象）</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Cat&gt; cats; <span class="comment">// 表示 Map</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; text; <span class="comment">// 数组</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Properties 表示法 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">person.name</span>=<span class="string">张三</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">18</span></span><br><span class="line"><span class="meta">person.birthDay</span>=<span class="string">2010/10/12 12:12:12</span></span><br><span class="line"><span class="meta">person.like</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">person.child.name</span>=<span class="string">李四</span></span><br><span class="line"><span class="meta">person.child.age</span>=<span class="string">12</span></span><br><span class="line"><span class="meta">person.child.birthDay</span>=<span class="string">2018/10/12</span></span><br><span class="line"><span class="meta">person.child.text[0]</span>=<span class="string">abc</span></span><br><span class="line"><span class="meta">person.child.text[1]</span>=<span class="string">def</span></span><br><span class="line"><span class="meta">person.dogs[0].name</span>=<span class="string">小黑</span></span><br><span class="line"><span class="meta">person.dogs[0].age</span>=<span class="string">3</span></span><br><span class="line"><span class="meta">person.dogs[1].name</span>=<span class="string">小白</span></span><br><span class="line"><span class="meta">person.dogs[1].age</span>=<span class="string">2</span></span><br><span class="line"><span class="meta">person.cats.c1.name</span>=<span class="string">小蓝</span></span><br><span class="line"><span class="meta">person.cats.c1.age</span>=<span class="string">3</span></span><br><span class="line"><span class="meta">person.cats.c2.name</span>=<span class="string">小灰</span></span><br><span class="line"><span class="meta">person.cats.c2.age</span>=<span class="string">2</span></span><br></pre></td></tr></tbody></table></figure><ul><li>YAML 表示法 </li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">birthDay:</span> <span class="number">2010</span><span class="string">/10/10</span> <span class="number">12</span><span class="string">:12:12</span></span><br><span class="line">  <span class="attr">like:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">child:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">李四</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">birthDay:</span> <span class="number">2018</span><span class="string">/10/10</span></span><br><span class="line">    <span class="attr">text:</span> [<span class="string">"abc"</span>,<span class="string">"def"</span>]</span><br><span class="line">  <span class="attr">dogs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">小黑</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">小白</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">cats:</span></span><br><span class="line">    <span class="attr">c1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小蓝</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">c2:</span> {<span class="attr">name:</span> <span class="string">小绿</span>,<span class="attr">age:</span> <span class="number">2</span>} <span class="comment"># 对象也可以用{}表示</span></span><br></pre></td></tr></tbody></table></figure><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul><li><code>birthDay</code> 推荐写为 <code>birth-day</code></li><li>文本<ul><li>单引号不会转义【<code>\n</code> 会显示为普通字符】</li><li>双引号会转义【<code>\n</code> 会显示为换行符】</li></ul></li><li>大文本<ul><li><code>|</code> 开头，大文本写在下层，会保留文本格式，换行符正确显示</li><li><code>&gt;</code> 开头，大文本写在下层，会折叠换行符（替换为空格符）</li></ul></li><li>多文档合并<ul><li>使用 <code>---</code> 可以把多个 YAML 文档合并在一个文档中，每个文档区依然认为是内容独立</li></ul></li></ul><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><p>本章节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-03</code>。</p><h3 id="日志简介"><a href="#日志简介" class="headerlink" title="日志简介"></a>日志简介</h3><ul><li>1、Spring 使用 <code>commons-logging</code> 作为内部日志，但底层日志实现是开放的，可对接其他日志框架。</li><li>2、Spring 5 及以后的版本，<code>commons-logging</code> 被 Spring 自己直接重写了，包名是 <code>spring-jcl</code>。</li><li>3、SpringBoot 支持 <code>JUL</code>，<code>Log4j</code>，<code>Logback</code> 等日志框架，默认使用的日志框架是 <code>Logback</code>。</li><li>4、SpringBoot 提供了默认的控制台输出配置，也可以配置输出为文件。</li><li>5、虽然日志框架很多，但是开发人员不用担心，因为使用 SpringBoot 默认的日志配置就能工作的很好。</li></ul><div class="admonition note"><p class="admonition-title">SpringBoot 是怎么把日志默认配置好的？</p><ul><li>1、每个场景启动器 <code>spring-boot-starter-xxx</code>，都会导入 <code>spring-boot-starter</code> 核心场景启动器</li><li> 2、核心场景启动器导入了 <code>spring-boot-starter-logging</code>，包含了日志的所用功能</li><li> 3、SpringBoot 默认使用了 <code>SLF4J</code> + <code>Logback</code> 组合作为默认的底层日志实现</li><li> 4、日志是系统一启动就要用的，而 <code>xxxAutoConfiguration</code> 自动配置类只用于在系统启动完成后导入组件，属于后来用的，因此不适用于日志配置</li><li> 5、SpringBoot 的日志配置是利用监听器机制实现，底层是通过实现 <code>ApplicationContextInitializer</code> 接口来配置好日志的</li><li> 6、SpringBoot 的所有日志配置都可以通过修改配置文件实现变更，以 <code>logging</code> 为前缀开始项的所有配置内容</li></ul></div><h3 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h3><ul><li>日志门面：<code>JCL (Jakarta Commons Logging)</code>、<code>SLF4J (Simple Logging Facade for Java)</code>、<code>jboss-logging</code></li><li>日志实现：<code>Log4j</code>、<code>Log4j2</code>、<code>Slf4j-Simple</code>、<code>Logback</code>、<code>JUL (java.util.logging)</code></li></ul><div class="admonition note"><p class="admonition-title">日志框架的对比介绍</p><ul><li><a href="../../../asset/2023/06/spring-boot3-study-4.png">Java 日志框架的名称梳理</a></li><li><a href="../../../asset/2023/06/spring-boot3-study-5.png">SLF4J 的各种日志组件实现</a></li></ul></div><h3 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2023-06-11T22:34:17.511+08:00  INFO 4944 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2023-06-11T22:34:17.511+08:00  INFO 4944 --- [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.7]</span><br></pre></td></tr></tbody></table></figure><ul><li>默认的日志输出格式<ul><li>时间和日期：毫秒级精度</li><li>日志级别：ERROR，WARN，INFO，DEBUG，TRACE</li><li> 进程 ID</li><li> 消息分割符：<code>---</code></li><li>线程名称： 使用 <code>[]</code> 包含</li><li> Logger 名： 通常是产生日志的类名</li><li>消息： 日志记录的内容</li></ul></li></ul><blockquote><p>特别注意： Logback 没有 FATAL 级别，对应的是 ERROR 级别。</p></blockquote><ul><li>更改日志输出的格式<ul><li>默认值：参照 <code>spring-boot</code> 包的 <code>additional-spring-configuration-metadata.json</code> 文件，<a href="../../../asset/2023/06/spring-boot3-study-6.png">点击查看源码</a></li><li>默认的日志输出格式值：<code>%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}</code></li><li>日志的输出格式值可修改为：<code>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} ===&gt; %msg%n</code>，配置示例如下 </li></ul></li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改日志的输出格式</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">'%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} ===&gt; %msg%n'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><ul><li>第一种写法，使用 SLF4J 的 API</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MainApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        logger.info(<span class="string">"Hello World!"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>第二种写法，使用 Lombok 的 <code>@Slf4j</code> 注解 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        log.info(<span class="string">"Hello World!"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul><li>日志级别由低到高：TRACE，DEBUG，INFO，WARN，ERROR，FATAL，OFF<ul><li>TRACE：追踪框架详细流程日志，一般不使用</li><li> DEBUG：开发调试细节日志</li><li> INFO：关键、感兴趣信息日志</li><li> WARN：警告但不是错误的信息日志，比如版本过时</li><li> ERROR：业务错误日志，比如出现各种异常</li><li> FATAL：致命错误日志，比如 JVM 系统崩溃</li><li> OFF：关闭所有日志记录</li></ul></li></ul><div class="admonition note"><p class="admonition-title">提示</p><ul><li>SpringBoot 默认的日志级别是 <code>INFO</code>。</li><li>SpringBoot 只会打印指定日志级别及以上级别的日志。</li><li>不指定日志级别的所有类，默认都使用 <code>root</code> 指定的日志级别。</li></ul></div><ul><li>日志级别的配置<ul><li> 1、在 <code>application.properties</code> 配置文件中，可以通过 <code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code> 指定日志级别。</li><li>2、<code>level</code> 的可取值范围：TRACE，DEBUG，INFO，WARN，ERROR，FATAL，OFF，它们都定义在 <code>LogLevel</code> 枚举类中。</li><li>3、<code>root</code> 的 <code>logger-name</code> 叫 <code>root</code>，所以可以配置 <code>logging.level.root=warn</code>，代表所有未指定日志级别的类都使用 <code>root</code> 的 <code>warn</code> 日志级别。</li></ul></li></ul><h3 id="日志分组"><a href="#日志分组" class="headerlink" title="日志分组"></a>日志分组</h3><p>精确调整某个包下类的日志级别，一般的写法如下：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.clay.shop:</span> <span class="string">info</span></span><br></pre></td></tr></tbody></table></figure><p>建议将相关的 <code>logger</code> 分组写在一起，SpringBoot 也支持这样统一配置，比如 Tomcat 相关的日志统一设置：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">group:</span></span><br><span class="line">    <span class="attr">tomcat:</span> <span class="string">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">tomcat:</span> <span class="string">info</span></span><br></pre></td></tr></tbody></table></figure><p>SpringBoot 预定义了两个日志分组：</p><table><thead><tr><th>Name</th><th>Loggers</th></tr></thead><tbody><tr><td>web</td><td><code>org.springframework.core.codec</code>， <code>org.springframework.http</code>， <code>org.springframework.web</code>， <code>org.springframework.boot.actuate.endpoint.web</code>， <code>org.springframework.boot.web.servlet.ServletContextInitializerBeans</code></td></tr><tr><td>sql</td><td><code>org.springframework.jdbc.core</code>， <code>org.hibernate.SQL</code>， <code>org.jooq.tools.LoggerListener</code></td></tr></tbody></table><h3 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h3><p>SpringBoot 默认只会将日志输出到控制台，如果想额外记录到文件，可以在 <code>application.properties</code> 中添加 <code>logging.file.name</code> 或者 <code>logging.file.path</code> 配置项。</p><table><thead><tr><th><code>logging.file.name</code></th><th><code>logging.file.path</code></th><th>配置示例</th><th>配置效果</th></tr></thead><tbody><tr><td>未指定</td><td>未指定</td><td></td><td>仅控制台输出</td></tr><tr><td>指定</td><td>未指定</td><td><code>my.log</code> 或者 <code>/var/log/my.log</code></td><td>写入指定文件，可以加文件路径（可选）</td></tr><tr><td>未指定</td><td>指定</td><td><code>/var/log</code></td><td>写入指定目录，文件名默认为 <code>spring.log</code></td></tr><tr><td>指定</td><td>指定</td><td></td><td>以 <code>logging.file.name</code> 的配置为准 </td></tr></tbody></table><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.clay.shop:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">/tmp/logs/shop/app.log</span></span><br></pre></td></tr></tbody></table></figure><h3 id="日志归档"><a href="#日志归档" class="headerlink" title="日志归档"></a>日志归档</h3><div class="admonition note"><p class="admonition-title">文件归档与滚动切割</p><ul><li>归档：每天的日志单独存到一个文档中。</li><li>切割：每个文件 10MB，超过大小就切割成另外一个文件。</li></ul></div><ul><li>1、每天的日志应该独立分割出来存档。如果使用 Logback（SpringBoot 默认整合），可以通过 <code>application.properties</code> 文件指定日志滚动规则。</li><li>2、如果是其他日志系统，需要自行配置（例如使用 Log4j2，则添加 <code>log4j2.xml</code> 或 <code>log4j2-spring.xml</code> 配置文件）</li><li>3、SpringBoot 默认支持的滚动规则配置如下：</li></ul><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td> logging.logback.rollingpolicy.file-name-pattern</td><td> 日志存档的文件名格式（默认值：<code>${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz</code>）</td></tr><tr><td>logging.logback.rollingpolicy.clean-history-on-start</td><td> 应用启动时是否清除以前的存档文件（默认值：false）</td></tr><tr><td>logging.logback.rollingpolicy.max-file-size</td><td> 存档前，每个日志文件的最大大小（默认值：10MB）</td></tr><tr><td>logging.logback.rollingpolicy.total-size-cap</td><td> 日志文件被删除之前，可以容纳的最大大小（默认值：0B）。设置 1GB，则磁盘存储超过 1GB 日志后就会删除旧的日志文件</td></tr><tr><td> logging.logback.rollingpolicy.max-history</td><td> 日志文件保存的最大天数（默认值：7）</td></tr></tbody></table><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>一般情况下，SpringBoot 项目修改 <code>application.properties</code> 配置文件，就可以调整日志的所有行为。如果不够，还可以自定义日志系统的配置文件。比如：</p><table><thead><tr><th>日志系统</th><th>自定义配置文件</th></tr></thead><tbody><tr><td> Logback</td><td><code>logback-spring.xml</code>，<code>logback-spring.groovy</code>，<code>logback.xml</code>，<code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code>，<code>log4j2.xml</code></td></tr><tr><td>JUL (java.util.logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>如果可能，建议在日志配置文件的名称中使用 <code>-spring</code> 变量，比如 <code>logback-spring.xml</code> 而不是 <code>logback.xml</code>。这是因为如果使用标准的文件名称，Spring 无法完全控制日志的初始化过程。</p><div class="admonition note"><p class="admonition-title">最佳实践</p><p>如果需要自己写日志配置文件，那么日志配置文件的名称建议加上 <code>-spring.xml</code>，例如 <code>logback-spring.xml</code>，而不是 <code>logback.xml</code>。</p></div><h3 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h3><ul><li>切换 Log4j2 日志框架 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Log4j2 支持 <code>XML</code>、<code>YAML</code> 、<code>JSON</code> 格式的配置文件</li></ul><table><thead><tr><th>格式</th><th> Jar 包依赖</th><th>文件名</th></tr></thead><tbody><tr><td> YAML</td><td><code>com.fasterxml.jackson.core:jackson-databind</code> + <code>com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</code></td><td><code>log4j2.yaml</code>，<code>log4j2.yml</code></td></tr><tr><td>JSON</td><td><code>com.fasterxml.jackson.core:jackson-databind</code></td><td><code>log4j2.json</code>，<code>log4j2.jsn</code></td></tr><tr><td>XML</td><td></td><td><code>log4j2-spring.xml</code>，<code>log4j2.xml</code></td></tr></tbody></table><h3 id="最佳项目实践"><a href="#最佳项目实践" class="headerlink" title="最佳项目实践"></a>最佳项目实践</h3><ul><li>1、导入任何第三方框架，首先排除它的日志包，因为 SpringBoot 底层默认配置好了日志。</li><li>2、SpringBoot 项目修改 <code>application.properties</code> 配置文件，就可以调整日志的所有行为。如果不够，可以编写日志框架的配置文件，并将它放在项目的类路径下就行，比如 <code>logback-spring.xml</code>，<code>log4j2-spring.xml</code>。</li><li>3、如需对接专业日志系统，也就是需要把 Logback 记录的日志灌到 Kafka 之类的中间件，这和 SpringBoot 没关系，都是日志框架自己的配置，修改配置文件即可实现。</li><li>4、在业务代码中使用 <code>slf4j-api</code> 记录日志，不要再使用 <code>System.out.println()</code> 了。</li></ul>]]></content>
    
    
    <summary type="html">本文主要记录 SpringBoot 3 的基础教程，包括 YAML 配置文件、日志配置等内容。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>JetBrains IDEA 2022.2 破解激活教程</title>
    <link href="https://www.techgrow.cn/posts/a74ccc85.html"/>
    <id>https://www.techgrow.cn/posts/a74ccc85.html</id>
    <published>2023-06-08T13:18:36.000Z</published>
    <updated>2023-06-08T13:18:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程适用于 JetBrains IDEA <code>2022.2.x</code> 版本的破解，亲测激活成功！！！</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li>JetBrains IDEA 下载：<a href="https://www.jetbrains.com/idea/download/other.html">官网</a></li><li> JetBrains IDEA&nbsp;破解补丁下载：<a href="/downloads/2023/06/ja-netfilter.v3.zip">本站</a></li></ul><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>更改 hosts 文件，将有关 Jetbrains 的配置行全部删除掉，若没有则请忽略此步骤。Windows 系统的 hosts 文件路径为：<code>C:\Windows\System32\drivers\etc\hosts</code>，Linux 和 Mac 系统的 hosts 文件路径为：<code>/etc/hosts</code>，一般情况下只需删除以下两行内容即可：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.0.0.0 www.jetbrains.com</span><br><span class="line">0.0.0.0 account.jetbrains.com</span><br></pre></td></tr></tbody></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>如果 IDEA 之前已经在试用或者试用过而且过期了，则需要先删除 IDEA 的所有配置文件。IDEA 配置文件所在的目录如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Windows系统</span><br><span class="line">C:\Documents and Settings\Administrator\.idea-2022.2\config</span><br><span class="line">C:\Documents and Settings\Administrator\.idea-2022.2\system</span><br><span class="line"></span><br><span class="line"># Linux/Mac系统</span><br><span class="line">~/.config/JetBrains/IntelliJIdea2022.2</span><br><span class="line">~/.local/share/JetBrains/IntelliJIdea2022.2</span><br></pre></td></tr></tbody></table></figure><h2 id="激活步骤"><a href="#激活步骤" class="headerlink" title="激活步骤"></a>激活步骤</h2><h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><p>在 <a href="https://www.jetbrains.com/idea/download/other.html">JetBrains 官网</a> 下载指定版本（如 <code>2022.2.5</code>）的 IDEA 安装包，下载完成后直接双击运行安装程序，接着一步步安装即可。</p><h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><p>解压破解补丁文件，并将 <code>ja-netfilter.v3</code> 文件夹拷贝到 IDEA 安装后的 <code>bin</code> 目录下。</p><p><img data-src="../../../asset/2023/06/idea-2022-crack-1.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>找到 IDEA 安装后 <code>bin</code> 目录下的 <code>idea.exe.vmoptions</code> 和 <code>idea64.exe.vmoptions</code> 配置文件，如果没有 <code>idea.exe.vmoptions</code>，只需修改 <code>idea64.exe.vmoptions</code> 即可，然后在配置文件的末尾追加以下内容（请自行更改 <code>ja-netfilter.jar</code> 文件的路径）：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br><span class="line">-javaagent:C:/Program Files/JetBrains/IntelliJ IDEA 2022.2/bin/ja-netfilter.v3/ja-netfilter.jar</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/06/idea-2022-crack-5.png"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>启动 IDEA，并选择试用模式，进入 IDEA 的主界面。</p><p><img data-src="../../../asset/2023/06/idea-2022-crack-2.png"></p><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>在 IDEA 的主界面，菜单栏导航到 <code>Help</code> -&gt; <code>Register</code>，然后输入以下激活码直接破解 IDEA。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BKZ5XB6RJ8-eyJsaWNlbnNlSWQiOiJCS1o1WEI2Uko4IiwibGljZW5zZWVOYW1lIjoi5pyA5paw5r+A5rS756CB6I635Y+W77yM6K+35YWz5rOo5YWs5LyX5Y+344CM6Zuo6JC95peg5b2x44CNIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDI3LTA4LTAxIiwiZmFsbGJhY2tEYXRlIjoiMjAyNy0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJwYWlkVXBUbyI6IjIwMjctMDgtMDEiLCJmYWxsYmFja0RhdGUiOiIyMDI3LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsInBhaWRVcFRvIjoiMjAyNy0wOC0wMSIsImZhbGxiYWNrRGF0ZSI6IjIwMjctMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJwYWlkVXBUbyI6IjIwMjctMDgtMDEiLCJmYWxsYmFja0RhdGUiOiIyMDI3LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsInBhaWRVcFRvIjoiMjAyNy0wOC0wMSIsImZhbGxiYWNrRGF0ZSI6IjIwMjctMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwicGFpZFVwVG8iOiIyMDI3LTA4LTAxIiwiZmFsbGJhY2tEYXRlIjoiMjAyNy0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAyNy0wOC0wMSIsImZhbGxiYWNrRGF0ZSI6IjIwMjctMDgtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBHTyIsInBhaWRVcFRvIjoiMjAyNy0wOC0wMSIsImZhbGxiYWNrRGF0ZSI6IjIwMjctMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwicGFpZFVwVG8iOiIyMDI3LTA4LTAxIiwiZmFsbGJhY2tEYXRlIjoiMjAyNy0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJwYWlkVXBUbyI6IjIwMjctMDgtMDEiLCJmYWxsYmFja0RhdGUiOiIyMDI3LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjAwNzI4RVBBSkEwMDgwMDYiLCJoYXNoIjoiMTI3OTY4NzcvMCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-LTfxs43UcOTl+Vn0W80gmdm0gaiTBmnmOS+/aBqdxGyhgKR+t2CsUi7QVhRf2kShvWLt/mWGiS9HLfiUg1mhXCldI4HEEj8F+HMwqvZkMFXPDx8qltM7QZm88HCUCUfbg1p5X+8ENh709DK2bRQ484YMWYRAT8tFak981p0N/PwrzqGAgBh2FepOK7UqONOey4VoJpLnPD5TFpJV6wW0xjoKh0I608VHU1gorcyPR1DZfyK9NqoxW9ZKA0MbUV6byXhYQN118181LTl9VuMmtWX5mlEfTfpj1qJYmrz61YQEvcyffM3wpzK5gwVour8vBzqnrxRLXS4bc687bNvAyF/mBCqHAZB3a+AhxuDM+o/1uyWDiqqE1CO45hirOB/m+0qN6jyXEyhasCjCNVuxmtQLUTgKW+JML0Bm6K08d4q+vombWZQD10faCwMzgSm/lfEfqwbG67v4vqaZdfbE1zCkgQ9DfRYSOZV8gzCJZKs2e6A0hnjJ2Ojd+3m29XEKEatU0iCB5zwiJVcv0JK8o+TheGZkNLRSwCipz1LYdVDiAkOpZ1nucmR+fdaj9oSr0FYWpQJvhP7JdYeOZyKup3Bw5dtOkmX2KEEtzk8VKus2GjisbrhbaWzBQR9V/obQFXlfLBt86zFplHSUQvqx+IFyzpsAZJxXrhSGPbGq3w0=-MIIFTDCCAzSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCFBZI051+HDN7SzhuH6ybvfgGG5/n+x91KvFCPvQtDIfSzzsNplzEGKQz4EZ2Y5TW1se1jigP6fdl5tUqHOkT3OndSGBuu4P7NFDvvtMhB6b3cZQzxvBHZSysCxHLz3SWDGTDD2fO2GBwWWWM+yrPpSBx5Vp26HyILvyOb2Qx0YQUjnPk31XISMTA4cy4M2i+tTRw9D7lPTRHrtcyDKQ9OjbTqDhTmAa3q7uo/Tle1pJRuezuLZpRpEvtYT881t8zU7Wzy4qiLmVHiepOxvtzvl0nZelnHMwBqHirjjjU1kf6fGk0fmtlV3uerV6QrZhhymSOA7i8pK1KP3FPmE2PFVeyJiYOydGNtRK9yNzemKFpF6x6TLIqgWzKfqE70E+zRyFKFqHhnDLF6D9D02Y5kp/QbjVyzP+li21HUVfBjVTJGVBfPUlTUsar6YQCczgtYNmZEZEfjLAzE88VXxq/pbcnzgJtk7a8AodEhFCMmF3OeTmEhEqVnYdrOydmHkYIS+/3DvkUyyGYXS4GJ85jN9wZ9MT3AVJTYqnH9d4gCe8jKxkDcHeAsOFRaBhwwqMQkNnSnLeBQf6shWCWxFmJcSf4fWY3kW400wdgGqvslx/oycOhvVP8c0iNGO+2zAHAnp6fHzv2PLbL7NShLNvN0go/M4kpRsLtTT0suigwcXwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFCTaESKW9YVBwJNH6DEjTPTAhAL/MEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBt0BHnlATtD6+wHtaT3W4iMXF0uve7DNRojwl2Y8pcXiBKQQiIDEc//Ar5RgzFPAKZuv1pUWRAc4JD4G7t+iIy4R3E/6TywhFOl9/fWxOaVEx81ZfxYKmFXLtKeuuFnXOIJ3/cDK8KqMMWq+rJVXQaDkMIRJ6cizgf3EhKB8wP6LgTGpFa2qW/F/FaIivbGL4JnRpj1H6t991jWQYzAf4xad/wy6V2K+Fl9eAPJRlwYiA2o0PjbVffqcWzxgGPlawOLRkRnzDOUqp4ZHw6YRp801wSz03KAYPtFS2+cUsykc4eKwwpKSA8rqwUNCaxpdUgBWqXCj0SetZm2OWuVpAZn2sO6iXDmNTkBVry8ee/AW87ZU4CuGMqLQeNDNQd/pHtk2Van89y7gfcRAP2waneRTudpjhTQo61fJoYNAGq1N1sE8Oew/eGxzV8ubnr+BAdi9gH23GVbG1e0/u/caOXIPL1ndiKBHVTqXWcjkuLRGGVtaOjN4Gfmjgu+z2CNhHe80V2IefsSuBd5wgA6BfYB8wy+LcfcXJ2zKJe7TKA44dys9atbdIB6HXfCcwV7U/N5M0LAIFbOPdk0yi8DPWTJCjQELytuy31g+vrbYePWANraRRcPStmw8zpP/ZcbDJ/419vGWG4RscVpt7Ewo/S7nPmGwpW5hf+/KVxmeBfxg==</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/06/idea-2022-crack-3.png"></p><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>查看 IDEA 是否破解成功，菜单栏导航到 <code>Help</code> -&gt; <code>About</code>，若出现下图的信息则说明破解成功。</p><p><img data-src="../../../asset/2023/06/idea-2022-crack-4.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/yj-blogs/p/16549970.html">IDEA 2022 永久激活教程</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍如何破解激活 IDEA 2022.2 版本，包括破解补丁和激活码的使用。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="开发工具" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 基础教程之一快速入门</title>
    <link href="https://www.techgrow.cn/posts/79ae6590.html"/>
    <id>https://www.techgrow.cn/posts/79ae6590.html</id>
    <published>2023-06-05T15:12:42.000Z</published>
    <updated>2023-06-05T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/79ae6590.html">SpringBoot3 基础教程之一快速入门</a></li><li><a href="/posts/e7a270a6.html">SpringBoot3 基础教程之二常规配置</a></li><li><a href="/posts/12fb0f17.html">SpringBoot3 基础教程之三 Web 开发</a></li><li><a href="/posts/223fd9f.html">SpringBoot3 基础教程之四 Web 开发</a></li><li><a href="/posts/1dfe3056.html">SpringBoot3 基础教程之五核心原理</a></li><li><a href="/posts/b6463873.html">SpringBoot3 基础教程之六场景整合</a></li><li><a href="/posts/6bcf09.html">SpringBoot3 基础教程之七基础特性</a></li></ul><h2 id="开发环境要求"><a href="#开发环境要求" class="headerlink" title="开发环境要求"></a>开发环境要求</h2><table><thead><tr><th align="center">环境 &amp; 工具</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center"> SpringBoot</td><td align="center">3.0.5+</td></tr><tr><td align="center">IDEA</td><td align="center">2021.2.1+</td></tr><tr><td align="center">JDK</td><td align="center">17+</td></tr><tr><td align="center">Maven</td><td align="center">3.5+</td></tr><tr><td align="center">Tomcat</td><td align="center">10.0+</td></tr><tr><td align="center">Servlet</td><td align="center">5.0+</td></tr><tr><td align="center">GraalVM Community</td><td align="center">22.3+</td></tr><tr><td align="center">Native Build Tools</td><td align="center">0.9.19+</td></tr></tbody></table><span id="more"></span><div class="admonition note"><p class="admonition-title">提示</p><p>SpringBoot 3 依赖 JDK 17，采用全新的 Spring 6，Maven 的支持也提高到了 3.5，Gradle 提高到了 7.3，版本管理器默认也换成了 Gradle。值得一提的是，IDEA <code>2022.x</code> 版本以上都可以支持 JDK 17。</p></div><h2 id="SpringBoot-介绍"><a href="#SpringBoot-介绍" class="headerlink" title="SpringBoot 介绍"></a>SpringBoot 介绍</h2><p>SpringBoot 可以简单、快速地创建一个独立的、生产级别的 Spring 应用（SpringBoot 的底层实现是 Spring）。大多数 SpringBoot 应用只需要编写少量配置，即可快速整合 Spring 平台以及第三方技术。SpringBoot 的特性如下：</p><ul><li>快速创建独立 Spring 应用</li><li>直接嵌入 Tomcat、Jetty、Undertow，无需部署 <code>war</code> 包</li><li>提供可选的 <code>starter</code>，简化应用的整合</li><li>按需自动配置 Spring 以及第三方库</li><li>提供生产级特性：如监控指标、健康检查、外部化配置等</li><li>无代码生成、无 XML 配置文件</li></ul><h2 id="SpringBoot-快速体验"><a href="#SpringBoot-快速体验" class="headerlink" title="SpringBoot 快速体验"></a>SpringBoot 快速体验</h2><div class="admonition note"><p class="admonition-title">学习目标</p><p>浏览器发送 <code>/hello</code> 请求，服务器端返回 <code>Hello,Spring Boot 3!</code>。</p></div><h3 id="创建-Maven-项目"><a href="#创建-Maven-项目" class="headerlink" title="创建 Maven 项目"></a>创建 Maven 项目</h3><p>创建 Maven 项目，SpringBoot 项目一般都需要继承自 <code>spring-boot-starter-parent</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>或者引入 <code>spring-boot-dependencies</code>，这适用于项目已经拥有 Parent 依赖包的场景</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">依赖继承关系</p><p>继承 <code>spring-boot-starter-parent</code> 的时候，其实也算是继承自 <code>spring-boot-dependencies</code>，这是因为 <code>parent</code> 其实也是继承 <code>dependencies</code>，同时 <code>parent</code> 里面增加了一些插件，并指定了 Maven 的编译版本。</p></div><h3 id="导入启动器"><a href="#导入启动器" class="headerlink" title="导入启动器"></a>导入启动器</h3><p>导入 Web 启动器，目的是引入 Spring MVC、Tomcat 等。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="主启动程序"><a href="#主启动程序" class="headerlink" title="主启动程序"></a>主启动程序</h3><p>添加 <code>@SpringBootApplication</code> 注解，声明这是一个 SpringBoot 应用程序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="业务控制器"><a href="#业务控制器" class="headerlink" title="业务控制器"></a>业务控制器</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,Spring Boot 3!"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><p>在 Maven 的配置文件中添加打包插件后，执行 <code>mvn clean package</code> 命令可以将项目打成可执行的 Jar 包，并可以使用 <code>java -jar xxx.jar</code> 命令直接启动 SpringBoot 项目。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot应用打包插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><p>浏览器访问 <code>http://127.0.0.1:8080/hello</code>，若正常返回 <code>Hello,Spring Boot 3!</code>，则说明第一个 SpringBoot 3 应用启动成功。</p><h3 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h3><p>本章节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-01</code>。</p><h2 id="SpringBoot-特性总结"><a href="#SpringBoot-特性总结" class="headerlink" title="SpringBoot 特性总结"></a>SpringBoot 特性总结</h2><h3 id="简化整合"><a href="#简化整合" class="headerlink" title="简化整合"></a>简化整合</h3><p>导入相关的场景启动器，即可拥有相关的功能，默认支持的所有场景启动器可参照 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">官方文档</a>。</p><ul><li>官方提供的场景启动器：命名为 <code>spring-boot-starter-*</code></li><li>第三方提供的场景启动器：命名为 <code>*-spring-boot-starter</code></li></ul><h3 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h3><ul><li>配置基本都有默认值</li><li>能写的所有配置信息都可以在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">官方文档</a> 获取到</li><li>集中式管理配置，只需要修改 <code>application.properties</code> 这个文件就可以</li></ul><h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3><p>可以将项目打包为可执行的 Jar 包，并通过 <code>java -jar xxx.jar</code> 命令直接运行项目。</p><h3 id="简化运维"><a href="#简化运维" class="headerlink" title="简化运维"></a>简化运维</h3><p>支持外部化配置（往 Jar 包所在目录下放一个 <code>application.properties</code> 文件）、监控、健康检查。</p><h2 id="SpringBoot-常用注解"><a href="#SpringBoot-常用注解" class="headerlink" title="SpringBoot 常用注解"></a>SpringBoot 常用注解</h2><p>SpringBoot 摒弃 XML 的配置方式，改为全注解驱动开发。</p><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><h4 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h4><p>常用的组件注册注解：</p><ul><li>@Configuration、@SpringBootConfiguration</li><li>@Bean、@Scope</li><li>@Controller、 @Service、@Repository、@Component</li><li>@Import</li><li>@ComponentScan</li></ul><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><div class="admonition note"><p class="admonition-title">组件注册的步骤</p><ul><li>1、使用 <code>@Configuration</code> 注解编写一个配置类</li><li> 2、在配置类中，自定义方法往容器中注册组件，并配合使用 <code>@Bean</code> 注解</li><li> 3、或使用 <code>@Import</code> 注解导入第三方的组件</li></ul></div><ul><li>第一种组件注册方式 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册组件，组件在容器中的名称默认是方法名，且默认是单实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setName(<span class="string">"Peter"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>第二种组件注册方式 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册组件，组件在容器中的名称默认是全类名，且默认是单实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Import(User.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><h4 id="注解介绍-1"><a href="#注解介绍-1" class="headerlink" title="注解介绍"></a>注解介绍</h4><p>如果注解指定的判断条件成立，则触发指定的行为。值得一提的是，条件注解的命名规则一般为 <code>@ConditionalOnXxx</code>。</p><table><thead><tr><th>条件注解</th><th>说明</th></tr></thead><tbody><tr><td> @ConditionalOnClass</td><td> 如果类路径中存在这个类，则触发指定行为</td></tr><tr><td> @ConditionalOnMissingClass</td><td> 如果类路径中不存在这个类，则触发指定行为</td></tr><tr><td> @ConditionalOnBean</td><td> 如果容器中存在这个 Bean（组件），则触发指定行为</td></tr><tr><td> @ConditionalOnMissingBean</td><td> 如果容器中不存在这个 Bean（组件），则触发指定行为</td></tr></tbody></table><div class="admonition note"><p class="admonition-title">条件注解列表</p><p>除了上述介绍的四种条件注解，SpringBoot 还提供了以下的条件注解。</p></div><ul><li>@ConditionalOnRepositoryType (org.springframework.boot.autoconfigure.data)</li><li>@ConditionalOnDefaultWebSecurity (org.springframework.boot.autoconfigure.security)</li><li>@ConditionalOnSingleCandidate (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnWebApplication (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnWarDeployment (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnJndi (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnResource (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnExpression (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnClass (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnEnabledResourceChain (org.springframework.boot.autoconfigure.web)</li><li>@ConditionalOnMissingClass (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnNotWebApplication (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnProperty (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnCloudPlatform (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnBean (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnMissingBean (org.springframework.boot.autoconfigure.condition)</li><li>@ConditionalOnMissingFilterBean (org.springframework.boot.autoconfigure.web.servlet)</li><li>@ConditionalOnInitializedRestarter (org.springframework.boot.devtools.restart)</li><li>@ConditionalOnGraphQlSchema (org.springframework.boot.autoconfigure.graphql)</li><li>@ConditionalOnJava (org.springframework.boot.autoconfigure.condition)</li><li>@Profile (org.springframework.context.annotation)</li></ul><h4 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h4><div class="admonition note"><p class="admonition-title">使用例子</p><ul><li><code>@ConditionalOnBean(value = 组件类型，name = 组件名字)</code>，判断容器中是否有这个类型的组件，并且名称是指定的值</li><li>如果存在 FastsqlException 这个类，往容器中放一个 Cat 组件，名为 cat01，否则就往容器中放一个 Dog 组件，名为 dog01</li><li> 如果系统中有 Dog 这个组件，就往容器中放一个 User 组件，名为 jim，否则就放一个 User，名叫 tom</li></ul></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnClass(name = "com.alibaba.druid.FastsqlException")</span></span><br><span class="line">    <span class="meta">@Bean(name = "cat01")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">cat</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingClass(value = "com.alibaba.druid.FastsqlException")</span></span><br><span class="line">    <span class="meta">@Bean(name = "dog01")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">dog</span><span class="params">()</span> </span>{<span class="meta">@Import(User.class)</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnBean(value = Dog.class)</span></span><br><span class="line">    <span class="meta">@Bean(name = "jim")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">userJim</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(value = Dog.class)</span></span><br><span class="line">    <span class="meta">@Bean(name = "tom")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">userTom</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><p>本章节所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/spring-boot-3/spring-boot-3-study">GitHub</a> 下载对应章节 <code>spring-boot3-02</code>。</p><h4 id="注解介绍-2"><a href="#注解介绍-2" class="headerlink" title="注解介绍"></a>注解介绍</h4><table><thead><tr><th>属性绑定注解</th><th>说明</th></tr></thead><tbody><tr><td> @ConfigurationProperties</td><td> 声明组件的属性与配置文件中的哪些前缀开始项进行绑定</td></tr><tr><td> @EnableConfigurationProperties</td><td> 快速注册注解</td></tr></tbody></table><div class="admonition note"><p class="admonition-title">@EnableConfigurationProperties 注解的使用场景</p><p>SpringBoot 只会扫描主程序类所在的包及其下面的子包。如果导入了第三方包，即使组件上标注了 <code>@Component</code>、<code>@ConfigurationProperties</code> 注解，组件也不会生效。因为这些组件都扫描不进来，此时使用 <code>@EnableConfigurationProperties</code> 注解就可以快速进行属性绑定，并把组件注册进容器。</p></div><h4 id="使用案例-2"><a href="#使用案例-2" class="headerlink" title="使用案例"></a>使用案例</h4><div class="admonition note"><p class="admonition-title">将容器中任意组件（Bean）的属性值和配置文件的配置项的值进行绑定的步骤</p><ul><li>1、往容器中注册组件（<code>@Configuration</code>、<code>@Component</code>、<code>@Bean</code>）</li><li>2、使用 <code>@ConfigurationProperties</code> 声明组件和配置文件的哪些配置项进行绑定</li></ul></div><h5 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h5><ul><li>添加配置内容，在项目的 <code>application.properties</code> 配置文件中添加配置内容 </li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pig.id</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">pig.age</span>=<span class="string">3</span></span><br><span class="line"><span class="meta">pig.name</span>=<span class="string">peter</span></span><br></pre></td></tr></tbody></table></figure><ul><li>声明 Bean 类，通过 <code>@Configuration</code> 注解声明 Bean 类，并使用 <code>@ConfigurationProperties</code> 注解将 Bean 的属性值和配置文件的配置项的值进行绑定 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "pig")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PigProperties{"</span> +</span><br><span class="line">            <span class="string">"id="</span> + id +</span><br><span class="line">            <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", age="</span> + age +</span><br><span class="line">            <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>测试代码 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        PigProperties properties = context.getBean(PigProperties.class);</span><br><span class="line">        System.out.println(properties);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>测试结果 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PigProperties{id=1, name='peter', age=3}</span><br></pre></td></tr></tbody></table></figure><h5 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h5><p>使用 <code>@Bean</code> + <code>@ConfigurationProperties</code> 注解，将 Bean 的属性值和配置文件的配置项的值进行绑定。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = "pig")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PigProperties{"</span> +</span><br><span class="line">            <span class="string">"id="</span> + id +</span><br><span class="line">            <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", age="</span> + age +</span><br><span class="line">            <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PigProperties <span class="title">pigProperties</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PigProperties();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        PigProperties properties = context.getBean(PigProperties.class);</span><br><span class="line">        System.out.println(properties);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="第三种写法"><a href="#第三种写法" class="headerlink" title="第三种写法"></a>第三种写法</h5><p>同样使用 <code>@Bean</code> + <code>@ConfigurationProperties</code> 注解，将 Bean 的属性值和配置文件的配置项的值进行绑定，但 <code>@ConfigurationProperties</code> 注解不再声明在 Bean 类上。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PigProperties{"</span> +</span><br><span class="line">            <span class="string">"id="</span> + id +</span><br><span class="line">            <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", age="</span> + age +</span><br><span class="line">            <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = "pig")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PigProperties <span class="title">pigProperties</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PigProperties();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        PigProperties properties = context.getBean(PigProperties.class);</span><br><span class="line">        System.out.println(properties);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="第四种写法"><a href="#第四种写法" class="headerlink" title="第四种写法"></a>第四种写法</h5><p>使用 <code>@ConfigurationProperties</code> + <code>@EnableConfigurationProperties</code> 注解，将 Bean 的属性值和配置文件的配置项的值进行绑定，不再使用 <code>@Configuration</code>、<code>@Component</code>、<code>@Bean</code> 等注解。值得一提的是，<code>@EnableConfigurationProperties</code> 注解可以快速进行 Bean 属性的绑定，并把 Bean 注册进容器。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = "pig")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PigProperties{"</span> +</span><br><span class="line">            <span class="string">"id="</span> + id +</span><br><span class="line">            <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", age="</span> + age +</span><br><span class="line">            <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(PigProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        PigProperties pigProperties = context.getBean(PigProperties.class);</span><br><span class="line">        System.out.println(pigProperties);</span><br><span class="line"></span><br><span class="line">        SheepProperties sheepProperties = context.getBean(SheepProperties.class);</span><br><span class="line">        System.out.println(sheepProperties);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="SpringBoot-如何学习"><a href="#SpringBoot-如何学习" class="headerlink" title="SpringBoot 如何学习"></a>SpringBoot 如何学习</h2><p>SpringBoot 是框架的框架，底层基于 Spring。在企业开发中，必须能调整每一个场景的底层行为，100% 的项目一定遇到底层行为自定义的需求。</p><div class="admonition note"><p class="admonition-title">类比摄影技术</p><ul><li>傻瓜：自动配置好</li><li>单反：焦距、光圈、快门、感光度....</li><li> 傻瓜 + 单反</li></ul></div><ul><li><p>如何学习</p><ul><li>1、理解自动配置原理<ul><li>导入 <code>starter</code> –&gt; <code>xxxxAutoConfiguration</code> 生效 –&gt; 导入组件 –&gt; <code>xxxProperties</code> –&gt; 配置文件</li></ul></li><li> 2、理解其他框架的底层实现<ul><li>拦截器</li></ul></li><li> 3、可以随时定制化任何组件<ul><li>配置文件</li><li>自定义组件</li></ul></li></ul></li><li><p>开发级别</p><ul><li><code>普通开发</code>：导入 starter，编写 Controller、Service、Mapper、偶尔修改配置文件</li><li><code>高级开发</code>：自定义组件、自定义配置、自定义 starter</li></ul></li><li><p> 开发核心</p><ul><li>这个场景自动配置导入了哪些组件，我们能不能 Autowired 进来使用</li><li>能不能通过修改配置改变组件的一些默认参数</li><li>需不需要自己完全定义这个组件</li><li>场景定制化</li></ul></li></ul><hr><ul><li><p>最佳实践</p><ul><li>选择场景，导入到项目<ul><li>官方：starter</li><li> 第三方：去 Maven 仓库搜</li></ul></li><li>写配置，更改配置文件的关键项<ul><li>如数据库参数（连接地址、账号密码…）</li></ul></li><li>分析这个场景给我们导入了哪些能用的组件<ul><li>自动装配这些组件进行后续使用</li><li>不满意 starter 提供的自动配好的默认组件<ul><li>定制化</li><li>改配置</li><li>自定义组件</li></ul></li></ul></li></ul></li><li><p>实践案例（整合 Redis）</p><ul><li>选场景<ul><li><code>spring-boot-starter-data-redis</code></li><li><code>RedisAutoConfiguration</code> 就是这个场景的自动配置类</li></ul></li><li>写配置<ul><li>分析这个场景的自动配置类开启了哪些属性绑定关系</li><li><code>@EnableConfigurationProperties(RedisProperties.class)</code></li><li>修改 Redis 相关的核心配置</li></ul></li><li>分析组件<ul><li>分析到 <code>RedisAutoConfiguration</code> 往容器中注册了 <code>StringRedisTemplate</code></li><li>往业务代码中自动装配 <code>StringRedisTemplate</code></li></ul></li><li>定制化<ul><li>修改配置文件</li><li>自定义组件，自己往容器中放一个 <code>StringRedisTemplate</code></li></ul></li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">SpringBoot 3 官方英文文档</a></li><li><a href="https://doc.qzxdp.cn/spring/spring-boot.html">SpringBoot 3 最新中文文档</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要记录 SpringBoot 3 的基础教程，包括入门案例、特性介绍、常用注解等内容。</summary>
    
    
    
    
    <category term="微服务" scheme="https://www.techgrow.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 主题兼容 Pjax</title>
    <link href="https://www.techgrow.cn/posts/637e7b8f.html"/>
    <id>https://www.techgrow.cn/posts/637e7b8f.html</id>
    <published>2023-06-01T14:13:21.000Z</published>
    <updated>2023-06-01T14:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="什么是-Pjax"><a href="#什么是-Pjax" class="headerlink" title="什么是 Pjax"></a>什么是 Pjax</h2><p><a href="https://github.com/MoOx/pjax">​Pjax​​​</a> 通过 Ajax 从服务器获取 HTML 内容，然后用加载到的 HTML 替换页面上容器元素的内容。Pjax 使用 <code>pushState</code> 更新浏览器中的当前 URL，即 <code>​​pjax = pushState + ajax​​</code> 。最早的时候，​​Pjax​​​ 是一个基于 ​​jQuery​​ 的插件，后来推出了完全独立的版本，适用更广泛的应用场景。值得一提的是，Pjax 最大的优势在于，可以在网站本身无刷新的情况下，局部刷新页面内容，同时在现代浏览器中支持前进和后退，由于局部加载的数据量极小，加载速度极快，因此可以最大程度地提升用户体验。Pjax 的天生劣势在于，默认配置对 ​​SEO​​ 并不友好，同时非常依赖页面布局的一致性，需要大量改造来优化。</p><h2 id="Hexo-引入-Pjax"><a href="#Hexo-引入-Pjax" class="headerlink" title="Hexo 引入 Pjax"></a>Hexo 引入 Pjax</h2><p>很多较早使用 ​​Pjax​​ 的 Hexo 主题，都使用了基于 jQuery 的版本。因此如果是新引入，可以使用最新独立版本的 <a href="https://github.com/MoOx/pjax">​​Pjax​​</a>。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/pjax@VERSION/pjax.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="为什么引入-Pjax"><a href="#为什么引入-Pjax" class="headerlink" title="为什么引入 Pjax"></a>为什么引入 Pjax</h2><p>由于想在 Hexo 博客中整合 Aplayer 音乐播放器，但是如果不进行改造，跳转页面肯定会引起音乐播放的中断，于是就想到利用 ​​Pjax​​ 的特性，局部加载核心内容，从而不影响音乐播放器，整体效果类似网易云音乐的 PC 端。</p><h2 id="兼容处理"><a href="#兼容处理" class="headerlink" title="兼容处理"></a>兼容处理</h2><p>首先独立版的 Pjax 工作方式其实特别好理解。例如初始化：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    pjax = <span class="keyword">new</span> Pjax({</span><br><span class="line">        <span class="attr">elements</span>: <span class="string">'a[href]:not([href^="#"]):not([href="javascript:void(0)"]):not([pjax-fancybox]):not([notallow="return false;"]):not([notallow="return!1"]):not([target="_blank"]):not([target="view_window"]):not([href$=".xml"])'</span>,</span><br><span class="line">        <span class="attr">selectors</span>: [</span><br><span class="line">            <span class="string">"head title"</span>, <span class="comment">// 标题</span></span><br><span class="line">            <span class="string">"head meta[name=keywords]"</span>, <span class="comment">// 关键词</span></span><br><span class="line">            <span class="string">"head meta[name=description]"</span>, <span class="comment">// 描述</span></span><br><span class="line">            <span class="string">".pjax"</span>,</span><br><span class="line">            <span class="string">"pjax"</span>, <span class="comment">// &lt;pjax&gt;&lt;/pjax&gt; 标签</span></span><br><span class="line">            <span class="string">"script[data-pjax], .pjax-reload script"</span> <span class="comment">// script 标签添加 data-pjax 或 script 标签外层添加 .pjax-reload 的 script 代码段重载</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">cacheBust</span>: &lt;%= theme.plugins.pjax.cacheBust %&gt;,   <span class="comment">// url 地址追加时间戳，用以避免浏览器缓存</span></span><br><span class="line">        timeout: &lt;%= theme.plugins.pjax.timeout %&gt;,</span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>然后是标签部分，主要是用在以下场景：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pjax"</span>&gt;</span>我是将被 Pjax 重载的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-pjax</span>&gt;</span>我是将被 Pjax 重载的内容<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pjax-reload"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我不是将被 Pjax 重载的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span>我是将被 Pjax 重载的内容<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Pjax-触发重载"><a href="#Pjax-触发重载" class="headerlink" title="Pjax 触发重载"></a>Pjax 触发重载</h3><p>这个是最严重的问题，独立版的 ​​Pjax​​ 会自动检测页面布局变化，如果变化过大，则会直接重载整个页面。实际测试就发现 Hexo 非常容易触发重载，尤其是 ​<code>​page​​​</code> 和 <code>​​post​​</code> ，因为这两种页面原本的处理就完全不同。测试了一下，如果完全相同，则不会触发重载。</p><h3 id="自定义-JS-代码不加载"><a href="#自定义-JS-代码不加载" class="headerlink" title="自定义 JS 代码不加载"></a>自定义 JS 代码不加载</h3><p>启用 Pjax 以后，可能会出现一些 JavaScript 代码加载不出来的情况。解决方案很简单，只要在原有的 <code>&lt;script&gt;&lt;/script&gt;</code> 标签中添加 <code>data-pjax</code> 属性就行。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script data-pjax type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">// Some code here</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1834038">网站访问速度优化之 Pjax</a></li><li><a href="https://cloud.tencent.com/developer/article/1834038">Butterfly 的 Pjax 适配方案</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 Hexo 如何兼容 Pjax。</summary>
    
    
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Vue 项目中禁用浏览器缓存配置</title>
    <link href="https://www.techgrow.cn/posts/b044ec3b.html"/>
    <id>https://www.techgrow.cn/posts/b044ec3b.html</id>
    <published>2023-05-19T13:19:25.000Z</published>
    <updated>2023-05-19T13:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端项目发布新版本时，会经常遇到需要清理缓存的问题，以下是 Vue 项目禁用缓存的方法。</p><h2 id="HTML-内容"><a href="#HTML-内容" class="headerlink" title="HTML 内容"></a>HTML 内容</h2><p>在 HTML 页面（如 <code>index.html</code>）的 <code>&lt;head&gt;</code> 标签中添加 <code>meta</code> 配置。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragram"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache, no-store, must-revalidate"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p><img data-src="../../../asset/2023/05/vue-nocache-1.png"></p><h2 id="Vue-Cli-构建"><a href="#Vue-Cli-构建" class="headerlink" title="Vue Cli 构建"></a>Vue Cli 构建</h2><p>针对 Vue3 以下版本，在 <code>vue.config.js</code> 新增配置内容，将时间戳作为打包编译后的文件名称的一部分。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">configureWebpack</span>: {</span><br><span class="line">    <span class="attr">output</span>: { <span class="comment">// 输出重构，打包编译后的文件名称 【模块名称.版本号(可选).时间戳】</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">`[name].<span class="subst">${Timestamp}</span>.js`</span>,</span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">`[name].<span class="subst">${Timestamp}</span>.js`</span></span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">css</span>: {</span><br><span class="line">    <span class="attr">extract</span>: { <span class="comment">// 打包后css文件名称添加时间戳</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">`css/[name].<span class="subst">${Timestamp}</span>.css`</span>,</span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">`css/[name].<span class="subst">${Timestamp}</span>.css`</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><p>禁用掉 Nginx 缓存，让浏览器每次到服务器去请求文件，而不是在浏览器中读取缓存文件。值得一提的是，以下配置只对 HTML 文件有效。</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(?:htm|html)$</span> {</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">"private, no-store, no-cache, must-revalidate, proxy-revalidate"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img data-src="../../../asset/2023/05/vue-nocache-2.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://codecat.blog.csdn.net/article/details/117604817">Nginx 缓存设置</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍在 Vue 项目中，如何禁用浏览器缓存的配置。</summary>
    
    
    
    
    <category term="前端" scheme="https://www.techgrow.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>VuePress v1 图片居中插件不生效</title>
    <link href="https://www.techgrow.cn/posts/d23a0b2b.html"/>
    <id>https://www.techgrow.cn/posts/d23a0b2b.html</id>
    <published>2023-05-18T14:13:22.000Z</published>
    <updated>2023-05-18T14:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>无论是 VuePress 官方主题，还是第三方主题，使用官方内置的插件 <a href="https://v1.vuepress.vuejs.org/zh/plugin/official/plugin-medium-zoom.html">@vuepress/plugin-medium-zoom</a> 都无法实现图片居中并点击放大的效果，配置示例如下。</p><ul><li>默认主题 </li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: {</span><br><span class="line">    <span class="string">'@vuepress/medium-zoom'</span>: {</span><br><span class="line">      <span class="attr">selector</span>: <span class="string">'.theme-default-content img'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><ul><li>第三方主题 </li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: {</span><br><span class="line">    <span class="string">'@vuepress/medium-zoom'</span>: {</span><br><span class="line">      <span class="attr">selector</span>: <span class="string">'.theme-reco-content img'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>安装官方的另一款插件 <a href="https://vuepress-community.netlify.app/en/plugins/medium-zoom">vuepress-plugin-medium-zoom</a> 来替代。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D vuepress-plugin-medium-zoom</span><br></pre></td></tr></tbody></table></figure><ul><li>默认主题 </li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: {</span><br><span class="line">    <span class="string">'vuepress-plugin-medium-zoom'</span>: {</span><br><span class="line">      <span class="attr">selector</span>: <span class="string">'.theme-default-content img'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>第三方主题 </li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">plugins</span>: {</span><br><span class="line">    <span class="string">'vuepress-plugin-medium-zoom'</span>: {</span><br><span class="line">      <span class="attr">selector</span>: <span class="string">'.theme-reco-content img'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍 VuePress v1 如何解决图片居中插件不生效的问题。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="静态博客" scheme="https://www.techgrow.cn/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>推送镜像到 DockerHub</title>
    <link href="https://www.techgrow.cn/posts/2ba32056.html"/>
    <id>https://www.techgrow.cn/posts/2ba32056.html</id>
    <published>2023-05-13T12:12:41.000Z</published>
    <updated>2023-05-13T12:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>在 <a href="https://hub.docker.com/">DockerHub</a> 官网注册账号，该账号是免费注册的。</p><h2 id="创建个人仓库"><a href="#创建个人仓库" class="headerlink" title="创建个人仓库"></a>创建个人仓库</h2><p>登录 DockerHub 的官网，创建新的镜像仓库。</p><span id="more"></span><p><img data-src="../../../asset/2023/05/docker-hub-1.png"></p><h2 id="手动推送镜像"><a href="#手动推送镜像" class="headerlink" title="手动推送镜像"></a>手动推送镜像</h2><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>在本地使用 Dockerfile 的方式构建镜像。通过 <code>docker build</code> 命令构建新的镜像，<code>-t</code> 参数可以指定新镜像的名称，<code>.</code> 表示在当前目录下。</p><ul><li>构建本地镜像 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t clay/dingtalk-webhook .</span><br></pre></td></tr></tbody></table></figure><ul><li>查看本地镜像 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure><ul><li>给镜像打标签，更改标签的语法： <code>docker tag IMAGEID REPOSITORY:TAG</code></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定版本号</span></span><br><span class="line">docker tag 2657f9dbbd15 clay/dingtalk-webhook:1.0.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不指定版本号（默认为 latest）</span></span><br><span class="line">docker tag 2657f9dbbd15 clay/dingtalk-webhook</span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">特别注意</p><p>每次都要 Push 不带版本号的镜像，否则镜像将没有 <code>latest</code> 版本，导致其他人拉取镜像的时候必须要指定 <code>tag</code>，这样会非常不方便。</p></div><h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录 DockerHub</span></span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送指定版本号的镜像</span></span><br><span class="line">docker push clay/dingtalk-webhook:1.0.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送不带版本号的镜像（默认为 latest）</span></span><br><span class="line">docker push clay/dingtalk-webhook</span><br></pre></td></tr></tbody></table></figure><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>镜像推送成功后，可以在 DockerHub 仓库中观察是否可以搜索到，若能搜索到则说明镜像推送成功。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search dingtalk-webhook</span><br></pre></td></tr></tbody></table></figure><h3 id="推送加速"><a href="#推送加速" class="headerlink" title="推送加速"></a>推送加速</h3><p>推送镜像到 DockerHub 时，往往会因网络延迟而超时。这种情况下，可以配置 Docker Push 使用代理，加快镜像推送的速度。</p><div class="admonition note"><p class="admonition-title">提示</p><p>由于不可描述的原因，Docker 的 Pull 或 Push 都很慢。Docker Pull 镜像时，可以更改 <code>/etc/docker/daemon.json</code> 配置文件，加入国内镜像源的方式来加速。但 Docker Push 不支持这种方式，传统的 <code>export http_proxy=xxxx</code> 设置 HTTP 代理变量的方式对 Docker 也无效，因此需要采用下面的方式设置 HTTP 代理来解决。</p></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置目录</span></span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入配置文件(指定代理服务的地址)</span></span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">"HTTP_PROXY=http://127.0.0.1:1080/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新更改</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否生效</span></span><br><span class="line">systemctl show --property=Environment docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新Push镜像</span></span><br><span class="line">docker push clay/dingtalk-webhook</span><br></pre></td></tr></tbody></table></figure><h2 id="自动推送镜像"><a href="#自动推送镜像" class="headerlink" title="自动推送镜像"></a>自动推送镜像</h2><p>这里将介绍如何利用 GitHub Actions 自动构建并推送 Docker 镜像到 DockerHub。</p><h3 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 GitHub 仓库</h3><p>登录 <a href="https://github.com/">GitHub 官网</a>，首先手动创建代码仓库，然后将本地的代码 Push 到代码仓库。</p><h3 id="配置-DockerHub-账号"><a href="#配置-DockerHub-账号" class="headerlink" title="配置 DockerHub 账号"></a>配置 DockerHub 账号</h3><p>由于希望通过 GitHub Actions 自动推送镜像到 DockerHub，因此必须要有 DockerHub 的认证配置，即需要在 GitHub 仓库中添加 DockerHub 登录的用户名和密码（AcessToken）。</p><p><img data-src="../../../asset/2023/05/docker-hub-github-1.png"></p><p><img data-src="../../../asset/2023/05/docker-hub-github-2.png"></p><h3 id="选择-Action-工作流模板"><a href="#选择-Action-工作流模板" class="headerlink" title="选择 Action 工作流模板"></a>选择 Action 工作流模板</h3><p>选择 GitHub Actions 的工作流模板，这里可以任意选择一个，后续可以手动更改模板文件的内容。值得一提的是，模板文件创建成功后，默认会保存在 GitHub 仓库的 <code>.github/workflows/</code> 目录下。</p><p><img data-src="../../../asset/2023/05/docker-hub-github-3.png"></p><h3 id="更改-Workflow-配置文件"><a href="#更改-Workflow-配置文件" class="headerlink" title="更改 Workflow 配置文件"></a>更改 Workflow 配置文件</h3><p>编辑 GitHub 仓库 <code>.github/workflows/</code> 目录下的 Workflow 配置文件，覆盖并添加下述内容。</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li><ol><li><a href="https://docs.github.com/zh/actions">GitHub Actions 的中文文档</a></li></ol></li><li><ol start="2"><li> GitHub 从 Git 引用和 GitHub 事件中提取元数据（tags、labels）的配置方法，详细教程可以参考 <a href="https://github.com/docker/metadata-action">这里</a>。</li></ol></li><li><ol start="3"><li>Action 本质就是由一系列的 <code>step</code> 组成，GitHub Actions 官方所有可用的 Action 可以从 <a href="https://github.com/marketplace?type=actions">这里</a> 查找到。</li></ol></li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This workflow will build a package using Maven and then publish it to GitHub packages when a release is created</span></span><br><span class="line"><span class="comment"># For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">DockerHub</span> <span class="string">Image</span> <span class="string">Publish</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'main'</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'*'</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'main'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">clay/dingtalk-webhook</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">the</span> <span class="string">repo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">11</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">java-version:</span> <span class="string">'11'</span></span><br><span class="line">        <span class="attr">distribution:</span> <span class="string">'temurin'</span></span><br><span class="line">        <span class="attr">cache:</span> <span class="string">maven</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Maven</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">package</span> <span class="string">--file</span> <span class="string">pom.xml</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">the</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">.</span> <span class="string">--file</span> <span class="string">Dockerfile</span> <span class="string">--tag</span> <span class="string">${{</span> <span class="string">env.IMAGE_NAME</span> <span class="string">}}</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">DockerHub</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">github.event_name</span> <span class="type">!=</span> <span class="string">'pull_request'</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">${{</span> <span class="string">secrets.DOCKERHUB_USERNAME</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">${{</span> <span class="string">secrets.DOCKERHUB_TOKEN</span> <span class="string">}}</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Extract</span> <span class="string">Docker</span> <span class="string">metadata</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">meta</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">docker/metadata-action@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">images:</span> <span class="string">${{</span> <span class="string">env.IMAGE_NAME</span> <span class="string">}}</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">docker/build-push-action@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">push:</span> <span class="string">${{</span> <span class="string">github.event_name</span> <span class="type">!=</span> <span class="string">'pull_request'</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">tags:</span> <span class="string">${{</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">labels:</span> <span class="string">${{</span> <span class="string">steps.meta.outputs.labels</span> <span class="string">}}</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>步骤的名称</th><th>步骤的描述</th></tr></thead><tbody><tr><td> Checkout the repo</td><td> 检出仓库代码</td></tr><tr><td> Set up JDK 11</td><td> 安装 JDK 11</td></tr><tr><td>Build with Maven</td><td>Maven 编译代码</td></tr><tr><td> Build the Docker image</td><td> 构建 Docker 镜像</td></tr><tr><td> Login to DockerHub</td><td> 登录 DockerHub</td></tr><tr><td>Extract Docker metadata</td><td> 提取 Docker 的元数据</td></tr><tr><td> Build and push Docker image</td><td> 推送 Docker 镜像</td></tr></tbody></table><h3 id="自动推送镜像到-DockerHub"><a href="#自动推送镜像到-DockerHub" class="headerlink" title="自动推送镜像到 DockerHub"></a>自动推送镜像到 DockerHub</h3><p>Workflow 文件配置完成之后，将所有内容更改推送至 Github 仓库。按照本例中的配置，只要 <code>main</code> 分支有新的 Push 事件或者 <code>tag</code> 有更新，就会触发 Github Actions 自动构建镜像并推送至 DockerHub。上述配置的 <code>Extract Docker metadata</code> 步骤，目的是更改镜像的名称，镜像的 <code>tag</code> 会自动抽取（规则如下表所示）。默认情况下，如果是分支的 Push 事件，那么镜像的 <code>tag</code> 则为分支的名称，如果是 <code>tag</code> 的 Push 事件，则会推送 <code>tag</code> 和 <code>latest</code> 这两个版本的镜像到 DockerHub，具体配置规则参见 <a href="https://github.com/docker/metadata-action">这里</a> 。</p><table><thead><tr><th>Eent</th><th>Ref</th><th>Docker Tags</th></tr></thead><tbody><tr><td><code>pull_request</code></td><td><code>refs/pull/2/merge</code></td><td><code>pr-2</code></td></tr><tr><td><code>push</code></td><td><code>refs/heads/main</code></td><td><code>main</code></td></tr><tr><td><code>push</code></td><td><code>refs/heads/releases/1</code></td><td><code>releases-1</code></td></tr><tr><td><code>push tag</code></td><td><code>refs/tags/1.2.3</code></td><td><code>1.2.3</code>, <code>latest</code></td></tr><tr><td><code>push tag</code></td><td><code>refs/tags/2.0.8-beta.67</code></td><td><code>2.0.8-beta.67</code>, <code>latest</code></td></tr><tr><td><code>workflow_dispatch</code></td><td><code>refs/heads/main</code></td><td><code>main</code></td></tr></tbody></table><ul><li>Git 创建并推送 <code>tag</code> 的命令 </li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">git tag 1.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送标签</span></span><br><span class="line">git push origin 1.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有标签列表</span></span><br><span class="line">git tag --list</span><br></pre></td></tr></tbody></table></figure><ul><li>当 Push 新的 <code>tag</code> 到 GitHub 仓库后，等待 GitHub Actions 的自动构建操作完成，最后登录 DockerHub 的官网，可以看到已经有相应的 Docker 镜像被创建。</li></ul><p><img data-src="../../../asset/2023/05/docker-hub-github-6.png"></p><h3 id="查看自动构建的结果"><a href="#查看自动构建的结果" class="headerlink" title="查看自动构建的结果"></a>查看自动构建的结果</h3><p><img data-src="../../../asset/2023/05/docker-hub-github-4.png"></p><p><img data-src="../../../asset/2023/05/docker-hub-github-5.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/wangzhongshun/article/details/127435524">Git 之 Tag 标签的使用</a></li><li><a href="https://www.cnblogs.com/jhao/p/15753390.html">使用 GitHub Actions 自动构建 DockerHub 镜像</a></li><li><a href="https://blog.csdn.net/agonie201218/article/details/128287804">巧用 Github Actions 自动推送 DockerHub 镜像</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍如何推送镜像到 DockerHub，包括手动推送镜像、推送镜像加速、GitHub Actions 自动推送镜像等。</summary>
    
    
    
    
    <category term="容器化" scheme="https://www.techgrow.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 整合 MyBatis-Plus 与 H2 教程</title>
    <link href="https://www.techgrow.cn/posts/afd4ab85.html"/>
    <id>https://www.techgrow.cn/posts/afd4ab85.html</id>
    <published>2023-05-05T15:12:41.000Z</published>
    <updated>2023-05-05T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/dfc4cb86.html">H2 数据库基础使用教程</a></li><li><a href="/posts/afd4ab85.html">SpringBoot 整合 MyBatis-Plus 与 H2 教程</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://h2database.com/">H2 官方文档</a></li><li><a href="https://github.com/h2database/h2database">H2 GitHub 项目</a></li></ul><span id="more"></span><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><table><thead><tr><th>框架</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td> Spring Boot</td><td>2.7.11</td><td></td></tr><tr><td>MyBatis-Plus</td><td>3.5.3.1</td><td></td></tr><tr><td>H2</td><td>2.1.214</td><td></td></tr></tbody></table><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img data-src="../../../asset/2023/05/h2database-3.png"></p><h3 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h3><p>本文所需的案例代码，可以直接从 <a href="https://github.com/rqh656418510/spring-cloud-share/tree/main/h2/h2-study">GitHub</a> 下载对应章节 <code>h2-springboot-mybatis-plus</code>。</p><h2 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h2><h3 id="Maven-配置文件"><a href="#Maven-配置文件" class="headerlink" title="Maven 配置文件"></a>Maven 配置文件</h3><ul><li><code>pom.xml</code> 的核心配置内容如下 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.7.11<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2.version</span>&gt;</span>2.1.214<span class="tag">&lt;/<span class="name">h2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mybatis-plus.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- h2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${h2.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-boot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring-boot.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="SQL-映射文件"><a href="#SQL-映射文件" class="headerlink" title="SQL 映射文件"></a>SQL 映射文件</h3><ul><li><code>UserMapper.xml</code>，MyBatis 的 SQL 映射文件 </li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.clay.h2.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"clear"</span>&gt;</span></span><br><span class="line">        truncate table `t_user`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="SQL-初始化脚本文件"><a href="#SQL-初始化脚本文件" class="headerlink" title="SQL 初始化脚本文件"></a>SQL 初始化脚本文件</h3><ul><li><code>schema.sql</code>，用于初始化数据库的表结构 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `t_user` (</span><br><span class="line">`id`       <span class="type">int</span> <span class="keyword">primary</span> key auto_increment <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`username` <span class="type">char</span> (<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`pwd`      <span class="type">char</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`create_time` datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`update_time` datetime</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ul><li><code>data.sql</code>，用于初始化数据库的表数据 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id, username, pwd, create_time, update_time) <span class="keyword">values</span> (<span class="number">0</span>, <span class="string">'zhhangsan'</span>, <span class="string">'1222'</span>, {ts <span class="string">'2022-07-27 18:47:52.69'</span>}, {ts <span class="string">'2022-07-27 18:47:52.69'</span>});</span><br></pre></td></tr></tbody></table></figure><h3 id="SpringBoot-配置文件"><a href="#SpringBoot-配置文件" class="headerlink" title="SpringBoot 配置文件"></a>SpringBoot 配置文件</h3><div class="admonition note"><p class="admonition-title">提示</p><ul><li>H2 数据库支持多种连接方式和连接设置，连接数据库的 JDBC URL 对大小写不敏感。</li><li>关于 H2 的更多 JDBC URL 格式和使用示例，请看 <a href="/posts/dfc4cb86.html#%E9%99%84%E5%BD%95">这里</a> 的详细介绍。</li></ul></div><h4 id="配置完整案例"><a href="#配置完整案例" class="headerlink" title="配置完整案例"></a>配置完整案例</h4><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">h2-springboot-mybatis-plus</span></span><br><span class="line">  <span class="comment"># 数据源配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment"># mem 表示 H2 使用内存数据库（应用重启会丢失数据）</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:mem:shopDb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="comment"># 数据库初始化</span></span><br><span class="line">  <span class="attr">sql:</span></span><br><span class="line">    <span class="attr">init:</span></span><br><span class="line">      <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">      <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">h2</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">continue-on-error:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">schema-locations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">classpath:db/schema.sql</span></span><br><span class="line">      <span class="attr">data-locations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">classpath:db/data.sql</span></span><br><span class="line">  <span class="comment"># H2 的 Web 控制台</span></span><br><span class="line">  <span class="attr">h2:</span></span><br><span class="line">    <span class="attr">console:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">settings:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/h2-console</span></span><br><span class="line">        <span class="attr">trace:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">web-allow-others:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mybatis-Plus</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.clay.*.entity</span></span><br><span class="line">  <span class="comment"># MyBatis-Plus 配置</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">AUTO</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># MyBatis 原生配置</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">call-setters-on-nulls:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">jdbc-type-for-null:</span> <span class="string">'null'</span></span><br><span class="line">    <span class="comment"># 打印 SQL 语句</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">H2 内存数据库</p><ul><li>若希望 H2 将数据库表的数据存储在内存中（应用重启后会丢失数据），可以使用以下的数据源配置信息。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:mem:shopDb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">H2 持久化数据</p><ul><li>若希望 H2 持久化数据，可以使用以下的数据源配置信息（必须指定数据库的文件路径）。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:file:/var/database/h2/shopDb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">H2 兼容 MySQL</p><ul><li>若希望 H2 兼容 MySQL，可以使用连接参数 <code>MODE</code> 来实现。</li><li>H2 兼容多种数据库，<code>MODE</code> 参数的值可以为：DB2、Derby、HSQLDB、MSSQLServer、MySQL、Oracle、PostgreSQL。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:file:/var/database/h2/shopDb;MODE=MYSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">H2 使用混合模式</p><ul><li>若希望 H2 使用混合模式，可以使用以下的数据源配置信息（必须指定数据库的文件路径）。</li><li>值得一提的是，在默认情况下，H2 数据库同一时刻只允许一个客户端访问；设置 <code>AUTO_SERVER=TRUE</code> 表示启用混合模式，允许多个客户端同时连接同一个 H2 数据库，该参数不支持在内存中运行的 H2 数据库。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:/var/database/h2/shopDb;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1;AUTO_RECONNECT=TRUE</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><div class="admonition warning"><p class="admonition-title">SpringBoot 不同版本之间的配置差异</p><ul><li>使用 SpringBoot 低版本时（如 <code>2.3.5</code> 版本），若希望应用在启动的时候初始化数据库，则需要使用以下的配置信息。</li></ul></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">continue-on-error:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 初始化模式</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># 初始化表</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:db/schema.sql</span></span><br><span class="line">    <span class="comment"># 初始化数据</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:db/data.sql</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>数据库初始化参数</th><th>说明</th></tr></thead><tbody><tr><td><code>spring.datasource.schema</code></td><td>DDL 表初始化语句，用于在应用程序启动时创建数据库表结构，默认加载 <code>schema.sql</code> 文件</td></tr><tr><td><code>spring.datasource.data</code></td><td>DML 数据插入语句，它用于在应用程序启动时向数据库表中插入一些初始化数据，默认加载 <code>data.sql</code> 文件</td></tr><tr><td><code>spring.datasource.continue-on-error</code></td><td>指定在初始化数据库时，是否遇到错误后继续执行初始化操作。默认情况下，该属性值为 <code>false</code>，即遇到错误时会停止初始化操作。特别注意，如果遇到错误后继续执行，可能会导致数据库结构不完整或数据不一致，因此请谨慎使用此属性。</td></tr><tr><td><code>spring.datasource.initialization-mode</code></td><td>数据库的初始化模式，<code>never</code> 表示从不初始化，<code>embedded</code> 表示仅初始化嵌入式的数据库，<code>always</code> 表示始终初始化数据库，默认值是 <code>embedded</code>。特别注意，如果数据库已经存在相应的表，<code>always</code> 模式下也会重新执行 SQL 初始化脚本，请谨慎使用此模式，否则可能会丢失数据。</td></tr></tbody></table><h4 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h4><table><thead><tr><th>数据源配置参数</th><th>说明</th></tr></thead><tbody><tr><td><code>spring.datasource.url</code></td><td>连接数据库的 URL</td></tr><tr><td><code>spring.datasource.username</code></td><td>数据库的用户名</td></tr><tr><td><code>spring.datasource.password</code></td><td>数据库的密码</td></tr><tr><td><code>spring.datasource.driver-class-name</code></td><td>驱动类的全限定名</td></tr><tr><td><code>spring.datasource.type</code></td><td>数据源类型（连接池）的全限定名</td></tr></tbody></table><hr><table><thead><tr><th>数据库初始化参数</th><th>说明</th></tr></thead><tbody><tr><td><code>spring.sql.init.separator</code></td><td>指定 SQL 语句的断句分隔符，默认为分号 <code>;</code>。如果 SQL 语句中包含存储过程或游标等语句，则需要将该属性更改为适当的分隔符，例如 <code>$$</code></td></tr><tr><td><code>spring.sql.init.encoding</code></td><td>指定 SQL 文件的编码方式，默认为 <code>UTF-8</code></td></tr><tr><td><code>spring.sql.init.platform</code></td><td>指定 SQL 方言，默认为所有方言通用</td></tr><tr><td><code>spring.sql.init.mode</code></td><td>数据库的初始化模式，<code>never</code> 表示从不初始化，<code>embedded</code> 表示仅初始化嵌入式的数据库，<code>always</code> 表示始终初始化数据库，默认值是 <code>embedded</code>。特别注意，如果数据库已经存在相应的表，<code>always</code> 模式下也会重新执行 SQL 初始化脚本，请谨慎使用此模式，否则可能会丢失数据。</td></tr><tr><td><code>spring.sql.init.schema-locations</code></td><td>DDL 表初始化语句，用于在应用程序启动时创建数据库表结构，默认加载 <code>schema.sql</code> 文件</td></tr><tr><td><code>spring.sql.init.data-locations</code></td><td>DML 数据插入语句，它用于在应用程序启动时向数据库表中插入一些初始化数据，默认加载 <code>data.sql</code> 文件</td></tr><tr><td><code>spring.sql.init.continue-on-error</code></td><td>指定在初始化数据库时，是否遇到错误后继续执行初始化操作。默认情况下，该属性值为 <code>false</code>，即遇到错误时会停止初始化操作。特别注意，如果遇到错误后继续执行，可能会导致数据库结构不完整或数据不一致，因此请谨慎使用此属性。</td></tr></tbody></table><hr><table><thead><tr><th>H2 数据库连接参数</th><th>说明</th></tr></thead><tbody><tr><td><code>AUTO_SERVER=TRUE</code></td><td>启用混合模式，允许多个客户端同时连接同一个 H2 数据库，该参数不支持在内存中运行的 H2 数据库</td></tr><tr><td><code>MODE=MYSQL</code></td><td>兼容 MySQL 数据库，该参数值可以为：DB2、Derby、HSQLDB、MSSQLServer、MySQL、Oracle、PostgreSQL</td></tr><tr><td><code>DB_CLOSE_ON_EXIT=FALSE</code></td><td>当虚拟机退出时，并不关闭数据库</td></tr><tr><td><code>DB_CLOSE_DELAY=-1</code></td><td>默认情况下，当最后一个连接关闭后，H2 数据库会自动关闭。为了提高数据库的性能，可以控制延迟一定的秒数后再关闭数据库。当值设置为 10，表示延迟 10 秒 再关闭数据库，当设置为 -1，表示禁用数据库自动关闭的功能。</td></tr><tr><td><code>AUTO_RECONNECT=TRUE</code></td><td>连接丢失后自动重新连接</td></tr><tr><td><code>TRACE_LEVEL_SYSTEM_OUT=1</code></td><td>输出跟踪日志到控制台的日志级别，取值 0 为 OFF，1 为 ERROR（默认值），2 为 INFO，3 为 DEBUG</td></tr><tr><td><code>TRACE_LEVEL_FILE=1</code></td><td>输出跟踪日志到文件的日志级别，取值 0 为 OFF，1 为 ERROR（默认值），2 为 INFO，3 为 DEBUG</td></tr></tbody></table><hr><table><thead><tr><th>H2 的 Web 控制台参数</th><th>说明</th></tr></thead><tbody><tr><td><code>spring.h2.console.enabled</code></td><td>启用 H2 的 Web 控制台</td></tr><tr><td><code>spring.h2.console.settings.path</code></td><td>指定 H2 的 Web 控制台的访问路径</td></tr><tr><td><code>spring.h2.console.settings.trace</code></td><td>开启 H2 的 Web 控制台的日志跟踪，方便开发调试</td></tr><tr><td><code>spring.h2.console.settings.web-allow-others</code></td><td>允许 H2 的 Web 控制台的远程访问</td></tr></tbody></table><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><h3 id="Util-类代码"><a href="#Util-类代码" class="headerlink" title="Util 类代码"></a>Util 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer code = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(T data)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Entity-类代码"><a href="#Entity-类代码" class="headerlink" title="Entity 类代码"></a>Entity 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@TableName("t_user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户主键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableId(value = "id", type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField("username")</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Mapper-类代码"><a href="#Mapper-类代码" class="headerlink" title="Mapper 类代码"></a>Mapper 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Service-类代码"><a href="#Service-类代码" class="headerlink" title="Service 类代码"></a>Service 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Result <span class="title">getByPage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Result <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Result <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">getByPage</span><span class="params">()</span> </span>{</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">"username"</span>, <span class="string">"zhhangsan"</span>);</span><br><span class="line">        <span class="keyword">this</span>.page(page, wrapper);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(page.getRecords());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">this</span>.save(user));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.baseMapper.clear();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Controller-类代码"><a href="#Controller-类代码" class="headerlink" title="Controller 类代码"></a>Controller 类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping("/page")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getByPage</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> userService.getByPage();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping("/add")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> userService.add(user);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping("/clear")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> userService.clear();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="MyBatis-Plus-配置类代码"><a href="#MyBatis-Plus-配置类代码" class="headerlink" title="MyBatis-Plus 配置类代码"></a>MyBatis-Plus 配置类代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan("com.clay.h2.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h2><h3 id="访问-H2-的-Web-控制台"><a href="#访问-H2-的-Web-控制台" class="headerlink" title="访问 H2 的 Web 控制台"></a>访问 H2 的 Web 控制台</h3><p>启动 SpringBoot 项目后，打开浏览器访问 <code>http://127.0.0.1:8080/h2-console</code>，若 H2 的 Web 控制台能正常访问，且连接 H2 数据库后能看到已创建的数据库表（如下图），则说明内嵌的 H2 数据库启动成功。</p><div class="admonition note"><p class="admonition-title">H2 数据库连接</p><ul><li>在浏览器页面连接 H2 数据库时，使用的账号、密码与 <code>JDBC URL</code> 都是在 SpringBoot 的配置文件 <code>application.yml</code> 中指定的。</li></ul></div><p><img data-src="../../../asset/2023/05/h2database-4.png"></p><p><img data-src="../../../asset/2023/05/h2database-1.png"></p><p><img data-src="../../../asset/2023/05/h2database-2.png"></p><h3 id="API-接口调用"><a href="#API-接口调用" class="headerlink" title="API 接口调用"></a>API 接口调用</h3><p>启动 SpringBoot 项目后，使用 PostMan 等工具测试以下接口，若能得到正常的响应结果，则说明 MyBatis-Plus 成功连接并操作 H2 数据库。</p><table><thead><tr><th>API 名称</th><th> API 地址</th><th>请求方法</th></tr></thead><tbody><tr><td>新增用户 </td><td><a href="http://127.0.0.1:8080/user/add/">http://127.0.0.1:8080/user/add/</a></td><td>POST</td></tr><tr><td> 分页查询用户 </td><td><a href="http://127.0.0.1:8080/user/page/">http://127.0.0.1:8080/user/page/</a></td><td>GET</td></tr><tr><td> 删除所有用户 </td><td><a href="http://127.0.0.1:8080/user/clear/">http://127.0.0.1:8080/user/clear/</a></td><td>DELETE</td></tr></tbody></table><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="版本兼容问题"><a href="#版本兼容问题" class="headerlink" title="版本兼容问题"></a>版本兼容问题</h3><p>当访问一个别人创建好的本地 H2 数据库文件，此时很有可能默认的 H2 版本不兼容导致 SpringBoot 应用启动报错（如下）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: Unable to read the page at position 70368748811782 [1.4.200/6]" [50000-200]</span><br></pre></td></tr></tbody></table></figure><p>解决方法是弄清楚对方本地的数据库文件是 H2 哪个版本创建的，然后手动指定 Maven 配置文件中的 H2 版本号即可（如下）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.214<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/kanpiaoxue/article/details/84925846">H2 兼容 MySQL</a></li><li><a href="https://www.cnblogs.com/GarfieldEr007/p/10198030.html">内存数据库－H2 简介与实践</a></li><li><a href="https://blog.csdn.net/qq_35760825/article/details/130421129">SpringBoot 启动时自动创建数据库表</a></li><li><a href="https://blog.csdn.net/u011047968/article/details/125999917">SpringBoot 集成 MybatisPlus、H2 纯内存数据库实战</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 SpringBoot 如何整合 MyBatis-Plus 与 H2 数据库。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>H2 数据库基础使用教程</title>
    <link href="https://www.techgrow.cn/posts/dfc4cb86.html"/>
    <id>https://www.techgrow.cn/posts/dfc4cb86.html</id>
    <published>2023-05-02T15:12:41.000Z</published>
    <updated>2023-05-02T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li><a href="/posts/dfc4cb86.html">H2 数据库基础使用教程</a></li><li><a href="/posts/afd4ab85.html">SpringBoot 整合 MyBatis-Plus 与 H2 教程</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发或学习时，有时候想编写一个数据库操作的小 Demo，但又不想利用 MySQL、Oracle 等数据库进行建库建表操作，因为只想写个小案例，感觉没必要弄个很大很麻烦的数据库。而且这个案例中的数据用完之后就不再需要了，所以也不需要进行数据的持久化操作。那有没有什么方案可以满足这个需求呢？答案是肯定的，H2 是一款内存数据库，适合在学习阶段、开发阶段调试代码使用，并不适用于生产阶段，可以满足学习与调试代码的需求。</p><span id="more"></span><h2 id="H2-基础使用"><a href="#H2-基础使用" class="headerlink" title="H2 基础使用"></a>H2 基础使用</h2><h3 id="H2-的介绍"><a href="#H2-的介绍" class="headerlink" title="H2 的介绍"></a>H2 的介绍</h3><h4 id="H2-简介"><a href="#H2-简介" class="headerlink" title="H2 简介"></a>H2 简介</h4><p><a href="https://h2database.com/">H2</a> 数据库是一个用 Java 开发的内嵌式 (内存级别) 关系型数据库，它本身只是一个类库，也就是只有一个 Jar 文件，可以直接嵌入到 Java 项目中。H2 数据库又被称为内存数据库，因为它支持在内存中创建数据库和表。所以如果使用 H2 数据库的内存模式，那么创建的数据库和表都只是保存在内存中，一旦服务器重启，那么内存中的数据库和表将不存在了。</p><h4 id="H2-优点"><a href="#H2-优点" class="headerlink" title="H2 优点"></a>H2 优点</h4><ul><li>纯 Java 编写，不受平台的限制；</li><li>只有一个 Jar 文件，适合作为嵌入式数据库使用；</li><li>H2 提供了一个十分方便的 Web 控制台用于操作和管理数据库；</li><li>功能完整，支持标准 SQL 和 JDBC，麻雀虽小五脏俱全；</li><li>支持内嵌模式、服务器模式和集群；</li></ul><h4 id="H2-用途"><a href="#H2-用途" class="headerlink" title="H2 用途"></a>H2 用途</h4><p>H2 主要有如下三个用途：</p><ul><li>最常使用的用途就在于可以同应用程序一起打包发布，可以非常方便地存储少量的结构化数据；</li><li>可以用于单元测试，H2 启动速度快，而且可以关闭持久化功能，每一个用例执行完随即还原到初始状态；</li><li>可以作为缓存，即当内存数据库使用，作为 NoSQL 的一个补充。当某些场景下数据模型必须为关系型，可以拿它充当 Memcached 使用，作为后端 MySQL/Oracle 的一个缓冲层，缓存一些不经常变化但需要频繁访问的数据，比如字典表、权限表等。</li></ul><h4 id="H2-与其他数据库对比"><a href="#H2-与其他数据库对比" class="headerlink" title="H2 与其他数据库对比"></a>H2 与其他数据库对比</h4><div class="admonition note"><p class="admonition-title">提示</p><p>完整的数据库对比图表请点击 <a href="../../../asset/2023/05/h2-study-5.jpg">这里</a> 查看。</p></div><p><img data-src="../../../asset/2023/05/h2-study-4.png"></p><h3 id="H2-的-3-种运行模式"><a href="#H2-的-3-种运行模式" class="headerlink" title="H2 的 3 种运行模式"></a>H2 的 3 种运行模式</h3><h4 id="内嵌模式-Embedded-Mode"><a href="#内嵌模式-Embedded-Mode" class="headerlink" title="内嵌模式 (Embedded Mode)"></a>内嵌模式 (Embedded Mode)</h4><p>使用 JDBC 的本地连接。在内嵌模式下，应用程序和 H2 数据库处在同一个 JVM 中，应用程序通过 JDBC 连接数据库。内嵌模式可以实现持久化，但同一时刻只能有一个客户端连接数据库。内嵌模式是最快也是最容易的连接方式，性能也比较好。缺点是数据库无论什么时候，都只能在一个虚拟机（和类加载器）中打开。内嵌模式与所有模式一样，支持持久化和内存数据库。对并发打开数据库的数量或者打开连接的数量没有限制。</p><p><img data-src="../../../asset/2023/05/h2-study-1.png"></p><h4 id="服务器模式-Server-Mode"><a href="#服务器模式-Server-Mode" class="headerlink" title="服务器模式 (Server Mode)"></a>服务器模式 (Server Mode)</h4><p>使用 JDBC 或 ODBC 在 TCP/IP 基础上的远程连接。使用服务器模式和内嵌模式一样，只不过它可以跑在另一个进程里。服务器模式比内嵌模式慢，因为所有数据都通过 TCP/IP 协议传输。与所有模式一样，支持持久化和内存数据库。对每个数据库服务器并发打开的数据库数量或者打开连接的数量没有限制。</p><p><img data-src="../../../asset/2023/05/h2-study-2.png"></p><h4 id="混合模式-Mixed-Mode"><a href="#混合模式-Mixed-Mode" class="headerlink" title="混合模式 (Mixed Mode)"></a>混合模式 (Mixed Mode)</h4><p>混合模式是内嵌模式和服务器模式的组合。混合模式集合了内嵌模式和服务模式的优点，使得数据库的性能和内嵌模式一样高，同时又支持多个应用同时连接同一个数据库。第一个应用通过内嵌模式与数据库建立连接，同时也作为一个独立的服务器启动，而其他的应用 (运行在不同的进程或是虚拟机上) 可以同时访问同样的数据库。第一个应用程序的本地连接与内嵌模式的连接性能一样快，而其它应用的连接性能理论上会差一点。H2 服务器可以从应用程序内（使用 H2 服务器的 API）启动或停止，或自动（自动混合模式）。当使用自动混合模式时，所有想要连接到数据库的客户端（无论是本地连接还是远程连接）都可以使用完全相同的数据库 URL 来实现连接。<strong>值得注意的是，H2 在混合模式下不支持内存数据库，即数据库必须持久化。</strong></p><p><img data-src="../../../asset/2023/05/h2-study-3.png"></p><h3 id="H2-的-3-种连接方式"><a href="#H2-的-3-种连接方式" class="headerlink" title="H2 的 3 种连接方式"></a>H2 的 3 种连接方式</h3><ul><li>第一种连接方式，以内嵌模式 (内存) 连接 H2 数据库。H2 支持在内存中创建数据库和表。特别注意，如果使用 H2 数据库的内存模式，那么创建的数据库和表都只是保存在内存中，一旦服务器重启，那么内存中的数据库和表就不存在了。</li></ul><table><thead><tr><th>连接语法</th><th>连接示例</th><th>说明</th></tr></thead><tbody><tr><td><code>jdbc:h2:mem:&lt;databaseName&gt;</code></td><td><code>jdbc:h2:mem:testDb </code></td><td>数据库的数据只存在内存中</td></tr></tbody></table><ul><li>第二种连接方式，以内嵌模式 (本地文件) 连接 H2 数据库。这种连接方式在默认情况下，同一时刻只允许有一个客户端连接到 H2 数据库。当有客户端连接到 H2 数据库之后，此时数据库文件就会被锁定，那么其他客户端就无法再建立连接。</li></ul><table><thead><tr><th>连接语法</th><th>连接示例</th><th>说明</th></tr></thead><tbody><tr><td><code>jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;</code></td><td><code>jdbc:h2:~/testDb</code>，连接位于当前用户目录下的 <code>testDb</code> 数据库 <br> <code>jdbc:h2:file:./testDb</code>，连接位于当前程序所在目录下的 <code>testDb</code> 数据库 <br> <code>jdbc:h2:file:/h2/data/testDb</code>，适用于 Linux 系统 <br> <code>jdbc:h2:file:E:/h2/data/testDb</code>，适用于 Windows 系统</td><td>会将数据库的数据持久化到文件中</td></tr><tr><td><code>jdbc:h2:[file:][&lt;path&gt;]&lt;databaseName&gt;;AUTO_SERVER=TRUE</code></td><td><code>jdbc:h2:~/testDb;AUTO_SERVER=TRUE</code> <br> <code>jdbc:h2:file:./testDb;AUTO_SERVER=TRUE</code> <br> <code>jdbc:h2:file:/h2/data/testDb;AUTO_SERVER=TRUE</code> <br> <code>jdbc:h2:file:E:/h2/data/testDb;AUTO_SERVER=TRUE</code></td><td>启用混合模式，允许多个客户端同时连接同一个 H2 数据库，该参数不支持在内存中运行的 H2 数据库</td></tr></tbody></table><ul><li>第三种连接方式，使用支持 TCP/IP 的服务器模式 (远程连接) 连接 H2 数据库。这种连接方式和其他数据库的连接方式类似，是基于 Service 的形式进行连接的，因此允许多个客户端同时连接到 H2 数据库。</li></ul><table><thead><tr><th>连接语法</th><th>连接示例</th><th>说明</th></tr></thead><tbody><tr><td><code>jdbc:h2:tcp://&lt;server&gt;[:&lt;port&gt;]/[&lt;path&gt;]&lt;databaseName&gt;</code></td><td><code>jdbc:h2:tcp://localhost/~/testDb</code></td><td></td></tr><tr><td><code>jdbc:h2:ssl://&lt;server&gt;[:&lt;port&gt;]/[&lt;path&gt;]&lt;databaseName&gt;</code></td><td><code>jdbc:h2:ssl://localhost/~/testDb</code></td><td>支持 SSL 连接</td></tr></tbody></table><h2 id="安装-H2-的-Web-控制台"><a href="#安装-H2-的-Web-控制台" class="headerlink" title="安装 H2 的 Web 控制台"></a>安装 H2 的 Web 控制台</h2><p>H2 的 Web 控制台是一个基于浏览器的 GUI 数据库管理工具，可以很方便地管理 H2 数据库。它的作用就相当于 PhpMyAdmin，一般情况下可以在开发环境启动 H2 的 Web 控制台。</p><h3 id="H2-数据库下载地址"><a href="#H2-数据库下载地址" class="headerlink" title="H2 数据库下载地址"></a>H2 数据库下载地址</h3><p>可以在官网上选择一个版本进行下载，可以下载安装器或者直接下载软件包。这里建议选择 <code>All Platforms</code> 版本，因为解压文件后，既可用于 Windows 平台，也可用于 Linux 平台 (如下图所示)。</p><div class="admonition note"><p class="admonition-title">下载地址</p><ul><li><a href="http://www.h2database.com/html/main.html">http://www.h2database.com/html/main.html</a></li><li><a href="http://www.h2database.com/html/download.html">http://www.h2database.com/html/download.html</a></li><li><a href="http://www.h2database.com/html/download-archive.html">http://www.h2database.com/html/download-archive.html</a></li></ul></div><p><img data-src="../../../asset/2023/05/h2-study-6.png"></p><h3 id="H2-软件包目录结构"><a href="#H2-软件包目录结构" class="headerlink" title="H2 软件包目录结构"></a>H2 软件包目录结构</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">h2</span><br><span class="line">　|---bin</span><br><span class="line">　| |---h2-2.1.214.jar　 //H2数据库的Jar包（驱动也在里面）</span><br><span class="line">　| |---h2.bat　　 //Windows控制台启动脚本</span><br><span class="line">　| |---h2.sh　　 //Linux控制台启动脚本</span><br><span class="line">　| |---h2w.bat　　//Windows控制台启动脚本（不带黑屏窗口）</span><br><span class="line">　|---docs　　 //H2数据库的帮助文档（内有H2数据库的使用手册）</span><br><span class="line">　|---service　　 //通过Wrapper包装成服务</span><br><span class="line">　|---src　　 //H2数据库的源代码</span><br><span class="line">　|---build.bat　 //Windows构建脚本</span><br><span class="line">　|---build.sh　　//Linux构建脚本</span><br></pre></td></tr></tbody></table></figure><h3 id="启动-H2-的-Web-控制台"><a href="#启动-H2-的-Web-控制台" class="headerlink" title="启动 H2 的 Web 控制台"></a>启动 H2 的 Web 控制台</h3><h4 id="Linux-平台启动"><a href="#Linux-平台启动" class="headerlink" title="Linux 平台启动"></a>Linux 平台启动</h4><p>在 Linux 环境下，首先用 <code>unzip</code> 命令解压下载到的文件，然后在 <code>bin</code> 目录下，执行 <code>h2.sh</code> 来启动 H2 的 Web 控制台。值得一提的是，一般不建议这样直接启动，因为最好是带一些命令参数来启动 Web 控制台。</p><table><thead><tr><th>命令参数</th><th>说明</th></tr></thead><tbody><tr><td> org.h2.tools.Shell</td><td> 以终端方式启动 H2 的 Web 控制台，需要根据提示输入 DRIVER CLASS、URL、USER NAME、PASSWORD 等连接信息。以终端方式启动后，可以执行数据库的备份、还原、SQL 导出，SQL 导入等操作，详细教程请看 <a href="https://segmentfault.com/a/1190000007001959">这里</a></td></tr><tr><td> org.h2.tools.Console</td><td> 启动 H2 的 Web 控制台</td></tr><tr><td> org.h2.tools.Server</td><td> 以服务器模式启动 H2 的 Web 控制台</td></tr><tr><td><code>-tcpAllowOthers</code></td><td>允许远程机器通过 TCP 方式访问数据库</td></tr><tr><td><code>-webAllowOthers</code></td><td>允许远程机器访问 H2 的 Web 控制台</td></tr><tr><td><code>-webPort 8082</code></td><td>指定 Web 控制台的访问端口，默认是 <code>8082</code></td></tr><tr><td><code>-webSSL</code></td><td>启用 SSL 加密连接</td></tr></tbody></table><p>在 <code>bin</code> 目录下创建新的启动脚本（如 <code>h2_server.sh</code>），内容如下（三种启动方式可以任意选择一种）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">dir=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line">java -cp <span class="string">"<span class="variable">$dir</span>/h2-2.1.214.jar:<span class="variable">$H2DRIVERS</span>:<span class="variable">$CLASSPATH</span>"</span> org.h2.tools.Shell <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">dir=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line">java -cp <span class="string">"<span class="variable">$dir</span>/h2-2.1.214.jar:<span class="variable">$H2DRIVERS</span>:<span class="variable">$CLASSPATH</span>"</span> org.h2.tools.Console -webAllowOthers -webPort 8082 <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">dir=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line">java -cp <span class="string">"<span class="variable">$dir</span>/h2-2.1.214.jar:<span class="variable">$H2DRIVERS</span>:<span class="variable">$CLASSPATH</span>"</span> org.h2.tools.Server -tcpAllowOthers -webAllowOthers -webPort 8082 <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></tbody></table></figure><p>启动数据库服务</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新的启动脚本授权</span></span><br><span class="line">$ chmod +x h2_server.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前台运行新的启动脚本</span></span><br><span class="line">$ bash h2_server.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者后台运行新的启动脚本</span></span><br><span class="line">$ nohup h2_server.sh &amp;</span><br></pre></td></tr></tbody></table></figure><p>正常启动 Web 控制台（服务器模式）后，终端输出的日志信息如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Web Console server running at http://192.168.1.106:8082 (others can connect)</span><br><span class="line">TCP server running at tcp://192.168.1.106:9092 (others can connect)</span><br><span class="line">PG server running at pg://192.168.1.106:5435 (only local connections)</span><br></pre></td></tr></tbody></table></figure><h4 id="Windows-平台启动"><a href="#Windows-平台启动" class="headerlink" title="Windows 平台启动"></a>Windows 平台启动</h4><p>进入到 H2 解压后的 <code>bin</code> 目录下，点击 <code>h2.bat</code> 或者 <code>h2w.bat</code>，直接运行软件。值得一提的是，点击 <code>h2w.bat</code> 后，此方式会在后台静默运行 H2 的 Web 控制台。</p><h3 id="访问-H2-的-Web-控制台"><a href="#访问-H2-的-Web-控制台" class="headerlink" title="访问 H2 的 Web 控制台"></a>访问 H2 的 Web 控制台</h3><p>使用浏览器访问 H2 的 Web 控制台，URL 是 <code>http://127.0.0.1:8082</code>，也可以使用本机的 IP 地址（例如 <code>http://192.168.1.106:8082</code>）</p><p><img data-src="../../../asset/2023/05/h2-study-7.png"></p><h2 id="使用-H2-的数据库"><a href="#使用-H2-的数据库" class="headerlink" title="使用 H2 的数据库"></a>使用 H2 的数据库</h2><h3 id="创建-H2-数据库"><a href="#创建-H2-数据库" class="headerlink" title="创建 H2 数据库"></a>创建 H2 数据库</h3><p>H2 成功启动后，在系统桌面底部的状态栏右下角会有一个黄色小图标（如下图红色箭头所指的位置）</p><p><img data-src="../../../asset/2023/05/h2-study-8.png"></p><p>可以在桌面状态栏右下角的黄色小图标处，右键点击 H2 控制台的图标，选择 <code>Create a new database...</code>，即可以创建一个新的数据库</p><p><img data-src="../../../asset/2023/05/h2-study-9.png"></p><p>出现如下窗口后，填写数据库文件的存放路径（例如 <code>~/demo</code>，支持使用相对路径或者绝对路径）、访问数据库的用户名和密码，点击 <code>Create</code> 按钮，则会在用户目录下创建对应的数据库文件（例如 <code>demo.mv.db</code>）</p><div class="admonition note"><p class="admonition-title">提示</p><ul><li><ol><li>H2 数据库创建后，可能还会看到一个 <code>demo.trace.db</code> 文件，它是 H2 数据库的错误日志文件。</li></ol></li><li><ol start="2"><li>H2 数据库的文件名称 <code>demo.mv.db</code>，之所以里面有 <code>mv</code>，这是因为高版本的 H2 存储引擎默认为 <code>mvStore</code>。</li></ol></li></ul></div><p><img data-src="../../../asset/2023/05/h2-study-10.png"></p><h3 id="连接-H2-数据库"><a href="#连接-H2-数据库" class="headerlink" title="连接 H2 数据库"></a>连接 H2 数据库</h3><div class="admonition note"><p class="admonition-title">提示</p><ul><li>H2 数据库连接成功后，会自动在用户目录下创建 <code>.h2.server.properties</code> 配置文件，用于保存数据库的历史连接信息。</li></ul></div><p>用鼠标左键点击在桌面状态栏右下角的黄色小图标，此时会在浏览器打开 H2 的 Web 控制台界面（默认地址是 <code>http://127.0.0.1:8082</code>），填写 <code>JDBC URL</code>、用户名和密码后，点击 <code>Connect</code> 按钮就可以连接 H2 数据库</p><p><img data-src="../../../asset/2023/05/h2-study-11.png"></p><p>H2 数据库成功连接后，就会自动进入数据库的管理界面</p><p><img data-src="../../../asset/2023/05/h2-study-12.png"></p><p>输入 <code>show databases;</code> 和 <code>show tables;</code> SQL 语句，可以显示 H2 默认的数据库和表名</p><p><img data-src="../../../asset/2023/05/h2-study-13.png"></p><h2 id="使用-H2-的-Web-控制台"><a href="#使用-H2-的-Web-控制台" class="headerlink" title="使用 H2 的 Web 控制台"></a>使用 H2 的 Web 控制台</h2><h3 id="设置超级管理员密码"><a href="#设置超级管理员密码" class="headerlink" title="设置超级管理员密码"></a>设置超级管理员密码</h3><p>H2 数据库连接成功后，会自动在用户目录下创建 <code>.h2.server.properties</code> 配置文件（如下），用于保存数据库的历史连接信息。因此，可以手动编辑 <code>.h2.server.properties</code> 配置文件，然后添加 <code>webAdminPassword</code> 参数来指定 H2 的超级管理员密码。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>webAllowOthers</code></td><td>允许远程机器访问 H2 的 Web 控制台</td></tr><tr><td><code>webPort</code></td><td>指定 Web 控制台的访问端口，默认是 <code>8082</code></td></tr><tr><td><code>webSSL</code></td><td>启用 SSL 加密连接</td></tr><tr><td><code>webAdminPassword</code></td><td>指定超级管理员密码 </td></tr></tbody></table><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">webSSL=false</span><br><span class="line">webAdminPassword=admin</span><br><span class="line">webAllowOthers=true</span><br><span class="line">webPort=8082</span><br><span class="line">10=Generic DB2|com.ibm.db2.jcc.DB2Driver|jdbc\:db2\://localhost/test|</span><br><span class="line">11=Generic Oracle|oracle.jdbc.driver.OracleDriver|jdbc\:oracle\:thin\:@localhost\:1521\:XE|sa</span><br><span class="line">12=Generic MS SQL Server 2000|com.microsoft.jdbc.sqlserver.SQLServerDriver|jdbc\:microsoft\:sqlserver\://localhost\:1433;DatabaseName\=sqlexpress|sa</span><br><span class="line">13=Generic MS SQL Server 2005|com.microsoft.sqlserver.jdbc.SQLServerDriver|jdbc\:sqlserver\://localhost;DatabaseName\=test|sa</span><br><span class="line">14=Generic PostgreSQL|org.postgresql.Driver|jdbc\:postgresql\:test|</span><br><span class="line">15=Generic MySQL|com.mysql.cj.jdbc.Driver|jdbc\:mysql\://localhost\:3306/test|</span><br><span class="line">16=Generic MariaDB|org.mariadb.jdbc.Driver|jdbc\:mariadb\://localhost\:3306/test|</span><br><span class="line">17=Generic HSQLDB|org.hsqldb.jdbcDriver|jdbc\:hsqldb\:test;hsqldb.default_table_type\=cached|sa</span><br><span class="line">18=Generic Derby (Server)|org.apache.derby.client.ClientAutoloadedDriver|jdbc\:derby\://localhost\:1527/test;create\=true|sa</span><br><span class="line">19=Generic Derby (Embedded)|org.apache.derby.iapi.jdbc.AutoloadedDriver|jdbc\:derby\:test;create\=true|sa</span><br><span class="line">0=Generic JNDI Data Source|javax.naming.InitialContext|java\:comp/env/jdbc/Test|sa</span><br><span class="line">1=Generic Teradata|com.teradata.jdbc.TeraDriver|jdbc\:teradata\://whomooz/|</span><br><span class="line">2=Generic Snowflake|com.snowflake.client.jdbc.SnowflakeDriver|jdbc\:snowflake\://accountName.snowflakecomputing.com|</span><br><span class="line">3=Generic Redshift|com.amazon.redshift.jdbc42.Driver|jdbc\:redshift\://endpoint\:5439/database|</span><br><span class="line">4=Generic Impala|org.cloudera.impala.jdbc41.Driver|jdbc\:impala\://clustername\:21050/default|</span><br><span class="line">5=Generic Hive 2|org.apache.hive.jdbc.HiveDriver|jdbc\:hive2\://clustername\:10000/default|</span><br><span class="line">6=Generic Hive|org.apache.hadoop.hive.jdbc.HiveDriver|jdbc\:hive\://clustername\:10000/default|</span><br><span class="line">7=Generic Azure SQL|com.microsoft.sqlserver.jdbc.SQLServerDriver|jdbc\:sqlserver\://name.database.windows.net\:1433|</span><br><span class="line">8=Generic Firebird Server|org.firebirdsql.jdbc.FBDriver|jdbc\:firebirdsql\:localhost\:c\:/temp/firebird/test|sysdba</span><br><span class="line">9=Generic SQLite|org.sqlite.JDBC|jdbc\:sqlite\:test|sa</span><br><span class="line">20=Generic H2 (Server)|org.h2.Driver|jdbc\:h2\:tcp\://localhost/~/test|sa</span><br><span class="line">21=Generic H2 (Embedded)|org.h2.Driver|jdbc\:h2\:~/demo|root</span><br></pre></td></tr></tbody></table></figure><div class="admonition note"><p class="admonition-title">提示</p><p>若没有找到 <code>.h2.server.properties</code> 文件，以 Web-Server 方式首次启动 H2 后，浏览器打开 Web 控制台，点击 <code>Save</code> 按钮后就会自动创建对应的配置文件。</p></div><h3 id="使用-H2-的配置界面"><a href="#使用-H2-的配置界面" class="headerlink" title="使用 H2 的配置界面"></a>使用 H2 的配置界面</h3><p>使用浏览器访问 H2 的 Web 控制台，然后点击 <code>Preferences</code>，填写超级管理员密码后，就可以进入 H2 的配置界面</p><p><img data-src="../../../asset/2023/05/h2-study-14.png"></p><p>进入到 H2 的配置界面后，可以设置远程访问、端口号等信息</p><p><img data-src="../../../asset/2023/05/h2-study-15.png"></p><h3 id="使用-H2-的工具界面"><a href="#使用-H2-的工具界面" class="headerlink" title="使用 H2 的工具界面"></a>使用 H2 的工具界面</h3><p>使用浏览器访问 H2 的 Web 控制台，然后点击 <code>Tools</code>，填写超级管理员密码后，就可以进入 H2 的工具界面</p><p><img data-src="../../../asset/2023/05/h2-study-17.png"></p><p>进入 H2 的工具界面后，可以对 H2 数据库进行备份、还原、恢复、集群、运行脚本、删除文件等操作</p><p><img data-src="../../../asset/2023/05/h2-study-16.png"></p><h2 id="H2-进阶使用"><a href="#H2-进阶使用" class="headerlink" title="H2 进阶使用"></a>H2 进阶使用</h2><h3 id="第三方软件连接-H2-数据库"><a href="#第三方软件连接-H2-数据库" class="headerlink" title="第三方软件连接 H2 数据库"></a>第三方软件连接 H2 数据库</h3><p>H2 除了可以使用自身的 Web 控制台管理数据库之外，还可以使用 Navicat、DBeaver 这样的数据库软件来管理。这里以开源的 DBeaver 数据库管理软件举例，介绍如何使用第三方软件连接 H2 数据库。</p><ul><li>在 DBeaver 的主界面新建数据库连接，数据库类型选择 <code>H2 Embedded V.2</code>，即使用内嵌模式连接 H2 数据库</li></ul><div class="admonition warning"><p class="admonition-title">特别注意</p><ul><li>内嵌模式只允许有一个客户端连接 H2 数据库，可以简单理解为只允许有一个应用访问数据库文件。</li><li>如果 H2 数据库已经以服务器模式启动了，那么 DBeaver 的数据库类型可以选择 <code>H2 Server</code>，服务器模式支持多个客户端同时连接 H2 数据库。</li></ul></div><p><img data-src="../../../asset/2023/05/h2-study-19.png"></p><ul><li>填写 <code>JDBC URL</code>、用户名和密码，然后点击 <code>测试连接</code> 按钮或者 <code>完成</code> 按钮即可</li></ul><p><img data-src="../../../asset/2023/05/h2-study-20.png"></p><ul><li>成功连接 H2 数据库后，就可以看到之前创建的数据库表</li></ul><p><img data-src="../../../asset/2023/05/h2-study-21.png"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>以下表格是 H2 数据库在不同模式下的 URL 连接字串，参考自：<a href="https://www.cnblogs.com/cnjavahome/p/8995650.html">H2 数据库使用简介</a></p><p><img data-src="../../../asset/2023/05/h2-study-18.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000007001959">H2 使用指南</a></li><li><a href="https://www.cnblogs.com/cnjavahome/p/8995650.html">H2 数据库使用简介</a></li><li><a href="https://zhuanlan.zhihu.com/p/509877891">H2 内存数据库使用教程详解</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍 H2 数据库的基础使用教程，包括安装使用 Web 控制台、连接数据库等。</summary>
    
    
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="数据库" scheme="https://www.techgrow.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring 注解驱动开发随笔</title>
    <link href="https://www.techgrow.cn/posts/542a9813.html"/>
    <id>https://www.techgrow.cn/posts/542a9813.html</id>
    <published>2023-04-22T15:12:41.000Z</published>
    <updated>2023-04-22T15:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->]]></content>
    
    
    <summary type="html">本文主要记录 Spring 注解驱动开发的笔记。</summary>
    
    
    
    <category term="hide" scheme="https://www.techgrow.cn/categories/hide/"/>
    
    
    <category term="Java" scheme="https://www.techgrow.cn/tags/Java/"/>
    
    <category term="开发随笔" scheme="https://www.techgrow.cn/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
